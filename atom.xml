<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>个人博客</title>
  
  <subtitle>记录工作中的点点滴滴</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://yongnights.github.io/"/>
  <updated>2020-01-08T08:06:38.802Z</updated>
  <id>https://yongnights.github.io/</id>
  
  <author>
    <name>永夜初晗凝碧天</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用shell脚本根据输入es版本的不同自动生成白金版破解jar包文件</title>
    <link href="https://yongnights.github.io/2020/01/08/%E4%BD%BF%E7%94%A8shell%E8%84%9A%E6%9C%AC%E6%A0%B9%E6%8D%AE%E8%BE%93%E5%85%A5es%E7%89%88%E6%9C%AC%E7%9A%84%E4%B8%8D%E5%90%8C%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E7%99%BD%E9%87%91%E7%89%88%E7%A0%B4%E8%A7%A3jar%E5%8C%85%E6%96%87%E4%BB%B6/"/>
    <id>https://yongnights.github.io/2020/01/08/使用shell脚本根据输入es版本的不同自动生成白金版破解jar包文件/</id>
    <published>2020-01-08T07:06:43.614Z</published>
    <updated>2020-01-08T08:06:38.802Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Jan 08 2020 16:06:45 GMT+0800 (GMT+08:00) --><p>说明：使用的是7.3.0版本进行演示的</p><ul><li>注意1：采用这种方式的话不用再上传license文件，切记切记</li><li>注意2：这种方式适用于如下两种形式<br>– 1. 首次配置es,未开启security,也未设置账号密码<br>– 2. 已配置es,开启了security,也设置了账号密码</li></ul><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">echo &quot;创建工作目录&quot;</span><br><span class="line">/usr/bin/mkdir -p /opt/work</span><br><span class="line"></span><br><span class="line">BASE_HOME=/opt/work</span><br><span class="line"></span><br><span class="line">echo &quot;切换到/opt/work目录下&quot;</span><br><span class="line">/usr/bin/cd $&#123;BASE_HOME&#125;</span><br><span class="line"></span><br><span class="line">echo &quot;根据输入版本不同创建相应的目录,例如：7.3.0&quot;</span><br><span class="line">read type</span><br><span class="line">echo &quot;您输入的版本是$&#123;type&#125;&quot;</span><br><span class="line"></span><br><span class="line">TYPE_HOME=/opt/work/$&#123;type&#125;</span><br><span class="line"></span><br><span class="line">TAG=&quot;v$&#123;type&#125;&quot;</span><br><span class="line"></span><br><span class="line">/usr/bin/mkdir -p $&#123;TYPE_HOME&#125;/&#123;build/src,install,src&#125;</span><br><span class="line"></span><br><span class="line">echo &quot;安装wget,git&quot;</span><br><span class="line">yum -y install wget git</span><br><span class="line"></span><br><span class="line">echo &quot;下载es $&#123;type&#125;安装包&quot;</span><br><span class="line">wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-$&#123;type&#125;-linux-x86_64.tar.gz -P $&#123;TYPE_HOME&#125;/install</span><br><span class="line"></span><br><span class="line">echo &quot;解压安装包到指定目录&quot;</span><br><span class="line">tar -zxv -f $&#123;TYPE_HOME&#125;/install/elasticsearch-$&#123;type&#125;-linux-x86_64.tar.gz -C $&#123;TYPE_HOME&#125;/install</span><br><span class="line"></span><br><span class="line">echo &quot;下载指定版本的es源码,使用国内码云地址&quot;</span><br><span class="line">echo &quot;官方github地址：https://github.com/elastic/elasticsearch&quot;</span><br><span class="line">echo &quot;国内码云地址：https://gitee.com/mirrors/elasticsearch&quot;</span><br><span class="line"></span><br><span class="line">cd $&#123;TYPE_HOME&#125;/src</span><br><span class="line">git clone -b $&#123;TAG&#125; https://gitee.com/mirrors/elasticsearch </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cd $&#123;TYPE_HOME&#125;/build</span><br><span class="line"></span><br><span class="line"># lib module</span><br><span class="line">ln -s ../install/elasticsearch-$&#123;type&#125;/lib .</span><br><span class="line">ln -s ../install/elasticsearch-$&#123;type&#125;/modules .</span><br><span class="line"></span><br><span class="line"># License.java</span><br><span class="line">find ../src -name &quot;License.java&quot; | xargs -r -I &#123;&#125; cp &#123;&#125; .</span><br><span class="line">sed -i &apos;s#this.type = type;#this.type = &quot;platinum&quot;;#g&apos; License.java</span><br><span class="line">sed -i &apos;s#validate();#// validate();#g&apos; License.java</span><br><span class="line"></span><br><span class="line"># 编译</span><br><span class="line">javac -cp &quot;`ls lib/elasticsearch-$&#123;type&#125;.jar`:`ls lib/elasticsearch-x-content-$&#123;type&#125;.jar`:`ls lib/lucene-core-*.jar`:`ls modules/x-pack-core/x-pack-core-$&#123;type&#125;.jar`&quot; License.java</span><br><span class="line"></span><br><span class="line"># x-pack-core-7.5.0.jar</span><br><span class="line">cd $&#123;TYPE_HOME&#125;/build/src</span><br><span class="line">find ../../install -name &quot;x-pack-core-$&#123;type&#125;.jar&quot; | xargs -r -I &#123;&#125; cp &#123;&#125; .</span><br><span class="line">jar xvf x-pack-core-$&#123;type&#125;.jar</span><br><span class="line">rm -f x-pack-core-$&#123;type&#125;.jar</span><br><span class="line">\cp -f ../License*.class org/elasticsearch/license/</span><br><span class="line">jar cvf x-pack-core-$&#123;type&#125;.jar .</span><br><span class="line"></span><br><span class="line">echo &quot;切换到存放破解jar包文件的路径下&quot;</span><br><span class="line">cd $&#123;TYPE_HOME&#125;/build/src</span><br><span class="line"></span><br><span class="line">echo &quot;如下步骤需要手动操作&quot;</span><br><span class="line"></span><br><span class="line">echo &quot;覆盖原有的x-pack-core-$&#123;type&#125;.jar文件&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 配置elasticsearch.yml</span><br><span class="line"># xpack.security.enabled: true</span><br><span class="line"># xpack.security.transport.ssl.enabled: true</span><br><span class="line"></span><br><span class="line">echo &quot;配置重启elasticsearch&quot;</span><br><span class="line"></span><br><span class="line">echo &quot;初始化elasticsearch密码&quot;</span><br><span class="line">echo &quot;bin/elasticsearch-setup-passwords auto&quot;</span><br><span class="line"></span><br><span class="line">echo &quot;配置重启kibana&quot;</span><br><span class="line"></span><br><span class="line"># elasticsearch.username: kibana</span><br><span class="line"># elasticsearch.password: password</span><br></pre></td></tr></table></figure><p>替换jar包后，es配置文件中开启security，然后启动es，然后给es设置账号和密码，然后修改kibana中的配置，添加上访问es使用的账号和密码，然后浏览器访问</p><p>kibana web界面查看;<br><img src="/es_jar_sh/1.png" alt></p><p>命令行查看<br><img src="/es_jar_sh/2.png" alt></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Wed Jan 08 2020 16:06:45 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;说明：使用的是7.3.0版本进行演示的&lt;/p&gt;&lt;ul&gt;&lt;li&gt;注意1：采用这种方式的话不用再上传license文件，切记切记&lt;/li&gt;&lt;li&gt;注意2：这种方式适用于如下两种形式&lt;br&gt;– 1. 首次配置es,未开启security,也未设置账号密码&lt;br&gt;– 2. 已配置es,开启了security,也设置了账号密码&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
      <category term="elk" scheme="https://yongnights.github.io/categories/elk/"/>
    
    
      <category term="elk" scheme="https://yongnights.github.io/tags/elk/"/>
    
  </entry>
  
  <entry>
    <title>ES配置生成SSL使用的证书</title>
    <link href="https://yongnights.github.io/2020/01/08/ES%E9%85%8D%E7%BD%AE%E7%94%9F%E6%88%90SSL%E4%BD%BF%E7%94%A8%E7%9A%84%E8%AF%81%E4%B9%A6/"/>
    <id>https://yongnights.github.io/2020/01/08/ES配置生成SSL使用的证书/</id>
    <published>2020-01-08T05:12:30.334Z</published>
    <updated>2020-01-08T05:13:07.725Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Jan 08 2020 13:14:03 GMT+0800 (GMT+08:00) --><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/elasticsearch/bin/</span><br><span class="line">./elasticsearch-certgen</span><br><span class="line"> </span><br><span class="line"> #####################################</span><br><span class="line"> Please enter the desired output file [certificate-bundle.zip]: cert.zip  （生成的压缩包名称，输入或者保持默认，直接回车）</span><br><span class="line"> Enter instance name: my-application (实例名)</span><br><span class="line"> Enter name for directories and files [my-application]: elasticsearch（存储实例证书的文件夹名，可以随意指定或保持默认）</span><br><span class="line"> Enter IP Addresses for instance (comma-separated if more than one) []: 127.0.0.1(实例ip，多个ip用逗号隔开)</span><br><span class="line"> Enter DNS names for instance (comma-separated if more than one) []: node-1（节点名，多个节点用逗号隔开）</span><br><span class="line"> Would you like to specify another instance? Press &apos;y&apos; to continue entering instance information: (到达这一步,不需要按y重新设置,按空格键就完成了)</span><br><span class="line"> Certificates written to /usr/local/elasticsearch/bin/cert.zip（这个是生成的文件存放地址，不用填写）</span><br></pre></td></tr></table></figure><a id="more"></a><p>解压cert.zip文件会得到<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> creating: ca/</span><br><span class="line">inflating: ca/ca.crt               </span><br><span class="line">inflating: ca/ca.key               </span><br><span class="line"> creating: my-applicaiton/</span><br><span class="line">inflating: my-applicaiton/my-applicaiton.crt  </span><br><span class="line">inflating: my-applicaiton/my-applicaiton.key</span><br></pre></td></tr></table></figure><p></p><p>es配置文件中使用如下：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">xpack.security.transport.ssl.enabled: true</span><br><span class="line">xpack.ssl.key: my-applicaiton.key</span><br><span class="line">xpack.ssl.certificate: my-applicaiton.crt</span><br><span class="line">xpack.ssl.certificate_authorities: ca.crt</span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Wed Jan 08 2020 13:14:03 GMT+0800 (GMT+08:00) --&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cd /usr/local/elasticsearch/bin/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;./elasticsearch-certgen&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; #####################################&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; Please enter the desired output file [certificate-bundle.zip]: cert.zip  （生成的压缩包名称，输入或者保持默认，直接回车）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; Enter instance name: my-application (实例名)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; Enter name for directories and files [my-application]: elasticsearch（存储实例证书的文件夹名，可以随意指定或保持默认）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; Enter IP Addresses for instance (comma-separated if more than one) []: 127.0.0.1(实例ip，多个ip用逗号隔开)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; Enter DNS names for instance (comma-separated if more than one) []: node-1（节点名，多个节点用逗号隔开）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; Would you like to specify another instance? Press &amp;apos;y&amp;apos; to continue entering instance information: (到达这一步,不需要按y重新设置,按空格键就完成了)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; Certificates written to /usr/local/elasticsearch/bin/cert.zip（这个是生成的文件存放地址，不用填写）&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="elk" scheme="https://yongnights.github.io/categories/elk/"/>
    
    
      <category term="elk" scheme="https://yongnights.github.io/tags/elk/"/>
    
  </entry>
  
  <entry>
    <title>x-pack设置完毕后，head无法登陆的问题</title>
    <link href="https://yongnights.github.io/2020/01/08/x-pack%E8%AE%BE%E7%BD%AE%E5%AE%8C%E6%AF%95%E5%90%8E%EF%BC%8Chead%E6%97%A0%E6%B3%95%E7%99%BB%E9%99%86%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>https://yongnights.github.io/2020/01/08/x-pack设置完毕后，head无法登陆的问题/</id>
    <published>2020-01-08T05:11:41.304Z</published>
    <updated>2020-01-08T05:12:08.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Jan 08 2020 13:14:03 GMT+0800 (GMT+08:00) --><p>在elasticsearch.yml中添加如下三行配置<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http.cors.enabled: true</span><br><span class="line">http.cors.allow-origin: &quot;*&quot;</span><br><span class="line">http.cors.allow-headers: Authorization,X-Requested-With,Content-Length,Content-Type</span><br></pre></td></tr></table></figure><p></p><p>重启服务，并通过如下形式访问head端口<br><code>http://192.168.36.61:9100/?auth_user=elastic&amp;auth_password=passwd</code></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Wed Jan 08 2020 13:14:03 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;在elasticsearch.yml中添加如下三行配置&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;tabl
      
    
    </summary>
    
      <category term="elk" scheme="https://yongnights.github.io/categories/elk/"/>
    
    
      <category term="elk" scheme="https://yongnights.github.io/tags/elk/"/>
    
  </entry>
  
  <entry>
    <title>Elasticsearch 7.3.0版本破解</title>
    <link href="https://yongnights.github.io/2020/01/07/Elasticsearch7.3.0%E7%89%88%E6%9C%AC%E7%A0%B4%E8%A7%A3/"/>
    <id>https://yongnights.github.io/2020/01/07/Elasticsearch7.3.0版本破解/</id>
    <published>2020-01-07T09:52:24.852Z</published>
    <updated>2020-01-08T05:16:10.941Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Jan 08 2020 13:18:16 GMT+0800 (GMT+08:00) --><h1 id="elasticsearch操作"><a href="#elasticsearch操作" class="headerlink" title="elasticsearch操作"></a>elasticsearch操作</h1><p>文件：LicenseVerifier.java<br>路径：elasticsearch/x-pack/plugin/core/src/main/java/org/elasticsearch/license/</p><p>文件：XPackBuild.java<br>路径：elasticsearch/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core</p><h2 id="1-ES安装前进行破解"><a href="#1-ES安装前进行破解" class="headerlink" title="1. ES安装前进行破解"></a>1. ES安装前进行破解</h2><p>软件名称：elasticsearch-7.3.0-linux-x86_64.tar.gz</p><p>操作环境：<br>系统：windows 10系统<br>解压缩软件：7z<br>反编译工具:Luyten</p><p>操作步骤：</p><ol><li>解压缩文件elasticsearch-7.3.0-linux-x86_64.tar.gz,得到elasticsearch-7.3.0-linux-x86_64.tar文件夹,进入该文件夹,解压缩elasticsearch-7.3.0-linux-x86_64.tar,得到目录elasticsearch-7.3.0-linux-x86_64,再进入该文件夹,里面有一个elasticsearch-7.3.0文件夹,进入.</li></ol><blockquote><p>这些操作在linux系统下操作的话就很简单：tar -zxv -f elasticsearch-7.3.0-linux-x86_64.tar.gz 直接得到文件夹elasticsearch-7.3.0</p></blockquote><ol start="2"><li>进入modules\x-pack-core文件夹内,找到x-pack-core-7.3.0.jar文件,这个就是要操作的文件</li></ol><a id="more"></a><h2 id="2-下载反编译工具Luyten"><a href="#2-下载反编译工具Luyten" class="headerlink" title="2. 下载反编译工具Luyten"></a>2. 下载反编译工具Luyten</h2><p>破解x-pack-core-7.3.0.jar需要反编译工具Luyten(<a href="https://github.com/deathmarine/Luyten/releases),我们可以前往下载地址下载Luyten工具。" target="_blank" rel="noopener">https://github.com/deathmarine/Luyten/releases),我们可以前往下载地址下载Luyten工具。</a><br>我们这里下载Luyten.exe windows版本，下载下来后打开，并将x-pack-core-7.3.0.jar文件拖进去，即可展开jar包的源代码了。</p><h2 id="3-修改X-Pack源码文件"><a href="#3-修改X-Pack源码文件" class="headerlink" title="3. 修改X-Pack源码文件"></a>3. 修改X-Pack源码文件</h2><p>在Luyten工具中我们需要把2个文件提取出来进行修改。org.elasticsearch.license.LicenseVerifier和org.elasticsearch.xpack.core.XPackBuild。</p><p>导出LicenseVerifier.class文件为LicenseVerifier.java源码文件,导出XPackBuild.class文件为XPackBuild.java源码文件<br>导出步骤<br><img src="https://img2018.cnblogs.com/blog/794174/202001/794174-20200107173024874-1124377771.png" alt></p><p><img src="https://img2018.cnblogs.com/blog/794174/202001/794174-20200107173030599-524858927.png" alt></p><p><img src="https://img2018.cnblogs.com/blog/794174/202001/794174-20200107173035874-366165702.png" alt></p><p><img src="https://img2018.cnblogs.com/blog/794174/202001/794174-20200107173040926-344268706.png" alt></p><p><img src="https://img2018.cnblogs.com/blog/794174/202001/794174-20200107173046539-1788234091.png" alt></p><p><img src="https://img2018.cnblogs.com/blog/794174/202001/794174-20200107173051544-1317083973.png" alt></p><h3 id="1-修改LicenseVerifier-java"><a href="#1-修改LicenseVerifier-java" class="headerlink" title="1. 修改LicenseVerifier.java"></a>1. 修改LicenseVerifier.java</h3><p>LicenseVerifier中有两个静态方法，这就是验证授权文件是否有效的方法，把它修改为全部返回true.</p><p>修改后的文档如下：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">package org.elasticsearch.license;</span><br><span class="line"></span><br><span class="line">import java.nio.*;</span><br><span class="line">import org.elasticsearch.common.bytes.*;</span><br><span class="line">import java.security.*;</span><br><span class="line">import java.util.*;</span><br><span class="line">import org.elasticsearch.common.xcontent.*;</span><br><span class="line">import org.apache.lucene.util.*;</span><br><span class="line">import org.elasticsearch.core.internal.io.*;</span><br><span class="line">import java.io.*;</span><br><span class="line"></span><br><span class="line">public class LicenseVerifier</span><br><span class="line">&#123;</span><br><span class="line">    public static boolean verifyLicense(final License license, final byte[] publicKeyData) &#123;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public static boolean verifyLicense(final License license) &#123;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h3 id="2-修改XPackBuild-java"><a href="#2-修改XPackBuild-java" class="headerlink" title="2. 修改XPackBuild.java"></a>2. 修改XPackBuild.java</h3><p>XPackBuild中最后一个静态代码块中try的部分全部删除，这部分会验证jar包是否被修改.</p><p>修改后的文档如下：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">package org.elasticsearch.xpack.core;</span><br><span class="line"></span><br><span class="line">import org.elasticsearch.common.io.*;</span><br><span class="line">import java.net.*;</span><br><span class="line">import org.elasticsearch.common.*;</span><br><span class="line">import java.nio.file.*;</span><br><span class="line">import java.io.*;</span><br><span class="line">import java.util.jar.*;</span><br><span class="line"></span><br><span class="line">public class XPackBuild</span><br><span class="line">&#123;</span><br><span class="line">    public static final XPackBuild CURRENT;</span><br><span class="line">    private String shortHash;</span><br><span class="line">    private String date;</span><br><span class="line">    </span><br><span class="line">    @SuppressForbidden(reason = &quot;looks up path of xpack.jar directly&quot;)</span><br><span class="line">    static Path getElasticsearchCodebase() &#123;</span><br><span class="line">        final URL url = XPackBuild.class.getProtectionDomain().getCodeSource().getLocation();</span><br><span class="line">        try &#123;</span><br><span class="line">            return PathUtils.get(url.toURI());</span><br><span class="line">        &#125;</span><br><span class="line">        catch (URISyntaxException bogus) &#123;</span><br><span class="line">            throw new RuntimeException(bogus);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    XPackBuild(final String shortHash, final String date) &#123;</span><br><span class="line">        this.shortHash = shortHash;</span><br><span class="line">        this.date = date;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public String shortHash() &#123;</span><br><span class="line">        return this.shortHash;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public String date() &#123;</span><br><span class="line">        return this.date;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    static &#123;</span><br><span class="line">        CURRENT = new XPackBuild(&quot;Unknown&quot;, &quot;Unknown&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>或者这样的：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">package org.elasticsearch.xpack.core;</span><br><span class="line"></span><br><span class="line">import org.elasticsearch.common.io.*;</span><br><span class="line">import java.net.*;</span><br><span class="line">import org.elasticsearch.common.*;</span><br><span class="line">import java.nio.file.*;</span><br><span class="line">import java.io.*;</span><br><span class="line">import java.util.jar.*;</span><br><span class="line"></span><br><span class="line">public class XPackBuild</span><br><span class="line">&#123;</span><br><span class="line">    public static final XPackBuild CURRENT;</span><br><span class="line">    private String shortHash;</span><br><span class="line">    private String date;</span><br><span class="line">    </span><br><span class="line">    @SuppressForbidden(reason = &quot;looks up path of xpack.jar directly&quot;)</span><br><span class="line">    static Path getElasticsearchCodebase() &#123;</span><br><span class="line">        final URL url = XPackBuild.class.getProtectionDomain().getCodeSource().getLocation();</span><br><span class="line">        try &#123;</span><br><span class="line">            return PathUtils.get(url.toURI());</span><br><span class="line">        &#125;</span><br><span class="line">        catch (URISyntaxException bogus) &#123;</span><br><span class="line">            throw new RuntimeException(bogus);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    XPackBuild(final String shortHash, final String date) &#123;</span><br><span class="line">        this.shortHash = shortHash;</span><br><span class="line">        this.date = date;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public String shortHash() &#123;</span><br><span class="line">        return this.shortHash;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public String date() &#123;</span><br><span class="line">        return this.date;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    static &#123;</span><br><span class="line">        final Path path = getElasticsearchCodebase();</span><br><span class="line">        String shortHash = null;</span><br><span class="line">        String date = null;</span><br><span class="line">        Label_0109: &#123;</span><br><span class="line">            shortHash = &quot;Unknown&quot;;</span><br><span class="line">            date = &quot;Unknown&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        CURRENT = new XPackBuild(shortHash, date);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h3 id="3-生成-class文件"><a href="#3-生成-class文件" class="headerlink" title="3. 生成.class文件"></a>3. 生成<code>.class</code>文件</h3><p>上述LicenseVerifier.java和XPackBuild.java两个文件在本地电脑windows修改完成后，需要将其复制到elasticsearch服务器上并编译成class文件，然后打包到x-pack-core-7.3.0.jar中。这里将这2个文件放到了/opt目录下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 生成LicenseVerifier.class文件</span><br><span class="line">javac -cp &quot;/opt/elasticsearch-7.3.0/lib/elasticsearch-7.3.0.jar:/opt/elasticsearch-7.3.0/lib/lucene-core-8.1.0.jar:/opt/elasticsearch-7.3.0/modules/x-pack-core/x-pack-core-7.3.0.jar:/opt/elasticsearch-7.3.0/modules/x-pack-core/netty-common-4.1.36.Final.jar:/opt/elasticsearch-7.3.0/lib/elasticsearch-core-7.3.0.jar&quot; /opt/LicenseVerifier.java</span><br><span class="line"></span><br><span class="line"># 生成XPackBuild.class文件</span><br><span class="line">javac -cp &quot;/opt/elasticsearch-7.3.0/lib/elasticsearch-7.3.0.jar:/opt/elasticsearch-7.3.0/lib/lucene-core-8.1.0.jar:/opt/elasticsearch-7.3.0/modules/x-pack-core/x-pack-core-7.3.0.jar:/opt/elasticsearch-7.3.0/lib/elasticsearch-core-7.3.0.jar&quot; /opt/XPackBuild.java</span><br><span class="line"></span><br><span class="line"># 查看编译后的文件</span><br><span class="line">LicenseVerifier.class</span><br><span class="line">XPackBuild.class</span><br></pre></td></tr></table></figure><h3 id="4-替换LicenseVerifier-class和XPackBuild-class"><a href="#4-替换LicenseVerifier-class和XPackBuild-class" class="headerlink" title="4. 替换LicenseVerifier.class和XPackBuild.class"></a>4. 替换LicenseVerifier.class和XPackBuild.class</h3><p>把/opt/elasticsearch-7.3.0/modules/x-pack-core/目录下的x-pack-core-7.3.0.jar提取出来，放到/opt/tmp目录中。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cp /opt/elasticsearch-7.3.0/modules/x-pack-core/x-pack-core-7.3.0.jar /opt/tmp</span><br><span class="line">cd /opt/tmp</span><br><span class="line"># 解压x-pack-core-7.3.0.jar</span><br><span class="line">jar -xvf x-pack-core-7.3.0.jar</span><br><span class="line"></span><br><span class="line"># 替换.class文件</span><br><span class="line">cp /opt/XPackBuild.class /opt/tmp/org/elasticsearch/xpack/core/</span><br><span class="line">cp /opt/LicenseVerifier.class /opt/tmp/org/elasticsearch/license/</span><br></pre></td></tr></table></figure><p></p><h3 id="5-打包新x-pack-core-7-3-0-jar文件"><a href="#5-打包新x-pack-core-7-3-0-jar文件" class="headerlink" title="5. 打包新x-pack-core-7.3.0.jar文件"></a>5. 打包新x-pack-core-7.3.0.jar文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /opt/tmp</span><br><span class="line">rm -rf x-pack-core-7.3.0.jar   # 删除临时拷贝过来的源文件</span><br><span class="line">jar cvf x-pack-core-7.3.0.jar .</span><br></pre></td></tr></table></figure><p>至此在/opt/tmp目录下会新生成一个x-pack-core-7.3.0.jar文件,也就是破解后的文件。</p><h3 id="6-替换x-pack-core-7-3-0-jar文件"><a href="#6-替换x-pack-core-7-3-0-jar文件" class="headerlink" title="6. 替换x-pack-core-7.3.0.jar文件"></a>6. 替换x-pack-core-7.3.0.jar文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp /opt/tmp/x-pack-core-7.3.0.jar /opt/elasticsearch-7.3.0/modules/x-pack-core/</span><br></pre></td></tr></table></figure><h3 id="7-申请License"><a href="#7-申请License" class="headerlink" title="7. 申请License"></a>7. 申请License</h3><p>完成以上步骤后，还需要去elastic官网申请一个license, <a href="https://license.elastic.co/registration" target="_blank" rel="noopener">License申请地址</a>，申请完成后，下载下来的License格式为json格式。并将该License的<code>type</code>、<code>expiry_date_in_millis</code>、<code>max_nodes</code>分别修改成<code>platinum</code>、<code>2524579200999</code>、<code>1000</code>。如下：<br></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"license"</span>:</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"uid"</span>:<span class="string">"537c5c48-c1dd-43ea-ab69-68d209d80c32"</span>,</span><br><span class="line">        <span class="attr">"type"</span>:<span class="string">"platinum"</span>,</span><br><span class="line">        <span class="attr">"issue_date_in_millis"</span>:<span class="number">1558051200000</span>,</span><br><span class="line">        <span class="attr">"expiry_date_in_millis"</span>:<span class="number">2524579200999</span>,</span><br><span class="line">        <span class="attr">"max_nodes"</span>:<span class="number">1000</span>,</span><br><span class="line">        <span class="attr">"issued_to"</span>:<span class="string">"hkd"</span>,</span><br><span class="line">        <span class="attr">"issuer"</span>:<span class="string">"Web Form"</span>,</span><br><span class="line">        <span class="attr">"signature"</span>:<span class="string">"AAAAAwAAAA3fIq7NLN3Blk2olVjbAAABmC9ZN0hjZDBGYnVyRXpCOW5Bb3FjZDAxOWpSbTVoMVZwUzRxVk1PSmkxaktJRVl5MUYvUWh3bHZVUTllbXNPbzBUemtnbWpBbmlWRmRZb25KNFlBR2x0TXc2K2p1Y1VtMG1UQU9TRGZVSGRwaEJGUjE3bXd3LzRqZ05iLzRteWFNekdxRGpIYlFwYkJiNUs0U1hTVlJKNVlXekMrSlVUdFIvV0FNeWdOYnlESDc3MWhlY3hSQmdKSjJ2ZTcvYlBFOHhPQlV3ZHdDQ0tHcG5uOElCaDJ4K1hob29xSG85N0kvTWV3THhlQk9NL01VMFRjNDZpZEVXeUtUMXIyMlIveFpJUkk2WUdveEZaME9XWitGUi9WNTZVQW1FMG1DenhZU0ZmeXlZakVEMjZFT2NvOWxpZGlqVmlHNC8rWVVUYzMwRGVySHpIdURzKzFiRDl4TmM1TUp2VTBOUlJZUlAyV0ZVL2kvVk10L0NsbXNFYVZwT3NSU082dFNNa2prQ0ZsclZ4NTltbU1CVE5lR09Bck93V2J1Y3c9PQAAAQCjNd8mwy8B1sm9rGrgTmN2Gjm/lxqfnTEpTc+HOEmAgwQ7Q1Ye/FSGVNIU/enZ5cqSzWS2mY8oZ7FM/7UPKVQ4hkarWn2qye964MW+cux54h7dqxlSB19fG0ZJOJZxxwVxxi8iyJPUSQBa+QN8m7TFkK2kVmP+HnhU7mGUrqXt3zTk5d3pZw3QBQ/Rr3wmSYC5pxV6/o2UHFgu1OPDcX+kEb+UZtMrVNneR+cEwyx7o5Bg3rbKC014T+lMtt69Y080JDI5KfHa7e9Ul0c3rozIL975fP45dU175D4PKZy98cvHJgtsCJF3K8XUZKo2lOcbsWzhK2mZ5kFp0BMXF3Hs"</span>,</span><br><span class="line">        <span class="attr">"start_date_in_millis"</span>:<span class="number">1558051200000</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>文件存为license.json</p><p>将过期时间写到2049年，type改为platinum 白金版，这样我们就会拥有全部的x-pack功能。</p><h3 id="8-配置elasticsearch安全协议"><a href="#8-配置elasticsearch安全协议" class="headerlink" title="8. 配置elasticsearch安全协议"></a>8. 配置elasticsearch安全协议</h3><p>完成以上所有操作在启动elasticsearch前，需要配置elasticsearch的SSL/TLS安全协议,如果不配置的话，需要禁止security才能配置License。</p><p>当License配置完成后我们需要再开启security，并开启SSL\TLS。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 加载License到elasticsearch之前操作</span><br><span class="line">echo &quot;xpack.security.enabled: false&quot; &gt;&gt; /opt/elasticsearch-7.3.0/config/elasticsearch.yml</span><br><span class="line"># 加载License到elasticsearch之后操作</span><br><span class="line">echo &quot;xpack.security.transport.ssl.enabled: true&quot; &gt;&gt; /opt/elasticsearch-7.3.0/config/elasticsearch.yml</span><br><span class="line">./bin/elasticsearch -d   # 启动elasticsearch</span><br></pre></td></tr></table></figure><p></p><h3 id="9-加载License到elasticsearch"><a href="#9-加载License到elasticsearch" class="headerlink" title="9. 加载License到elasticsearch"></a>9. 加载License到elasticsearch</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">curl -XPUT &apos;http://localhost:9200/_xpack/license&apos; -H &quot;Content-Type: application/json&quot; -d @license.json</span><br><span class="line">&#123;&quot;acknowledged&quot;:true,&quot;license_status&quot;:&quot;valid&quot;&#125;    # license写入成功</span><br><span class="line"></span><br><span class="line"># 在es日志中可以查看到如下信息,</span><br><span class="line">license [65eafbab-c360-4f64-900d-449499b3d530] mode [basic] - valid</span><br><span class="line">Active license is now [BASIC]; Security is disabled</span><br><span class="line">license [537c5c48-c1dd-43ea-ab69-68d209d80c32] mode [platinum] - valid</span><br><span class="line">Active license is now [PLATINUM]; Security is enabled</span><br></pre></td></tr></table></figure><p>但是再次查看证书信息的话会报错，因为没有开启ssl/tls<br><code>curl &#39;http://localhost:9200/_xpack/license&#39;</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`&#123;&quot;error&quot;:&#123;&quot;root_cause&quot;:[&#123;&quot;type&quot;:&quot;security_exception&quot;,&quot;reason&quot;:&quot;missing authentication credentials for REST request [/_xpack/license]&quot;,&quot;header&quot;:&#123;&quot;WWW-Authenticate&quot;:&quot;Basic realm=\&quot;security\&quot; charset=\&quot;UTF-8\&quot;&quot;&#125;&#125;],&quot;type&quot;:&quot;security_exception&quot;,&quot;reason&quot;:&quot;missing authentication credentials for REST request [/_xpack/license]&quot;,&quot;header&quot;:&#123;&quot;WWW-Authenticate&quot;:&quot;Basic realm=\&quot;security\&quot; charset=\&quot;UTF-8\&quot;&quot;&#125;&#125;,&quot;status&quot;:401&#125;`</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"># 开启ssl/tls,打开认证</span><br><span class="line">sed -i &apos;s/xpack.security.enabled: false/xpack.security.enabled: true/g&apos; /opt/elasticsearch-7.3.0/config/elasticsearch.yml</span><br><span class="line"></span><br><span class="line"># 如果需要重新设置密码,手动设置密码</span><br><span class="line">./bin/elasticsearch-setup-passwords interactive</span><br><span class="line"></span><br><span class="line"># 自动生成密码：</span><br><span class="line">./bin/elasticsearch-setup-passwords auto</span><br><span class="line"></span><br><span class="line">Initiating the setup of passwords for reserved users elastic,apm_system,kibana,logstash_system,beats_system,remote_monitoring_user.</span><br><span class="line">The passwords will be randomly generated and printed to the console.</span><br><span class="line">Please confirm that you would like to continue [y/N]y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Changed password for user apm_system</span><br><span class="line">PASSWORD apm_system = 7zkIYUXQpq8xZdaapTuQ</span><br><span class="line"></span><br><span class="line">Changed password for user kibana</span><br><span class="line">PASSWORD kibana = aQi7k57swBAaDOtvzdm2</span><br><span class="line"></span><br><span class="line">Changed password for user logstash_system</span><br><span class="line">PASSWORD logstash_system = CboSzpSIq60Zkk0SgpAo</span><br><span class="line"></span><br><span class="line">Changed password for user beats_system</span><br><span class="line">PASSWORD beats_system = ZErooCE4ybll3UcLTsAP</span><br><span class="line"></span><br><span class="line">Changed password for user remote_monitoring_user</span><br><span class="line">PASSWORD remote_monitoring_user = EDYQShIhk5P1vjvpeijI</span><br><span class="line"></span><br><span class="line">Changed password for user elastic</span><br><span class="line">PASSWORD elastic = 3tdAyUIFLMdg79EBnrsg</span><br></pre></td></tr></table></figure><h3 id="10-查看License"><a href="#10-查看License" class="headerlink" title="10. 查看License"></a>10. 查看License</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">curl -XGET -u elastic:3tdAyUIFLMdg79EBnrsg http://localhost:9200/_license</span><br><span class="line">&#123;</span><br><span class="line">  &quot;license&quot; : &#123;</span><br><span class="line">    &quot;status&quot; : &quot;active&quot;,</span><br><span class="line">    &quot;uid&quot; : &quot;537c5c48-c1dd-43ea-ab69-68d209d80c32&quot;,</span><br><span class="line">    &quot;type&quot; : &quot;platinum&quot;,</span><br><span class="line">    &quot;issue_date&quot; : &quot;2019-05-17T00:00:00.000Z&quot;,</span><br><span class="line">    &quot;issue_date_in_millis&quot; : 1558051200000,</span><br><span class="line">    &quot;expiry_date&quot; : &quot;2049-12-31T16:00:00.999Z&quot;,</span><br><span class="line">    &quot;expiry_date_in_millis&quot; : 2524579200999,</span><br><span class="line">    &quot;max_nodes&quot; : 1000,</span><br><span class="line">    &quot;issued_to&quot; : &quot;hkd&quot;,</span><br><span class="line">    &quot;issuer&quot; : &quot;Web Form&quot;,</span><br><span class="line">    &quot;start_date_in_millis&quot; : 1558051200000</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由结果可以看出x-pack到期时间为2049-12-31，破解完成。也可以在kibana web页面管理中查看破解详情。</p><h1 id="kibana操作"><a href="#kibana操作" class="headerlink" title="kibana操作"></a>kibana操作</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">useradd kibana</span><br><span class="line">cd /opt</span><br><span class="line">tar -zxv -f kibana-7.3.0-linux-x86_64.tar.gz</span><br><span class="line">chown -R kibana:kibana kibana-7.3.0-linux-x86_64</span><br><span class="line">su - kibana</span><br><span class="line">cd /opt/kibana-7.3.0-linux-x86_64</span><br><span class="line"></span><br><span class="line">cat  config/kibana.yml</span><br><span class="line">server.port: 5601</span><br><span class="line">server.host: &quot;192.168.0.253&quot;</span><br><span class="line">elasticsearch.hosts: [&quot;http://localhost:9200&quot;]</span><br><span class="line">elasticsearch.username: &quot;kibana&quot;</span><br><span class="line">elasticsearch.password: &quot;aQi7k57swBAaDOtvzdm2&quot;</span><br></pre></td></tr></table></figure><p>浏览器访问：<a href="http://192.168.0.253:5601" target="_blank" rel="noopener">http://192.168.0.253:5601</a><br>左侧导航查看<br><img src="https://img2018.cnblogs.com/blog/794174/202001/794174-20200107173101082-444987352.png" alt></p><h1 id="ES安装后操作"><a href="#ES安装后操作" class="headerlink" title="ES安装后操作"></a>ES安装后操作</h1><p>之前已经开启ssl/tls并设置账号等<br>停用es，关闭security验证，替换jar包，开启es，导入license，启动es</p><p>说明：此方法暂时走不通。</p><p>以上说的步骤指的是尚未开启security，未设置账号密码的情况。</p><p>破解文件和license下载地址：<a href="https://files.cnblogs.com/files/sanduzxcvbnm/7.3.0%E7%A0%B4%E8%A7%A3%E6%96%87%E4%BB%B6%E5%92%8Clicense.7z" target="_blank" rel="noopener">https://files.cnblogs.com/files/sanduzxcvbnm/7.3.0%E7%A0%B4%E8%A7%A3%E6%96%87%E4%BB%B6%E5%92%8Clicense.7z</a></p><h1 id="ES版本升级操作"><a href="#ES版本升级操作" class="headerlink" title="ES版本升级操作"></a>ES版本升级操作</h1><p>先按照上述步骤生成破解文件，然后再替换操作</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Wed Jan 08 2020 13:18:16 GMT+0800 (GMT+08:00) --&gt;&lt;h1 id=&quot;elasticsearch操作&quot;&gt;&lt;a href=&quot;#elasticsearch操作&quot; class=&quot;headerlink&quot; title=&quot;elasticsearch操作&quot;&gt;&lt;/a&gt;elasticsearch操作&lt;/h1&gt;&lt;p&gt;文件：LicenseVerifier.java&lt;br&gt;路径：elasticsearch/x-pack/plugin/core/src/main/java/org/elasticsearch/license/&lt;/p&gt;&lt;p&gt;文件：XPackBuild.java&lt;br&gt;路径：elasticsearch/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core&lt;/p&gt;&lt;h2 id=&quot;1-ES安装前进行破解&quot;&gt;&lt;a href=&quot;#1-ES安装前进行破解&quot; class=&quot;headerlink&quot; title=&quot;1. ES安装前进行破解&quot;&gt;&lt;/a&gt;1. ES安装前进行破解&lt;/h2&gt;&lt;p&gt;软件名称：elasticsearch-7.3.0-linux-x86_64.tar.gz&lt;/p&gt;&lt;p&gt;操作环境：&lt;br&gt;系统：windows 10系统&lt;br&gt;解压缩软件：7z&lt;br&gt;反编译工具:Luyten&lt;/p&gt;&lt;p&gt;操作步骤：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;解压缩文件elasticsearch-7.3.0-linux-x86_64.tar.gz,得到elasticsearch-7.3.0-linux-x86_64.tar文件夹,进入该文件夹,解压缩elasticsearch-7.3.0-linux-x86_64.tar,得到目录elasticsearch-7.3.0-linux-x86_64,再进入该文件夹,里面有一个elasticsearch-7.3.0文件夹,进入.&lt;/li&gt;&lt;/ol&gt;&lt;blockquote&gt;&lt;p&gt;这些操作在linux系统下操作的话就很简单：tar -zxv -f elasticsearch-7.3.0-linux-x86_64.tar.gz 直接得到文件夹elasticsearch-7.3.0&lt;/p&gt;&lt;/blockquote&gt;&lt;ol start=&quot;2&quot;&gt;&lt;li&gt;进入modules\x-pack-core文件夹内,找到x-pack-core-7.3.0.jar文件,这个就是要操作的文件&lt;/li&gt;&lt;/ol&gt;
    
    </summary>
    
      <category term="elk" scheme="https://yongnights.github.io/categories/elk/"/>
    
    
      <category term="elk" scheme="https://yongnights.github.io/tags/elk/"/>
    
  </entry>
  
  <entry>
    <title>Elasticsearch 理解mapping中的store属性</title>
    <link href="https://yongnights.github.io/2020/01/06/Elasticsearch%20%E7%90%86%E8%A7%A3mapping%E4%B8%AD%E7%9A%84store%E5%B1%9E%E6%80%A7/"/>
    <id>https://yongnights.github.io/2020/01/06/Elasticsearch 理解mapping中的store属性/</id>
    <published>2020-01-06T09:27:32.203Z</published>
    <updated>2020-01-06T09:28:55.168Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Jan 06 2020 17:30:42 GMT+0800 (GMT+08:00) --><p>默认情况下，对字段值进行索引以使其可搜索，但不存储它们 (store)。 这意味着可以查询该字段，但是无法检索原始字段值。在这里我们必须理解的一点是: 如果一个字段的mapping中含有store属性为true，那么有一个单独的存储空间为这个字段做存储，而且这个存储是独立于<code>_source</code>的存储的。它具有更快的查询。存储该字段会占用磁盘空间。如果需要从文档中提取（即在脚本中和聚合），它会帮助减少计算。在聚合时，具有store属性的字段会比不具有这个属性的字段快。 此选项的可能值为false和true。</p><p>通常这无关紧要。 该字段值已经是<code>_source</code>字段的一部分，默认情况下已存储。 如果您只想检索单个字段或几个字段的值，而不是整个<code>_source</code>的值，则可以使用source filtering来实现。</p><p>在某些情况下，存储字段可能很有意义。 例如，如果您有一个带有标题，日期和很大的内容字段的文档，则可能只想检索标题和日期，而不必从较大的<code>_source</code>字段中提取这些字段。</p><p>接下来我们还是通过一个具体的例子来解释这个，虽然上面的描述有点绕口。</p><p>首先我们来创建一个叫做my_index的索引：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">PUT my_index</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;properties&quot;: &#123;</span><br><span class="line">      &quot;title&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">        &quot;store&quot;: true </span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;date&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;date&quot;,</span><br><span class="line">        &quot;store&quot;: true </span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;content&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;text&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>在上面的mapping中，我们把title及date字段里的store属性设置为true，表明有一个单独的index fragement是为它们而配备的，并存储它们的值。我们来写入一个文档到my_index索引中：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PUT my_index/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;title&quot;: &quot;Some short title&quot;,</span><br><span class="line">  &quot;date&quot;: &quot;2015-01-01&quot;,</span><br><span class="line">  &quot;content&quot;: &quot;A very long content field...&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><a id="more"></a><p>接下来，我们来做一个搜索：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET my_index/_search</span><br></pre></td></tr></table></figure><p></p><p>显示的结果是：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&quot;hits&quot; : &#123;</span><br><span class="line">  &quot;total&quot; : &#123;</span><br><span class="line">    &quot;value&quot; : 1,</span><br><span class="line">    &quot;relation&quot; : &quot;eq&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;max_score&quot; : 1.0,</span><br><span class="line">  &quot;hits&quot; : [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;_index&quot; : &quot;my_index&quot;,</span><br><span class="line">      &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">      &quot;_id&quot; : &quot;1&quot;,</span><br><span class="line">      &quot;_score&quot; : 1.0,</span><br><span class="line">      &quot;_source&quot; : &#123;</span><br><span class="line">        &quot;title&quot; : &quot;Some short title&quot;,</span><br><span class="line">        &quot;date&quot; : &quot;2015-01-01&quot;,</span><br><span class="line">        &quot;content&quot; : &quot;A very long content field...&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>在上面我们可以在_source中看到这个文档的title，date及content字段。</p><p>我们可以通过source filtering的方法提前我们想要的字段：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GET my_index/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;_source&quot;: [&quot;title&quot;, &quot;date&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>显示的结果是：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&quot;hits&quot; : &#123;</span><br><span class="line">  &quot;total&quot; : &#123;</span><br><span class="line">    &quot;value&quot; : 1,</span><br><span class="line">    &quot;relation&quot; : &quot;eq&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;max_score&quot; : 1.0,</span><br><span class="line">  &quot;hits&quot; : [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;_index&quot; : &quot;my_index&quot;,</span><br><span class="line">      &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">      &quot;_id&quot; : &quot;1&quot;,</span><br><span class="line">      &quot;_score&quot; : 1.0,</span><br><span class="line">      &quot;_source&quot; : &#123;</span><br><span class="line">        &quot;date&quot; : &quot;2015-01-01&quot;,</span><br><span class="line">        &quot;title&quot; : &quot;Some short title&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>显然上面的结果显示我们想要的字段date及title是可以从<code>_source</code>里获取的。</p><p>我们也可以通过如下的方法来获取这两个字段的值：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">GET my_index/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;stored_fields&quot;: [</span><br><span class="line">    &quot;title&quot;,</span><br><span class="line">    &quot;date&quot;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>返回的结果是：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&quot;hits&quot; : &#123;</span><br><span class="line">  &quot;total&quot; : &#123;</span><br><span class="line">    &quot;value&quot; : 1,</span><br><span class="line">    &quot;relation&quot; : &quot;eq&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;max_score&quot; : 1.0,</span><br><span class="line">  &quot;hits&quot; : [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;_index&quot; : &quot;my_index&quot;,</span><br><span class="line">      &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">      &quot;_id&quot; : &quot;1&quot;,</span><br><span class="line">      &quot;_score&quot; : 1.0,</span><br><span class="line">      &quot;fields&quot; : &#123;</span><br><span class="line">        &quot;date&quot; : [</span><br><span class="line">          &quot;2015-01-01T00:00:00.000Z&quot;</span><br><span class="line">        ],</span><br><span class="line">        &quot;title&quot; : [</span><br><span class="line">          &quot;Some short title&quot;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>在上面，我们可以看出来在fields里有一个date及title的数组返回查询的结果。</p><p>也许我们很多人想知道到底这个store到底有什么用途呢？如果都能从_source里得到字段的值。</p><p>有一种就是我们在开头我们已经说明的情况：我们有时候并不想存下所有的字段在_source里，因为该字段的内容很大，或者我们根本就不想存<code>_source</code>，但是有些字段，我们还是想要获取它们的内容。那么在这种情况下，我们就可以使用store来实现。</p><p>我们还是用一个例子来说明。首先创建一个叫做my_index1的索引：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">PUT my_index1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;_source&quot;: &#123;</span><br><span class="line">      &quot;enabled&quot;: false</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;properties&quot;: &#123;</span><br><span class="line">      &quot;title&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">        &quot;store&quot;: true</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;date&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;date&quot;,</span><br><span class="line">        &quot;store&quot;: true</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;content&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">        &quot;store&quot;: false</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>因为我们认为content字段的内容可能会很大，那么我不想存这个字段。在上面，我们也把<code>_source</code>的enabled开关设置为false，表明将不存储任何的source字段。接下来写入一个文档到my_index1里去：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PUT my_index1/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;title&quot;: &quot;Some short title&quot;,</span><br><span class="line">  &quot;date&quot;: &quot;2015-01-01&quot;,</span><br><span class="line">  &quot;content&quot;: &quot;A very long content field...&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>同样我们来做一个搜索：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET my_index1/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;content&quot;: &quot;content&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>我们可以看到搜索的结果：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&quot;hits&quot; : &#123;</span><br><span class="line">  &quot;total&quot; : &#123;</span><br><span class="line">    &quot;value&quot; : 1,</span><br><span class="line">    &quot;relation&quot; : &quot;eq&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;max_score&quot; : 0.2876821,</span><br><span class="line">  &quot;hits&quot; : [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;_index&quot; : &quot;my_index1&quot;,</span><br><span class="line">      &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">      &quot;_id&quot; : &quot;1&quot;,</span><br><span class="line">      &quot;_score&quot; : 0.2876821</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>在这次的显示中，我们没有看到_source字段，这是因为我们已经把它给disabled了。但是我们可以通过如下的方法来获取那些store 字段：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">GET my_index1/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;stored_fields&quot;: [</span><br><span class="line">    &quot;title&quot;,</span><br><span class="line">    &quot;date&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;content&quot;: &quot;content&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>返回结果是：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&quot;hits&quot; : &#123;</span><br><span class="line">  &quot;total&quot; : &#123;</span><br><span class="line">    &quot;value&quot; : 1,</span><br><span class="line">    &quot;relation&quot; : &quot;eq&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;max_score&quot; : 0.2876821,</span><br><span class="line">  &quot;hits&quot; : [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;_index&quot; : &quot;my_index1&quot;,</span><br><span class="line">      &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">      &quot;_id&quot; : &quot;1&quot;,</span><br><span class="line">      &quot;_score&quot; : 0.2876821,</span><br><span class="line">      &quot;fields&quot; : &#123;</span><br><span class="line">        &quot;date&quot; : [</span><br><span class="line">          &quot;2015-01-01T00:00:00.000Z&quot;</span><br><span class="line">        ],</span><br><span class="line">        &quot;title&quot; : [</span><br><span class="line">          &quot;Some short title&quot;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>我们可以在返回结果里查看到date及title的值。</p><p>可以合理地存储字段的另一种情况是，对于那些未出现在<code>_source</code>字段（例如copy_to字段）中的字段。您可以参阅我的另外一篇文章“如何使用Elasticsearch中的copy_to来提高搜索效率”。</p><p>如果你想了解更多关于Elasticsearch的存储，可以阅读文章“Elasticsearch：inverted index，doc_values及source”。</p><p>参考：</p><ol><li><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-store.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-store.html</a></li><li><a href="https://stackoverflow.com/questions/17103047/why-do-i-need-storeyes-in-elasticsearch" target="_blank" rel="noopener">https://stackoverflow.com/questions/17103047/why-do-i-need-storeyes-in-elasticsearch</a></li></ol><hr><p>版权声明：本文为CSDN博主「Elastic 中国社区官方博客」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/UbuntuTouch/article/details/103810863" target="_blank" rel="noopener">https://blog.csdn.net/UbuntuTouch/article/details/103810863</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Jan 06 2020 17:30:42 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;默认情况下，对字段值进行索引以使其可搜索，但不存储它们 (store)。 这意味着可以查询该字段，但是无法检索原始字段值。在这里我们必须理解的一点是: 如果一个字段的mapping中含有store属性为true，那么有一个单独的存储空间为这个字段做存储，而且这个存储是独立于&lt;code&gt;_source&lt;/code&gt;的存储的。它具有更快的查询。存储该字段会占用磁盘空间。如果需要从文档中提取（即在脚本中和聚合），它会帮助减少计算。在聚合时，具有store属性的字段会比不具有这个属性的字段快。 此选项的可能值为false和true。&lt;/p&gt;&lt;p&gt;通常这无关紧要。 该字段值已经是&lt;code&gt;_source&lt;/code&gt;字段的一部分，默认情况下已存储。 如果您只想检索单个字段或几个字段的值，而不是整个&lt;code&gt;_source&lt;/code&gt;的值，则可以使用source filtering来实现。&lt;/p&gt;&lt;p&gt;在某些情况下，存储字段可能很有意义。 例如，如果您有一个带有标题，日期和很大的内容字段的文档，则可能只想检索标题和日期，而不必从较大的&lt;code&gt;_source&lt;/code&gt;字段中提取这些字段。&lt;/p&gt;&lt;p&gt;接下来我们还是通过一个具体的例子来解释这个，虽然上面的描述有点绕口。&lt;/p&gt;&lt;p&gt;首先我们来创建一个叫做my_index的索引：&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;PUT my_index&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;quot;mappings&amp;quot;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;quot;properties&amp;quot;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;quot;title&amp;quot;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;quot;type&amp;quot;: &amp;quot;text&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;quot;store&amp;quot;: true &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;quot;date&amp;quot;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;quot;type&amp;quot;: &amp;quot;date&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;quot;store&amp;quot;: true &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;quot;content&amp;quot;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;quot;type&amp;quot;: &amp;quot;text&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;在上面的mapping中，我们把title及date字段里的store属性设置为true，表明有一个单独的index fragement是为它们而配备的，并存储它们的值。我们来写入一个文档到my_index索引中：&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;PUT my_index/_doc/1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;quot;title&amp;quot;: &amp;quot;Some short title&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;quot;date&amp;quot;: &amp;quot;2015-01-01&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;quot;content&amp;quot;: &amp;quot;A very long content field...&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="elk" scheme="https://yongnights.github.io/categories/elk/"/>
    
    
      <category term="elk" scheme="https://yongnights.github.io/tags/elk/"/>
    
  </entry>
  
  <entry>
    <title>Elastic：使用ElastAlert发送通知</title>
    <link href="https://yongnights.github.io/2020/01/06/Elastic%EF%BC%9A%E4%BD%BF%E7%94%A8ElastAlert%E5%8F%91%E9%80%81%E9%80%9A%E7%9F%A5/"/>
    <id>https://yongnights.github.io/2020/01/06/Elastic：使用ElastAlert发送通知/</id>
    <published>2020-01-06T09:27:32.199Z</published>
    <updated>2020-01-06T09:29:24.679Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Jan 06 2020 17:30:42 GMT+0800 (GMT+08:00) --><p>ElastAlert是一个简单的框架，用于从Elasticsearch中的数据中发出异常，尖峰或其他感兴趣模式的警报。我们可以在地址<a href="https://elastalert.readthedocs.io/en/latest/elastalert.html找到它的使用说明。在今天的教程中，我将一步一步地介绍如何搭配环境，并从Elasticsearch发送通知给Slack。" target="_blank" rel="noopener">https://elastalert.readthedocs.io/en/latest/elastalert.html找到它的使用说明。在今天的教程中，我将一步一步地介绍如何搭配环境，并从Elasticsearch发送通知给Slack。</a></p><p>为了说明问题的方便，我的环境如下：</p><p><img src="https://img-blog.csdnimg.cn/20200103151218333.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9lbGFzdGljc3RhY2suYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt></p><p>在我的环境中，我使用iMac电脑运行Elasticsearch及Kibana，而在另外一个虚拟机上运行我们的filebeat。filebeat把Ubuntu机器里的syslog传入到Elasticsearch中供分析，同时ElastAlert周期性地从Elasticsearch中获取数据，并依据制定的规则来发送通知。</p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><h2 id="创建Slack账号"><a href="#创建Slack账号" class="headerlink" title="创建Slack账号"></a>创建Slack账号</h2><p>我们首先需要创建一个自己的Slack账号，并具有自己的管理员权限。你可以参考链接 “Configuring Slack Account”来配置自己的Slack账号，并生成一个相应的一个Webhook URL。这个URL将会在Elasticsearch里进行使用。</p><p><img src="https://img-blog.csdnimg.cn/20200103151546187.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9lbGFzdGljc3RhY2suYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt></p><p><img src="https://img-blog.csdnimg.cn/20191127195419804.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9lbGFzdGljc3RhY2suYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt></p><p>我们先把上面创建的webhook url记下来供下面的配置使用。</p><a id="more"></a><p>安装Elasticsearch<br>我们可以按照“如何在Linux，MacOS及Windows上进行安装Elasticsearch”介绍的那样安装好我们的Elasticsearch。不过由于我们需要使我们的Elasticsearch被另外一个虚拟机所见，在这里我们需要对我们的Elasticsearch进行配置。首先使用一个编辑器打开在config目录下的elasticsearch.yml配置文件。我们需要修改network.host的IP地址。在你的Mac及Linux机器上，我们可以使用:</p><p><code>$ ifconfig</code><br>来查看到我们的机器的IP地址。针对我的情况，我的机器的IP地址是：10.211.55.2。</p><p><img src="https://img-blog.csdnimg.cn/20200103152501838.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9lbGFzdGljc3RhY2suYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt></p><p>等修改完我们的IP地址后，我们保存elasticsearch.yml文件。然后重新运行我们的elasticsearch。我们可以在一个浏览器中输入刚才输入的IP地址并加上端口号9200。这样可以查看一下我们的elasticsearch是否已经正常运行了。</p><p><img src="https://img-blog.csdnimg.cn/20200103152848576.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9lbGFzdGljc3RhY2suYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt></p><h2 id="安装Kibana"><a href="#安装Kibana" class="headerlink" title="安装Kibana"></a>安装Kibana</h2><p>我们可以按照“如何在Linux，MacOS及Windows上安装Elastic栈中的Kibana”中介绍的那样来安装我们的Kibana。由于我们的Elasticsearch的IP地址已经改变，所以我们必须修改我们的Kibana的配置文件。我们使用自己喜欢的编辑器打开在config目录下的kibana.yml文件，并找到server.host。把它的值修改为自己的电脑的IP地址。针对我的情况是：</p><p><img src="https://img-blog.csdnimg.cn/20200103153317936.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9lbGFzdGljc3RhY2suYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt></p><p>同时找到elasticsearch.hosts，并把自己的IP地址输入进去：</p><p><img src="https://img-blog.csdnimg.cn/20200103153457809.png" alt></p><p>保存我们的kibana.yml文件，并运行我们的Kibana。同时在浏览器的地址中输入自己的IP地址及5601端口：</p><p><img src="https://img-blog.csdnimg.cn/20200103153705326.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9lbGFzdGljc3RhY2suYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt></p><p>如果配置成功的话，我们就可以看到上面的画面。</p><h2 id="安装Ubuntu虚拟机"><a href="#安装Ubuntu虚拟机" class="headerlink" title="安装Ubuntu虚拟机"></a>安装Ubuntu虚拟机</h2><p>这个不在我的这个教程之内。在网上我们可以找到许多的教程教我们如何安装Ubuntu虚拟机。</p><h2 id="安装filebeat"><a href="#安装filebeat" class="headerlink" title="安装filebeat"></a>安装filebeat</h2><p>我们想在Ubuntu机器上安装我们的filebeat来手机system log信息。我们首先打开我们的Kibana。点击左上角的Kibana图标：</p><p><img src="https://img-blog.csdnimg.cn/20200103154143844.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9lbGFzdGljc3RhY2suYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt></p><p>点击“Add log data”按钮：</p><p><img src="https://img-blog.csdnimg.cn/20200103154248881.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9lbGFzdGljc3RhY2suYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt></p><p>然后点击“System logs”</p><p><img src="https://img-blog.csdnimg.cn/20200103154358461.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9lbGFzdGljc3RhY2suYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt></p><p>由于Ubuntu是debian系统，我们选择DEB。安装上面的步骤一步一步地进行安装。在配置filebeat.yml时，我们需要把我们的IP地址输入到相应的地方：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">output.elasticsearch:</span><br><span class="line">  hosts: [&quot;http://10.211.55.2:9200&quot;]</span><br><span class="line">  username: &quot;elastic&quot;</span><br><span class="line">  password: &quot;123456&quot;</span><br><span class="line">setup.kibana:</span><br><span class="line">  host: &quot;10.211.55.2:5601&quot;</span><br></pre></td></tr></table></figure><p></p><p>上面是我的配置情况。你可以根据自己的实际的IP地址进行配置。当我们成功地启动filebeat服务后，我们可以通过如下的命令来检查我们的服务是否已经成功运行：</p><p><code>sudo systemctl status filebeat</code></p><h2 id="安装ElastAlert"><a href="#安装ElastAlert" class="headerlink" title="安装ElastAlert"></a>安装ElastAlert</h2><p>我们可以参考链接<a href="https://elastalert.readthedocs.io/en/latest/running_elastalert.html来安装我们的ElastAlert。在这里我们使用python3来运行ElastAlert。首先我们需要在我们的Ubuntu上安装python3。" target="_blank" rel="noopener">https://elastalert.readthedocs.io/en/latest/running_elastalert.html来安装我们的ElastAlert。在这里我们使用python3来运行ElastAlert。首先我们需要在我们的Ubuntu上安装python3。</a></p><p>我们安装如下的步骤进行安装：</p><p>1） 下载elastalert源码：</p><p><code>git clone https://github.com/Yelp/elastalert.git</code><br>2）安装模块：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo pip3 install &quot;setuptools&gt;=11.3&quot;</span><br><span class="line">sudo python3 setup.py install</span><br><span class="line">sudo pip3 install -U PyYAML</span><br></pre></td></tr></table></figure><p></p><p>根据Elasticsearch的版本，您可能需要手动安装正确版本的elasticsearch-py。</p><p>Elasticsearch 5.0+:<br><code>sudo pip3 install &quot;elasticsearch&gt;=5.0.0&quot;</code></p><p>Elasticsearch 2.X:<br><code>sudo pip3 install &quot;elasticsearch&lt;3.0.0&quot;</code><br>这样我们的安装工作就完成了。</p><h1 id="配置ElastAlert"><a href="#配置ElastAlert" class="headerlink" title="配置ElastAlert"></a>配置ElastAlert</h1><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>我们可以在ElastAlert源码文件的根目录下找到一个叫做config.yaml.example的文件：</p><p><img src="https://img-blog.csdnimg.cn/20200103160412856.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9lbGFzdGljc3RhY2suYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt></p><p>我们可以把这个文件修改为config.yaml文件：</p><p><code>mv config.yaml.example config.yaml</code><br>我们使用我们喜欢的编辑器打开这个文件，并修改这个文件：</p><p><img src="https://img-blog.csdnimg.cn/20200103161036498.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9lbGFzdGljc3RhY2suYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt></p><p>我们可以根据自己的IP地址来进行修改。如果我们对Elasticsearch做了安全设置，我们同时也需要填写用户名及密码：</p><p><img src="https://img-blog.csdnimg.cn/202001031613262.png" alt></p><p>做完上面的修改后，我们保存config.yaml文件。</p><h2 id="配置Elasticsearch"><a href="#配置Elasticsearch" class="headerlink" title="配置Elasticsearch"></a>配置Elasticsearch</h2><p>ElastAlert将有关其查询和警报的信息和元数据保存回Elasticsearch。 这对于审核和调试很有用，它使ElastAlert可以重新启动并完全从中断处恢复。 ElastAlert不需要运行，但强烈建议使用。</p><p>首先，我们需要通过运行elastalert-create-index并按照说明为ElastAlert创建要写入的索引。我们进入到ElastAlert的源码根目录，并打入如下的命令：</p><p><code>elastalert-create-index</code></p><h2 id="创建rule"><a href="#创建rule" class="headerlink" title="创建rule"></a>创建rule</h2><p>每个规则都定义要执行的查询，触发匹配的参数以及每个匹配要触发的警报列表。 我们将使用example_rules/example_frequency.yaml作为模板。我们删除其中一些不需要的项目，最终的文件是这样的：</p><p>example_frequency.yaml<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"># Alert when the rate of events exceeds a threshold</span><br><span class="line"> </span><br><span class="line"># Elasticsearch host</span><br><span class="line">es_host: 10.211.55.2</span><br><span class="line"> </span><br><span class="line"># Elasticsearch port</span><br><span class="line">es_port: 9200</span><br><span class="line"> </span><br><span class="line"># (OptionaL) Connect with SSL to Elasticsearch</span><br><span class="line">#use_ssl: True</span><br><span class="line"> </span><br><span class="line"># (Optional) basic-auth username and password for Elasticsearch</span><br><span class="line">es_username: &quot;elastic&quot;</span><br><span class="line">es_password: &quot;123456&quot;</span><br><span class="line"> </span><br><span class="line"># (Required)</span><br><span class="line"># Rule name, must be unique</span><br><span class="line">name: Slack demo</span><br><span class="line"> </span><br><span class="line"># (Required)</span><br><span class="line"># Type of alert.</span><br><span class="line"># the frequency rule type alerts when num_events events occur with timeframe time</span><br><span class="line">type: frequency</span><br><span class="line"> </span><br><span class="line"># (Required)</span><br><span class="line"># Index to search, wildcard supported</span><br><span class="line">index: filebeat-*</span><br><span class="line"> </span><br><span class="line"># (Required, frequency specific)</span><br><span class="line"># Alert when this many documents matching the query occur within a timeframe</span><br><span class="line">num_events: 3</span><br><span class="line"> </span><br><span class="line"># (Required, frequency specific)</span><br><span class="line"># num_events must occur within this amount of time to trigger an alert</span><br><span class="line">timeframe:</span><br><span class="line">  hours: 1</span><br><span class="line"> </span><br><span class="line"># (Required)</span><br><span class="line"># A list of Elasticsearch filters used for find events</span><br><span class="line"># These filters are joined with AND and nested in a filtered query</span><br><span class="line"># For more info: http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/query-dsl.html</span><br><span class="line">filter:</span><br><span class="line">- term:</span><br><span class="line">    process.name: &quot;JUSTME&quot;</span><br><span class="line"> </span><br><span class="line"># (Required)</span><br><span class="line"># The alert is use when a match is found</span><br><span class="line">alert:</span><br><span class="line">- &quot;slack&quot;</span><br><span class="line"> </span><br><span class="line"># (required, email specific)</span><br><span class="line"># a list of email addresses to send alerts to</span><br><span class="line">slack:</span><br><span class="line">slack_webhook_url: Your_Webhook_Url</span><br><span class="line">slack_username_override: &quot;liuxg&quot;</span><br></pre></td></tr></table></figure><p></p><p>在上面请修改es_host为自己的IP地址，同时也需要把自己的webhook url写入到slack_webhook_url中去。在上面我们使用index为<code>filebeat-*</code>作为查询的索引，同时我们使用一个filter。它检查process.name是否为JUSTME字符串。如果是，并且在1个小时（timeframe）里出现3次（num_events），那么将触发通知。</p><h2 id="测试rule"><a href="#测试rule" class="headerlink" title="测试rule"></a>测试rule</h2><p>运行elastalert-test-rule工具将测试您的配置文件是否成功加载并在过去的24小时内以调试模式运行它：</p><p><code>elastalert-test-rule example_rules/example_frequency.yaml</code></p><p><img src="https://img-blog.csdnimg.cn/20200103162940882.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9lbGFzdGljc3RhY2suYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt></p><h2 id="运行ElastAlert"><a href="#运行ElastAlert" class="headerlink" title="运行ElastAlert"></a>运行ElastAlert</h2><p>我们使用Python来直接运行Elastalert：</p><p><code>python3 -m elastalert.elastalert --verbose --rule example_frequency.yaml</code></p><p><img src="https://img-blog.csdnimg.cn/20200103163151722.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9lbGFzdGljc3RhY2suYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt></p><p>这样我们的Elastalert已经被成功运行起来了。我们在这个时候可以打开我们的Kibana来监视<code>filebeat-*</code>索引，如果在一个小时内有三次process.name信息有JUSTME字样，那么我们就会在我们的Slack里收到一个通知。</p><p>我们在Ubuntu中打开另外的一个terminal，并输入如下的命令：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo logger -t JUSTME this is message 1</span><br><span class="line">sudo logger -t JUSTME this is message 2</span><br><span class="line">sudo logger -t JUSTME this is message 3</span><br></pre></td></tr></table></figure><p></p><p>那么我们可以打开Kibana查看这些消息：</p><p><img src="https://img-blog.csdnimg.cn/20200103163834845.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9lbGFzdGljc3RhY2suYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt></p><p>那么这个时候，在我们的Slack中，我们可以看到如下的消息：</p><p><img src="https://img-blog.csdnimg.cn/20200103163953566.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9lbGFzdGljc3RhY2suYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt></p><p>我们收到了我们所需要的通知信息。我们也可以把通知写入到我们的邮件中去。这个由你们自己来实践了。在Elastalert的官方网站上，我们可以看到很多的通知类型。详细地址为<a href="https://elastalert.readthedocs.io/en/latest/ruletypes.html" target="_blank" rel="noopener">https://elastalert.readthedocs.io/en/latest/ruletypes.html</a></p><p><img src="https://img-blog.csdnimg.cn/20200103164257973.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9lbGFzdGljc3RhY2suYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt></p><p>————————————————<br>版权声明：本文为CSDN博主「Elastic 中国社区官方博客」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/UbuntuTouch/article/details/103820572" target="_blank" rel="noopener">https://blog.csdn.net/UbuntuTouch/article/details/103820572</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Jan 06 2020 17:30:42 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;ElastAlert是一个简单的框架，用于从Elasticsearch中的数据中发出异常，尖峰或其他感兴趣模式的警报。我们可以在地址&lt;a href=&quot;https://elastalert.readthedocs.io/en/latest/elastalert.html找到它的使用说明。在今天的教程中，我将一步一步地介绍如何搭配环境，并从Elasticsearch发送通知给Slack。&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://elastalert.readthedocs.io/en/latest/elastalert.html找到它的使用说明。在今天的教程中，我将一步一步地介绍如何搭配环境，并从Elasticsearch发送通知给Slack。&lt;/a&gt;&lt;/p&gt;&lt;p&gt;为了说明问题的方便，我的环境如下：&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200103151218333.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9lbGFzdGljc3RhY2suYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70&quot; alt&gt;&lt;/p&gt;&lt;p&gt;在我的环境中，我使用iMac电脑运行Elasticsearch及Kibana，而在另外一个虚拟机上运行我们的filebeat。filebeat把Ubuntu机器里的syslog传入到Elasticsearch中供分析，同时ElastAlert周期性地从Elasticsearch中获取数据，并依据制定的规则来发送通知。&lt;/p&gt;&lt;h1 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; title=&quot;准备工作&quot;&gt;&lt;/a&gt;准备工作&lt;/h1&gt;&lt;h2 id=&quot;创建Slack账号&quot;&gt;&lt;a href=&quot;#创建Slack账号&quot; class=&quot;headerlink&quot; title=&quot;创建Slack账号&quot;&gt;&lt;/a&gt;创建Slack账号&lt;/h2&gt;&lt;p&gt;我们首先需要创建一个自己的Slack账号，并具有自己的管理员权限。你可以参考链接 “Configuring Slack Account”来配置自己的Slack账号，并生成一个相应的一个Webhook URL。这个URL将会在Elasticsearch里进行使用。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200103151546187.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9lbGFzdGljc3RhY2suYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70&quot; alt&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20191127195419804.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9lbGFzdGljc3RhY2suYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70&quot; alt&gt;&lt;/p&gt;&lt;p&gt;我们先把上面创建的webhook url记下来供下面的配置使用。&lt;/p&gt;
    
    </summary>
    
      <category term="elk" scheme="https://yongnights.github.io/categories/elk/"/>
    
    
      <category term="elk" scheme="https://yongnights.github.io/tags/elk/"/>
    
  </entry>
  
  <entry>
    <title>不给字段创建索引，字段不存放在source中，字段无法聚合查询等</title>
    <link href="https://yongnights.github.io/2020/01/06/%E4%B8%8D%E7%BB%99%E5%AD%97%E6%AE%B5%E5%88%9B%E5%BB%BA%E7%B4%A2%E5%BC%95%EF%BC%8C%E5%AD%97%E6%AE%B5%E4%B8%8D%E5%AD%98%E6%94%BE%E5%9C%A8source%E4%B8%AD%EF%BC%8C%E5%AD%97%E6%AE%B5%E6%97%A0%E6%B3%95%E8%81%9A%E5%90%88%E6%9F%A5%E8%AF%A2%E7%AD%89/"/>
    <id>https://yongnights.github.io/2020/01/06/不给字段创建索引，字段不存放在source中，字段无法聚合查询等/</id>
    <published>2020-01-06T09:27:32.179Z</published>
    <updated>2020-01-06T09:28:19.463Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Jan 06 2020 17:30:42 GMT+0800 (GMT+08:00) --><ol><li>某个字段不被搜索，也就是说不想为这个字段建立inverted index(反向索引)，可以这么做：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">PUT twitter</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">      &quot;uid&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;long&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;user&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;object&quot;,</span><br><span class="line">        &quot;enabled&quot;: false</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>通过mapping对user字段进行了修改：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;user&quot;: &#123;</span><br><span class="line">    &quot;type&quot;: &quot;object&quot;,</span><br><span class="line">    &quot;enabled&quot;: false</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p></p><a id="more"></a><p>不想我们的整个文档被搜索:<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">PUT twitter </span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;enabled&quot;: false </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><ol start="2"><li>不想存储任何的字段,也就是说不在<code>source</code>中存储数据,它有完好的inverted index供查询，虽然它没有字的source。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">PUT twitter</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;_source&quot;: &#123;</span><br><span class="line">      &quot;enabled&quot;: false</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>想节省自己的存储空间，只存储那些需要的字段到source里去<br>使用include来包含我们想要的字段，同时我们通过exclude来去除那些不需要的字段<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">PUT twitter</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;_source&quot;: &#123;</span><br><span class="line">      &quot;includes&quot;: [</span><br><span class="line">        &quot;*.lat&quot;,</span><br><span class="line">        &quot;address&quot;,</span><br><span class="line">        &quot;name.*&quot;</span><br><span class="line">      ],</span><br><span class="line">      &quot;excludes&quot;: [</span><br><span class="line">        &quot;name.surname&quot;</span><br><span class="line">      ]</span><br><span class="line">    &#125;    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><ol start="3"><li>默认情况下，所有支持doc值的字段均已启用它们。如果您确定不需要对字段进行排序或汇总，也不需要通过脚本访问字段值，则可以禁用doc值以节省磁盘空间：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">PUT twitter</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;properties&quot;: &#123;</span><br><span class="line">      &quot;city&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;keyword&quot;,</span><br><span class="line">        &quot;doc_values&quot;: false,</span><br><span class="line">        &quot;ignore_above&quot;: 256</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;address&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">        &quot;fields&quot;: &#123;</span><br><span class="line">          &quot;keyword&quot;: &#123;</span><br><span class="line">            &quot;type&quot;: &quot;keyword&quot;,</span><br><span class="line">            &quot;ignore_above&quot;: 256</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;age&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;long&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>把city字段的doc_values设置为false</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Jan 06 2020 17:30:42 GMT+0800 (GMT+08:00) --&gt;&lt;ol&gt;&lt;li&gt;某个字段不被搜索，也就是说不想为这个字段建立inverted index(反向索引)，可以这么做：&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;PUT twitter&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;quot;mappings&amp;quot;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;quot;uid&amp;quot;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;quot;type&amp;quot;: &amp;quot;long&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;quot;user&amp;quot;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;quot;type&amp;quot;: &amp;quot;object&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;quot;enabled&amp;quot;: false&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;通过mapping对user字段进行了修改：&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;quot;user&amp;quot;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;quot;type&amp;quot;: &amp;quot;object&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;quot;enabled&amp;quot;: false&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="elk" scheme="https://yongnights.github.io/categories/elk/"/>
    
    
      <category term="elk" scheme="https://yongnights.github.io/tags/elk/"/>
    
  </entry>
  
  <entry>
    <title>X-Pack：创建阈值检查警报</title>
    <link href="https://yongnights.github.io/2020/01/02/X-Pack%EF%BC%9A%E5%88%9B%E5%BB%BA%E9%98%88%E5%80%BC%E6%A3%80%E6%9F%A5%E8%AD%A6%E6%8A%A5/"/>
    <id>https://yongnights.github.io/2020/01/02/X-Pack：创建阈值检查警报/</id>
    <published>2020-01-02T02:51:19.434Z</published>
    <updated>2020-01-02T02:50:40.880Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Jan 02 2020 10:53:05 GMT+0800 (GMT+08:00) --><p>简单的事情应该简单(Simple things should be simple)，这是Elastic {ON} ‘17的主题之一，Elastics收到了许多关于使用简单易用的UI创建警报的请求。事实证明，创建单个UI以对所有类型的警报均有效地工作非常困难。例如，可以在平均CPU使用率超过50％时创建警报的UI与可以在同一IP地址上有许多并发登录的情况下创建警报的UI看起来截然不同。</p><p>由于很难为所有类型的警报构建通用的UI，因此Elastic决定首先针对最常请求的警报处理UI：当指标超过或低于给定阈值时触发的简单阈值警报。</p><p>在开始示例之前，请确保您具有最低版本的Elasticsearch和Kibana的6.0.0版本，并且两者都安装了X-Pack。在最新的7.x版本里，X-Pack已经是发布版的一部分，不需要安装。另外，请确保您为Elasticsearch配置了具有足够权限的用户。现在，我们需要一些有趣的数据来构建警报。 Metricbeat是监视机器上的系统和用户进程的绝佳拍子。</p><p>在今天的练习里，我们来展示如何通过阈值检查，并发送通知到Slack。大家也可以尝试发送到电子邮件等方式。</p><h1 id="创建Slack账号"><a href="#创建Slack账号" class="headerlink" title="创建Slack账号"></a>创建Slack账号</h1><p>我们首先需要创建一个自己的Slack账号(<a href="https://slack.com/)，并具有自己的管理员权限。你可以参考链接" target="_blank" rel="noopener">https://slack.com/)，并具有自己的管理员权限。你可以参考链接</a> “Configuring Slack Account”(<a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.5/actions-slack.html#configuring-slack)来配置自己的Slack账号，并生成一个相应的一个Webhook" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/7.5/actions-slack.html#configuring-slack)来配置自己的Slack账号，并生成一个相应的一个Webhook</a> URL。这个URL将会在Elasticsearch里进行使用。</p><p><img src="https://img-blog.csdnimg.cn/20191127195419804.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9lbGFzdGljc3RhY2suYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt></p><a id="more"></a><h1 id="配置elasticsearch-yml"><a href="#配置elasticsearch-yml" class="headerlink" title="配置elasticsearch.yml"></a>配置elasticsearch.yml</h1><p>首先watcher必须是在有账号的情况下才可以工作的。如果你还不知道如何开通一个Elasticsearch的安全，那么请参阅我之前的文章“Elasticsearch：设置Elastic账户安全”。</p><p>因为这是一个付费的功能，你需要接受30天试用的条件才可以看到这个功能。为了能够使得watcher能够正常工作，我们必须配置elasticsearch.yml文件。打开elasticsearch安装目录下的config/elasticsearch.yml文件，并加入如下的配置：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">xpack.security.enabled: true</span><br><span class="line">discovery.type: single-node</span><br><span class="line"> </span><br><span class="line">xpack.notification.slack:</span><br><span class="line">  account:</span><br><span class="line">    monitoring:</span><br><span class="line">      message_defaults:</span><br><span class="line">        from: x-pack</span><br><span class="line">        to: notifications</span><br><span class="line">        icon: http://example.com/images/watcher-icon.jpg</span><br><span class="line">        attachment:</span><br><span class="line">          fallback: &quot;X-Pack Notification&quot;</span><br><span class="line">          color: &quot;#36a64f&quot;</span><br><span class="line">          title: &quot;X-Pack Notification&quot;</span><br><span class="line">          title_link: &quot;https://www.elastic.co/guide/en/x-pack/current/index.html&quot;</span><br><span class="line">          text: &quot;One of your watches generated this notification.&quot;</span><br><span class="line">          mrkdwn_in: &quot;pretext, text&quot;</span><br></pre></td></tr></table></figure><p></p><p>前面的两行是为了启动安全功能才进行加入的。后面的关于xpack的配置才是为watcher而设置的。</p><p>配置好我们的elasticsearch.yml文件后，我们在命令行中打入如下的命令：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/elasticsearch-keystore add xpack.notification.slack.account.monitoring.secure_url</span><br></pre></td></tr></table></figure><p></p><p><img src="https://img-blog.csdnimg.cn/20191127200617521.png" alt></p><p>在这里，我们选择y。如果你是第一次运行这个命令的话，就不会有这样的一个提示了。你可以把你从Slack中配置的那个Webhook URL复制并粘贴到这里。这样我们的配置就完成了。然后，我们启动Elasticsearch。</p><h1 id="安装及配置Metricbeat"><a href="#安装及配置Metricbeat" class="headerlink" title="安装及配置Metricbeat"></a>安装及配置Metricbeat</h1><p>只启动system模块即可。等安装好Metricbeat后，就可启动我们的metricbeat了。</p><h1 id="配置Watcher"><a href="#配置Watcher" class="headerlink" title="配置Watcher"></a>配置Watcher</h1><p>打开浏览器并导航到Kibana。单击侧面导航栏中的“Management”应用程序，然后单击Elasticsearch标题下的Watcher。</p><p><img src="https://img-blog.csdnimg.cn/20191127201722518.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9lbGFzdGljc3RhY2suYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt></p><p>我们点击Create，然后，我们就可以开始配置我们的一个watcher了。我们选择Create threashold alert:</p><p><img src="https://img-blog.csdnimg.cn/2019112720205415.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9lbGFzdGljc3RhY2suYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt></p><p>然后，我们可以按照上面的配置进行设置。再点击“Add action”：<br><img src="https://img-blog.csdnimg.cn/20191127202236826.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9lbGFzdGljc3RhY2suYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt></p><p>我们选择Slack作为我们的通知方法。里面还有其它的几种方式，你们可以自己去尝试。</p><p><img src="https://img-blog.csdnimg.cn/20191127202534897.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9lbGFzdGljc3RhY2suYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt></p><p>我们可以选择Send a sample message按钮来测试一下我们的Slack配置是否成功。最后，我们选择Create alert。这样就创建了一个Watcher。</p><p><img src="https://img-blog.csdnimg.cn/20191127202744758.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9lbGFzdGljc3RhY2suYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt></p><p>我们可以在Watcher页面看到我们配置的每个Watcher。上面显示我们的其中的一个watcher已经发送通知了，而且是4分钟之前发送的。我们可以在我们的Slack界面看到如下的消息：</p><p><img src="https://img-blog.csdnimg.cn/20191127203110256.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9lbGFzdGljc3RhY2suYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt></p><p>我们可以看到许多的通知信息不断地进来。它表明我们的配置是已经成功了。</p><p>上面我们通过Kibana的界面配置了Watcher。事实上，我们也可以通过API的方式来配置。请详细阅读我们的文档(<a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.5/how-watcher-works.html)。" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/7.5/how-watcher-works.html)。</a></p><p>参考：</p><p>【1】<a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.5/how-watcher-works.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/7.5/how-watcher-works.html</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Thu Jan 02 2020 10:53:05 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;简单的事情应该简单(Simple things should be simple)，这是Elastic {ON} ‘17的主题之一，Elastics收到了许多关于使用简单易用的UI创建警报的请求。事实证明，创建单个UI以对所有类型的警报均有效地工作非常困难。例如，可以在平均CPU使用率超过50％时创建警报的UI与可以在同一IP地址上有许多并发登录的情况下创建警报的UI看起来截然不同。&lt;/p&gt;&lt;p&gt;由于很难为所有类型的警报构建通用的UI，因此Elastic决定首先针对最常请求的警报处理UI：当指标超过或低于给定阈值时触发的简单阈值警报。&lt;/p&gt;&lt;p&gt;在开始示例之前，请确保您具有最低版本的Elasticsearch和Kibana的6.0.0版本，并且两者都安装了X-Pack。在最新的7.x版本里，X-Pack已经是发布版的一部分，不需要安装。另外，请确保您为Elasticsearch配置了具有足够权限的用户。现在，我们需要一些有趣的数据来构建警报。 Metricbeat是监视机器上的系统和用户进程的绝佳拍子。&lt;/p&gt;&lt;p&gt;在今天的练习里，我们来展示如何通过阈值检查，并发送通知到Slack。大家也可以尝试发送到电子邮件等方式。&lt;/p&gt;&lt;h1 id=&quot;创建Slack账号&quot;&gt;&lt;a href=&quot;#创建Slack账号&quot; class=&quot;headerlink&quot; title=&quot;创建Slack账号&quot;&gt;&lt;/a&gt;创建Slack账号&lt;/h1&gt;&lt;p&gt;我们首先需要创建一个自己的Slack账号(&lt;a href=&quot;https://slack.com/)，并具有自己的管理员权限。你可以参考链接&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://slack.com/)，并具有自己的管理员权限。你可以参考链接&lt;/a&gt; “Configuring Slack Account”(&lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/7.5/actions-slack.html#configuring-slack)来配置自己的Slack账号，并生成一个相应的一个Webhook&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.elastic.co/guide/en/elasticsearch/reference/7.5/actions-slack.html#configuring-slack)来配置自己的Slack账号，并生成一个相应的一个Webhook&lt;/a&gt; URL。这个URL将会在Elasticsearch里进行使用。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20191127195419804.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9lbGFzdGljc3RhY2suYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="elk" scheme="https://yongnights.github.io/categories/elk/"/>
    
    
      <category term="elk" scheme="https://yongnights.github.io/tags/elk/"/>
    
  </entry>
  
  <entry>
    <title>Solutions：如何运用Elastic App Search快速建立出色的React搜索体验</title>
    <link href="https://yongnights.github.io/2020/01/02/Solutions%EF%BC%9A%E5%A6%82%E4%BD%95%E8%BF%90%E7%94%A8Elastic%20App%20Search%E5%BF%AB%E9%80%9F%E5%BB%BA%E7%AB%8B%E5%87%BA%E8%89%B2%E7%9A%84React%E6%90%9C%E7%B4%A2%E4%BD%93%E9%AA%8C/"/>
    <id>https://yongnights.github.io/2020/01/02/Solutions：如何运用Elastic App Search快速建立出色的React搜索体验/</id>
    <published>2020-01-02T02:51:19.432Z</published>
    <updated>2020-01-02T02:50:19.944Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Jan 02 2020 10:53:05 GMT+0800 (GMT+08:00) --><p>建立搜索体验是一项艰苦的工作。 乍一看似乎很容易：建立一个搜索栏，将数据放入数据库，然后让用户输入对该数据库的查询。 但是，在数据建模，底层逻辑以及（当然）总体设计和用户体验方面，有很多事情要考虑。</p><p>我们将逐步介绍如何使用Elastic的开源Search UI库构建出色的基于React的搜索体验。 大约需要30分钟，然后您便可以将搜索带到需要它的任何应用程序中。</p><p>但是首先，是什么使创建搜索如此具有挑战性？</p><h1 id="搜索是很难创建的"><a href="#搜索是很难创建的" class="headerlink" title="搜索是很难创建的"></a>搜索是很难创建的</h1><p>开发人员在搜索开发中采用许多错误的假设。比如许多相信的假设：</p><ul><li>“知道他们要寻找的客户将按照您期望的方式进行搜索。”</li><li>“您可以编写一个查询解析器，该解析器将始终成功解析查询。”</li><li>“一旦设置，下周搜索将以相同的方式进行。”</li><li>“同义词很容易。”</li><li>…</li></ul><p>得出的结论是，搜索面临许多挑战–而且这些挑战并不简单。 您需要考虑如何管理状态，构建用于过滤，构面，排序，分页，同义词，语言处理等等的组件，等等。 但是，总而言之：</p><p>建立出色的搜索需要两个复杂的部分：</p><p>(1)搜索引擎，它提供用于增强搜索功能的API<br>(2)搜索库，它描绘了搜索体验。</p><p>对于搜索引擎，我们将查看Elastic App Search。</p><p>为了获得搜索体验，我们将介绍一个操作系统搜索库：Search UI。</p><p>完成后，将如下所示。您也可以在地址(<a href="https://codesandbox.io/embed/happy-wilbur-hwzsh?view=preview&amp;initialpath=%3Fq%3Dfinal%20fantasy)上进行在线体验。" target="_blank" rel="noopener">https://codesandbox.io/embed/happy-wilbur-hwzsh?view=preview&amp;initialpath=%3Fq%3Dfinal%20fantasy)上进行在线体验。</a></p><a id="more"></a><h1 id="搜索引擎-Elastic-App-Search"><a href="#搜索引擎-Elastic-App-Search" class="headerlink" title="搜索引擎: Elastic App Search"></a>搜索引擎: Elastic App Search</h1><p>App Search可作为付费托管服务或免费的自助托管发行版(<a href="https://www.elastic.co/downloads/app-search?ultron=searchui-howto-react&amp;blade=codeburst&amp;hulk=content)提供。" target="_blank" rel="noopener">https://www.elastic.co/downloads/app-search?ultron=searchui-howto-react&amp;blade=codeburst&amp;hulk=content)提供。</a> 我们将在本教程中使用托管服务，但是请记住，如果您自己托管，您的团队可以免费使用带有基本许可的Search UI和App Search。</p><p>计划：将代表有史以来最好的视频游戏的文档编入搜索引擎，然后设计和优化搜索体验以对其进行搜索。</p><p>首先，注册14天的试用期(<a href="https://www.elastic.co/products/app-search/service?ultron=searchui-howto-react&amp;blade=codeburst&amp;hulk=content)-无需信用卡。" target="_blank" rel="noopener">https://www.elastic.co/products/app-search/service?ultron=searchui-howto-react&amp;blade=codeburst&amp;hulk=content)-无需信用卡。</a></p><p>创建一个引擎。 您可以选择13种不同的语言。</p><p>我们将其命名为video-games，并将语言设置为英语。</p><p><img src="https://img-blog.csdnimg.cn/20191116192801149.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9lbGFzdGljc3RhY2suYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt></p><p>下载最佳视频游戏数据集(<a href="https://drive.google.com/file/d/14-3wzemyLzJh6XHVUotFsdl0tZ7K2v1E/view)，然后使用导入程序将其上传到App" target="_blank" rel="noopener">https://drive.google.com/file/d/14-3wzemyLzJh6XHVUotFsdl0tZ7K2v1E/view)，然后使用导入程序将其上传到App</a> Search。</p><p><img src="https://img-blog.csdnimg.cn/20191116193301523.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9lbGFzdGljc3RhY2suYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt></p><p>接下来，单击进入引擎，然后选择“Credentials”选项卡。</p><p>使用仅对video-games引擎具有Limited Engine Access的方式创建新的Public Search Key。</p><p><img src="https://img-blog.csdnimg.cn/20191116193658823.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9lbGFzdGljc3RhY2suYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt></p><p><img src="https://img-blog.csdnimg.cn/20191116194536444.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9lbGFzdGljc3RhY2suYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt></p><p>我们可以记下我们刚创建的Public Search Key及Host Indentifier以便下面之用。</p><p>尽管看起来我们目前做的并不多，但我们现在拥有功能全面的搜索引擎，可以使用完善的搜索API来搜索我们的视频游戏数据。</p><p>到目前为止，这是我们所做的：</p><ul><li>创建了一个搜索引擎</li><li>建立了索引文档</li><li>创建一个默认的索引schema</li><li>创建了一个有限的可以用于外界访问的凭证（credential）</li></ul><p>让我们开始使用“Search UI”来建立我们的搜索体验。</p><h1 id="搜索库：Search-UI"><a href="#搜索库：Search-UI" class="headerlink" title="搜索库：Search UI"></a>搜索库：Search UI</h1><p>我们将使用create-react-app(<a href="https://github.com/facebook/create-react-app)脚手架实用程序创建一个React应用：" target="_blank" rel="noopener">https://github.com/facebook/create-react-app)脚手架实用程序创建一个React应用：</a><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install -g create-react-app</span><br><span class="line">create-react-app video-game-search --use-npm</span><br><span class="line">cd video-game-search</span><br></pre></td></tr></table></figure><p></p><p>在此基础上，我们将安装Search UI和App Search连接器：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save @elastic/react-search-ui @elastic/search-ui-app-search-connector</span><br></pre></td></tr></table></figure><p></p><p>并以开发模式启动该应用程序：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm start</span><br></pre></td></tr></table></figure><p></p><p>在您喜欢的文本编辑器中打开src/App.js</p><p>我们将从一些样板代码开始，注意评论部分！<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">// Step #1, import statements</span><br><span class="line">import React from &quot;react&quot;;</span><br><span class="line">import AppSearchAPIConnector from &quot;@elastic/search-ui-app-search-connector&quot;;</span><br><span class="line">import &#123; SearchProvider, Results, SearchBox &#125; from &quot;@elastic/react-search-ui&quot;;</span><br><span class="line">import &#123; Layout &#125; from &quot;@elastic/react-search-ui-views&quot;;</span><br><span class="line">import &quot;@elastic/react-search-ui-views/lib/styles/styles.css&quot;;</span><br><span class="line">// Step #2, The connector</span><br><span class="line">const connector = new AppSearchAPIConnector(&#123;</span><br><span class="line">  searchKey: &quot;[YOUR_SEARCH_KEY]&quot;,</span><br><span class="line">  engineName: &quot;video-games&quot;,</span><br><span class="line">  hostIdentifier: &quot;[YOUR_HOST_IDENTIFIER]&quot;</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">// Step #3: Configuration options</span><br><span class="line">const configurationOptions = &#123;</span><br><span class="line">  apiConnector: connector</span><br><span class="line">  // Let&apos;s fill this in together.</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">// Step #4, SearchProvider: The finishing touches</span><br><span class="line">export default function App() &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;SearchProvider config=&#123;configurationOptions&#125;&gt;</span><br><span class="line">      &lt;div className=&quot;App&quot;&gt;</span><br><span class="line">        &lt;Layout</span><br><span class="line">        // Let&apos;s fill this in together.</span><br><span class="line">        /&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/SearchProvider&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="Step-1-导入声明"><a href="#Step-1-导入声明" class="headerlink" title="Step 1: 导入声明"></a>Step 1: 导入声明</h2><p>我们需要导入我们的Search UI依赖关系和React。</p><p>核心组件，连接器和视图组件包含在三个不同的程序包中：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@elastic/search-ui-app-search-connector</span><br><span class="line">@elastic/react-search-ui</span><br><span class="line">@elastic/react-search-ui-views</span><br></pre></td></tr></table></figure><p></p><p>继续进行时，我们将详细了解它们<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import React from &quot;react&quot;;</span><br><span class="line">import AppSearchAPIConnector from &quot;@elastic/search-ui-app-search-connector&quot;;</span><br><span class="line">import &#123; SearchProvider, Results, SearchBox &#125; from &quot;@elastic/react-search-ui&quot;;</span><br><span class="line">import &#123; Layout &#125; from &quot;@elastic/react-search-ui-views&quot;;</span><br></pre></td></tr></table></figure><p></p><p>我们还将为该项目导入默认样式表，这将使我们拥有良好的外观，而无需编写我们自己的CSS行：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &quot;@elastic/react-search-ui-views/lib/styles/styles.css&quot;;</span><br></pre></td></tr></table></figure><p></p><h2 id="Step-2-连接器"><a href="#Step-2-连接器" class="headerlink" title="Step 2:  连接器"></a>Step 2: 连接器</h2><p>我们有来自App Search的Public Search Key和Host Identifier。</p><p>是时候让他们工作了！</p><p>Search UI中的连接器对象使用credentials连接到App Search和超级搜索：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const connector = new AppSearchAPIConnector(&#123;</span><br><span class="line">  searchKey: &quot;[YOUR_SEARCH_KEY]&quot;,</span><br><span class="line">  engineName: &quot;video-games&quot;,</span><br><span class="line">  hostIdentifier: &quot;[YOUR_HOST_IDENTIFIER]&quot;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p></p><p>搜索用户界面可与任何搜索API配合使用。 但是通过连接器可以使搜索API正常工作，而无需进行任何更深入的配置。</p><h2 id="Step-3-configurationOptions"><a href="#Step-3-configurationOptions" class="headerlink" title="Step 3: configurationOptions"></a>Step 3: configurationOptions</h2><p>在深入探讨configurationOptions之前，让我们花点时间进行反思。</p><p>我们将一组数据导入了搜索引擎。 但是，它是什么样的数据？</p><p>我们对数据了解的越多，我们就会越了解如何将数据呈现给搜索者。 这样一来，您便可以了解如何配置搜索体验。</p><p>我们来看一个对象，这是该数据集中所有对象中的一个：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123; </span><br><span class="line">  &quot;id&quot;:&quot;final-fantasy-vii-ps-1997&quot;,</span><br><span class="line">  &quot;name&quot;:&quot;Final Fantasy VII&quot;,</span><br><span class="line">  &quot;year&quot;:1997,</span><br><span class="line">  &quot;platform&quot;:&quot;PS&quot;,</span><br><span class="line">  &quot;genre&quot;:&quot;Role-Playing&quot;,</span><br><span class="line">  &quot;publisher&quot;:&quot;Sony Computer Entertainment&quot;,</span><br><span class="line">  &quot;global_sales&quot;:9.72,</span><br><span class="line">  &quot;critic_score&quot;:92,</span><br><span class="line">  &quot;user_score&quot;:9,</span><br><span class="line">  &quot;developer&quot;:&quot;SquareSoft&quot;,</span><br><span class="line">  &quot;image_url&quot;:&quot;https://r.hswstatic.com/w_907/gif/finalfantasyvii-MAIN.jpg&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>我们看到它有几个文本字段，例如name，year，platform等等，还有一些数字字段，例如critic_score，global_sales和user_score。</p><p>如果我们提出三个关键问题，我们将足够了解，以提供扎实的搜索体验：</p><ul><li>大多数人将如何搜索？ 以视频游戏的名称命名。</li><li>大多数人想要看到的结果是什么？ 视频游戏的名称，类型，发行商，得分和平台。</li><li>大多数人将如何过滤，排序和构面？ 按得分，体裁，发布者和平台分类。</li></ul><p>然后，我们可以将这些答案转换为我们的configurationOptions：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">const configurationOptions = &#123;</span><br><span class="line">  apiConnector: connector,</span><br><span class="line">  searchQuery: &#123;</span><br><span class="line">    search_fields: &#123;</span><br><span class="line">      // 1. Search by name of video game.</span><br><span class="line">      name: &#123;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    // 2. Results: name, genre, publisher, scores, and platform.</span><br><span class="line">    result_fields: &#123;</span><br><span class="line">      name: &#123;</span><br><span class="line">        // A snippet means that matching search terms will be wrapped in &lt;em&gt; tags.</span><br><span class="line">        snippet: &#123;</span><br><span class="line">          size: 75, // Limit the snippet to 75 characters.</span><br><span class="line">          fallback: true // Fallback to a &quot;raw&quot; result.</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      genre: &#123;</span><br><span class="line">        snippet: &#123;</span><br><span class="line">          size: 50,</span><br><span class="line">          fallback: true</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      publisher: &#123;</span><br><span class="line">        snippet: &#123;</span><br><span class="line">          size: 50,</span><br><span class="line">          fallback: true</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      critic_score: &#123;</span><br><span class="line">        // Scores are numeric, so we won&apos;t snippet.</span><br><span class="line">        raw: &#123;&#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      user_score: &#123;</span><br><span class="line">        raw: &#123;&#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      platform: &#123;</span><br><span class="line">        snippet: &#123;</span><br><span class="line">          size: 50,</span><br><span class="line">          fallback: true</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      image_url: &#123;</span><br><span class="line">        raw: &#123;&#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    // 3. Facet by scores, genre, publisher, and platform, which we&apos;ll use to build filters later.</span><br><span class="line">    facets: &#123;</span><br><span class="line">      user_score: &#123;</span><br><span class="line">        type: &quot;range&quot;,</span><br><span class="line">        ranges: [</span><br><span class="line">          &#123; from: 0, to: 5, name: &quot;Not good&quot; &#125;,</span><br><span class="line">          &#123; from: 5, to: 7, name: &quot;Not bad&quot; &#125;,</span><br><span class="line">          &#123; from: 7, to: 9, name: &quot;Pretty good&quot; &#125;,</span><br><span class="line">          &#123; from: 9, to: 10, name: &quot;Must play!&quot; &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      critic_score: &#123;</span><br><span class="line">        type: &quot;range&quot;,</span><br><span class="line">        ranges: [</span><br><span class="line">          &#123; from: 0, to: 50, name: &quot;Not good&quot; &#125;,</span><br><span class="line">          &#123; from: 50, to: 70, name: &quot;Not bad&quot; &#125;,</span><br><span class="line">          &#123; from: 70, to: 90, name: &quot;Pretty good&quot; &#125;,</span><br><span class="line">          &#123; from: 90, to: 100, name: &quot;Must play!&quot; &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      genre: &#123; type: &quot;value&quot;, size: 100 &#125;,</span><br><span class="line">      publisher: &#123; type: &quot;value&quot;, size: 100 &#125;,</span><br><span class="line">      platform: &#123; type: &quot;value&quot;, size: 100 &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p></p><p>我们已经将Search UI连接到我们的搜索引擎，现在我们有一些选项可以控制我们如何搜索数据，显示结果并探索这些结果。 但是我们需要一些东西来将所有内容绑定到Search UI的动态前端组件。</p><h2 id="Step-4-SearchProvider"><a href="#Step-4-SearchProvider" class="headerlink" title="Step 4: SearchProvider"></a>Step 4: SearchProvider</h2><p>这是统治所有对象的对象。 SearchProvider是所有其他组件嵌套的地方。</p><p>Search UI提供了一个Layout组件，用于绘制典型的搜索布局。 有很深的自定义选项，但我们不会在本教程中介绍。</p><p>我们将做两件事：</p><ol><li>将configurationOptions传递给SearchProvider。</li><li>将一些结构性构建基块放入Layout中，并添加两个基本组件：SearchBox和Results。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">export default function App() &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;SearchProvider config=&#123;configurationOptions&#125;&gt;</span><br><span class="line">      &lt;div className=&quot;App&quot;&gt;</span><br><span class="line">        &lt;Layout</span><br><span class="line">          header=&#123;&lt;SearchBox /&gt;&#125;</span><br><span class="line">          // titleField is the most prominent field within a result: the result header.</span><br><span class="line">          bodyContent=&#123;&lt;Results titleField=&quot;name&quot; urlField=&quot;image_url&quot; /&gt;&#125;</span><br><span class="line">        /&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/SearchProvider&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>至此，我们已经在前端建立了基础。 在运行此后端之前，还有一些其他细节需要在后端解决。 我们还应该研究相关性模型，以便针对该项目的独特需求微调搜索。</p><h1 id="重新进入搜索平台"><a href="#重新进入搜索平台" class="headerlink" title="重新进入搜索平台"></a>重新进入搜索平台</h1><p>App Search具有强大且完善的搜索引擎功能。 它使曾经复杂的调优变得更加有趣。 只需单击几下，我们便可以进行细粒度的相关性调整和无缝的模式更改。</p><p>我们将首先调整schema以使其实际运行。</p><p>登录到App Search，输入video-games引擎，然后单击“Manage”部分下的“Schema”。</p><p><img src="https://img-blog.csdnimg.cn/2019111620131166.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9lbGFzdGljc3RhY2suYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt></p><p>出现架构。 默认情况下，这11个字段中的每一个均被视为文本。</p><p>在configurationOptions对象中，我们定义了两个范围构面来帮助我们搜索数字：user_score和critic_score。 为了使range facet按预期工作，字段类型必须为数字(number)。</p><p><img src="https://img-blog.csdnimg.cn/2019111620153379.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9lbGFzdGljc3RhY2suYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt></p><p>单击每个字段旁边的下拉菜单，将其更改为数字，然后单击“Update Types”。引擎会即时重新更新索引。 然后，当我们将构面（facet）组件添加到布局中时，范围过滤器将按预期运行。 现在，进入真正的漂亮东西。</p><h2 id="下面的部分是高度相关的"><a href="#下面的部分是高度相关的" class="headerlink" title="下面的部分是高度相关的"></a>下面的部分是高度相关的</h2><p>具有三个关键的相关功能：Synonyms，Curations和Relevance Tuning。</p><p><img src="https://img-blog.csdnimg.cn/20191116202037160.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9lbGFzdGljc3RhY2suYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt></p><p>在边栏中的“Search Settings”部分下选择每个功能：</p><h2 id="Synonyms"><a href="#Synonyms" class="headerlink" title="Synonyms"></a>Synonyms</h2><p>世界各地的人们使用不同的词来形容事物。 同义词可帮助您创建被视为一个或一组相同的术语集。</p><p>就video game搜索引擎而言，我们知道人们会希望找到Final Fantasy。 但是也许他们会改用FF。</p><p>单击进入同义词，然后选择创建同义词集并输入术语：</p><p><img src="https://img-blog.csdnimg.cn/20191116202424195.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9lbGFzdGljc3RhY2suYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt></p><p>单击Save。 您可以根据需要添加任意多个同义词集。</p><p>现在，搜索FF与搜索Final Fantasy的权重相同。</p><h2 id="Curations"><a href="#Curations" class="headerlink" title="Curations"></a>Curations</h2><p>Curations是最最让人喜欢的。 如果有人搜索Final Fantasy或FF，该怎么办？ 系列赛中有很多游戏-他们会得到哪些？</p><p>默认情况下，前五个结果如下所示：</p><p>1.最终幻想VIII<br>2.最终幻想X<br>3.最终幻想策略<br>4.最终幻想IX<br>5.最终幻想XIII</p><p>这似乎不正确……Final Fantasy VII是所有游戏中最好的Final Fantasy游戏。 而且Final Fantasy XIII不是很好！ 😜</p><p>我们可以做到这一点，以便搜索Final Fantasy的人会收到Final Fantasy VII作为第一结果吗？ 我们可以从搜索结果中删除Final Fnatasy XIII吗？</p><p>我们可以！</p><p>单击“Curations”，然后输入查询：“Final Fantasy”。</p><p>接下来，通过抓住表格最左侧的把手将“Final FantasyVII”文档拖到“Promoted Documents”部分。 然后单击“Final Fantasy XIII”文档上的“Hide Result”按钮（那个有一条线穿过眼睛的图标，下图列表中第三个图标）：</p><p><img src="https://img-blog.csdnimg.cn/20191116203344151.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9lbGFzdGljc3RhY2suYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt></p><p>现在，执行“Final Fantasy”或“FF”搜索的任何人都将首先看到“Final Fantasy VII”。</p><p>他们根本看不到Final Fantasy XIII。 哈！</p><p>我们可以升级和隐藏许多文档。 我们甚至可以对升级后的文档进行排序，因此我们可以完全控制每个查询顶部显示的内容。</p><h2 id="Relevance-tuning"><a href="#Relevance-tuning" class="headerlink" title="Relevance tuning"></a>Relevance tuning</h2><p>单击边栏中的“Relevance Tuning”。</p><p>我们搜索一个文本字段：name字段。 但是，如果我们有多个文本字段可供人们搜索，例如name字段和description字段，该怎么办？ 我们正在使用的video game数据集不包含description字段，因此我们假想一些文档以进行仔细考虑。</p><p>说我们的文档看起来像这样：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123; </span><br><span class="line">  &quot;name&quot;:&quot;Magical Quest&quot;,</span><br><span class="line">  &quot;description&quot;: &quot;A dangerous journey through caves and such.&quot; </span><br><span class="line">&#125;,</span><br><span class="line">&#123; </span><br><span class="line">  &quot;name&quot;:&quot;Dangerous Quest&quot;,</span><br><span class="line">  &quot;description&quot;: &quot;A magical journey filled with magical magic. Highly magic.&quot; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>如果有人想找到游戏Magical Quest，他们会输入该内容作为查询。 但是第一个结果将是Dangerous Quest：</p><p><img src="https://img-blog.csdnimg.cn/2019111620413498.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9lbGFzdGljc3RhY2suYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt></p><p>为什么？ 因为在“Dangerous”的description中“Magical”一词出现了3次，所以搜索引擎不会知道一个字段比另一个字段更重要。 然后，它将使“Dangerous Quest”的排名更高。 这就是为什么存在相关性调整的难题。</p><p>我们可以选择一个字段，除其他外，还可以增加其相关性的权重：</p><p><img src="https://img-blog.csdnimg.cn/20191116204408945.gif" alt></p><p>我们看到，当我们增加权重时，正确的项目“ Magical Quest”上升到顶部，因为name字段变得更重要。 我们需要做的就是将滑块拖动到更高的值，然后单击“Save”。</p><p>现在，我们已经使用App Search实现了如下的任务：</p><ul><li>调整schema，并将user_score和critic_score更改为数字字段。</li><li>微调关联（relevance）模型。</li></ul><p>这样就总结出了精美的“仪表板”功能-每个功能都有一个匹配的API端点，如果您不是GUI的用户，则可以使用它们使程序以编程方式工作。</p><p>现在，让我们结束UI。</p><h1 id="最后加工"><a href="#最后加工" class="headerlink" title="最后加工"></a>最后加工</h1><p>此时，您的UI应该可以正常工作了。 尝试一些查询。 首先要说的是，我们缺少探索结果的工具，例如过滤，分面(facet)，排序等，但是搜索有效。 我们需要完善用户界面。</p><p>在初始的src/App.js文件中，我们导入了三个基本组件：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#123; SearchProvider, Results, SearchBox &#125; from &quot;@elastic/react-search-ui&quot;;</span><br></pre></td></tr></table></figure><p></p><p>根据我们为配置选项定义的内容，让我们添加更多内容。</p><p>导入以下组件将启用UI中缺少的功能：</p><ul><li>PagingInfo：在当前页面上显示信息。</li><li>ResultsPerPage：配置每页上显示多少个结果。</li><li>Paging：浏览不同的页面。</li><li>Facet：以数据类型独有的方式过滤和浏览数据。</li><li>Sort：重新定向给定字段的结果。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import &#123;</span><br><span class="line">  PagingInfo,</span><br><span class="line">  ResultsPerPage,</span><br><span class="line">  Paging,</span><br><span class="line">  Facet,</span><br><span class="line">  SearchProvider,</span><br><span class="line">  Results,</span><br><span class="line">  SearchBox,</span><br><span class="line">  Sorting</span><br><span class="line">&#125; from &quot;@elastic/react-search-ui&quot;;</span><br></pre></td></tr></table></figure></li></ul><p>导入后，可以将组件放置到布局中。</p><p>布局组件将页面分为多个部分，可以通过prop将组件放置在这些部分中。</p><p>它包含以下部分：</p><ul><li>header：搜索框/栏</li><li>bodyContent：结果容器</li><li>sideContent：侧边栏，其中包含构面和排序选项</li><li>bodyHeader：围绕结果的“包装器”，其中包含上下文丰富的信息，例如当前页面和每页结果数</li><li>bodyFooter：用于在页面之间快速导航的分页选项</li></ul><p>组件呈现数据。根据我们在configurationOptions中提供的搜索设置获取数据。现在，我们将每个组件放置在适当的布局部分中。</p><p>例如，我们在configurationOptions中描述了五个方面的维度，因此我们将创建五个方面的组件。每个Facet组件都将使用“字段”属性作为返回数据的键。</p><p>我们将它们与我们的Sorting组件一起放在sideContent部分中，然后将Paging，PagingInfo和ResultsPerPage组件放在最适合它们的部分中：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;Layout</span><br><span class="line">  header=&#123;&lt;SearchBox /&gt;&#125;</span><br><span class="line">  bodyContent=&#123;&lt;Results titleField=&quot;name&quot; urlField=&quot;image_url&quot; /&gt;&#125;</span><br><span class="line">  sideContent=&#123;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;Sorting</span><br><span class="line">        label=&#123;&quot;Sort by&quot;&#125;</span><br><span class="line">        sortOptions=&#123;[</span><br><span class="line">          &#123;</span><br><span class="line">            name: &quot;Relevance&quot;,</span><br><span class="line">            value: &quot;&quot;,</span><br><span class="line">            direction: &quot;&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            name: &quot;Name&quot;,</span><br><span class="line">            value: &quot;name&quot;,</span><br><span class="line">            direction: &quot;asc&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        ]&#125;</span><br><span class="line">      /&gt;</span><br><span class="line">      &lt;Facet field=&quot;user_score&quot; label=&quot;User Score&quot; /&gt;</span><br><span class="line">      &lt;Facet field=&quot;critic_score&quot; label=&quot;Critic Score&quot; /&gt;</span><br><span class="line">      &lt;Facet field=&quot;genre&quot; label=&quot;Genre&quot; /&gt;</span><br><span class="line">      &lt;Facet field=&quot;publisher&quot; label=&quot;Publisher&quot; isFilterable=&#123;true&#125; /&gt;</span><br><span class="line">      &lt;Facet field=&quot;platform&quot; label=&quot;Platform&quot; /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &#125;</span><br><span class="line">  bodyHeader=&#123;</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      &lt;PagingInfo /&gt;</span><br><span class="line">      &lt;ResultsPerPage /&gt;</span><br><span class="line">    &lt;/&gt;</span><br><span class="line">  &#125;</span><br><span class="line">  bodyFooter=&#123;&lt;Paging /&gt;&#125;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><p></p><p>现在，让我们看一下本地开发环境中的搜索体验。</p><p>好多了！ 我们提供了丰富的选项来探索搜索结果。</p><p>我们引入了一些额外的好处，例如多种排序选项，并且通过添加单个标志使发布者的面可过滤。 尝试使用空白查询进行搜索并浏览所有选项。</p><p>最后，让我们看一下搜索体验的最后一项功能。 这是一个受欢迎的…</p><h2 id="自动完成-Autocomplete"><a href="#自动完成-Autocomplete" class="headerlink" title="自动完成 (Autocomplete)"></a>自动完成 (Autocomplete)</h2><p>搜索者喜欢自动完成功能，因为它可以提供即时反馈。 它的建议有两种形式：结果和查询。 取决于哪种口味，搜索者将收到相关结果或可能导致结果的潜在查询。</p><p>我们将重点关注自动填充作为一种查询建议形式。</p><p>这需要两个快速更改。</p><p>首先，我们需要将自动完成功能添加到configurationOptions对象中：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">const configurationOptions = &#123;</span><br><span class="line">  autocompleteQuery: &#123;</span><br><span class="line">    suggestions: &#123;</span><br><span class="line">      types: &#123;</span><br><span class="line">        documents: &#123;</span><br><span class="line">          // Which fields to search for suggestions</span><br><span class="line">          fields: [&quot;name&quot;]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      // How many suggestions appear</span><br><span class="line">      size: 5</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p></p><p>其次，我们需要根据SearchBox启用自动填充功能：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">        &lt;Layout</span><br><span class="line">          ...</span><br><span class="line">          header=&#123;&lt;SearchBox autocompleteSuggestions=&#123;true&#125; /&gt;&#125;</span><br><span class="line">/&gt;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p></p><p>是的，就是这样。</p><p>尝试搜索-键入时，将显示自动完成查询建议。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>现在，我们拥有美观的功能性搜索体验。 而且，我们避免了人们在尝试实施搜索时经常会遇到的一堆陷阱。 30分钟还不错，你不是说吗？你可以在地址进行一个完美的体验。</p><p>如果你想进一步动态生成数据集，请参阅文章<a href="https://swiftype.com/documentation/app-search/api/documents#create" target="_blank" rel="noopener">https://swiftype.com/documentation/app-search/api/documents#create</a></p><p>你可以在如下地址找到这个项目的源码：<a href="https://github.com/liu-xiao-guo/swiftype-video-game-search" target="_blank" rel="noopener">https://github.com/liu-xiao-guo/swiftype-video-game-search</a></p><p>参考：</p><p>【1】How to Build Great React Search Experiences Quickly<br>————————————————<br>版权声明：本文为CSDN博主「Elastic官方博客」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/UbuntuTouch/article/details/103101698" target="_blank" rel="noopener">https://blog.csdn.net/UbuntuTouch/article/details/103101698</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Thu Jan 02 2020 10:53:05 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;建立搜索体验是一项艰苦的工作。 乍一看似乎很容易：建立一个搜索栏，将数据放入数据库，然后让用户输入对该数据库的查询。 但是，在数据建模，底层逻辑以及（当然）总体设计和用户体验方面，有很多事情要考虑。&lt;/p&gt;&lt;p&gt;我们将逐步介绍如何使用Elastic的开源Search UI库构建出色的基于React的搜索体验。 大约需要30分钟，然后您便可以将搜索带到需要它的任何应用程序中。&lt;/p&gt;&lt;p&gt;但是首先，是什么使创建搜索如此具有挑战性？&lt;/p&gt;&lt;h1 id=&quot;搜索是很难创建的&quot;&gt;&lt;a href=&quot;#搜索是很难创建的&quot; class=&quot;headerlink&quot; title=&quot;搜索是很难创建的&quot;&gt;&lt;/a&gt;搜索是很难创建的&lt;/h1&gt;&lt;p&gt;开发人员在搜索开发中采用许多错误的假设。比如许多相信的假设：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;“知道他们要寻找的客户将按照您期望的方式进行搜索。”&lt;/li&gt;&lt;li&gt;“您可以编写一个查询解析器，该解析器将始终成功解析查询。”&lt;/li&gt;&lt;li&gt;“一旦设置，下周搜索将以相同的方式进行。”&lt;/li&gt;&lt;li&gt;“同义词很容易。”&lt;/li&gt;&lt;li&gt;…&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;得出的结论是，搜索面临许多挑战–而且这些挑战并不简单。 您需要考虑如何管理状态，构建用于过滤，构面，排序，分页，同义词，语言处理等等的组件，等等。 但是，总而言之：&lt;/p&gt;&lt;p&gt;建立出色的搜索需要两个复杂的部分：&lt;/p&gt;&lt;p&gt;(1)搜索引擎，它提供用于增强搜索功能的API&lt;br&gt;(2)搜索库，它描绘了搜索体验。&lt;/p&gt;&lt;p&gt;对于搜索引擎，我们将查看Elastic App Search。&lt;/p&gt;&lt;p&gt;为了获得搜索体验，我们将介绍一个操作系统搜索库：Search UI。&lt;/p&gt;&lt;p&gt;完成后，将如下所示。您也可以在地址(&lt;a href=&quot;https://codesandbox.io/embed/happy-wilbur-hwzsh?view=preview&amp;amp;initialpath=%3Fq%3Dfinal%20fantasy)上进行在线体验。&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://codesandbox.io/embed/happy-wilbur-hwzsh?view=preview&amp;amp;initialpath=%3Fq%3Dfinal%20fantasy)上进行在线体验。&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="elk" scheme="https://yongnights.github.io/categories/elk/"/>
    
    
      <category term="elk" scheme="https://yongnights.github.io/tags/elk/"/>
    
  </entry>
  
  <entry>
    <title>Logstash 启动监控及集中管理</title>
    <link href="https://yongnights.github.io/2020/01/02/Logstash%20%E5%90%AF%E5%8A%A8%E7%9B%91%E6%8E%A7%E5%8F%8A%E9%9B%86%E4%B8%AD%E7%AE%A1%E7%90%86/"/>
    <id>https://yongnights.github.io/2020/01/02/Logstash 启动监控及集中管理/</id>
    <published>2020-01-02T02:51:19.430Z</published>
    <updated>2020-01-02T02:49:56.800Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Jan 02 2020 10:53:05 GMT+0800 (GMT+08:00) --><p>在本篇文章里，我将详细介绍如果启动Logstash的监控及集中管理。</p><h1 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h1><p>安装好Logstash，设置Elasticsearch及Kibana的安全密码。</p><h1 id="如何监控Logstash"><a href="#如何监控Logstash" class="headerlink" title="如何监控Logstash?"></a>如何监控Logstash?</h1><p>我们安装如下的步骤来实现监控Logstash的目的：</p><h2 id="Step-1-在Kibana中启动监控："><a href="#Step-1-在Kibana中启动监控：" class="headerlink" title="Step 1: 在Kibana中启动监控："></a>Step 1: 在Kibana中启动监控：</h2><p><img src="https://img-blog.csdnimg.cn/20191230151037892.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9lbGFzdGljc3RhY2suYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt></p><p>然后，我们可以看到如下的画面：<br><img src="https://img-blog.csdnimg.cn/20191230151316339.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9lbGFzdGljc3RhY2suYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt></p><a id="more"></a><h2 id="Step-2：配置Logstash"><a href="#Step-2：配置Logstash" class="headerlink" title="Step 2：配置Logstash"></a>Step 2：配置Logstash</h2><p>如果我们在没有配置Logstash的情况下直接运行Logstash，我们会发现如下的错误：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">liuxg-2:logstash-7.5.0 liuxg$ ./bin/logstash</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM warning: Option UseConcMarkSweepGC was deprecated in version 9.0 and will likely be removed in a future release.</span><br><span class="line">WARNING: An illegal reflective access operation has occurred</span><br><span class="line">WARNING: Illegal reflective access by com.headius.backport9.modules.Modules (file:/Users/liuxg/elastic5/logstash-7.5.0/logstash-core/lib/jars/jruby-complete-9.2.8.0.jar) to field java.io.FileDescriptor.fd</span><br><span class="line">WARNING: Please consider reporting this to the maintainers of com.headius.backport9.modules.Modules</span><br><span class="line">WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations</span><br><span class="line">WARNING: All illegal access operations will be denied in a future release</span><br><span class="line">Thread.exclusive is deprecated, use Thread::Mutex</span><br><span class="line">Sending Logstash logs to /Users/liuxg/elastic5/logstash-7.5.0/logs which is now configured via log4j2.properties</span><br><span class="line">ERROR: Pipelines YAML file is empty. Location: /Users/liuxg/elastic5/logstash-7.5.0/config/pipelines.yml</span><br><span class="line">usage:</span><br><span class="line">  bin/logstash -f CONFIG_PATH [-t] [-r] [] [-w COUNT] [-l LOG]</span><br><span class="line">  bin/logstash --modules MODULE_NAME [-M &quot;MODULE_NAME.var.PLUGIN_TYPE.PLUGIN_NAME.VARIABLE_NAME=VALUE&quot;] [-t] [-w COUNT] [-l LOG]</span><br><span class="line">  bin/logstash -e CONFIG_STR [-t] [--log.level fatal|error|warn|info|debug|trace] [-w COUNT] [-l LOG]</span><br><span class="line">  bin/logstash -i SHELL [--log.level fatal|error|warn|info|debug|trace]</span><br><span class="line">  bin/logstash -V [--log.level fatal|error|warn|info|debug|trace]</span><br><span class="line">  bin/logstash --help</span><br><span class="line">[2019-12-30T15:32:49,899][ERROR][org.logstash.Logstash    ] java.lang.IllegalStateException: Logstash stopped processing because of an error: (SystemExit) exit</span><br></pre></td></tr></table></figure><p></p><p>首先在Logstash的安装目录中找到logstash的配置文件logstash.yml：<br><img src="https://img-blog.csdnimg.cn/20191230153525794.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9lbGFzdGljc3RhY2suYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt></p><p>我们可以在Logstash的根目录下运行一下的命令：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/logstash-keystore create</span><br></pre></td></tr></table></figure><p></p><p>上面的命令将创建一个Created Logstash keystore：</p><p><img src="https://img-blog.csdnimg.cn/20191230154744343.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9lbGFzdGljc3RhY2suYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt></p><p>我们可以利用如下的命令来创建一些key: ES_HOST及ES_PWD。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/logstash-keystore add ES_HOST</span><br></pre></td></tr></table></figure><p></p><p>当我们运行时，可以把我们的Elasticsearch的host地址粘贴过来：</p><p><img src="https://img-blog.csdnimg.cn/20191230155046921.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9lbGFzdGljc3RhY2suYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt></p><p>比如针对我们的情况，我们粘贴的地址是<a href="http://localhost:9200/。按照同样的方法，我们可以创建另外一个ES_PWD" target="_blank" rel="noopener">http://localhost:9200/。按照同样的方法，我们可以创建另外一个ES_PWD</a> key：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/logstash-keystore add ES_PWD</span><br></pre></td></tr></table></figure><p></p><p><img src="https://img-blog.csdnimg.cn/20191230155258272.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9lbGFzdGljc3RhY2suYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt><br>这些key可以在logstash的配置文件中所使用。这样我们可以不暴露我们的密码给别人看到。</p><p>我们打开logstash.yml文件，并同时使用如下的配置：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">xpack.monitoring.enabled: true</span><br><span class="line">xpack.monitoring.elasticsearch.username: logstash_system</span><br><span class="line">xpack.monitoring.elasticsearch.password: &quot;$&#123;ES_PWD&#125;&quot;</span><br><span class="line">xpack.monitoring.elasticsearch.hosts: [&quot;$&#123;ES_HOST&#125;&quot;]</span><br></pre></td></tr></table></figure><p></p><p>这里，我们打开monitoring的开关，并同时使用我们在创建安全账户已经创建好的用户名logstash_system:</p><p><img src="https://img-blog.csdnimg.cn/20191230162130228.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9lbGFzdGljc3RhY2suYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt></p><p>现在我们下载一个我之前做个的一个练习：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/liu-xiao-guo/logstash_multi-pipeline</span><br></pre></td></tr></table></figure><p></p><p>我们可以下载到我们指定的目录里。但是记得修改在apache.conf中的path路径，否则我们会错的。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">apache.conf</span><br><span class="line"></span><br><span class="line">input &#123;</span><br><span class="line">  file &#123;</span><br><span class="line">    path =&gt; &quot;/Users/liuxg/data/multi-pipeline/apache.log&quot;</span><br><span class="line">  start_position =&gt; &quot;beginning&quot;</span><br><span class="line">    sincedb_path =&gt; &quot;/dev/null&quot;</span><br><span class="line">    # ignore_older =&gt; 100000</span><br><span class="line">    type =&gt; &quot;apache&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">filter &#123;</span><br><span class="line">  grok &#123;</span><br><span class="line">    match =&gt; &#123;</span><br><span class="line">      &quot;message&quot; =&gt; &apos;%&#123;IPORHOST:clientip&#125; %&#123;USER:ident&#125; %&#123;USER:auth&#125; \[%&#123;HTTPDATE:timestamp&#125;\] &quot;%&#123;WORD:verb&#125; %&#123;DATA:request&#125; HTTP/%&#123;NUMBER:httpversion&#125;&quot; %&#123;NUMBER:response:int&#125; (?:-|%&#123;NUMBER:bytes:int&#125;) %&#123;QS:referrer&#125; %&#123;QS:agent&#125;&apos;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">stdout &#123;</span><br><span class="line">codec =&gt; rubydebug</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  elasticsearch &#123;</span><br><span class="line">        hosts =&gt; [&quot;$&#123;ES_HOST&#125;&quot;]</span><br><span class="line">        user =&gt; &quot;elastic&quot;</span><br><span class="line">        password =&gt; &quot;$&#123;ES_PWD&#125;&quot;</span><br><span class="line">    index =&gt; &quot;apache_log&quot;</span><br><span class="line">    template =&gt; &quot;/Users/liuxg/data/multi-pipeline/apache_template.json&quot;</span><br><span class="line">    template_name =&gt; &quot;apache_elastic_example&quot;</span><br><span class="line">    template_overwrite =&gt; true</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>同时，我们需要添加hosts, user及password的定义。这是因为我们现在我们是需要有用户名及密码才可以连接到Elasticsearch。这个和之前的练习是不一样的。同时我们可以创建自己的用户名及密码。我们可以参考“Elasticsearch：用户安全设置”来创建自己喜欢的账号。在这里，为了方便，我们使用elastic账号。在这里，我们是用${ES_HOST}及${ES_PWD}来代表我们的Elasticsearch地址及密码。这样的好处是我们不暴露我们的密码在配置文件中。</p><p>一旦上面的配置已经做好了，我们可以使用如下的命令来把我们的apache log文件上传到Elasticsearch之中：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ./bin/logstash -f ~/data/multi-pipeline/apache.conf</span><br></pre></td></tr></table></figure><p></p><h2 id="Step3：打开Stack-Monitoring-UI"><a href="#Step3：打开Stack-Monitoring-UI" class="headerlink" title="Step3：打开Stack Monitoring UI"></a>Step3：打开Stack Monitoring UI</h2><p>我们安装如下的步骤来查看Logstash的monitoring：</p><p><img src="https://img-blog.csdnimg.cn/20191230172352315.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9lbGFzdGljc3RhY2suYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt></p><p>我们会发现在Logstash运行的情况下，有一个Logstash的类别出现了。这在之前是没有的。我们点击Nodes 1：</p><p><img src="https://img-blog.csdnimg.cn/20191230172716630.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9lbGFzdGljc3RhY2suYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt></p><p>我们看到一个Logstash的运行实例。它显示了目前CPU的使用情况和Load Average及JVM head的使用情况。点击上面的超链接：</p><p><img src="https://img-blog.csdnimg.cn/20191230172900192.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9lbGFzdGljc3RhY2suYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt></p><p>我们可以看到更加详细的使用情况。我们也可以查看pipeline的状况：</p><p><img src="https://img-blog.csdnimg.cn/20191231091805702.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9lbGFzdGljc3RhY2suYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt></p><h1 id="Logstash集中管理"><a href="#Logstash集中管理" class="headerlink" title="Logstash集中管理"></a>Logstash集中管理</h1><p>首先我们来创建一个叫做logstash_writer的role:</p><p><img src="https://img-blog.csdnimg.cn/2019123109503590.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9lbGFzdGljc3RhY2suYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt></p><p><img src="https://img-blog.csdnimg.cn/20191231094740244.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9lbGFzdGljc3RhY2suYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt></p><p><img src="https://img-blog.csdnimg.cn/20191231094855476.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9lbGFzdGljc3RhY2suYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt></p><p>点击“Create role”来创建我们的role。</p><p>首先让我们来创建一个具有logstash_user的用户账号：</p><p><img src="https://img-blog.csdnimg.cn/20191231093503344.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9lbGFzdGljc3RhY2suYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt></p><p>点击上面的“Create user”按钮来创建一个用户：</p><p><img src="https://img-blog.csdnimg.cn/20191231095922807.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9lbGFzdGljc3RhY2suYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt><br>点击“Create user”来创建一个叫做logstash_user的账号。它具有logstash_admin及logstash_system的权限。</p><p>为了启动集中管理，我们必须在logstash.yml文件里做相应的配置：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">xpack.management.enabled: true</span><br><span class="line">xpack.management.pipeline.id: [&quot;main&quot;, &quot;apache_logs&quot;, &quot;my_apache_logs&quot;]</span><br><span class="line">xpack.management.elasticsearch.username: &quot;logstash_user&quot;</span><br><span class="line">xpack.management.elasticsearch.password: &quot;123456&quot;</span><br><span class="line">xpack.management.elasticsearch.hosts: [&quot;$&#123;ES_HOST&#125;&quot;]</span><br></pre></td></tr></table></figure><p></p><p>我们可以在链接<code>https://www.elastic.co/guide/en/logstash/current/logstash-centralized-pipeline-management.html</code><br>找到更多的描述。在这里，我们启动logstash的管理，同时也把我们刚才创建的logstash_user的账号填入进来，并同时取了一个叫做my_apache_logs的pipeline id。</p><p>一旦启动了logstash的集中管理，我们就可以直接启动logstash，而不用跟任何的参数：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ./bin/logstash</span><br></pre></td></tr></table></figure><p></p><p>这样我们的logstash已经被成功运行起来了。我们接下来可以在Kibana中创建自己的pipeline。</p><p><img src="https://img-blog.csdnimg.cn/20191231103500951.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9lbGFzdGljc3RhY2suYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt></p><p>点击上面的“Create pipeline”按钮，我们可以看到如下的画面：</p><p><img src="https://img-blog.csdnimg.cn/20191231103916969.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9lbGFzdGljc3RhY2suYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt></p><p>接下来我们点击“Create and Deploy”按钮：</p><p><img src="https://img-blog.csdnimg.cn/20191231104044783.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9lbGFzdGljc3RhY2suYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt></p><p>这样我们的my_apache_logs就被创建好了，而且已经被成功执行了。我们可以在Kibana中创建一个叫apache_log的index pattern，然后打开Discover，你可以看到刚刚被Logstash导入的数据：</p><p><img src="https://img-blog.csdnimg.cn/2019123110445491.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9lbGFzdGljc3RhY2suYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt></p><p>好了到此，我们关于如何启动Logstash的监控及集中管理讲完了。<br>————————————————<br>版权声明：本文为CSDN博主「Elastic 中国社区官方博客」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/UbuntuTouch/article/details/103767088" target="_blank" rel="noopener">https://blog.csdn.net/UbuntuTouch/article/details/103767088</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Thu Jan 02 2020 10:53:05 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;在本篇文章里，我将详细介绍如果启动Logstash的监控及集中管理。&lt;/p&gt;&lt;h1 id=&quot;前提条件&quot;&gt;&lt;a href=&quot;#前提条件&quot; class=&quot;headerlink&quot; title=&quot;前提条件&quot;&gt;&lt;/a&gt;前提条件&lt;/h1&gt;&lt;p&gt;安装好Logstash，设置Elasticsearch及Kibana的安全密码。&lt;/p&gt;&lt;h1 id=&quot;如何监控Logstash&quot;&gt;&lt;a href=&quot;#如何监控Logstash&quot; class=&quot;headerlink&quot; title=&quot;如何监控Logstash?&quot;&gt;&lt;/a&gt;如何监控Logstash?&lt;/h1&gt;&lt;p&gt;我们安装如下的步骤来实现监控Logstash的目的：&lt;/p&gt;&lt;h2 id=&quot;Step-1-在Kibana中启动监控：&quot;&gt;&lt;a href=&quot;#Step-1-在Kibana中启动监控：&quot; class=&quot;headerlink&quot; title=&quot;Step 1: 在Kibana中启动监控：&quot;&gt;&lt;/a&gt;Step 1: 在Kibana中启动监控：&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20191230151037892.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9lbGFzdGljc3RhY2suYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70&quot; alt&gt;&lt;/p&gt;&lt;p&gt;然后，我们可以看到如下的画面：&lt;br&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20191230151316339.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9lbGFzdGljc3RhY2suYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="elk" scheme="https://yongnights.github.io/categories/elk/"/>
    
    
      <category term="elk" scheme="https://yongnights.github.io/tags/elk/"/>
    
  </entry>
  
  <entry>
    <title>lasticsearch：Index alias</title>
    <link href="https://yongnights.github.io/2020/01/02/lasticsearch%EF%BC%9AIndex%20alias/"/>
    <id>https://yongnights.github.io/2020/01/02/lasticsearch：Index alias/</id>
    <published>2020-01-02T02:51:19.428Z</published>
    <updated>2020-01-02T02:49:37.625Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Jan 02 2020 10:53:05 GMT+0800 (GMT+08:00) --><p>现在让我们来谈谈Elasticsearch最简单和最有用的功能之一：别名 （alias)。为了区分这里alias和文章“Elasticsearch : alias数据类型”，这里的别名（alias）指的是index的别名。 别名正是他们听起来的样子; 它们是您可以使用的指针或名称，对应于一个或多个具体索引。 事实证明这非常有用，因为它在扩展集群和管理数据在索引中的布局方式时提供了灵活性。 即使使用Elasticsearch 只有一个索引的集群，使用别名。 您将在以后感谢我们给予您的灵活性。</p><h1 id="别名到底是什么？"><a href="#别名到底是什么？" class="headerlink" title="别名到底是什么？"></a>别名到底是什么？</h1><p>您可能想知道别名究竟是什么，以及Elasticsearch在创建别名时涉及何种开销。 别名将其生命置于群集状态内，由主节点（master node)管理; 这意味着如果你有一个名为idaho的别名指向一个名为potato的索引，那么开销就是群集状态映射中的一个额外键，它将名称idaho映射到具体的索引字符串。 这意味着与其他指数相比，别名的重量要轻得多; 可以维护数千个而不会对集群产生负面影响。 也就是说，我们会警告不要创建数十万或数百万个别名，因为在这一点上，即使映射中单个条目的最小开销也会导致集群状态增长到大小。 这意味着创建新群集状态的操作将花费更长时间，因为每次更改时都会将整个群集状态发送到每个节点。</p><h1 id="为什么别名是有用的？"><a href="#为什么别名是有用的？" class="headerlink" title="为什么别名是有用的？"></a>为什么别名是有用的？</h1><p>我们建议每个人都为他们的Elasticsearch索引使用别名，因为在重新索引时，它将在未来提供更大的灵活性。 假设您首先创建一个包含单个主分片的索引，然后再决定是否需要更多索引容量。 如果您使用原始别名index，您现在可以将该别名更改为指向另外创建的索引，而无需更改您正在搜索的索引的名称（假设您从头开始使用别名进行搜索）。 另一个有用的功能是可以创建不同索引的窗口; 例如，如果您为数据创建每日索引，则可能需要创建一个名为last-7-days的别名的上周数据的滑动窗口; 然后每天创建新的每日索引时，可以将其添加到别名中，同时删除8天的索引。</p><p>另外的一种场景是，当我们修改了我们的index的mapping，让后通过reindex API来把我们的现有的index转移到新的index上，那么如果在我们的应用中，我们利用alias就可以很方便地做这间事。在我们成功转移到新的index之后，我们只需要重新定义我们的alias指向新的index，而在我们的客户端代码中，我们一直使用alias来访问我们的index，这样我们的代码不需要任何的改动。</p><p><img src="https://img-blog.csdnimg.cn/20190905093209136.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1VidW50dVRvdWNo,size_16,color_FFFFFF,t_70" alt></p><a id="more"></a><h1 id="建立index"><a href="#建立index" class="headerlink" title="建立index"></a>建立index</h1><p>为了验证我们的API，我们先建立一些数据：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">PUT twitter/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;user&quot; : &quot;双榆树-张三&quot;,</span><br><span class="line">  &quot;message&quot; : &quot;今儿天气不错啊，出去转转去&quot;,</span><br><span class="line">  &quot;uid&quot; : 2,</span><br><span class="line">  &quot;age&quot; : 20,</span><br><span class="line">  &quot;city&quot; : &quot;北京&quot;,</span><br><span class="line">  &quot;province&quot; : &quot;北京&quot;,</span><br><span class="line">  &quot;country&quot; : &quot;中国&quot;,</span><br><span class="line">  &quot;address&quot; : &quot;中国北京市海淀区&quot;,</span><br><span class="line">  &quot;location&quot; : &#123;</span><br><span class="line">    &quot;lat&quot; : &quot;39.970718&quot;,</span><br><span class="line">    &quot;lon&quot; : &quot;116.325747&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">PUT twitter/_doc/2</span><br><span class="line">&#123;</span><br><span class="line">  &quot;user&quot; : &quot;东城区-老刘&quot;,</span><br><span class="line">  &quot;message&quot; : &quot;出发，下一站云南！&quot;,</span><br><span class="line">  &quot;uid&quot; : 3,</span><br><span class="line">  &quot;age&quot; : 30,</span><br><span class="line">  &quot;city&quot; : &quot;北京&quot;,</span><br><span class="line">  &quot;province&quot; : &quot;北京&quot;,</span><br><span class="line">  &quot;country&quot; : &quot;中国&quot;,</span><br><span class="line">  &quot;address&quot; : &quot;中国北京市东城区台基厂三条3号&quot;,</span><br><span class="line">  &quot;location&quot; : &#123;</span><br><span class="line">    &quot;lat&quot; : &quot;39.904313&quot;,</span><br><span class="line">    &quot;lon&quot; : &quot;116.412754&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">PUT twitter/_doc/3</span><br><span class="line">&#123;</span><br><span class="line">  &quot;user&quot; : &quot;虹桥-老吴&quot;,</span><br><span class="line">  &quot;message&quot; : &quot;好友来了都今天我生日，好友来了,什么 birthday happy 就成!&quot;,</span><br><span class="line">  &quot;uid&quot; : 7,</span><br><span class="line">  &quot;age&quot; : 90,</span><br><span class="line">  &quot;city&quot; : &quot;上海&quot;,</span><br><span class="line">  &quot;province&quot; : &quot;上海&quot;,</span><br><span class="line">  &quot;country&quot; : &quot;中国&quot;,</span><br><span class="line">  &quot;address&quot; : &quot;中国上海市闵行区&quot;,</span><br><span class="line">  &quot;location&quot; : &#123;</span><br><span class="line">    &quot;lat&quot; : &quot;31.175927&quot;,</span><br><span class="line">    &quot;lon&quot; : &quot;121.383328&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>这样，我们建立了三个文档的twitter索引。</p><h1 id="管理别名"><a href="#管理别名" class="headerlink" title="管理别名"></a>管理别名</h1><h2 id="添加一个index-alias"><a href="#添加一个index-alias" class="headerlink" title="添加一个index alias"></a>添加一个index alias</h2><p>一个index别名就是一个用来引用一个或多个已经存在的索引的另外一个名字，我们可以用如下的方法来创建<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PUT /twitter/_alias/alias1</span><br></pre></td></tr></table></figure><p></p><p>请求的格式：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PUT /&lt;index&gt;/_alias/&lt;alias&gt;</span><br><span class="line">POST /&lt;index&gt;/_alias/&lt;alias&gt;</span><br><span class="line">PUT /&lt;index&gt;/_aliases/&lt;alias&gt;</span><br><span class="line">POST /&lt;index&gt;/_aliases/&lt;alias&gt;</span><br></pre></td></tr></table></figure><p></p><p>路径参数：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;index&gt;:要添加到别名的索引名称的逗号分隔列表或通配符表达式。</span><br><span class="line">         要将群集中的所有索引添加到别名，请使用_all值。</span><br><span class="line">&lt;alias&gt;:(必需,字符串)要创建或更新的索引别名的名称。</span><br></pre></td></tr></table></figure><p></p><p>比如经过上面的REST 请求，我们为twitter创建了另外一个别名alias1。我们以后可以通过alias1来访问这个index:<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET alias1/_search</span><br></pre></td></tr></table></figure><p></p><p>显示的结果：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;took&quot; : 0,</span><br><span class="line">  &quot;timed_out&quot; : false,</span><br><span class="line">  &quot;_shards&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : 1,</span><br><span class="line">    &quot;successful&quot; : 1,</span><br><span class="line">    &quot;skipped&quot; : 0,</span><br><span class="line">    &quot;failed&quot; : 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;hits&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : &#123;</span><br><span class="line">      &quot;value&quot; : 3,</span><br><span class="line">      &quot;relation&quot; : &quot;eq&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;max_score&quot; : 1.0,</span><br><span class="line">    &quot;hits&quot; : [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;twitter&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;4&quot;,</span><br><span class="line">        &quot;_score&quot; : 1.0,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;user&quot; : &quot;朝阳区-老贾&quot;,</span><br><span class="line">          &quot;message&quot; : &quot;123,gogogo&quot;,</span><br><span class="line">          &quot;uid&quot; : 5,</span><br><span class="line">          &quot;age&quot; : 35,</span><br><span class="line">          &quot;city&quot; : &quot;北京&quot;,</span><br><span class="line">          &quot;province&quot; : &quot;北京&quot;,</span><br><span class="line">          &quot;country&quot; : &quot;中国&quot;,</span><br><span class="line">          &quot;address&quot; : &quot;中国北京市朝阳区建国门&quot;,</span><br><span class="line">          &quot;location&quot; : &#123;</span><br><span class="line">            &quot;lat&quot; : &quot;39.718256&quot;,</span><br><span class="line">            &quot;lon&quot; : &quot;116.367910&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;twitter&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;5&quot;,</span><br><span class="line">        &quot;_score&quot; : 1.0,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;user&quot; : &quot;朝阳区-老王&quot;,</span><br><span class="line">          &quot;message&quot; : &quot;Happy BirthDay My Friend!&quot;,</span><br><span class="line">          &quot;uid&quot; : 6,</span><br><span class="line">          &quot;age&quot; : 50,</span><br><span class="line">          &quot;city&quot; : &quot;北京&quot;,</span><br><span class="line">          &quot;province&quot; : &quot;北京&quot;,</span><br><span class="line">          &quot;country&quot; : &quot;中国&quot;,</span><br><span class="line">          &quot;address&quot; : &quot;中国北京市朝阳区国贸&quot;,</span><br><span class="line">          &quot;location&quot; : &#123;</span><br><span class="line">            &quot;lat&quot; : &quot;39.918256&quot;,</span><br><span class="line">            &quot;lon&quot; : &quot;116.467910&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;twitter&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;6&quot;,</span><br><span class="line">        &quot;_score&quot; : 1.0,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;user&quot; : &quot;虹桥-老吴&quot;,</span><br><span class="line">          &quot;message&quot; : &quot;好友来了都今天我生日，好友来了,什么 birthday happy 就成!&quot;,</span><br><span class="line">          &quot;uid&quot; : 7,</span><br><span class="line">          &quot;age&quot; : 90,</span><br><span class="line">          &quot;city&quot; : &quot;上海&quot;,</span><br><span class="line">          &quot;province&quot; : &quot;上海&quot;,</span><br><span class="line">          &quot;country&quot; : &quot;中国&quot;,</span><br><span class="line">          &quot;address&quot; : &quot;中国上海市闵行区&quot;,</span><br><span class="line">          &quot;location&quot; : &#123;</span><br><span class="line">            &quot;lat&quot; : &quot;31.175927&quot;,</span><br><span class="line">            &quot;lon&quot; : &quot;121.383328&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">  ...</span><br></pre></td></tr></table></figure><p></p><p>显然这样做的好处是非常明显的，我们可以把我们想要的进行搜索的index取一个和我们搜索方法里一样的别名就可以了，这样我们可以不修改我们的搜索方法，就可以分别对不同的index进行搜索。比如我们可以用同样的搜索方法对每天的log进行分析。只有把每天的log的index的名字都改成一样的alias就可以了。</p><p>创建一个基于城市的alias：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">PUT twitter/_alias/city_beijing</span><br><span class="line">&#123;</span><br><span class="line">  &quot;filter&quot;: &#123;</span><br><span class="line">    &quot;term&quot;: &#123;</span><br><span class="line">      &quot;city&quot;: &quot;北京&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>在这里，我们创建了一个名称为city_beijing的alias。如果我们运行如下的搜索：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET city_beijing/_search</span><br></pre></td></tr></table></figure><p></p><p>它将返回所有关于城市为北京的搜索结果：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;took&quot; : 1,</span><br><span class="line">  &quot;timed_out&quot; : false,</span><br><span class="line">  &quot;_shards&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : 1,</span><br><span class="line">    &quot;successful&quot; : 1,</span><br><span class="line">    &quot;skipped&quot; : 0,</span><br><span class="line">    &quot;failed&quot; : 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;hits&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : &#123;</span><br><span class="line">      &quot;value&quot; : 4,</span><br><span class="line">      &quot;relation&quot; : &quot;eq&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;max_score&quot; : 1.0,</span><br><span class="line">    &quot;hits&quot; : [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;twitter&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;4&quot;,</span><br><span class="line">        &quot;_score&quot; : 1.0,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;user&quot; : &quot;朝阳区-老贾&quot;,</span><br><span class="line">          &quot;message&quot; : &quot;123,gogogo&quot;,</span><br><span class="line">          &quot;uid&quot; : 5,</span><br><span class="line">          &quot;age&quot; : 35,</span><br><span class="line">          &quot;city&quot; : &quot;北京&quot;,</span><br><span class="line">          &quot;province&quot; : &quot;北京&quot;,</span><br><span class="line">          &quot;country&quot; : &quot;中国&quot;,</span><br><span class="line">          &quot;address&quot; : &quot;中国北京市朝阳区建国门&quot;,</span><br><span class="line">          &quot;location&quot; : &#123;</span><br><span class="line">            &quot;lat&quot; : &quot;39.718256&quot;,</span><br><span class="line">            &quot;lon&quot; : &quot;116.367910&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;twitter&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;5&quot;,</span><br><span class="line">        &quot;_score&quot; : 1.0,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;user&quot; : &quot;朝阳区-老王&quot;,</span><br><span class="line">          &quot;message&quot; : &quot;Happy BirthDay My Friend!&quot;,</span><br><span class="line">          &quot;uid&quot; : 6,</span><br><span class="line">          &quot;age&quot; : 50,</span><br><span class="line">          &quot;city&quot; : &quot;北京&quot;,</span><br><span class="line">          &quot;province&quot; : &quot;北京&quot;,</span><br><span class="line">          &quot;country&quot; : &quot;中国&quot;,</span><br><span class="line">          &quot;address&quot; : &quot;中国北京市朝阳区国贸&quot;,</span><br><span class="line">          &quot;location&quot; : &#123;</span><br><span class="line">            &quot;lat&quot; : &quot;39.918256&quot;,</span><br><span class="line">            &quot;lon&quot; : &quot;116.467910&quot;</span><br><span class="line">          &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p></p><p>alias也可以在创建index时被创建，比如：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">DELETE twitter</span><br><span class="line"> </span><br><span class="line">PUT twitter</span><br><span class="line">&#123;</span><br><span class="line">     &quot;mappings&quot; : &#123;</span><br><span class="line">      &quot;properties&quot; : &#123;</span><br><span class="line">        &quot;address&quot; : &#123;</span><br><span class="line">          &quot;type&quot; : &quot;text&quot;,</span><br><span class="line">          &quot;fields&quot; : &#123;</span><br><span class="line">            &quot;keyword&quot; : &#123;</span><br><span class="line">              &quot;type&quot; : &quot;keyword&quot;,</span><br><span class="line">              &quot;ignore_above&quot; : 256</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;age&quot; : &#123;</span><br><span class="line">          &quot;type&quot; : &quot;long&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;city&quot; : &#123;</span><br><span class="line">          &quot;type&quot; : &quot;keyword&quot;,</span><br><span class="line">          &quot;copy_to&quot; : [</span><br><span class="line">            &quot;region&quot;</span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;country&quot; : &#123;</span><br><span class="line">          &quot;type&quot; : &quot;keyword&quot;,</span><br><span class="line">          &quot;copy_to&quot; : [</span><br><span class="line">            &quot;region&quot;</span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;explain&quot; : &#123;</span><br><span class="line">          &quot;type&quot; : &quot;boolean&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;location&quot; : &#123;</span><br><span class="line">          &quot;type&quot; : &quot;geo_point&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;message&quot; : &#123;</span><br><span class="line">          &quot;type&quot; : &quot;text&quot;,</span><br><span class="line">          &quot;fields&quot; : &#123;</span><br><span class="line">            &quot;keyword&quot; : &#123;</span><br><span class="line">              &quot;type&quot; : &quot;keyword&quot;,</span><br><span class="line">              &quot;ignore_above&quot; : 256</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;province&quot; : &#123;</span><br><span class="line">          &quot;type&quot; : &quot;keyword&quot;,</span><br><span class="line">          &quot;copy_to&quot; : [</span><br><span class="line">            &quot;region&quot;</span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;region&quot; : &#123;</span><br><span class="line">          &quot;type&quot; : &quot;text&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;uid&quot; : &#123;</span><br><span class="line">          &quot;type&quot; : &quot;long&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;user&quot; : &#123;</span><br><span class="line">          &quot;type&quot; : &quot;text&quot;,</span><br><span class="line">          &quot;fields&quot; : &#123;</span><br><span class="line">            &quot;keyword&quot; : &#123;</span><br><span class="line">              &quot;type&quot; : &quot;keyword&quot;,</span><br><span class="line">              &quot;ignore_above&quot; : 256</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;aliases&quot;: &#123;</span><br><span class="line">      &quot;city_beijing&quot;: &#123;</span><br><span class="line">        &quot;filter&quot;: &#123;</span><br><span class="line">          &quot;term&quot;: &#123;</span><br><span class="line">            &quot;city&quot;: &quot;北京&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>在这里，我们删除了twitter索引，同时我们重新定义twitter索引的mapping，并同时定义了city_beijing你别名。重新index我们上面的三个文档，那么我们再次搜索我们的数据：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET city_beijing/_search</span><br></pre></td></tr></table></figure><p></p><p>我们可以看到两个城市为北京的搜索结果：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;took&quot; : 0,</span><br><span class="line">  &quot;timed_out&quot; : false,</span><br><span class="line">  &quot;_shards&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : 1,</span><br><span class="line">    &quot;successful&quot; : 1,</span><br><span class="line">    &quot;skipped&quot; : 0,</span><br><span class="line">    &quot;failed&quot; : 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;hits&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : &#123;</span><br><span class="line">      &quot;value&quot; : 2,</span><br><span class="line">      &quot;relation&quot; : &quot;eq&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;max_score&quot; : 1.0,</span><br><span class="line">    &quot;hits&quot; : [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;twitter&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;1&quot;,</span><br><span class="line">        &quot;_score&quot; : 1.0,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;user&quot; : &quot;双榆树-张三&quot;,</span><br><span class="line">          &quot;message&quot; : &quot;今儿天气不错啊，出去转转去&quot;,</span><br><span class="line">          &quot;uid&quot; : 2,</span><br><span class="line">          &quot;age&quot; : 20,</span><br><span class="line">          &quot;city&quot; : &quot;北京&quot;,</span><br><span class="line">          &quot;province&quot; : &quot;北京&quot;,</span><br><span class="line">          &quot;country&quot; : &quot;中国&quot;,</span><br><span class="line">          &quot;address&quot; : &quot;中国北京市海淀区&quot;,</span><br><span class="line">          &quot;location&quot; : &#123;</span><br><span class="line">            &quot;lat&quot; : &quot;39.970718&quot;,</span><br><span class="line">            &quot;lon&quot; : &quot;116.325747&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;twitter&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;2&quot;,</span><br><span class="line">        &quot;_score&quot; : 1.0,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;user&quot; : &quot;东城区-老刘&quot;,</span><br><span class="line">          &quot;message&quot; : &quot;出发，下一站云南！&quot;,</span><br><span class="line">          &quot;uid&quot; : 3,</span><br><span class="line">          &quot;age&quot; : 30,</span><br><span class="line">          &quot;city&quot; : &quot;北京&quot;,</span><br><span class="line">          &quot;province&quot; : &quot;北京&quot;,</span><br><span class="line">          &quot;country&quot; : &quot;中国&quot;,</span><br><span class="line">          &quot;address&quot; : &quot;中国北京市东城区台基厂三条3号&quot;,</span><br><span class="line">          &quot;location&quot; : &#123;</span><br><span class="line">            &quot;lat&quot; : &quot;39.904313&quot;,</span><br><span class="line">            &quot;lon&quot; : &quot;116.412754&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h1 id="获取alias"><a href="#获取alias" class="headerlink" title="获取alias"></a>获取alias</h1><p>我们可以通过如下的API来获取当前以及定义好的alias:<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GET /_alias</span><br><span class="line">GET /_alias/&lt;alias&gt;</span><br><span class="line">GET /&lt;index&gt;/_alias/&lt;alias&gt;</span><br></pre></td></tr></table></figure><p></p><p>比如：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /twitter/_alias/alias1</span><br></pre></td></tr></table></figure><p></p><p>这里获取在twitter下的名字叫做alias1的别名。针对我们的情况，我们使用如下的接口：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /twitter/_alias/city_beijing</span><br></pre></td></tr></table></figure><p></p><p>我们获取我们之前得到的city_beijing的alias。显示的结果如下：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;twitter&quot; : &#123;</span><br><span class="line">    &quot;aliases&quot; : &#123;</span><br><span class="line">      &quot;city_beijing&quot; : &#123;</span><br><span class="line">        &quot;filter&quot; : &#123;</span><br><span class="line">          &quot;term&quot; : &#123;</span><br><span class="line">            &quot;city&quot; : &quot;北京&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>你也可以通过如下的wild card方式来获取所有的alias:<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /twitter/_alias/*</span><br></pre></td></tr></table></figure><p></p><p>比如，我们新增加一个alias1的别名：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PUT /twitter/_alias/alias1</span><br></pre></td></tr></table></figure><p></p><p>上面的wild card方式返回来得结果为：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;twitter&quot; : &#123;</span><br><span class="line">    &quot;aliases&quot; : &#123;</span><br><span class="line">      &quot;alias1&quot; : &#123; &#125;,</span><br><span class="line">      &quot;city_beijing&quot; : &#123;</span><br><span class="line">        &quot;filter&quot; : &#123;</span><br><span class="line">          &quot;term&quot; : &#123;</span><br><span class="line">            &quot;city&quot; : &quot;北京&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>显然这里有两个别名：alias1及city_beijing。</p><p>你可以通过如下的方式来搜寻你的alias:<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /_alias/city_*</span><br></pre></td></tr></table></figure><p></p><p>它将显示名字以city开始的所有的alias。</p><h1 id="检查一个alias是否存在"><a href="#检查一个alias是否存在" class="headerlink" title="检查一个alias是否存在"></a>检查一个alias是否存在</h1><p>我们可以通过如下的方式来检查一个alias是否存在：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HEAD /_alias/&lt;alias&gt;</span><br><span class="line">HEAD /&lt;index&gt;/_alias/&lt;alias&gt;</span><br></pre></td></tr></table></figure><p></p><p>比如：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HEAD /_alias/alias1</span><br></pre></td></tr></table></figure><p></p><p>它显示的结果是：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">200 - OK</span><br></pre></td></tr></table></figure><p></p><p>同样你也可通过wild card方式来查询：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HEAD /_alias/city*</span><br></pre></td></tr></table></figure><p></p><p>这个用来检查所有以city为开头的alias。</p><h1 id="更新alias"><a href="#更新alias" class="headerlink" title="更新alias"></a>更新alias</h1><p>我们这里所说的更新包括：添加及删除</p><p>接口为：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">POST /_aliases</span><br></pre></td></tr></table></figure><p></p><p>比如：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST /_aliases</span><br><span class="line">&#123;</span><br><span class="line">    &quot;actions&quot; : [</span><br><span class="line">        &#123; &quot;add&quot; : &#123; &quot;index&quot; : &quot;twitter&quot;, &quot;alias&quot; : &quot;alias2&quot; &#125; &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>在这里，我们为twitter索引添加了一个叫做alias2的别名。运行后，我们可以通过alias2来重新搜索我们的twitter<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /alias2/_search</span><br></pre></td></tr></table></figure><p></p><p>我们可以看到我们想要的结果：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;took&quot; : 0,</span><br><span class="line">  &quot;timed_out&quot; : false,</span><br><span class="line">  &quot;_shards&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : 1,</span><br><span class="line">    &quot;successful&quot; : 1,</span><br><span class="line">    &quot;skipped&quot; : 0,</span><br><span class="line">    &quot;failed&quot; : 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;hits&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : &#123;</span><br><span class="line">      &quot;value&quot; : 3,</span><br><span class="line">      &quot;relation&quot; : &quot;eq&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;max_score&quot; : 1.0,</span><br><span class="line">    &quot;hits&quot; : [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;twitter&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;1&quot;,</span><br><span class="line">        &quot;_score&quot; : 1.0,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;user&quot; : &quot;双榆树-张三&quot;,</span><br><span class="line">          &quot;message&quot; : &quot;今儿天气不错啊，出去转转去&quot;,</span><br><span class="line">          &quot;uid&quot; : 2,</span><br><span class="line">          &quot;age&quot; : 20,</span><br><span class="line">          &quot;city&quot; : &quot;北京&quot;,</span><br><span class="line">          &quot;province&quot; : &quot;北京&quot;,</span><br><span class="line">          &quot;country&quot; : &quot;中国&quot;,</span><br><span class="line">          &quot;address&quot; : &quot;中国北京市海淀区&quot;,</span><br><span class="line">          &quot;location&quot; : &#123;</span><br><span class="line">            &quot;lat&quot; : &quot;39.970718&quot;,</span><br><span class="line">            &quot;lon&quot; : &quot;116.325747&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line"> </span><br><span class="line">...</span><br></pre></td></tr></table></figure><p></p><p>在action里，我们可以有如下的几种：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">add: 添加一个别名</span><br><span class="line">remove: 删除一个别名</span><br><span class="line">remove_index: 删除一个index或它的别名</span><br></pre></td></tr></table></figure><p></p><p>比如我们可以通过如下的方法来删除一个alias<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST /_aliases</span><br><span class="line">&#123;</span><br><span class="line">    &quot;actions&quot; : [</span><br><span class="line">        &#123; &quot;remove&quot;: &#123; &quot;index&quot; : &quot;twitter&quot;, &quot;alias&quot; : &quot;alias2&quot; &#125; &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>一旦删除后，之前的定义的alias2就不可以用了。</p><h1 id="重新命名一个alias"><a href="#重新命名一个alias" class="headerlink" title="重新命名一个alias"></a>重新命名一个alias</h1><p>重命名别名是一个简单的删除然后在同一API中添加操作。 此操作是原子操作，无需担心别名未指向索引的短时间段：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">POST /_aliases</span><br><span class="line">&#123;</span><br><span class="line">    &quot;actions&quot; : [</span><br><span class="line">        &#123; &quot;remove&quot; : &#123; &quot;index&quot; : &quot;twitter&quot;, &quot;alias&quot; : &quot;alias1&quot; &#125; &#125;,</span><br><span class="line">        &#123; &quot;add&quot; : &#123; &quot;index&quot; : &quot;twitter&quot;, &quot;alias&quot; : &quot;alias2&quot; &#125; &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>上面的操作，删除alias1，同时创建一个新的叫做alias2的别名。</p><p>我们也可以把同一个alias在指向不同时期的index，比如我们的log index滚动下一个月，我们可以修改我们的alias总是指向最新的index。</p><p><img src="https://img-blog.csdnimg.cn/20190905094821417.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1VidW50dVRvdWNo,size_16,color_FFFFFF,t_70" alt></p><h1 id="为多个索引添加同样一个alias"><a href="#为多个索引添加同样一个alias" class="headerlink" title="为多个索引添加同样一个alias"></a>为多个索引添加同样一个alias</h1><p>将别名与多个索引相关联只需几个添加操作：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">POST /_aliases</span><br><span class="line">&#123;</span><br><span class="line">    &quot;actions&quot; : [</span><br><span class="line">        &#123; &quot;add&quot; : &#123; &quot;index&quot; : &quot;test1&quot;, &quot;alias&quot; : &quot;alias1&quot; &#125; &#125;,</span><br><span class="line">        &#123; &quot;add&quot; : &#123; &quot;index&quot; : &quot;test2&quot;, &quot;alias&quot; : &quot;alias1&quot; &#125; &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>你也可以通过如下的方式，通过一个add命令来完成：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST /_aliases</span><br><span class="line">&#123;</span><br><span class="line">    &quot;actions&quot; : [</span><br><span class="line">        &#123; &quot;add&quot; : &#123; &quot;indices&quot; : [&quot;test1&quot;, &quot;test2&quot;], &quot;alias&quot; : &quot;alias1&quot; &#125; &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>甚至：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST /_aliases</span><br><span class="line">&#123;</span><br><span class="line">    &quot;actions&quot; : [</span><br><span class="line">        &#123; &quot;add&quot; : &#123; &quot;index&quot; : &quot;test*&quot;, &quot;alias&quot; : &quot;all_test_indices&quot; &#125; &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>这样所有以<code>test*</code>为开头的索引都共同一个别名。</p><p>当我们index我们的文档时，对一个指向多个index的别名进行索引是错误的。</p><p>也可以在一个操作中使用别名交换索引：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">PUT test     </span><br><span class="line">PUT test_2   </span><br><span class="line">POST /_aliases</span><br><span class="line">&#123;</span><br><span class="line">    &quot;actions&quot; : [</span><br><span class="line">        &#123; &quot;add&quot;:  &#123; &quot;index&quot;: &quot;test_2&quot;, &quot;alias&quot;: &quot;test&quot; &#125; &#125;,</span><br><span class="line">        &#123; &quot;remove_index&quot;: &#123; &quot;index&quot;: &quot;test&quot; &#125; &#125;  </span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>在上面的例子中，假如我们地添加了一个叫做test的index，而test_2是我们想要的。我们直接可以通过上面的方法吧test中的数据交换到test_2中，并同时把test索引删除。</p><h1 id="Filtered-alias"><a href="#Filtered-alias" class="headerlink" title="Filtered alias"></a>Filtered alias</h1><p>带有过滤器的别名提供了一种创建同一索引的不同“视图”的简便方法。 可以使用Query DSL定义过滤器，并使用此别名将其应用于所有“搜索”，“计数”，“按查询删除”和“更多此类操作”。</p><p>要创建过滤后的别名，首先我们需要确保映射中已存在这些字段：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">PUT /test1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;properties&quot;: &#123;</span><br><span class="line">      &quot;user&quot; : &#123;</span><br><span class="line">        &quot;type&quot;: &quot;keyword&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>现在我们可以利用filter来创建一个alias，是基于user字段<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">POST /_aliases</span><br><span class="line">&#123;</span><br><span class="line">    &quot;actions&quot; : [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;add&quot; : &#123;</span><br><span class="line">                 &quot;index&quot; : &quot;test1&quot;,</span><br><span class="line">                 &quot;alias&quot; : &quot;alias2&quot;,</span><br><span class="line">                 &quot;filter&quot; : &#123; &quot;term&quot; : &#123; &quot;user&quot; : &quot;kimchy&quot; &#125; &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h1 id="Write-index"><a href="#Write-index" class="headerlink" title="Write index"></a>Write index</h1><p>可以将别名指向的索引关联为write索引。 指定后，针对指向多个索引的别名的所有索引和更新请求将尝试解析为write索引的一个索引。 每个别名只能将一个索引分配为一次write索引。 如果未指定write索引且别名引用了多个索引，则不允许写入。</p><p>可以使用别名API和索引创建API将与别名关联的索引指定为write索引。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">POST /_aliases</span><br><span class="line">&#123;</span><br><span class="line">    &quot;actions&quot; : [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;add&quot; : &#123;</span><br><span class="line">                 &quot;index&quot; : &quot;test&quot;,</span><br><span class="line">                 &quot;alias&quot; : &quot;alias1&quot;,</span><br><span class="line">                 &quot;is_write_index&quot; : true</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;add&quot; : &#123;</span><br><span class="line">                 &quot;index&quot; : &quot;test2&quot;,</span><br><span class="line">                 &quot;alias&quot; : &quot;alias1&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>在这里，我们定义了alias1同时指向test及test2两个索引。其中test中，注明了is_write_index，那么，如下的操作：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PUT /alias1/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">    &quot;foo&quot;: &quot;bar&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>相当于如下的操作：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PUT /test/_doc/1</span><br></pre></td></tr></table></figure><p></p><p>也就是写入到test索引中，而不会写入到test2中。</p><p>要交换哪个索引是别名的写入索引，可以利用别名API进行原子交换。 交换不依赖于操作的顺序。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">POST /_aliases</span><br><span class="line">&#123;</span><br><span class="line">    &quot;actions&quot; : [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;add&quot; : &#123;</span><br><span class="line">                 &quot;index&quot; : &quot;test&quot;,</span><br><span class="line">                 &quot;alias&quot; : &quot;alias1&quot;,</span><br><span class="line">                 &quot;is_write_index&quot; : false</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            &quot;add&quot; : &#123;</span><br><span class="line">                 &quot;index&quot; : &quot;test2&quot;,</span><br><span class="line">                 &quot;alias&quot; : &quot;alias1&quot;,</span><br><span class="line">                 &quot;is_write_index&quot; : true</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>参考：<br>【1】<a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.3/indices-aliases.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/7.3/indices-aliases.html</a><br>【2】<a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.3/indices-get-alias.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/7.3/indices-get-alias.html</a><br>【3】<a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.3/indices-add-alias.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/7.3/indices-add-alias.html</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Thu Jan 02 2020 10:53:05 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;现在让我们来谈谈Elasticsearch最简单和最有用的功能之一：别名 （alias)。为了区分这里alias和文章“Elasticsearch : alias数据类型”，这里的别名（alias）指的是index的别名。 别名正是他们听起来的样子; 它们是您可以使用的指针或名称，对应于一个或多个具体索引。 事实证明这非常有用，因为它在扩展集群和管理数据在索引中的布局方式时提供了灵活性。 即使使用Elasticsearch 只有一个索引的集群，使用别名。 您将在以后感谢我们给予您的灵活性。&lt;/p&gt;&lt;h1 id=&quot;别名到底是什么？&quot;&gt;&lt;a href=&quot;#别名到底是什么？&quot; class=&quot;headerlink&quot; title=&quot;别名到底是什么？&quot;&gt;&lt;/a&gt;别名到底是什么？&lt;/h1&gt;&lt;p&gt;您可能想知道别名究竟是什么，以及Elasticsearch在创建别名时涉及何种开销。 别名将其生命置于群集状态内，由主节点（master node)管理; 这意味着如果你有一个名为idaho的别名指向一个名为potato的索引，那么开销就是群集状态映射中的一个额外键，它将名称idaho映射到具体的索引字符串。 这意味着与其他指数相比，别名的重量要轻得多; 可以维护数千个而不会对集群产生负面影响。 也就是说，我们会警告不要创建数十万或数百万个别名，因为在这一点上，即使映射中单个条目的最小开销也会导致集群状态增长到大小。 这意味着创建新群集状态的操作将花费更长时间，因为每次更改时都会将整个群集状态发送到每个节点。&lt;/p&gt;&lt;h1 id=&quot;为什么别名是有用的？&quot;&gt;&lt;a href=&quot;#为什么别名是有用的？&quot; class=&quot;headerlink&quot; title=&quot;为什么别名是有用的？&quot;&gt;&lt;/a&gt;为什么别名是有用的？&lt;/h1&gt;&lt;p&gt;我们建议每个人都为他们的Elasticsearch索引使用别名，因为在重新索引时，它将在未来提供更大的灵活性。 假设您首先创建一个包含单个主分片的索引，然后再决定是否需要更多索引容量。 如果您使用原始别名index，您现在可以将该别名更改为指向另外创建的索引，而无需更改您正在搜索的索引的名称（假设您从头开始使用别名进行搜索）。 另一个有用的功能是可以创建不同索引的窗口; 例如，如果您为数据创建每日索引，则可能需要创建一个名为last-7-days的别名的上周数据的滑动窗口; 然后每天创建新的每日索引时，可以将其添加到别名中，同时删除8天的索引。&lt;/p&gt;&lt;p&gt;另外的一种场景是，当我们修改了我们的index的mapping，让后通过reindex API来把我们的现有的index转移到新的index上，那么如果在我们的应用中，我们利用alias就可以很方便地做这间事。在我们成功转移到新的index之后，我们只需要重新定义我们的alias指向新的index，而在我们的客户端代码中，我们一直使用alias来访问我们的index，这样我们的代码不需要任何的改动。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20190905093209136.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1VidW50dVRvdWNo,size_16,color_FFFFFF,t_70&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="elk" scheme="https://yongnights.github.io/categories/elk/"/>
    
    
      <category term="elk" scheme="https://yongnights.github.io/tags/elk/"/>
    
  </entry>
  
  <entry>
    <title>lasticsearch：IK中文分词器</title>
    <link href="https://yongnights.github.io/2020/01/02/lasticsearch%EF%BC%9AIK%E4%B8%AD%E6%96%87%E5%88%86%E8%AF%8D%E5%99%A8/"/>
    <id>https://yongnights.github.io/2020/01/02/lasticsearch：IK中文分词器/</id>
    <published>2020-01-02T02:51:19.426Z</published>
    <updated>2020-01-02T02:49:16.561Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Jan 02 2020 10:53:05 GMT+0800 (GMT+08:00) --><p>Elasticsearch内置的分词器对中文不友好，只会一个字一个字的分，无法形成词语，比如：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">POST /_analyze</span><br><span class="line">&#123;</span><br><span class="line">  &quot;text&quot;: &quot;我爱北京天安门&quot;,</span><br><span class="line">  &quot;analyzer&quot;: &quot;standard&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>如果我们使用的是standard的分词器，那么结果就是：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;tokens&quot; : [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot; : &quot;我&quot;,</span><br><span class="line">      &quot;start_offset&quot; : 0,</span><br><span class="line">      &quot;end_offset&quot; : 1,</span><br><span class="line">      &quot;type&quot; : &quot;&lt;IDEOGRAPHIC&gt;&quot;,</span><br><span class="line">      &quot;position&quot; : 0</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot; : &quot;爱&quot;,</span><br><span class="line">      &quot;start_offset&quot; : 1,</span><br><span class="line">      &quot;end_offset&quot; : 2,</span><br><span class="line">      &quot;type&quot; : &quot;&lt;IDEOGRAPHIC&gt;&quot;,</span><br><span class="line">      &quot;position&quot; : 1</span><br><span class="line">    &#125;,</span><br><span class="line">    ...</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot; : &quot;门&quot;,</span><br><span class="line">      &quot;start_offset&quot; : 6,</span><br><span class="line">      &quot;end_offset&quot; : 7,</span><br><span class="line">      &quot;type&quot; : &quot;&lt;IDEOGRAPHIC&gt;&quot;,</span><br><span class="line">      &quot;position&quot; : 6</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>显然这对中文来说并不友好，它显示的每一个汉字。好在Elastic的大拿medcl已经为我们做好IK中文分词器。下面我们来详细介绍如何安装并使用中文分词器。具体的安装步骤可以在地址<a href="https://github.com/medcl/elasticsearch-analysis-ik找到。" target="_blank" rel="noopener">https://github.com/medcl/elasticsearch-analysis-ik找到。</a></p><a id="more"></a><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>首先，我们可以到如下的地址查看一下是否有最新的版本对应你的Elasticsearch的发行版：</p><p><a href="https://github.com/medcl/elasticsearch-analysis-ik/releases" target="_blank" rel="noopener">https://github.com/medcl/elasticsearch-analysis-ik/releases</a></p><p>到目前截止日期，我们可以看到有最新的v7.3.1发行版。</p><p>那么，我们直接进入到我们的Elasticsearch的安装目录下，并打入如下的命令：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/elasticsearch-plugin nstall https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.3.1/elasticsearch-analysis-ik-7.3.1.zip</span><br></pre></td></tr></table></figure><p></p><p>替代上面的7.3.1安装你自己想要的版本：</p><p>安装好后，我们可以通过如下的命令来检查是否已经安装好：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">localhost:elasticsearch-7.3.0 liuxg$ ./bin/elasticsearch-plugin list</span><br><span class="line">analysis-ik</span><br></pre></td></tr></table></figure><p></p><p>上面的命令显示我们的IK已经安装成功了。</p><p>这个时候需要我们重新启动一下我们的Elasticsearch，以便这个plugin能装被加载。</p><h1 id="使用IK分词器"><a href="#使用IK分词器" class="headerlink" title="使用IK分词器"></a>使用IK分词器</h1><p>首先我们创建一个index:<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PUT chinese</span><br></pre></td></tr></table></figure><p></p><p>接下来，我们来为这个index 创建一个mapping<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">PUT /chinese/_mapping</span><br><span class="line">&#123;</span><br><span class="line">  &quot;properties&quot;: &#123;</span><br><span class="line">    &quot;content&quot;: &#123;</span><br><span class="line">      &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">      &quot;analyzer&quot;: &quot;ik_max_word&quot;,</span><br><span class="line">      &quot;search_analyzer&quot;: &quot;ik_smart&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>运行上面的命令后，如果出现如下的信息：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;acknowledged&quot; : true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>它表明我们的安装时成功的。</p><p>接下来，我们来index一些文档：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET /chinese/_analyze</span><br><span class="line">&#123;</span><br><span class="line">  &quot;text&quot;: &quot;我爱北京天安门&quot;,</span><br><span class="line">  &quot;analyzer&quot;: &quot;ik_max_word&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>显示的结果为：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;tokens&quot; : [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot; : &quot;我&quot;,</span><br><span class="line">      &quot;start_offset&quot; : 0,</span><br><span class="line">      &quot;end_offset&quot; : 1,</span><br><span class="line">      &quot;type&quot; : &quot;CN_CHAR&quot;,</span><br><span class="line">      &quot;position&quot; : 0</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot; : &quot;爱&quot;,</span><br><span class="line">      &quot;start_offset&quot; : 1,</span><br><span class="line">      &quot;end_offset&quot; : 2,</span><br><span class="line">      &quot;type&quot; : &quot;CN_CHAR&quot;,</span><br><span class="line">      &quot;position&quot; : 1</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot; : &quot;北京&quot;,</span><br><span class="line">      &quot;start_offset&quot; : 2,</span><br><span class="line">      &quot;end_offset&quot; : 4,</span><br><span class="line">      &quot;type&quot; : &quot;CN_WORD&quot;,</span><br><span class="line">      &quot;position&quot; : 2</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot; : &quot;天安门&quot;,</span><br><span class="line">      &quot;start_offset&quot; : 4,</span><br><span class="line">      &quot;end_offset&quot; : 7,</span><br><span class="line">      &quot;type&quot; : &quot;CN_WORD&quot;,</span><br><span class="line">      &quot;position&quot; : 3</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot; : &quot;天安&quot;,</span><br><span class="line">      &quot;start_offset&quot; : 4,</span><br><span class="line">      &quot;end_offset&quot; : 6,</span><br><span class="line">      &quot;type&quot; : &quot;CN_WORD&quot;,</span><br><span class="line">      &quot;position&quot; : 4</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot; : &quot;门&quot;,</span><br><span class="line">      &quot;start_offset&quot; : 6,</span><br><span class="line">      &quot;end_offset&quot; : 7,</span><br><span class="line">      &quot;type&quot; : &quot;CN_CHAR&quot;,</span><br><span class="line">      &quot;position&quot; : 5</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>从上面的结果我们可以看出来，在我们的token中显示“北京”，“天安”及“天安门”。这个和我们之前的是不一样的。</p><p>下面，我们输入两个文档：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">PUT /chinese/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;content&quot;:&quot;我爱北京天安门&quot;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">PUT  /chinese/_doc/2</span><br><span class="line">&#123;</span><br><span class="line">  &quot;content&quot;: &quot;北京，你好&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>那么我们可以，通过如下的方式来进行搜索：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /chinese/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;content&quot;: &quot;北京&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>我们显示的结果是：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;took&quot; : 1,</span><br><span class="line">  &quot;timed_out&quot; : false,</span><br><span class="line">  &quot;_shards&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : 1,</span><br><span class="line">    &quot;successful&quot; : 1,</span><br><span class="line">    &quot;skipped&quot; : 0,</span><br><span class="line">    &quot;failed&quot; : 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;hits&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : &#123;</span><br><span class="line">      &quot;value&quot; : 2,</span><br><span class="line">      &quot;relation&quot; : &quot;eq&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;max_score&quot; : 0.15965709,</span><br><span class="line">    &quot;hits&quot; : [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;chinese&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;2&quot;,</span><br><span class="line">        &quot;_score&quot; : 0.15965709,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;content&quot; : &quot;北京，你好&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;chinese&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;1&quot;,</span><br><span class="line">        &quot;_score&quot; : 0.100605845,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;content&quot; : &quot;我爱北京天安门&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>因为两个文档里都含有“北京”，我们可以看出来两个文档都被显示出来了。</p><p>我们同时做另外一个搜索：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /chinese/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;content&quot;: &quot;天安门&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>那么显示的结果是：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;took&quot; : 0,</span><br><span class="line">  &quot;timed_out&quot; : false,</span><br><span class="line">  &quot;_shards&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : 1,</span><br><span class="line">    &quot;successful&quot; : 1,</span><br><span class="line">    &quot;skipped&quot; : 0,</span><br><span class="line">    &quot;failed&quot; : 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;hits&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : &#123;</span><br><span class="line">      &quot;value&quot; : 1,</span><br><span class="line">      &quot;relation&quot; : &quot;eq&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;max_score&quot; : 0.73898095,</span><br><span class="line">    &quot;hits&quot; : [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;chinese&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;1&quot;,</span><br><span class="line">        &quot;_score&quot; : 0.73898095,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;content&quot; : &quot;我爱北京天安门&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>因为“天安门”只出现在第二个文档里，所以，我们可以看出来只有一个结果。</p><p>我们也同时做另外一个搜索：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /chinese/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;content&quot;: &quot;北京天安门&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>在这里，我们来搜索“北京天安门”。请注意我们在mapping中使用了<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;search_analyzer&quot;: &quot;ik_smart&quot;</span><br></pre></td></tr></table></figure><p></p><p>也就是说，search_analyzer会把我们的“北京天安门”，分解成两个词“北京”及“天安门”。这两个词将被用于搜索。通常对于match来说是OR关系，也就是说只要匹配到“北京”或“天安门”，这两个之中的任何一个，那么就是匹配：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;took&quot; : 3,</span><br><span class="line">  &quot;timed_out&quot; : false,</span><br><span class="line">  &quot;_shards&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : 1,</span><br><span class="line">    &quot;successful&quot; : 1,</span><br><span class="line">    &quot;skipped&quot; : 0,</span><br><span class="line">    &quot;failed&quot; : 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;hits&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : &#123;</span><br><span class="line">      &quot;value&quot; : 2,</span><br><span class="line">      &quot;relation&quot; : &quot;eq&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;max_score&quot; : 0.7268042,</span><br><span class="line">    &quot;hits&quot; : [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;chinese&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;1&quot;,</span><br><span class="line">        &quot;_score&quot; : 0.7268042,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;content&quot; : &quot;我爱北京天安门&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;chinese&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;2&quot;,</span><br><span class="line">        &quot;_score&quot; : 0.22920427,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;content&quot; : &quot;北京，你好&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>上面显示的结果显示“我爱北京天安门”是最贴切的搜索结果。</p><p>参考：<br>【1】<a href="https://github.com/medcl/elasticsearch-analysis-ik" target="_blank" rel="noopener">https://github.com/medcl/elasticsearch-analysis-ik</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Thu Jan 02 2020 10:53:05 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;Elasticsearch内置的分词器对中文不友好，只会一个字一个字的分，无法形成词语，比如：&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;POST /_analyze&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;quot;text&amp;quot;: &amp;quot;我爱北京天安门&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;quot;analyzer&amp;quot;: &amp;quot;standard&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;如果我们使用的是standard的分词器，那么结果就是：&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;quot;tokens&amp;quot; : [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;quot;token&amp;quot; : &amp;quot;我&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;quot;start_offset&amp;quot; : 0,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;quot;end_offset&amp;quot; : 1,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;quot;type&amp;quot; : &amp;quot;&amp;lt;IDEOGRAPHIC&amp;gt;&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;quot;position&amp;quot; : 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;quot;token&amp;quot; : &amp;quot;爱&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;quot;start_offset&amp;quot; : 1,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;quot;end_offset&amp;quot; : 2,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;quot;type&amp;quot; : &amp;quot;&amp;lt;IDEOGRAPHIC&amp;gt;&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;quot;position&amp;quot; : 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;quot;token&amp;quot; : &amp;quot;门&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;quot;start_offset&amp;quot; : 6,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;quot;end_offset&amp;quot; : 7,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;quot;type&amp;quot; : &amp;quot;&amp;lt;IDEOGRAPHIC&amp;gt;&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;quot;position&amp;quot; : 6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;显然这对中文来说并不友好，它显示的每一个汉字。好在Elastic的大拿medcl已经为我们做好IK中文分词器。下面我们来详细介绍如何安装并使用中文分词器。具体的安装步骤可以在地址&lt;a href=&quot;https://github.com/medcl/elasticsearch-analysis-ik找到。&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/medcl/elasticsearch-analysis-ik找到。&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="elk" scheme="https://yongnights.github.io/categories/elk/"/>
    
    
      <category term="elk" scheme="https://yongnights.github.io/tags/elk/"/>
    
  </entry>
  
  <entry>
    <title>lasticsearch：ICU分词器介绍</title>
    <link href="https://yongnights.github.io/2020/01/02/lasticsearch%EF%BC%9AICU%E5%88%86%E8%AF%8D%E5%99%A8%E4%BB%8B%E7%BB%8D/"/>
    <id>https://yongnights.github.io/2020/01/02/lasticsearch：ICU分词器介绍/</id>
    <published>2020-01-02T02:51:19.424Z</published>
    <updated>2020-01-02T02:48:55.432Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Jan 02 2020 10:53:05 GMT+0800 (GMT+08:00) --><p>ICU Analysis插件是一组将Lucene ICU模块集成到Elasticsearch中的库。 本质上，ICU的目的是增加对Unicode和全球化的支持，以提供对亚洲语言更好的文本分割分析。 从Elasticsearch的角度来看，此插件提供了文本分析中的新组件，如下表所示:</p><p><img src="https://img-blog.csdnimg.cn/20191004233028283.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1VidW50dVRvdWNo,size_16,color_FFFFFF,t_70" alt></p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>我们可以首先到Elasticsearch的安装目录打入如下的命令：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ pwd</span><br><span class="line">/Users/liuxg/elastic/elasticsearch-7.3.0</span><br><span class="line">(base) localhost:elasticsearch-7.3.0 liuxg$ ./bin/elasticsearch-plugin list</span><br><span class="line">analysis-icu</span><br><span class="line">analysis-ik</span><br><span class="line">pinyin</span><br></pre></td></tr></table></figure><p></p><p>上面显示我已经安装好了三个插件。上面的analysis-ik及pinyin都是为中文而准备的。</p><blockquote><p>注意：如果你们在使用上面的elasticsearch-plug list命名出现如下的错误的话：</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20191004233733548.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1VidW50dVRvdWNo,size_16,color_FFFFFF,t_70" alt></p><p>那么请使用如下的命令来删除在当前目录下的.DS_Store目录：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo find /Path/to/your/elasticsearch-folder -name &quot;.DS_Store&quot; -depth -exec rm &#123;&#125; \;</span><br></pre></td></tr></table></figure><p></p><p>然后重新运行上面的命令就不会有问题了。</p><a id="more"></a><p>上面显示我已经安装好了。如果在你的电脑里没有安装好，可以使用如下的命令来进行安装：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/elasticsearch-plugin install analysis-icu</span><br></pre></td></tr></table></figure><p></p><p>上面的命令在Elasticsearch的安装目录里进行运行。等安装好后，我们需要重新启动Elasticsearch让它起作用。重新运行：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/elasticsearch-plugin list</span><br></pre></td></tr></table></figure><p></p><p>来检查analysis-icu是否已经被成功安装好了。</p><h1 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h1><p>等我们完全安装好了analysis_icu，那么，我们可以使用如下的例子在Kibana中来做一个实验：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">POST _analyze </span><br><span class="line">&#123;</span><br><span class="line">  &quot;text&quot;: &quot;我爱北京天安门&quot;,</span><br><span class="line">  &quot;analyzer&quot;: &quot;icu_analyzer&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>那么显示的结果是：</p><p><img src="https://img-blog.csdnimg.cn/20191006160617927.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1VidW50dVRvdWNo,size_16,color_FFFFFF,t_70" alt></p><p>上面显示，我们analysis可以正确地帮我们把中文词语安装中文的分词方法正确地进行分词。</p><p>我们可以和standard分词器来进行一个比较：</p><p><img src="https://img-blog.csdnimg.cn/20191004235039310.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1VidW50dVRvdWNo,size_16,color_FFFFFF,t_70" alt></p><p>我们从上面可以看出来，在默认的情况下，icu_analyzer通常是一个及以上的字符的token，而standard的analyzer只有一个字符。</p><p>通过更改字符过滤器和token的方法和模式参数，ICU分析器可以具有多种自定义变量类型。 下表描述了不同类型的ICU分析仪的组合：</p><p><img src="https://img-blog.csdnimg.cn/20191006160916654.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1VidW50dVRvdWNo,size_16,color_FFFFFF,t_70" alt></p><p>让我们尝试nfkd_normalized分析器。 遵循定义并在Kibana Dev Tools控制台中对其进行测试。 响应显示在以下屏幕截图中。 但是，由于使用nfkd_normalized分析器和icu_analyzer分析器，我们无法在结果中找到任何差异：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST _analyze </span><br><span class="line">&#123;</span><br><span class="line">  &quot;text&quot;: &quot;股市投资稳赚不赔必修课：如何做好仓位管理和情绪管理&quot;,</span><br><span class="line">  &quot;char_filter&quot;: [&#123;&quot;type&quot;: &quot;icu_normalizer&quot;, &quot;name&quot;: &quot;nfkc&quot;, &quot;mode&quot;:&quot;decompose&quot;&#125;], </span><br><span class="line">  &quot;tokenizer&quot;: &quot;icu_tokenizer&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>运行结果：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;tokens&quot; : [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot; : &quot;股市&quot;,</span><br><span class="line">      &quot;start_offset&quot; : 0,</span><br><span class="line">      &quot;end_offset&quot; : 2,</span><br><span class="line">      &quot;type&quot; : &quot;&lt;IDEOGRAPHIC&gt;&quot;,</span><br><span class="line">      &quot;position&quot; : 0</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot; : &quot;投资&quot;,</span><br><span class="line">      &quot;start_offset&quot; : 2,</span><br><span class="line">      &quot;end_offset&quot; : 4,</span><br><span class="line">      &quot;type&quot; : &quot;&lt;IDEOGRAPHIC&gt;&quot;,</span><br><span class="line">      &quot;position&quot; : 1</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot; : &quot;稳赚&quot;,</span><br><span class="line">      &quot;start_offset&quot; : 4,</span><br><span class="line">      &quot;end_offset&quot; : 6,</span><br><span class="line">      &quot;type&quot; : &quot;&lt;IDEOGRAPHIC&gt;&quot;,</span><br><span class="line">      &quot;position&quot; : 2</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot; : &quot;不&quot;,</span><br><span class="line">      &quot;start_offset&quot; : 6,</span><br><span class="line">      &quot;end_offset&quot; : 7,</span><br><span class="line">      &quot;type&quot; : &quot;&lt;IDEOGRAPHIC&gt;&quot;,</span><br><span class="line">      &quot;position&quot; : 3</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot; : &quot;赔&quot;,</span><br><span class="line">      &quot;start_offset&quot; : 7,</span><br><span class="line">      &quot;end_offset&quot; : 8,</span><br><span class="line">      &quot;type&quot; : &quot;&lt;IDEOGRAPHIC&gt;&quot;,</span><br><span class="line">      &quot;position&quot; : 4</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot; : &quot;必修&quot;,</span><br><span class="line">      &quot;start_offset&quot; : 8,</span><br><span class="line">      &quot;end_offset&quot; : 10,</span><br><span class="line">      &quot;type&quot; : &quot;&lt;IDEOGRAPHIC&gt;&quot;,</span><br><span class="line">      &quot;position&quot; : 5</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot; : &quot;课&quot;,</span><br><span class="line">      &quot;start_offset&quot; : 10,</span><br><span class="line">      &quot;end_offset&quot; : 11,</span><br><span class="line">      &quot;type&quot; : &quot;&lt;IDEOGRAPHIC&gt;&quot;,</span><br><span class="line">      &quot;position&quot; : 6</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot; : &quot;如何&quot;,</span><br><span class="line">      &quot;start_offset&quot; : 12,</span><br><span class="line">      &quot;end_offset&quot; : 14,</span><br><span class="line">      &quot;type&quot; : &quot;&lt;IDEOGRAPHIC&gt;&quot;,</span><br><span class="line">      &quot;position&quot; : 7</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot; : &quot;做好&quot;,</span><br><span class="line">      &quot;start_offset&quot; : 14,</span><br><span class="line">      &quot;end_offset&quot; : 16,</span><br><span class="line">      &quot;type&quot; : &quot;&lt;IDEOGRAPHIC&gt;&quot;,</span><br><span class="line">      &quot;position&quot; : 8</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot; : &quot;仓&quot;,</span><br><span class="line">      &quot;start_offset&quot; : 16,</span><br><span class="line">      &quot;end_offset&quot; : 17,</span><br><span class="line">      &quot;type&quot; : &quot;&lt;IDEOGRAPHIC&gt;&quot;,</span><br><span class="line">      &quot;position&quot; : 9</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot; : &quot;位&quot;,</span><br><span class="line">      &quot;start_offset&quot; : 17,</span><br><span class="line">      &quot;end_offset&quot; : 18,</span><br><span class="line">      &quot;type&quot; : &quot;&lt;IDEOGRAPHIC&gt;&quot;,</span><br><span class="line">      &quot;position&quot; : 10</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot; : &quot;管理&quot;,</span><br><span class="line">      &quot;start_offset&quot; : 18,</span><br><span class="line">      &quot;end_offset&quot; : 20,</span><br><span class="line">      &quot;type&quot; : &quot;&lt;IDEOGRAPHIC&gt;&quot;,</span><br><span class="line">      &quot;position&quot; : 11</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot; : &quot;和&quot;,</span><br><span class="line">      &quot;start_offset&quot; : 20,</span><br><span class="line">      &quot;end_offset&quot; : 21,</span><br><span class="line">      &quot;type&quot; : &quot;&lt;IDEOGRAPHIC&gt;&quot;,</span><br><span class="line">      &quot;position&quot; : 12</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot; : &quot;情绪&quot;,</span><br><span class="line">      &quot;start_offset&quot; : 21,</span><br><span class="line">      &quot;end_offset&quot; : 23,</span><br><span class="line">      &quot;type&quot; : &quot;&lt;IDEOGRAPHIC&gt;&quot;,</span><br><span class="line">      &quot;position&quot; : 13</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot; : &quot;管理&quot;,</span><br><span class="line">      &quot;start_offset&quot; : 23,</span><br><span class="line">      &quot;end_offset&quot; : 25,</span><br><span class="line">      &quot;type&quot; : &quot;&lt;IDEOGRAPHIC&gt;&quot;,</span><br><span class="line">      &quot;position&quot; : 14</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>要使用新定义的分析器，我们必须在Index setting中对其进行定义。请参阅我之前的文章“Elasticsearch: analyzer”。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Thu Jan 02 2020 10:53:05 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;ICU Analysis插件是一组将Lucene ICU模块集成到Elasticsearch中的库。 本质上，ICU的目的是增加对Unicode和全球化的支持，以提供对亚洲语言更好的文本分割分析。 从Elasticsearch的角度来看，此插件提供了文本分析中的新组件，如下表所示:&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20191004233028283.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1VidW50dVRvdWNo,size_16,color_FFFFFF,t_70&quot; alt&gt;&lt;/p&gt;&lt;h1 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h1&gt;&lt;p&gt;我们可以首先到Elasticsearch的安装目录打入如下的命令：&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ pwd&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/Users/liuxg/elastic/elasticsearch-7.3.0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(base) localhost:elasticsearch-7.3.0 liuxg$ ./bin/elasticsearch-plugin list&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;analysis-icu&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;analysis-ik&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pinyin&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;上面显示我已经安装好了三个插件。上面的analysis-ik及pinyin都是为中文而准备的。&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;注意：如果你们在使用上面的elasticsearch-plug list命名出现如下的错误的话：&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20191004233733548.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1VidW50dVRvdWNo,size_16,color_FFFFFF,t_70&quot; alt&gt;&lt;/p&gt;&lt;p&gt;那么请使用如下的命令来删除在当前目录下的.DS_Store目录：&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo find /Path/to/your/elasticsearch-folder -name &amp;quot;.DS_Store&amp;quot; -depth -exec rm &amp;#123;&amp;#125; \;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;然后重新运行上面的命令就不会有问题了。&lt;/p&gt;
    
    </summary>
    
      <category term="elk" scheme="https://yongnights.github.io/categories/elk/"/>
    
    
      <category term="elk" scheme="https://yongnights.github.io/tags/elk/"/>
    
  </entry>
  
  <entry>
    <title>lasticsearch：fuzzy 搜索(模糊搜索)</title>
    <link href="https://yongnights.github.io/2020/01/02/lasticsearch%EF%BC%9Afuzzy%20%E6%90%9C%E7%B4%A2%20%EF%BC%88%E6%A8%A1%E7%B3%8A%E6%90%9C%E7%B4%A2)/"/>
    <id>https://yongnights.github.io/2020/01/02/lasticsearch：fuzzy 搜索 （模糊搜索)/</id>
    <published>2020-01-02T02:51:19.423Z</published>
    <updated>2020-01-02T02:48:19.128Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Jan 02 2020 10:53:05 GMT+0800 (GMT+08:00) --><p>在实际的搜索中，我们有时候会打错字，从而导致搜索不到。在Elasticsearch中，我们可以使用fuzziness属性来进行模糊查询，从而达到搜索有错别字的情形。</p><p>match查询具有“fuziness”属性。它可以被设置为“0”， “1”， “2”或“auto”。“auto”是推荐的选项，它会根据查询词的长度定义距离。</p><h1 id="Fuzzy-query"><a href="#Fuzzy-query" class="headerlink" title="Fuzzy query"></a>Fuzzy query</h1><p>返回包含与搜索词相似的词的文档，以Levenshtein编辑距离测量。</p><p>编辑距离是将一个术语转换为另一个术语所需的一个字符更改的次数。 这些更改可以包括：</p><ul><li>更改字符（box→fox）</li><li>删除字符（black→lack）</li><li>插入字符（sic→sick）</li><li>转置两个相邻字符（act→cat）</li></ul><p>为了找到相似的词，模糊查询会在指定的编辑距离内创建搜索词的所有可能变化或扩展的集合。 查询然后返回每个扩展的完全匹配。</p><p><img src="https://img-blog.csdnimg.cn/20191014111717533.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1VidW50dVRvdWNo,size_16,color_FFFFFF,t_70" alt></p><a id="more"></a><h1 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h1><p>我们首先输入如下的一个文档到fuzzyindex索引中：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PUT fuzzyindex/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;content&quot;: &quot;I like blue sky&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>如果这个时候，我们进行如下的搜索：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET fuzzyindex/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;content&quot;: &quot;ski&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>那么是没有任何被搜索到的结果，这是因为“I like blue sky” 里分词后没有ski这个词。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;took&quot; : 0,</span><br><span class="line">  &quot;timed_out&quot; : false,</span><br><span class="line">  &quot;_shards&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : 1,</span><br><span class="line">    &quot;successful&quot; : 1,</span><br><span class="line">    &quot;skipped&quot; : 0,</span><br><span class="line">    &quot;failed&quot; : 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;hits&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : &#123;</span><br><span class="line">      &quot;value&quot; : 0,</span><br><span class="line">      &quot;relation&quot; : &quot;eq&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;max_score&quot; : null,</span><br><span class="line">    &quot;hits&quot; : [ ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>这个时候，如果我们使用如下的搜索：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET fuzzyindex/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;content&quot;: &#123;</span><br><span class="line">        &quot;query&quot;: &quot;ski&quot;,</span><br><span class="line">        &quot;fuzziness&quot;: &quot;1&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>那么显示的结果是：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;took&quot; : 18,</span><br><span class="line">  &quot;timed_out&quot; : false,</span><br><span class="line">  &quot;_shards&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : 1,</span><br><span class="line">    &quot;successful&quot; : 1,</span><br><span class="line">    &quot;skipped&quot; : 0,</span><br><span class="line">    &quot;failed&quot; : 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;hits&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : &#123;</span><br><span class="line">      &quot;value&quot; : 1,</span><br><span class="line">      &quot;relation&quot; : &quot;eq&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;max_score&quot; : 0.19178805,</span><br><span class="line">    &quot;hits&quot; : [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;fuzzyindex&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;1&quot;,</span><br><span class="line">        &quot;_score&quot; : 0.19178805,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;content&quot; : &quot;I like blue sky&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>显然是找到我们需要的结果了。这是因为sky和ski时间上是只差别一个字母。</p><p>同样，如果我们选用“auto”选项看看：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET fuzzyindex/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;content&quot;: &#123;</span><br><span class="line">        &quot;query&quot;: &quot;ski&quot;,</span><br><span class="line">        &quot;fuzziness&quot;: &quot;auto&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>它显示的结果和上面的是一样的。也可以进行匹配。</p><p>如果我们进行如下的匹配：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET fuzzyindex/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;content&quot;: &#123;</span><br><span class="line">        &quot;query&quot;: &quot;bxxe&quot;,</span><br><span class="line">        &quot;fuzziness&quot;: &quot;auto&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>那么它不能匹配任何的结果，但是，如果我们进行如下的搜索：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET fuzzyindex/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;content&quot;: &#123;</span><br><span class="line">        &quot;query&quot;: &quot;bxxe&quot;,</span><br><span class="line">        &quot;fuzziness&quot;: &quot;2&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>我们也可以使用如下的格式：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET /_search</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;: &#123;</span><br><span class="line">        &quot;fuzzy&quot;: &#123;</span><br><span class="line">            &quot;content&quot;: &#123;</span><br><span class="line">                &quot;value&quot;: &quot;bxxe&quot;,</span><br><span class="line">                &quot;fuzziness&quot;: &quot;2&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>那么它可以显示搜索的结果，这是因为我们能够容许两个编辑的错误。</p><p>模糊性是拼写错误的简单解决方案，但具有很高的CPU开销和非常低的精度。</p><p>参考：<br>【1】<a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.4/query-dsl-fuzzy-query.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/7.4/query-dsl-fuzzy-query.html</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Thu Jan 02 2020 10:53:05 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;在实际的搜索中，我们有时候会打错字，从而导致搜索不到。在Elasticsearch中，我们可以使用fuzziness属性来进行模糊查询，从而达到搜索有错别字的情形。&lt;/p&gt;&lt;p&gt;match查询具有“fuziness”属性。它可以被设置为“0”， “1”， “2”或“auto”。“auto”是推荐的选项，它会根据查询词的长度定义距离。&lt;/p&gt;&lt;h1 id=&quot;Fuzzy-query&quot;&gt;&lt;a href=&quot;#Fuzzy-query&quot; class=&quot;headerlink&quot; title=&quot;Fuzzy query&quot;&gt;&lt;/a&gt;Fuzzy query&lt;/h1&gt;&lt;p&gt;返回包含与搜索词相似的词的文档，以Levenshtein编辑距离测量。&lt;/p&gt;&lt;p&gt;编辑距离是将一个术语转换为另一个术语所需的一个字符更改的次数。 这些更改可以包括：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;更改字符（box→fox）&lt;/li&gt;&lt;li&gt;删除字符（black→lack）&lt;/li&gt;&lt;li&gt;插入字符（sic→sick）&lt;/li&gt;&lt;li&gt;转置两个相邻字符（act→cat）&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;为了找到相似的词，模糊查询会在指定的编辑距离内创建搜索词的所有可能变化或扩展的集合。 查询然后返回每个扩展的完全匹配。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20191014111717533.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1VidW50dVRvdWNo,size_16,color_FFFFFF,t_70&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="elk" scheme="https://yongnights.github.io/categories/elk/"/>
    
    
      <category term="elk" scheme="https://yongnights.github.io/tags/elk/"/>
    
  </entry>
  
  <entry>
    <title>Elasticsearch：运用shard filtering来控制索引分配给哪个节点</title>
    <link href="https://yongnights.github.io/2020/01/02/Elasticsearch%EF%BC%9A%E8%BF%90%E7%94%A8shard%20filtering%E6%9D%A5%E6%8E%A7%E5%88%B6%E7%B4%A2%E5%BC%95%E5%88%86%E9%85%8D%E7%BB%99%E5%93%AA%E4%B8%AA%E8%8A%82%E7%82%B9/"/>
    <id>https://yongnights.github.io/2020/01/02/Elasticsearch：运用shard filtering来控制索引分配给哪个节点/</id>
    <published>2020-01-02T02:51:19.421Z</published>
    <updated>2020-01-02T02:47:52.705Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Jan 02 2020 10:53:05 GMT+0800 (GMT+08:00) --><p>在我们的实际部署中，我们的各个node（节点）的能力是不一样的。比如有的节点的计算能力比较强，而且配有高性能的存储，速度也比较快，同时我们可能有一些node的能力稍微差一点，比如计算能力及存储器的速度都比较差一点。针对这两种情况，我们其实可以把这两种节点用来做不同的用途：运算能力较强的节点可以用来做indexing（建立索引表格）的工作，而那些能力较差一点的节点，我们可以用来做搜索用途。我们可以把这两种节点分别叫做：</p><ul><li>hot node：用于支持索引并写入新文档</li><li>warm node：用于处理不太频繁查询的只读索引</li></ul><p>这种架构在Elasticsearch中，我们称之为hot/warm架构。</p><h1 id="Hot-node"><a href="#Hot-node" class="headerlink" title="Hot node"></a>Hot node</h1><p>我们可以使用hot node来做indexing：</p><ul><li>indexing是CPU和IO的密集操作，因此热节点应该是功能强大的服务器</li><li>比warm node更快的存储</li></ul><p><img src="https://img-blog.csdnimg.cn/20191022203619461.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1VidW50dVRvdWNo,size_16,color_FFFFFF,t_70" alt></p><a id="more"></a><h1 id="Warm-node"><a href="#Warm-node" class="headerlink" title="Warm node"></a>Warm node</h1><p>对较旧的只读索引使用热节点：</p><ul><li>倾向于利用大型附加磁盘（通常是旋转磁盘）</li><li>大量数据可能需要其他节点才能满足性能要求</li></ul><p><img src="https://img-blog.csdnimg.cn/20191022203841566.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1VidW50dVRvdWNo,size_16,color_FFFFFF,t_70" alt></p><h1 id="Shard-filtering"><a href="#Shard-filtering" class="headerlink" title="Shard filtering"></a>Shard filtering</h1><p>Shard filtering在Elasticsearch中，我们可以利用这个能力来把我们想要的index放入到我们想要的node里。我们可以使用在elasticsearch.yml配置文件中的：</p><ul><li>node.attr来指定我们node属性：hot或是warm。</li><li>在index的settings里通过index.routing.allocation来指定索引（index)到一个满足要求的node</li></ul><p>为节点分配索引有三种规则：</p><p><img src="https://img-blog.csdnimg.cn/2019102220445254.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1VidW50dVRvdWNo,size_16,color_FFFFFF,t_70" alt></p><p>就像上面的表格说明的一样：include指的是至少包含其中的一个值；exclude指的是不包含任何值；require指的是必须包含里面索引的值。这些值实际上我们用来标识node的tag。针对自己的配置这些tag可以由厂商自己标识。</p><h2 id="标识node"><a href="#标识node" class="headerlink" title="标识node"></a>标识node</h2><p><img src="https://img-blog.csdnimg.cn/20191022205226934.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1VidW50dVRvdWNo,size_16,color_FFFFFF,t_70" alt></p><p>在上面的图中，我们标识my_temp属性为hot或是warm，表明我们的cluster中分为两类：hot或是warm。在这里特别指出：这里的my_temp，hot及warm都是我们任意取的可以让我们记住的属性及名称。只要在使用时和index.routing.allocation.include index.routing.allocation.exclude及index.routing.allocation.require中的值相对应即可。</p><h2 id="配置index的settings"><a href="#配置index的settings" class="headerlink" title="配置index的settings"></a>配置index的settings</h2><p>我们可以通过配置在Index中的settings来分配我们的index到相应的具有哪些属性的node里，比如：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PUT logs-2019-03</span><br><span class="line">&#123;</span><br><span class="line">  &quot;settings&quot;: &#123;</span><br><span class="line">    &quot;index.routing.allocation.require.my_temp&quot;: &quot;hot&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>在上面我们通过logs-2019-03的这个index的settings来控制这个index必须分配到具有hot属性的node里。</p><p>假如我们上面的index logs-2019-03由于一些原因不再是当前的用来做indexing的index，比如我们可以通过rollover API接口来自动滚动我们的index名字。我们可以通过如下的命令把该index移动到warm node里：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PUT logs-2019-03</span><br><span class="line">&#123;</span><br><span class="line">  &quot;settings&quot;: &#123;</span><br><span class="line">    &quot;index.routing.allocation.require.my_temp&quot;: &quot;warm&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>这样Elasticsearch会自动帮我们把logs-2019-03索引移动到warm node中，以便直供搜索之用。</p><h1 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h1><p>首先，我们我们按照如下的方式来做一个实验，虽然不能应用于实际的生产环境中：</p><ol><li>按照“如何在Linux，MacOS及Windows上进行安装Elasticsearch”安装好自己的Elasticsearh，但是不要运行Elasticsearch</li><li>按照“如何在Linux及MacOS上安装Elastic栈中的Kibana”安装好自己的Kibana</li></ol><p>在我们完成上面的两个安装后，我们分别打开两个terminal，然后分别在两个terminal中运行如下的指令：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/elasticsearch -E node.name=node1 -E node.attr.data=hot -Enode.max_local_storage_nodes=2</span><br></pre></td></tr></table></figure><p></p><p>上面的指令运行一个名字叫做node1的，data属性为hot的node。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/elasticsearch -E node.name=node2 -E node.attr.data=warm -Enode.max_local_storage_nodes=2</span><br></pre></td></tr></table></figure><p></p><p>上面的指令运行一个名字叫做node2的，data属性为hot的warm。</p><p>我们可以在Kibana里查看我们的nodes：</p><p><img src="https://img-blog.csdnimg.cn/20191022213646237.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1VidW50dVRvdWNo,size_16,color_FFFFFF,t_70" alt></p><p>我们可以看出来有两个node正在运行：node1及node2。如果我们想了解这两个node的更多属性，我们可以打入如下的命令：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET _cat/nodeattrs?v&amp;s=name</span><br></pre></td></tr></table></figure><p></p><p>显示的结果为：</p><p><img src="https://img-blog.csdnimg.cn/201910222140357.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1VidW50dVRvdWNo,size_16,color_FFFFFF,t_70" alt></p><p>我们可以看到node被标识为hot node，而node2被标识为warm node。</p><p>接下来，我们运用我们上面命令来把我们的logs-2019-03置于我们的hot node里。我们可以通过如下的命令：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">PUT logs-2019-03</span><br><span class="line">&#123;</span><br><span class="line">  &quot;settings&quot;: &#123;</span><br><span class="line">    &quot;number_of_shards&quot;: 1,</span><br><span class="line">    &quot;number_of_replicas&quot;: 0, </span><br><span class="line">    &quot;index.routing.allocation.require.data&quot;: &quot;hot&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>运行上面的结果后，可以通过如下的命令来查看：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET _cat/shards/logs-*?v&amp;h=index,shard,prirep,state,node&amp;s=index,shard,prirep</span><br></pre></td></tr></table></figure><p></p><p>显示的结果为：</p><p><img src="https://img-blog.csdnimg.cn/20191022215525154.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1VidW50dVRvdWNo,size_16,color_FFFFFF,t_70" alt></p><p>从上面我们可以看出来我们的logs-2019-03是分配到node1上面的。</p><p>假如我们由于某种原因，想把logs-2019-03分配到node2上面，那么该怎么做呢？我们可以通过如下的命令来实现：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PUT logs-2019-03/_settings</span><br><span class="line">&#123;</span><br><span class="line">  &quot;index.routing.allocation.require.data&quot;: &quot;warm&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>运行上面的指令显示的结果是：</p><p>显然我们logs-2019-03已经成功地移到node2了。</p><h1 id="针对硬件的shard-filtering"><a href="#针对硬件的shard-filtering" class="headerlink" title="针对硬件的shard filtering"></a>针对硬件的shard filtering</h1><p>上面我们说了，对于node.attr来说，我们可以添加任意的属性。在上面的我们已经使用hot/warm来标识我们的my_temp属性。其实我们也可以同时定义一些能标识硬件的属性my_server，这个属性值可以为small，medium及large。有多个属性组成的集群就像是如下的结构：</p><p><img src="https://img-blog.csdnimg.cn/20191024180643722.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1VidW50dVRvdWNo,size_16,color_FFFFFF,t_70" alt></p><p>那么这样的集群里的每个node可能具有不同的属性。我们可以通过如下的方法来分配index到同时具有两个或以上属性的node里:<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">PUT my_index1 </span><br><span class="line">&#123;</span><br><span class="line">  &quot;settings&quot;: &#123;</span><br><span class="line">     &quot;number_of_shards&quot;: 2,</span><br><span class="line">      &quot;number_of_replicas&quot;: 1, </span><br><span class="line">      &quot;index.routing.allocation.include.my_server&quot;: &quot;medium&quot;,             </span><br><span class="line">      &quot;index.routing.allocation.require.my_temp&quot;: &quot;hot&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>如上所示，我们把我们的my_index1分配到这么一个node：这个node必须具有hot属性，同时也具有medium的属性。针对我们上面显示的图片，只有node1满足我们的要求。</p><p>总结：在今天的这篇文章中，我们介绍了如何使用shard filtering来控制我们的index的分配。在实际的操作中，可能大家会觉得麻烦一点，因为这个比较需要我们自己来管理这个。这个技术可以和我之前的文章“Elasticsearch: rollover API”一起配合使用。Elasticsearch实际已经帮我做好了。在接下来的文章里，我会来介绍如何使用Index life cycle policy来自动管理我们的Index。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Thu Jan 02 2020 10:53:05 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;在我们的实际部署中，我们的各个node（节点）的能力是不一样的。比如有的节点的计算能力比较强，而且配有高性能的存储，速度也比较快，同时我们可能有一些node的能力稍微差一点，比如计算能力及存储器的速度都比较差一点。针对这两种情况，我们其实可以把这两种节点用来做不同的用途：运算能力较强的节点可以用来做indexing（建立索引表格）的工作，而那些能力较差一点的节点，我们可以用来做搜索用途。我们可以把这两种节点分别叫做：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;hot node：用于支持索引并写入新文档&lt;/li&gt;&lt;li&gt;warm node：用于处理不太频繁查询的只读索引&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;这种架构在Elasticsearch中，我们称之为hot/warm架构。&lt;/p&gt;&lt;h1 id=&quot;Hot-node&quot;&gt;&lt;a href=&quot;#Hot-node&quot; class=&quot;headerlink&quot; title=&quot;Hot node&quot;&gt;&lt;/a&gt;Hot node&lt;/h1&gt;&lt;p&gt;我们可以使用hot node来做indexing：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;indexing是CPU和IO的密集操作，因此热节点应该是功能强大的服务器&lt;/li&gt;&lt;li&gt;比warm node更快的存储&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20191022203619461.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1VidW50dVRvdWNo,size_16,color_FFFFFF,t_70&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="elk" scheme="https://yongnights.github.io/categories/elk/"/>
    
    
      <category term="elk" scheme="https://yongnights.github.io/tags/elk/"/>
    
  </entry>
  
  <entry>
    <title>Elasticsearch：运用search_after来进行深度分页</title>
    <link href="https://yongnights.github.io/2020/01/02/Elasticsearch%EF%BC%9A%E8%BF%90%E7%94%A8search_after%E6%9D%A5%E8%BF%9B%E8%A1%8C%E6%B7%B1%E5%BA%A6%E5%88%86%E9%A1%B5/"/>
    <id>https://yongnights.github.io/2020/01/02/Elasticsearch：运用search_after来进行深度分页/</id>
    <published>2020-01-02T02:51:19.419Z</published>
    <updated>2020-01-02T02:47:32.424Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Jan 02 2020 10:53:05 GMT+0800 (GMT+08:00) --><p>在上一篇文章 “Elasticsearch：运用scroll接口对大量数据实现更好的分页”，我们讲述了如何运用scroll接口来对大量数据来进行有效地分页。在那篇文章中，我们讲述了两种方法：</p><ul><li>from加上size的方法来进行分页</li><li>运用scroll接口来进行分页</li></ul><p>对于大量的数据而言，我们尽量避免使用from+size这种方法。这里的原因是index.max_result_window的默认值是10K，也就是说from+size的最大值是1万。搜索请求占用堆内存和时间与from+size成比例，这限制了内存。假如你想hit从990到1000，那么每个shard至少需要1000个文档：</p><p><img src="https://img-blog.csdnimg.cn/20190919215711682.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1VidW50dVRvdWNo,size_16,color_FFFFFF,t_70" alt></p><p>为了避免过度使得我们的cluster繁忙，通常Scroll接口被推荐作为深层次的scrolling，但是因为维护scroll上下文也是非常昂贵的，所以这种方法不推荐作为实时用户请求。search_after参数通过提供实时cursor来解决此问题。 我们的想法是使用上一页的结果来帮助检索下一页。</p><p>我们先输入如下的文档到twitter索引中：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">POST _bulk</span><br><span class="line">&#123; &quot;index&quot; : &#123; &quot;_index&quot; : &quot;twitter&quot;, &quot;_id&quot;: 1&#125; &#125;</span><br><span class="line">&#123;&quot;user&quot;:&quot;双榆树-张三&quot;, &quot;DOB&quot;:&quot;1980-01-01&quot;, &quot;message&quot;:&quot;今儿天气不错啊，出去转转去&quot;,&quot;uid&quot;:2,&quot;age&quot;:20,&quot;city&quot;:&quot;北京&quot;,&quot;province&quot;:&quot;北京&quot;,&quot;country&quot;:&quot;中国&quot;,&quot;address&quot;:&quot;中国北京市海淀区&quot;,&quot;location&quot;:&#123;&quot;lat&quot;:&quot;39.970718&quot;,&quot;lon&quot;:&quot;116.325747&quot;&#125;&#125;</span><br><span class="line">&#123; &quot;index&quot; : &#123; &quot;_index&quot; : &quot;twitter&quot;, &quot;_id&quot;: 2 &#125;&#125;</span><br><span class="line">&#123;&quot;user&quot;:&quot;东城区-老刘&quot;, &quot;DOB&quot;:&quot;1981-01-01&quot;, &quot;message&quot;:&quot;出发，下一站云南！&quot;,&quot;uid&quot;:3,&quot;age&quot;:30,&quot;city&quot;:&quot;北京&quot;,&quot;province&quot;:&quot;北京&quot;,&quot;country&quot;:&quot;中国&quot;,&quot;address&quot;:&quot;中国北京市东城区台基厂三条3号&quot;,&quot;location&quot;:&#123;&quot;lat&quot;:&quot;39.904313&quot;,&quot;lon&quot;:&quot;116.412754&quot;&#125;&#125;</span><br><span class="line">&#123; &quot;index&quot; : &#123; &quot;_index&quot; : &quot;twitter&quot;, &quot;_id&quot;: 3&#125; &#125;</span><br><span class="line">&#123;&quot;user&quot;:&quot;东城区-李四&quot;, &quot;DOB&quot;:&quot;1982-01-01&quot;, &quot;message&quot;:&quot;happy birthday!&quot;,&quot;uid&quot;:4,&quot;age&quot;:30,&quot;city&quot;:&quot;北京&quot;,&quot;province&quot;:&quot;北京&quot;,&quot;country&quot;:&quot;中国&quot;,&quot;address&quot;:&quot;中国北京市东城区&quot;,&quot;location&quot;:&#123;&quot;lat&quot;:&quot;39.893801&quot;,&quot;lon&quot;:&quot;116.408986&quot;&#125;&#125;</span><br><span class="line">&#123; &quot;index&quot; : &#123; &quot;_index&quot; : &quot;twitter&quot;, &quot;_id&quot;: 4&#125; &#125;</span><br><span class="line">&#123;&quot;user&quot;:&quot;朝阳区-老贾&quot;,&quot;DOB&quot;:&quot;1983-01-01&quot;, &quot;message&quot;:&quot;123,gogogo&quot;,&quot;uid&quot;:5,&quot;age&quot;:35,&quot;city&quot;:&quot;北京&quot;,&quot;province&quot;:&quot;北京&quot;,&quot;country&quot;:&quot;中国&quot;,&quot;address&quot;:&quot;中国北京市朝阳区建国门&quot;,&quot;location&quot;:&#123;&quot;lat&quot;:&quot;39.718256&quot;,&quot;lon&quot;:&quot;116.367910&quot;&#125;&#125;</span><br><span class="line">&#123; &quot;index&quot; : &#123; &quot;_index&quot; : &quot;twitter&quot;, &quot;_id&quot;: 5&#125; &#125;</span><br><span class="line">&#123;&quot;user&quot;:&quot;朝阳区-老王&quot;,&quot;DOB&quot;:&quot;1984-01-01&quot;, &quot;message&quot;:&quot;Happy BirthDay My Friend!&quot;,&quot;uid&quot;:6,&quot;age&quot;:50,&quot;city&quot;:&quot;北京&quot;,&quot;province&quot;:&quot;北京&quot;,&quot;country&quot;:&quot;中国&quot;,&quot;address&quot;:&quot;中国北京市朝阳区国贸&quot;,&quot;location&quot;:&#123;&quot;lat&quot;:&quot;39.918256&quot;,&quot;lon&quot;:&quot;116.467910&quot;&#125;&#125;</span><br><span class="line">&#123; &quot;index&quot; : &#123; &quot;_index&quot; : &quot;twitter&quot;, &quot;_id&quot;: 6&#125; &#125;</span><br><span class="line">&#123;&quot;user&quot;:&quot;虹桥-老吴&quot;, &quot;DOB&quot;:&quot;1985-01-01&quot;, &quot;message&quot;:&quot;好友来了都今天我生日，好友来了,什么 birthday happy 就成!&quot;,&quot;uid&quot;:7,&quot;age&quot;:90,&quot;city&quot;:&quot;上海&quot;,&quot;province&quot;:&quot;上海&quot;,&quot;country&quot;:&quot;中国&quot;,&quot;address&quot;:&quot;中国上海市闵行区&quot;,&quot;location&quot;:&#123;&quot;lat&quot;:&quot;31.175927&quot;,&quot;lon&quot;:&quot;121.383328&quot;&#125;&#125;</span><br></pre></td></tr></table></figure><p></p><a id="more"></a><p>这里共有6个文档。假设检索第一页的查询如下所示：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">GET twitter/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;size&quot;: 2,</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;city&quot;: &quot;北京&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;sort&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;DOB&quot;: &#123;</span><br><span class="line">        &quot;order&quot;: &quot;asc&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;user.keyword&quot;: &#123;</span><br><span class="line">        &quot;order&quot;: &quot;asc&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>显示的结果为：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;took&quot; : 29,</span><br><span class="line">  &quot;timed_out&quot; : false,</span><br><span class="line">  &quot;_shards&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : 1,</span><br><span class="line">    &quot;successful&quot; : 1,</span><br><span class="line">    &quot;skipped&quot; : 0,</span><br><span class="line">    &quot;failed&quot; : 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;hits&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : &#123;</span><br><span class="line">      &quot;value&quot; : 5,</span><br><span class="line">      &quot;relation&quot; : &quot;eq&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;max_score&quot; : null,</span><br><span class="line">    &quot;hits&quot; : [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;twitter&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;1&quot;,</span><br><span class="line">        &quot;_score&quot; : null,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;user&quot; : &quot;双榆树-张三&quot;,</span><br><span class="line">          &quot;DOB&quot; : &quot;1980-01-01&quot;,</span><br><span class="line">          &quot;message&quot; : &quot;今儿天气不错啊，出去转转去&quot;,</span><br><span class="line">          &quot;uid&quot; : 2,</span><br><span class="line">          &quot;age&quot; : 20,</span><br><span class="line">          &quot;city&quot; : &quot;北京&quot;,</span><br><span class="line">          &quot;province&quot; : &quot;北京&quot;,</span><br><span class="line">          &quot;country&quot; : &quot;中国&quot;,</span><br><span class="line">          &quot;address&quot; : &quot;中国北京市海淀区&quot;,</span><br><span class="line">          &quot;location&quot; : &#123;</span><br><span class="line">            &quot;lat&quot; : &quot;39.970718&quot;,</span><br><span class="line">            &quot;lon&quot; : &quot;116.325747&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;sort&quot; : [</span><br><span class="line">          315532800000,</span><br><span class="line">          &quot;双榆树-张三&quot;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;twitter&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;2&quot;,</span><br><span class="line">        &quot;_score&quot; : null,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;user&quot; : &quot;东城区-老刘&quot;,</span><br><span class="line">          &quot;DOB&quot; : &quot;1981-01-01&quot;,</span><br><span class="line">          &quot;message&quot; : &quot;出发，下一站云南！&quot;,</span><br><span class="line">          &quot;uid&quot; : 3,</span><br><span class="line">          &quot;age&quot; : 30,</span><br><span class="line">          &quot;city&quot; : &quot;北京&quot;,</span><br><span class="line">          &quot;province&quot; : &quot;北京&quot;,</span><br><span class="line">          &quot;country&quot; : &quot;中国&quot;,</span><br><span class="line">          &quot;address&quot; : &quot;中国北京市东城区台基厂三条3号&quot;,</span><br><span class="line">          &quot;location&quot; : &#123;</span><br><span class="line">            &quot;lat&quot; : &quot;39.904313&quot;,</span><br><span class="line">            &quot;lon&quot; : &quot;116.412754&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;sort&quot; : [</span><br><span class="line">          347155200000,</span><br><span class="line">          &quot;东城区-老刘&quot;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>上述请求的结果包括每个文档的sort值数组。 这些sort值可以与search_after参数一起使用，以开始返回在这个结果列表之后的任何文档。 例如，我们可以使用上一个文档的sort值并将其传递给search_after以检索下一页结果：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">GET twitter/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;size&quot;: 2,</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;city&quot;: &quot;北京&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;search_after&quot;: [</span><br><span class="line">    347155200000,</span><br><span class="line">    &quot;东城区-老刘&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;sort&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;DOB&quot;: &#123;</span><br><span class="line">        &quot;order&quot;: &quot;asc&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;user.keyword&quot;: &#123;</span><br><span class="line">        &quot;order&quot;: &quot;asc&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>在这里在search_after中，我们把上一个搜索结果的sort值放进来。 显示的结果为：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;took&quot; : 47,</span><br><span class="line">  &quot;timed_out&quot; : false,</span><br><span class="line">  &quot;_shards&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : 1,</span><br><span class="line">    &quot;successful&quot; : 1,</span><br><span class="line">    &quot;skipped&quot; : 0,</span><br><span class="line">    &quot;failed&quot; : 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;hits&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : &#123;</span><br><span class="line">      &quot;value&quot; : 5,</span><br><span class="line">      &quot;relation&quot; : &quot;eq&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;max_score&quot; : null,</span><br><span class="line">    &quot;hits&quot; : [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;twitter&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;3&quot;,</span><br><span class="line">        &quot;_score&quot; : null,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;user&quot; : &quot;东城区-李四&quot;,</span><br><span class="line">          &quot;DOB&quot; : &quot;1982-01-01&quot;,</span><br><span class="line">          &quot;message&quot; : &quot;happy birthday!&quot;,</span><br><span class="line">          &quot;uid&quot; : 4,</span><br><span class="line">          &quot;age&quot; : 30,</span><br><span class="line">          &quot;city&quot; : &quot;北京&quot;,</span><br><span class="line">          &quot;province&quot; : &quot;北京&quot;,</span><br><span class="line">          &quot;country&quot; : &quot;中国&quot;,</span><br><span class="line">          &quot;address&quot; : &quot;中国北京市东城区&quot;,</span><br><span class="line">          &quot;location&quot; : &#123;</span><br><span class="line">            &quot;lat&quot; : &quot;39.893801&quot;,</span><br><span class="line">            &quot;lon&quot; : &quot;116.408986&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;sort&quot; : [</span><br><span class="line">          378691200000,</span><br><span class="line">          &quot;东城区-李四&quot;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;twitter&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;4&quot;,</span><br><span class="line">        &quot;_score&quot; : null,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;user&quot; : &quot;朝阳区-老贾&quot;,</span><br><span class="line">          &quot;DOB&quot; : &quot;1983-01-01&quot;,</span><br><span class="line">          &quot;message&quot; : &quot;123,gogogo&quot;,</span><br><span class="line">          &quot;uid&quot; : 5,</span><br><span class="line">          &quot;age&quot; : 35,</span><br><span class="line">          &quot;city&quot; : &quot;北京&quot;,</span><br><span class="line">          &quot;province&quot; : &quot;北京&quot;,</span><br><span class="line">          &quot;country&quot; : &quot;中国&quot;,</span><br><span class="line">          &quot;address&quot; : &quot;中国北京市朝阳区建国门&quot;,</span><br><span class="line">          &quot;location&quot; : &#123;</span><br><span class="line">            &quot;lat&quot; : &quot;39.718256&quot;,</span><br><span class="line">            &quot;lon&quot; : &quot;116.367910&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;sort&quot; : [</span><br><span class="line">          410227200000,</span><br><span class="line">          &quot;朝阳区-老贾&quot;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>注意：当我们使用search_after时，from值必须设置为0或者-1。</p><p>search_after不是自由跳转到随机页面而是并行scroll多个查询的解决方案。 它与scroll API非常相似，但与它不同，search_after参数是无状态的，它始终针对最新版本的搜索器进行解析。 因此，排序顺序可能会在步行期间发生变化，具体取决于索引的更新和删除。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Thu Jan 02 2020 10:53:05 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;在上一篇文章 “Elasticsearch：运用scroll接口对大量数据实现更好的分页”，我们讲述了如何运用scroll接口来对大量数据来进行有效地分页。在那篇文章中，我们讲述了两种方法：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;from加上size的方法来进行分页&lt;/li&gt;&lt;li&gt;运用scroll接口来进行分页&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;对于大量的数据而言，我们尽量避免使用from+size这种方法。这里的原因是index.max_result_window的默认值是10K，也就是说from+size的最大值是1万。搜索请求占用堆内存和时间与from+size成比例，这限制了内存。假如你想hit从990到1000，那么每个shard至少需要1000个文档：&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20190919215711682.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1VidW50dVRvdWNo,size_16,color_FFFFFF,t_70&quot; alt&gt;&lt;/p&gt;&lt;p&gt;为了避免过度使得我们的cluster繁忙，通常Scroll接口被推荐作为深层次的scrolling，但是因为维护scroll上下文也是非常昂贵的，所以这种方法不推荐作为实时用户请求。search_after参数通过提供实时cursor来解决此问题。 我们的想法是使用上一页的结果来帮助检索下一页。&lt;/p&gt;&lt;p&gt;我们先输入如下的文档到twitter索引中：&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;POST _bulk&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123; &amp;quot;index&amp;quot; : &amp;#123; &amp;quot;_index&amp;quot; : &amp;quot;twitter&amp;quot;, &amp;quot;_id&amp;quot;: 1&amp;#125; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&amp;quot;user&amp;quot;:&amp;quot;双榆树-张三&amp;quot;, &amp;quot;DOB&amp;quot;:&amp;quot;1980-01-01&amp;quot;, &amp;quot;message&amp;quot;:&amp;quot;今儿天气不错啊，出去转转去&amp;quot;,&amp;quot;uid&amp;quot;:2,&amp;quot;age&amp;quot;:20,&amp;quot;city&amp;quot;:&amp;quot;北京&amp;quot;,&amp;quot;province&amp;quot;:&amp;quot;北京&amp;quot;,&amp;quot;country&amp;quot;:&amp;quot;中国&amp;quot;,&amp;quot;address&amp;quot;:&amp;quot;中国北京市海淀区&amp;quot;,&amp;quot;location&amp;quot;:&amp;#123;&amp;quot;lat&amp;quot;:&amp;quot;39.970718&amp;quot;,&amp;quot;lon&amp;quot;:&amp;quot;116.325747&amp;quot;&amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123; &amp;quot;index&amp;quot; : &amp;#123; &amp;quot;_index&amp;quot; : &amp;quot;twitter&amp;quot;, &amp;quot;_id&amp;quot;: 2 &amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&amp;quot;user&amp;quot;:&amp;quot;东城区-老刘&amp;quot;, &amp;quot;DOB&amp;quot;:&amp;quot;1981-01-01&amp;quot;, &amp;quot;message&amp;quot;:&amp;quot;出发，下一站云南！&amp;quot;,&amp;quot;uid&amp;quot;:3,&amp;quot;age&amp;quot;:30,&amp;quot;city&amp;quot;:&amp;quot;北京&amp;quot;,&amp;quot;province&amp;quot;:&amp;quot;北京&amp;quot;,&amp;quot;country&amp;quot;:&amp;quot;中国&amp;quot;,&amp;quot;address&amp;quot;:&amp;quot;中国北京市东城区台基厂三条3号&amp;quot;,&amp;quot;location&amp;quot;:&amp;#123;&amp;quot;lat&amp;quot;:&amp;quot;39.904313&amp;quot;,&amp;quot;lon&amp;quot;:&amp;quot;116.412754&amp;quot;&amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123; &amp;quot;index&amp;quot; : &amp;#123; &amp;quot;_index&amp;quot; : &amp;quot;twitter&amp;quot;, &amp;quot;_id&amp;quot;: 3&amp;#125; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&amp;quot;user&amp;quot;:&amp;quot;东城区-李四&amp;quot;, &amp;quot;DOB&amp;quot;:&amp;quot;1982-01-01&amp;quot;, &amp;quot;message&amp;quot;:&amp;quot;happy birthday!&amp;quot;,&amp;quot;uid&amp;quot;:4,&amp;quot;age&amp;quot;:30,&amp;quot;city&amp;quot;:&amp;quot;北京&amp;quot;,&amp;quot;province&amp;quot;:&amp;quot;北京&amp;quot;,&amp;quot;country&amp;quot;:&amp;quot;中国&amp;quot;,&amp;quot;address&amp;quot;:&amp;quot;中国北京市东城区&amp;quot;,&amp;quot;location&amp;quot;:&amp;#123;&amp;quot;lat&amp;quot;:&amp;quot;39.893801&amp;quot;,&amp;quot;lon&amp;quot;:&amp;quot;116.408986&amp;quot;&amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123; &amp;quot;index&amp;quot; : &amp;#123; &amp;quot;_index&amp;quot; : &amp;quot;twitter&amp;quot;, &amp;quot;_id&amp;quot;: 4&amp;#125; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&amp;quot;user&amp;quot;:&amp;quot;朝阳区-老贾&amp;quot;,&amp;quot;DOB&amp;quot;:&amp;quot;1983-01-01&amp;quot;, &amp;quot;message&amp;quot;:&amp;quot;123,gogogo&amp;quot;,&amp;quot;uid&amp;quot;:5,&amp;quot;age&amp;quot;:35,&amp;quot;city&amp;quot;:&amp;quot;北京&amp;quot;,&amp;quot;province&amp;quot;:&amp;quot;北京&amp;quot;,&amp;quot;country&amp;quot;:&amp;quot;中国&amp;quot;,&amp;quot;address&amp;quot;:&amp;quot;中国北京市朝阳区建国门&amp;quot;,&amp;quot;location&amp;quot;:&amp;#123;&amp;quot;lat&amp;quot;:&amp;quot;39.718256&amp;quot;,&amp;quot;lon&amp;quot;:&amp;quot;116.367910&amp;quot;&amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123; &amp;quot;index&amp;quot; : &amp;#123; &amp;quot;_index&amp;quot; : &amp;quot;twitter&amp;quot;, &amp;quot;_id&amp;quot;: 5&amp;#125; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&amp;quot;user&amp;quot;:&amp;quot;朝阳区-老王&amp;quot;,&amp;quot;DOB&amp;quot;:&amp;quot;1984-01-01&amp;quot;, &amp;quot;message&amp;quot;:&amp;quot;Happy BirthDay My Friend!&amp;quot;,&amp;quot;uid&amp;quot;:6,&amp;quot;age&amp;quot;:50,&amp;quot;city&amp;quot;:&amp;quot;北京&amp;quot;,&amp;quot;province&amp;quot;:&amp;quot;北京&amp;quot;,&amp;quot;country&amp;quot;:&amp;quot;中国&amp;quot;,&amp;quot;address&amp;quot;:&amp;quot;中国北京市朝阳区国贸&amp;quot;,&amp;quot;location&amp;quot;:&amp;#123;&amp;quot;lat&amp;quot;:&amp;quot;39.918256&amp;quot;,&amp;quot;lon&amp;quot;:&amp;quot;116.467910&amp;quot;&amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123; &amp;quot;index&amp;quot; : &amp;#123; &amp;quot;_index&amp;quot; : &amp;quot;twitter&amp;quot;, &amp;quot;_id&amp;quot;: 6&amp;#125; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&amp;quot;user&amp;quot;:&amp;quot;虹桥-老吴&amp;quot;, &amp;quot;DOB&amp;quot;:&amp;quot;1985-01-01&amp;quot;, &amp;quot;message&amp;quot;:&amp;quot;好友来了都今天我生日，好友来了,什么 birthday happy 就成!&amp;quot;,&amp;quot;uid&amp;quot;:7,&amp;quot;age&amp;quot;:90,&amp;quot;city&amp;quot;:&amp;quot;上海&amp;quot;,&amp;quot;province&amp;quot;:&amp;quot;上海&amp;quot;,&amp;quot;country&amp;quot;:&amp;quot;中国&amp;quot;,&amp;quot;address&amp;quot;:&amp;quot;中国上海市闵行区&amp;quot;,&amp;quot;location&amp;quot;:&amp;#123;&amp;quot;lat&amp;quot;:&amp;quot;31.175927&amp;quot;,&amp;quot;lon&amp;quot;:&amp;quot;121.383328&amp;quot;&amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="elk" scheme="https://yongnights.github.io/categories/elk/"/>
    
    
      <category term="elk" scheme="https://yongnights.github.io/tags/elk/"/>
    
  </entry>
  
  <entry>
    <title>Elasticsearch：运用scroll接口对大量数据实现更好的分页</title>
    <link href="https://yongnights.github.io/2020/01/02/Elasticsearch%EF%BC%9A%E8%BF%90%E7%94%A8scroll%E6%8E%A5%E5%8F%A3%E5%AF%B9%E5%A4%A7%E9%87%8F%E6%95%B0%E6%8D%AE%E5%AE%9E%E7%8E%B0%E6%9B%B4%E5%A5%BD%E7%9A%84%E5%88%86%E9%A1%B5/"/>
    <id>https://yongnights.github.io/2020/01/02/Elasticsearch：运用scroll接口对大量数据实现更好的分页/</id>
    <published>2020-01-02T02:51:19.417Z</published>
    <updated>2020-01-02T02:47:10.312Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Jan 02 2020 10:53:05 GMT+0800 (GMT+08:00) --><p>在Elasticsearch中，我们可以通过size和from来对我们的结果来进行分页。但是对于数据量很大的索引，这是有效的吗？Scroll API可用于从单个搜索请求中检索大量结果（甚至所有结果），这与在传统数据库上使用cursor的方式非常相似。Scroll不是用于实时用户请求，而是用于处理大量数据，例如，用于处理大量数据。 为了将一个索引的内容重新索引到具有不同配置的新索引中。</p><p>为了说明问题，我们今天先创建一个叫做twitter的Index:<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">POST _bulk</span><br><span class="line">&#123; &quot;index&quot; : &#123; &quot;_index&quot; : &quot;twitter&quot;, &quot;_id&quot;: 1&#125; &#125;</span><br><span class="line">&#123;&quot;user&quot;:&quot;双榆树-张三&quot;,&quot;message&quot;:&quot;今儿天气不错啊，出去转转去&quot;,&quot;uid&quot;:2,&quot;age&quot;:20,&quot;city&quot;:&quot;北京&quot;,&quot;province&quot;:&quot;北京&quot;,&quot;country&quot;:&quot;中国&quot;,&quot;address&quot;:&quot;中国北京市海淀区&quot;,&quot;location&quot;:&#123;&quot;lat&quot;:&quot;39.970718&quot;,&quot;lon&quot;:&quot;116.325747&quot;&#125;&#125;</span><br><span class="line">&#123; &quot;index&quot; : &#123; &quot;_index&quot; : &quot;twitter&quot;, &quot;_id&quot;: 2 &#125;&#125;</span><br><span class="line">&#123;&quot;user&quot;:&quot;东城区-老刘&quot;,&quot;message&quot;:&quot;出发，下一站云南！&quot;,&quot;uid&quot;:3,&quot;age&quot;:30,&quot;city&quot;:&quot;北京&quot;,&quot;province&quot;:&quot;北京&quot;,&quot;country&quot;:&quot;中国&quot;,&quot;address&quot;:&quot;中国北京市东城区台基厂三条3号&quot;,&quot;location&quot;:&#123;&quot;lat&quot;:&quot;39.904313&quot;,&quot;lon&quot;:&quot;116.412754&quot;&#125;&#125;</span><br><span class="line">&#123; &quot;index&quot; : &#123; &quot;_index&quot; : &quot;twitter&quot;, &quot;_id&quot;: 3&#125; &#125;</span><br><span class="line">&#123;&quot;user&quot;:&quot;东城区-李四&quot;,&quot;message&quot;:&quot;happy birthday!&quot;,&quot;uid&quot;:4,&quot;age&quot;:30,&quot;city&quot;:&quot;北京&quot;,&quot;province&quot;:&quot;北京&quot;,&quot;country&quot;:&quot;中国&quot;,&quot;address&quot;:&quot;中国北京市东城区&quot;,&quot;location&quot;:&#123;&quot;lat&quot;:&quot;39.893801&quot;,&quot;lon&quot;:&quot;116.408986&quot;&#125;&#125;</span><br><span class="line">&#123; &quot;index&quot; : &#123; &quot;_index&quot; : &quot;twitter&quot;, &quot;_id&quot;: 4&#125; &#125;</span><br><span class="line">&#123;&quot;user&quot;:&quot;朝阳区-老贾&quot;,&quot;message&quot;:&quot;123,gogogo&quot;,&quot;uid&quot;:5,&quot;age&quot;:35,&quot;city&quot;:&quot;北京&quot;,&quot;province&quot;:&quot;北京&quot;,&quot;country&quot;:&quot;中国&quot;,&quot;address&quot;:&quot;中国北京市朝阳区建国门&quot;,&quot;location&quot;:&#123;&quot;lat&quot;:&quot;39.718256&quot;,&quot;lon&quot;:&quot;116.367910&quot;&#125;&#125;</span><br><span class="line">&#123; &quot;index&quot; : &#123; &quot;_index&quot; : &quot;twitter&quot;, &quot;_id&quot;: 5&#125; &#125;</span><br><span class="line">&#123;&quot;user&quot;:&quot;朝阳区-老王&quot;,&quot;message&quot;:&quot;Happy BirthDay My Friend!&quot;,&quot;uid&quot;:6,&quot;age&quot;:50,&quot;city&quot;:&quot;北京&quot;,&quot;province&quot;:&quot;北京&quot;,&quot;country&quot;:&quot;中国&quot;,&quot;address&quot;:&quot;中国北京市朝阳区国贸&quot;,&quot;location&quot;:&#123;&quot;lat&quot;:&quot;39.918256&quot;,&quot;lon&quot;:&quot;116.467910&quot;&#125;&#125;</span><br><span class="line">&#123; &quot;index&quot; : &#123; &quot;_index&quot; : &quot;twitter&quot;, &quot;_id&quot;: 6&#125; &#125;</span><br><span class="line">&#123;&quot;user&quot;:&quot;虹桥-老吴&quot;,&quot;message&quot;:&quot;好友来了都今天我生日，好友来了,什么 birthday happy 就成!&quot;,&quot;uid&quot;:7,&quot;age&quot;:90,&quot;city&quot;:&quot;上海&quot;,&quot;province&quot;:&quot;上海&quot;,&quot;country&quot;:&quot;中国&quot;,&quot;address&quot;:&quot;中国上海市闵行区&quot;,&quot;location&quot;:&#123;&quot;lat&quot;:&quot;31.175927&quot;,&quot;lon&quot;:&quot;121.383328&quot;&#125;&#125;</span><br></pre></td></tr></table></figure><p></p><p>在上面，我们创建了6个文档。这些文档的数量虽然不是很多，但是我们想为了说明问题的方便。在实际的使用中，我们可能有成百上千的文档。</p><a id="more"></a><p>下面，我们通过size和from的方法来进行分页。假如我们把sizs设置为2，那么，我们可以通过如下写的方法来进行分页。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GET twitter/_search?size=2&amp;from=0</span><br><span class="line">GET twitter/_search?size=2&amp;from=2</span><br><span class="line">GET twitter/_search?size=2&amp;from=4</span><br></pre></td></tr></table></figure><p></p><p>这样，我们每次可以得到2个文档，从而对我们的Index进行分页。我们可以得到这些数据并在自己的页面上或应用里进行展示。通常这样的每个请求返回的上线是10K。如果超过这个上限的话，这样的方法将不再适合。</p><p>上面的这种方法，对于小量的数据是可行的，但是对于大量的数据，而且我们需要进行sort时，这个有可能变得力不从心，比如：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">GET twitter/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;city&quot;: &quot;北京&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;from&quot;: 2,</span><br><span class="line">  &quot;size&quot;: 2,</span><br><span class="line">  &quot;sort&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;user.keyword&quot;: &#123;</span><br><span class="line">        &quot;order&quot;: &quot;desc&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>你可以想象当你更深入地进行分页时，它会变得多么低效。 例如，如果更改mapping并希望将所有现有数据重新索引到新索引中，您可能没有足够的内存来对所有结果进行排序以返回最后一页的数据。</p><p>对于这种应用场景，你可以使用scan搜索类型。我们可以这么做：</p><h1 id="1-使用scroll来返回一个初始的搜索，并返回一个scroll-ID"><a href="#1-使用scroll来返回一个初始的搜索，并返回一个scroll-ID" class="headerlink" title="1. 使用scroll来返回一个初始的搜索，并返回一个scroll ID"></a>1. 使用scroll来返回一个初始的搜索，并返回一个scroll ID</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GET twitter/_search?scroll=1m</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;city&quot;: &quot;北京&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;size&quot;: 2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的scroll=1m，表明Elasticsearch允许等待的时间是1分钟。如果在一分钟之内，接下来的scroll请求没有到达的话，那么当前的请求的上下文将会丢失。</p><p>返回的结果是：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;_scroll_id&quot; : &quot;DXF1ZXJ5QW5kRmV0Y2gBAAAAAAAAFh8WWUdCVlRMUllRb3UzMkdqb0IxVnZNUQ==&quot;,</span><br><span class="line">  &quot;took&quot; : 31,</span><br><span class="line">  &quot;timed_out&quot; : false,</span><br><span class="line">  &quot;_shards&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : 1,</span><br><span class="line">    &quot;successful&quot; : 1,</span><br><span class="line">    &quot;skipped&quot; : 0,</span><br><span class="line">    &quot;failed&quot; : 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;hits&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : &#123;</span><br><span class="line">      &quot;value&quot; : 5,</span><br><span class="line">      &quot;relation&quot; : &quot;eq&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;max_score&quot; : 0.48232412,</span><br><span class="line">    &quot;hits&quot; : [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;twitter&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;1&quot;,</span><br><span class="line">        &quot;_score&quot; : 0.48232412,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;user&quot; : &quot;双榆树-张三&quot;,</span><br><span class="line">          &quot;message&quot; : &quot;今儿天气不错啊，出去转转去&quot;,</span><br><span class="line">          &quot;uid&quot; : 2,</span><br><span class="line">          &quot;age&quot; : 20,</span><br><span class="line">          &quot;city&quot; : &quot;北京&quot;,</span><br><span class="line">          &quot;province&quot; : &quot;北京&quot;,</span><br><span class="line">          &quot;country&quot; : &quot;中国&quot;,</span><br><span class="line">          &quot;address&quot; : &quot;中国北京市海淀区&quot;,</span><br><span class="line">          &quot;location&quot; : &#123;</span><br><span class="line">            &quot;lat&quot; : &quot;39.970718&quot;,</span><br><span class="line">            &quot;lon&quot; : &quot;116.325747&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;twitter&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;2&quot;,</span><br><span class="line">        &quot;_score&quot; : 0.48232412,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;user&quot; : &quot;东城区-老刘&quot;,</span><br><span class="line">          &quot;message&quot; : &quot;出发，下一站云南！&quot;,</span><br><span class="line">          &quot;uid&quot; : 3,</span><br><span class="line">          &quot;age&quot; : 30,</span><br><span class="line">          &quot;city&quot; : &quot;北京&quot;,</span><br><span class="line">          &quot;province&quot; : &quot;北京&quot;,</span><br><span class="line">          &quot;country&quot; : &quot;中国&quot;,</span><br><span class="line">          &quot;address&quot; : &quot;中国北京市东城区台基厂三条3号&quot;,</span><br><span class="line">          &quot;location&quot; : &#123;</span><br><span class="line">            &quot;lat&quot; : &quot;39.904313&quot;,</span><br><span class="line">            &quot;lon&quot; : &quot;116.412754&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>在这里，我们可以看到一个返回的_scroll_id。这个_scroll_id将会被用于接下来的请求。</p><h1 id="2-使用-scroll-id，再次请求"><a href="#2-使用-scroll-id，再次请求" class="headerlink" title="2. 使用_scroll_id，再次请求"></a>2. 使用_scroll_id，再次请求</h1><p>利用上次请求返回来的_scroll_id，再次请求以获得下一个page的信息：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET _search/scroll</span><br><span class="line">&#123;</span><br><span class="line">  &quot;scroll&quot;: &quot;1m&quot;,</span><br><span class="line">  &quot;scroll_id&quot;:&quot;DXF1ZXJ5QW5kRmV0Y2gBAAAAAAAAHC8WWUdCVlRMUllRb3UzMkdqb0IxVnZNUQ==&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>在这里必须指出的是：</p><ul><li>这里填写的scroll_id是上一个请求返回的值</li><li>这个scroll_id的有效期是我们在第一次搜索时定义的1m，也就是1分钟。如果超过了，这个就没有用</li></ul><p>运行后返回的结果是：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;_scroll_id&quot; : &quot;DXF1ZXJ5QW5kRmV0Y2gBAAAAAAAAHS0WWUdCVlRMUllRb3UzMkdqb0IxVnZNUQ==&quot;,</span><br><span class="line">  &quot;took&quot; : 2,</span><br><span class="line">  &quot;timed_out&quot; : false,</span><br><span class="line">  &quot;_shards&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : 1,</span><br><span class="line">    &quot;successful&quot; : 1,</span><br><span class="line">    &quot;skipped&quot; : 0,</span><br><span class="line">    &quot;failed&quot; : 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;hits&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : &#123;</span><br><span class="line">      &quot;value&quot; : 5,</span><br><span class="line">      &quot;relation&quot; : &quot;eq&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;max_score&quot; : 0.48232412,</span><br><span class="line">    &quot;hits&quot; : [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;twitter&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;3&quot;,</span><br><span class="line">        &quot;_score&quot; : 0.48232412,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;user&quot; : &quot;东城区-李四&quot;,</span><br><span class="line">          &quot;message&quot; : &quot;happy birthday!&quot;,</span><br><span class="line">          &quot;uid&quot; : 4,</span><br><span class="line">          &quot;age&quot; : 30,</span><br><span class="line">          &quot;city&quot; : &quot;北京&quot;,</span><br><span class="line">          &quot;province&quot; : &quot;北京&quot;,</span><br><span class="line">          &quot;country&quot; : &quot;中国&quot;,</span><br><span class="line">          &quot;address&quot; : &quot;中国北京市东城区&quot;,</span><br><span class="line">          &quot;location&quot; : &#123;</span><br><span class="line">            &quot;lat&quot; : &quot;39.893801&quot;,</span><br><span class="line">            &quot;lon&quot; : &quot;116.408986&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;twitter&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;4&quot;,</span><br><span class="line">        &quot;_score&quot; : 0.48232412,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;user&quot; : &quot;朝阳区-老贾&quot;,</span><br><span class="line">          &quot;message&quot; : &quot;123,gogogo&quot;,</span><br><span class="line">          &quot;uid&quot; : 5,</span><br><span class="line">          &quot;age&quot; : 35,</span><br><span class="line">          &quot;city&quot; : &quot;北京&quot;,</span><br><span class="line">          &quot;province&quot; : &quot;北京&quot;,</span><br><span class="line">          &quot;country&quot; : &quot;中国&quot;,</span><br><span class="line">          &quot;address&quot; : &quot;中国北京市朝阳区建国门&quot;,</span><br><span class="line">          &quot;location&quot; : &#123;</span><br><span class="line">            &quot;lat&quot; : &quot;39.718256&quot;,</span><br><span class="line">            &quot;lon&quot; : &quot;116.367910&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>显然这次返回的是2个文档。我们需要再次使用同样的办法来得到最后一个page的结果：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;_scroll_id&quot; : &quot;DXF1ZXJ5QW5kRmV0Y2gBAAAAAAAADeoWeno1UkF2RWZRd202VW1HQXRlOWFUdw==&quot;,</span><br><span class="line">  &quot;took&quot; : 2,</span><br><span class="line">  &quot;timed_out&quot; : false,</span><br><span class="line">  &quot;_shards&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : 1,</span><br><span class="line">    &quot;successful&quot; : 1,</span><br><span class="line">    &quot;skipped&quot; : 0,</span><br><span class="line">    &quot;failed&quot; : 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;hits&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : &#123;</span><br><span class="line">      &quot;value&quot; : 5,</span><br><span class="line">      &quot;relation&quot; : &quot;eq&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;max_score&quot; : 0.48232412,</span><br><span class="line">    &quot;hits&quot; : [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;twitter&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;5&quot;,</span><br><span class="line">        &quot;_score&quot; : 0.48232412,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;user&quot; : &quot;朝阳区-老王&quot;,</span><br><span class="line">          &quot;message&quot; : &quot;Happy BirthDay My Friend!&quot;,</span><br><span class="line">          &quot;uid&quot; : 6,</span><br><span class="line">          &quot;age&quot; : 50,</span><br><span class="line">          &quot;city&quot; : &quot;北京&quot;,</span><br><span class="line">          &quot;province&quot; : &quot;北京&quot;,</span><br><span class="line">          &quot;country&quot; : &quot;中国&quot;,</span><br><span class="line">          &quot;address&quot; : &quot;中国北京市朝阳区国贸&quot;,</span><br><span class="line">          &quot;location&quot; : &#123;</span><br><span class="line">            &quot;lat&quot; : &quot;39.918256&quot;,</span><br><span class="line">            &quot;lon&quot; : &quot;116.467910&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>显然，这次返回的结果只有一个数值，比我们请求的page大小2要小。如果我们利用返回的_scroll_id再次请求时，我们可以看返回的结果是：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;_scroll_id&quot; : &quot;DXF1ZXJ5QW5kRmV0Y2gBAAAAAAAADeoWeno1UkF2RWZRd202VW1HQXRlOWFUdw==&quot;,</span><br><span class="line">  &quot;took&quot; : 1,</span><br><span class="line">  &quot;timed_out&quot; : false,</span><br><span class="line">  &quot;_shards&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : 1,</span><br><span class="line">    &quot;successful&quot; : 1,</span><br><span class="line">    &quot;skipped&quot; : 0,</span><br><span class="line">    &quot;failed&quot; : 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;hits&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : &#123;</span><br><span class="line">      &quot;value&quot; : 5,</span><br><span class="line">      &quot;relation&quot; : &quot;eq&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;max_score&quot; : 0.48232412,</span><br><span class="line">    &quot;hits&quot; : [ ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>这次是一个结果都没有。</p><p>如果完成此过程，则需要清理上下文，因为上下文在超时之前仍会占用计算资源。 如下面的屏幕快照所示，您可以使用scroll_id参数在DELETE API中指定一个或多个上下文：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DELTE_search/scroll</span><br><span class="line">&#123;</span><br><span class="line">  &quot;scroll_id&quot;:&quot;DXF1ZXJ5QW5kRmV0Y2gBAAAAAAAAHC8WWUdCVlRMUllRb3UzMkdqb0IxVnZNUQ==&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>参考：<br>【1】Elasticsearch Scroll<br>【2】<a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.4/search-request-body.html#request-body-search-scroll" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/7.4/search-request-body.html#request-body-search-scroll</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Thu Jan 02 2020 10:53:05 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;在Elasticsearch中，我们可以通过size和from来对我们的结果来进行分页。但是对于数据量很大的索引，这是有效的吗？Scroll API可用于从单个搜索请求中检索大量结果（甚至所有结果），这与在传统数据库上使用cursor的方式非常相似。Scroll不是用于实时用户请求，而是用于处理大量数据，例如，用于处理大量数据。 为了将一个索引的内容重新索引到具有不同配置的新索引中。&lt;/p&gt;&lt;p&gt;为了说明问题，我们今天先创建一个叫做twitter的Index:&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;POST _bulk&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123; &amp;quot;index&amp;quot; : &amp;#123; &amp;quot;_index&amp;quot; : &amp;quot;twitter&amp;quot;, &amp;quot;_id&amp;quot;: 1&amp;#125; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&amp;quot;user&amp;quot;:&amp;quot;双榆树-张三&amp;quot;,&amp;quot;message&amp;quot;:&amp;quot;今儿天气不错啊，出去转转去&amp;quot;,&amp;quot;uid&amp;quot;:2,&amp;quot;age&amp;quot;:20,&amp;quot;city&amp;quot;:&amp;quot;北京&amp;quot;,&amp;quot;province&amp;quot;:&amp;quot;北京&amp;quot;,&amp;quot;country&amp;quot;:&amp;quot;中国&amp;quot;,&amp;quot;address&amp;quot;:&amp;quot;中国北京市海淀区&amp;quot;,&amp;quot;location&amp;quot;:&amp;#123;&amp;quot;lat&amp;quot;:&amp;quot;39.970718&amp;quot;,&amp;quot;lon&amp;quot;:&amp;quot;116.325747&amp;quot;&amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123; &amp;quot;index&amp;quot; : &amp;#123; &amp;quot;_index&amp;quot; : &amp;quot;twitter&amp;quot;, &amp;quot;_id&amp;quot;: 2 &amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&amp;quot;user&amp;quot;:&amp;quot;东城区-老刘&amp;quot;,&amp;quot;message&amp;quot;:&amp;quot;出发，下一站云南！&amp;quot;,&amp;quot;uid&amp;quot;:3,&amp;quot;age&amp;quot;:30,&amp;quot;city&amp;quot;:&amp;quot;北京&amp;quot;,&amp;quot;province&amp;quot;:&amp;quot;北京&amp;quot;,&amp;quot;country&amp;quot;:&amp;quot;中国&amp;quot;,&amp;quot;address&amp;quot;:&amp;quot;中国北京市东城区台基厂三条3号&amp;quot;,&amp;quot;location&amp;quot;:&amp;#123;&amp;quot;lat&amp;quot;:&amp;quot;39.904313&amp;quot;,&amp;quot;lon&amp;quot;:&amp;quot;116.412754&amp;quot;&amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123; &amp;quot;index&amp;quot; : &amp;#123; &amp;quot;_index&amp;quot; : &amp;quot;twitter&amp;quot;, &amp;quot;_id&amp;quot;: 3&amp;#125; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&amp;quot;user&amp;quot;:&amp;quot;东城区-李四&amp;quot;,&amp;quot;message&amp;quot;:&amp;quot;happy birthday!&amp;quot;,&amp;quot;uid&amp;quot;:4,&amp;quot;age&amp;quot;:30,&amp;quot;city&amp;quot;:&amp;quot;北京&amp;quot;,&amp;quot;province&amp;quot;:&amp;quot;北京&amp;quot;,&amp;quot;country&amp;quot;:&amp;quot;中国&amp;quot;,&amp;quot;address&amp;quot;:&amp;quot;中国北京市东城区&amp;quot;,&amp;quot;location&amp;quot;:&amp;#123;&amp;quot;lat&amp;quot;:&amp;quot;39.893801&amp;quot;,&amp;quot;lon&amp;quot;:&amp;quot;116.408986&amp;quot;&amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123; &amp;quot;index&amp;quot; : &amp;#123; &amp;quot;_index&amp;quot; : &amp;quot;twitter&amp;quot;, &amp;quot;_id&amp;quot;: 4&amp;#125; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&amp;quot;user&amp;quot;:&amp;quot;朝阳区-老贾&amp;quot;,&amp;quot;message&amp;quot;:&amp;quot;123,gogogo&amp;quot;,&amp;quot;uid&amp;quot;:5,&amp;quot;age&amp;quot;:35,&amp;quot;city&amp;quot;:&amp;quot;北京&amp;quot;,&amp;quot;province&amp;quot;:&amp;quot;北京&amp;quot;,&amp;quot;country&amp;quot;:&amp;quot;中国&amp;quot;,&amp;quot;address&amp;quot;:&amp;quot;中国北京市朝阳区建国门&amp;quot;,&amp;quot;location&amp;quot;:&amp;#123;&amp;quot;lat&amp;quot;:&amp;quot;39.718256&amp;quot;,&amp;quot;lon&amp;quot;:&amp;quot;116.367910&amp;quot;&amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123; &amp;quot;index&amp;quot; : &amp;#123; &amp;quot;_index&amp;quot; : &amp;quot;twitter&amp;quot;, &amp;quot;_id&amp;quot;: 5&amp;#125; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&amp;quot;user&amp;quot;:&amp;quot;朝阳区-老王&amp;quot;,&amp;quot;message&amp;quot;:&amp;quot;Happy BirthDay My Friend!&amp;quot;,&amp;quot;uid&amp;quot;:6,&amp;quot;age&amp;quot;:50,&amp;quot;city&amp;quot;:&amp;quot;北京&amp;quot;,&amp;quot;province&amp;quot;:&amp;quot;北京&amp;quot;,&amp;quot;country&amp;quot;:&amp;quot;中国&amp;quot;,&amp;quot;address&amp;quot;:&amp;quot;中国北京市朝阳区国贸&amp;quot;,&amp;quot;location&amp;quot;:&amp;#123;&amp;quot;lat&amp;quot;:&amp;quot;39.918256&amp;quot;,&amp;quot;lon&amp;quot;:&amp;quot;116.467910&amp;quot;&amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123; &amp;quot;index&amp;quot; : &amp;#123; &amp;quot;_index&amp;quot; : &amp;quot;twitter&amp;quot;, &amp;quot;_id&amp;quot;: 6&amp;#125; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&amp;quot;user&amp;quot;:&amp;quot;虹桥-老吴&amp;quot;,&amp;quot;message&amp;quot;:&amp;quot;好友来了都今天我生日，好友来了,什么 birthday happy 就成!&amp;quot;,&amp;quot;uid&amp;quot;:7,&amp;quot;age&amp;quot;:90,&amp;quot;city&amp;quot;:&amp;quot;上海&amp;quot;,&amp;quot;province&amp;quot;:&amp;quot;上海&amp;quot;,&amp;quot;country&amp;quot;:&amp;quot;中国&amp;quot;,&amp;quot;address&amp;quot;:&amp;quot;中国上海市闵行区&amp;quot;,&amp;quot;location&amp;quot;:&amp;#123;&amp;quot;lat&amp;quot;:&amp;quot;31.175927&amp;quot;,&amp;quot;lon&amp;quot;:&amp;quot;121.383328&amp;quot;&amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;在上面，我们创建了6个文档。这些文档的数量虽然不是很多，但是我们想为了说明问题的方便。在实际的使用中，我们可能有成百上千的文档。&lt;/p&gt;
    
    </summary>
    
      <category term="elk" scheme="https://yongnights.github.io/categories/elk/"/>
    
    
      <category term="elk" scheme="https://yongnights.github.io/tags/elk/"/>
    
  </entry>
  
  <entry>
    <title>Elasticsearch：用户安全设置</title>
    <link href="https://yongnights.github.io/2020/01/02/Elasticsearch%EF%BC%9A%E7%94%A8%E6%88%B7%E5%AE%89%E5%85%A8%E8%AE%BE%E7%BD%AE/"/>
    <id>https://yongnights.github.io/2020/01/02/Elasticsearch：用户安全设置/</id>
    <published>2020-01-02T02:51:19.415Z</published>
    <updated>2020-01-02T02:42:19.664Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Jan 02 2020 10:53:05 GMT+0800 (GMT+08:00) --><p>Elastic Stack的组件是不安全的，因为它没有内置的固有安全性。 这意味着任何人都可以访问它。 在生产环境中运行Elastic Stack时，这会带来安全风险。 为了防止生产中未经授权的访问，采用了不同的机制来施加安全性，例如在防火墙后运行Elastic Stack并通过反向代理（例如nginx，HAProxy等）进行保护。 Elastic提供商业产品来保护Elastic Stack。 此产品是X-Pack的一部分，模块称为安全性。</p><p>在今天的文章中，我们来讲述如何为我们的Elastics索引设置字段级的安全。这样有的字段对有些用户是可见的，而对另外一些用户是不可见的。我们也可以通过对用户安全的设置，使得不同的用户有不同的权限。</p><h1 id="User-authentication"><a href="#User-authentication" class="headerlink" title="User authentication"></a>User authentication</h1><p>在X-Pack安全性中，安全资源是基于用户的安全性的基础。 安全资源是需要访问以执行Elasticsearch集群操作的资源，例如索引，文档或字段。 X-Pack安全性通过分配给用户的角色的权限来实现。 权限是针对受保护资源的一项或多项特权。 特权是一个命名的组，代表用户可以针对安全资源执行的一个或多个操作。 用户可以具有一个或多个角色，并且用户拥有的总权限集定义为其所有角色的权限的并集，如下图所示：</p><p><img src="https://img-blog.csdnimg.cn/20191029201921729.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1VidW50dVRvdWNo,size_16,color_FFFFFF,t_70" alt></p><p>从上面的图上可以看出来：一个用户可以用多个role，而每个role可以对应多个permission(权限）。在接下来的练习中，我们来展示如何创建用户，role（角色）以及把permission分配到每个role。通过这样的组合，我们可以实现对字段级的安全控制。</p><h1 id="为Elastic设置安全及创建用户"><a href="#为Elastic设置安全及创建用户" class="headerlink" title="为Elastic设置安全及创建用户"></a>为Elastic设置安全及创建用户</h1><p>当我们设置完我们的安全账户后，最开始我们使用最原始的elastic的账号进行登录。请注意这里的密码是我们设置elastic账号的密码：</p><p>![](<a href="https://img-blog.csdnimg.cn/20190904225704187.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1VidW50dVRvdWNo,size_16,color_FFFFFF,t_70" target="_blank" rel="noopener">https://img-blog.csdnimg.cn/20190904225704187.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1VidW50dVRvdWNo,size_16,color_FFFFFF,t_70</a></p><p>等登录进去之后，现在我们去Manage/Sercurity/Users页面：</p><p><img src="https://img-blog.csdnimg.cn/20191029203231824.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1VidW50dVRvdWNo,size_16,color_FFFFFF,t_70" alt></p><p>我们来创建一个新的账号。针对我的情况，我想创建一个叫做liuxg的用户名。点击当前页面的Create User按钮：</p><p><img src="https://img-blog.csdnimg.cn/20191029203444267.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1VidW50dVRvdWNo,size_16,color_FFFFFF,t_70" alt></p><p>然后填入我们所需要的信息：</p><p><img src="https://img-blog.csdnimg.cn/20191029203635379.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1VidW50dVRvdWNo,size_16,color_FFFFFF,t_70" alt></p><p>点击Create User按钮，这样我们就创建了我们的用户。</p><p><img src="https://img-blog.csdnimg.cn/20191029203851749.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1VidW50dVRvdWNo,size_16,color_FFFFFF,t_70" alt></p><p>按照同样的步骤，我们来创建另外一个叫做user1的用户。</p><p><img src="https://img-blog.csdnimg.cn/20191029210507840.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1VidW50dVRvdWNo,size_16,color_FFFFFF,t_70" alt></p><a id="more"></a><h1 id="准备实验数据"><a href="#准备实验数据" class="headerlink" title="准备实验数据"></a>准备实验数据</h1><p>在我们还没退出elastic用户的情况下，我们使用bulk API来把如下的文档输入到Elasticsearch中。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">POST employee/_bulk</span><br><span class="line">&#123;&quot;index&quot;:&#123;&quot;_index&quot;:&quot;employee&quot;&#125;&#125;</span><br><span class="line">&#123;&quot;name&quot;:&quot;user1&quot;,&quot;email&quot;:&quot;user1@packt.com&quot;,&quot;salary&quot;:5000,&quot;gender&quot;:&quot;M&quot;,&quot;address1&quot;:&quot;312 Main St&quot;,&quot;address2&quot;:&quot;Walthill&quot;,&quot;state&quot;:&quot;NE&quot;&#125;</span><br><span class="line">&#123;&quot;index&quot;:&#123;&quot;_index&quot;:&quot;employee&quot;&#125;&#125;</span><br><span class="line">&#123;&quot;name&quot;:&quot;user2&quot;,&quot;email&quot;:&quot;user2@packt.com&quot;,&quot;salary&quot;:10000,&quot;gender&quot;:&quot;F&quot;,&quot;address1&quot;:&quot;5658 N Denver Ave&quot;,&quot;address2&quot;:&quot;Portland&quot;,&quot;state&quot;:&quot;OR&quot;&#125;</span><br><span class="line">&#123;&quot;index&quot;:&#123;&quot;_index&quot;:&quot;employee&quot;&#125;&#125;</span><br><span class="line">&#123;&quot;name&quot;:&quot;user3&quot;,&quot;email&quot;:&quot;user3@packt.com&quot;,&quot;salary&quot;:7000,&quot;gender&quot;:&quot;F&quot;,&quot;address1&quot;:&quot;300 Quinterra Ln&quot;,&quot;address2&quot;:&quot;Danville&quot;,&quot;state&quot;:&quot;CA&quot;&#125;</span><br></pre></td></tr></table></figure><p></p><p>这样我们把三个文档存入到employee的索引之中。</p><p><img src="https://img-blog.csdnimg.cn/2019102920464746.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1VidW50dVRvdWNo,size_16,color_FFFFFF,t_70" alt></p><h1 id="创建新的role"><a href="#创建新的role" class="headerlink" title="创建新的role"></a>创建新的role</h1><p>请注意：如下的操作是在elastic用户登录的情况下进行操作的。要创建新用户，请导航到管理UI并在“Security”部分中选择“role”，或者如果您当前在“Users”屏幕上，请单击“Roles”选项。 角色屏幕显示所有已定义/可用的角色:</p><p><img src="https://img-blog.csdnimg.cn/20191029205112878.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1VidW50dVRvdWNo,size_16,color_FFFFFF,t_70" alt></p><p>当我们点击roles后：</p><p><img src="https://img-blog.csdnimg.cn/20191029205247461.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1VidW50dVRvdWNo,size_16,color_FFFFFF,t_70" alt></p><p>我们点击Create role按钮。</p><p><img src="https://img-blog.csdnimg.cn/20191029205851167.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1VidW50dVRvdWNo,size_16,color_FFFFFF,t_70" alt></p><p>在这里，我们定义了一个叫做monitor_role，它具有monitor的权限。</p><h1 id="把role赋予给用户"><a href="#把role赋予给用户" class="headerlink" title="把role赋予给用户"></a>把role赋予给用户</h1><p>我们打开我们的用户列表。针对我的情况，我们打开liuxg用户：</p><p><img src="https://img-blog.csdnimg.cn/20191029210949632.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1VidW50dVRvdWNo,size_16,color_FFFFFF,t_70" alt></p><p>我们修改liuxg账号的Roles。把刚才创建的monitor_role赋予给liuxg用户。点击Update User按钮。这样我们的设定就好了。设定好的账号是这样的：</p><p><img src="https://img-blog.csdnimg.cn/20191029211355958.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1VidW50dVRvdWNo,size_16,color_FFFFFF,t_70" alt></p><p>从上面，我们可以看出来liuxg账号是有monitor_role的，而user1账号是没有的。</p><p>下面我们来做一些基本的测试。我们在一个terminal中打入如下的命令：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -u liuxg:123456 &quot;http://localhost:9200/_cluster/health?pretty&quot;</span><br></pre></td></tr></table></figure><p></p><p>注意这里的123456是liuxg的账号密码。执行上面的显示结果是：</p><p><img src="https://img-blog.csdnimg.cn/20191029211635602.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1VidW50dVRvdWNo,size_16,color_FFFFFF,t_70" alt></p><p>我们显然看到了结果。那么我们同样地对use1账号来进行实验：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -u user1:123456 &quot;http://localhost:9200/_cluster/health?pretty&quot;</span><br></pre></td></tr></table></figure><p></p><p>显示的结果是：</p><p><img src="https://img-blog.csdnimg.cn/2019102921182037.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1VidW50dVRvdWNo,size_16,color_FFFFFF,t_70" alt></p><p>显然，user1账号没有得到任何结果。这个根本的原因是因为这个账号没有相应的权限。</p><h1 id="文档级或字段级安全"><a href="#文档级或字段级安全" class="headerlink" title="文档级或字段级安全"></a>文档级或字段级安全</h1><p>现在，我们知道了如何创建新用户，创建新角色以及将角色分配给用户，让我们探讨如何针对给定的索引/文档对文档和字段施加安全性。接下来，我们使用我之前给大家输入进的employee索引来展示。</p><h2 id="案例1"><a href="#案例1" class="headerlink" title="案例1"></a>案例1</h2><p>当用户搜索员工详细信息时，该用户不允许包含在属于员工索引的文档中的薪水/地址详细信息。这就是我们所说的字段级安全。首先，让我们来创建一个叫做employee_read的role。这个role只具有employ索引的read权限。为了限制字段，我们可以在设置里做相应的配置：</p><p><img src="https://img-blog.csdnimg.cn/20191029214107211.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1VidW50dVRvdWNo,size_16,color_FFFFFF,t_70" alt></p><p>我们只允许这个employee_read role访问gender，state及email字段，而且只有read权限。</p><p>运用我们刚才设置的employee_read role，我们赋予给我们的user1用户：</p><p><img src="https://img-blog.csdnimg.cn/20191029213513584.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1VidW50dVRvdWNo,size_16,color_FFFFFF,t_70" alt></p><p>设置好的用户界面为：</p><p>![] (<a href="https://img-blog.csdnimg.cn/20191029213613951.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1VidW50dVRvdWNo,size_16,color_FFFFFF,t_70" target="_blank" rel="noopener">https://img-blog.csdnimg.cn/20191029213613951.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1VidW50dVRvdWNo,size_16,color_FFFFFF,t_70</a>)</p><p>上面显示我们的user1具有employ_read的role。</p><p>在我们的一个terminal里打入如下的命令：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -u user1:123456 &quot;http://localhost:9200/employee/_search?pretty&quot;</span><br></pre></td></tr></table></figure><p></p><p>请注意：这里的123456是user1用户的密码。上面命令显示的结果为：</p><p><img src="https://img-blog.csdnimg.cn/20191029214204836.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1VidW50dVRvdWNo,size_16,color_FFFFFF,t_70" alt></p><p>显然，user1只能访问在employee_read中的三个字段。</p><h2 id="案例2"><a href="#案例2" class="headerlink" title="案例2"></a>案例2</h2><p>我们想定义一个role。这个role具有read的权限，并且只能访问state为OR的那些文档。我们做一下的设置：</p><p><img src="https://img-blog.csdnimg.cn/20191029215306635.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1VidW50dVRvdWNo,size_16,color_FFFFFF,t_70" alt></p><p>我们创建了一个叫做OR_state的role。它通过一个query:<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;match&quot;: &#123;&quot;state.keyword&quot;:&quot;OR&quot;&#125;&#125;</span><br></pre></td></tr></table></figure><p></p><p>来匹配项对应的文档。我们接着把这个role赋予给liuxg用户：</p><p><img src="https://img-blog.csdnimg.cn/20191029215538433.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1VidW50dVRvdWNo,size_16,color_FFFFFF,t_70" alt></p><p>在我们设置完后，我们接着在一个terminal中打入如下的命令：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -u liuxg:123456 &quot;http://localhost:9200/employee/_search?pretty&quot;</span><br></pre></td></tr></table></figure><p></p><p>显示的结果：</p><p><img src="https://img-blog.csdnimg.cn/20191029215722709.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1VidW50dVRvdWNo,size_16,color_FFFFFF,t_70" alt></p><p>我们可以看出来这次的显示的结果只有一个，而且这个文档的state是OR。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Thu Jan 02 2020 10:53:05 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;Elastic Stack的组件是不安全的，因为它没有内置的固有安全性。 这意味着任何人都可以访问它。 在生产环境中运行Elastic Stack时，这会带来安全风险。 为了防止生产中未经授权的访问，采用了不同的机制来施加安全性，例如在防火墙后运行Elastic Stack并通过反向代理（例如nginx，HAProxy等）进行保护。 Elastic提供商业产品来保护Elastic Stack。 此产品是X-Pack的一部分，模块称为安全性。&lt;/p&gt;&lt;p&gt;在今天的文章中，我们来讲述如何为我们的Elastics索引设置字段级的安全。这样有的字段对有些用户是可见的，而对另外一些用户是不可见的。我们也可以通过对用户安全的设置，使得不同的用户有不同的权限。&lt;/p&gt;&lt;h1 id=&quot;User-authentication&quot;&gt;&lt;a href=&quot;#User-authentication&quot; class=&quot;headerlink&quot; title=&quot;User authentication&quot;&gt;&lt;/a&gt;User authentication&lt;/h1&gt;&lt;p&gt;在X-Pack安全性中，安全资源是基于用户的安全性的基础。 安全资源是需要访问以执行Elasticsearch集群操作的资源，例如索引，文档或字段。 X-Pack安全性通过分配给用户的角色的权限来实现。 权限是针对受保护资源的一项或多项特权。 特权是一个命名的组，代表用户可以针对安全资源执行的一个或多个操作。 用户可以具有一个或多个角色，并且用户拥有的总权限集定义为其所有角色的权限的并集，如下图所示：&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20191029201921729.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1VidW50dVRvdWNo,size_16,color_FFFFFF,t_70&quot; alt&gt;&lt;/p&gt;&lt;p&gt;从上面的图上可以看出来：一个用户可以用多个role，而每个role可以对应多个permission(权限）。在接下来的练习中，我们来展示如何创建用户，role（角色）以及把permission分配到每个role。通过这样的组合，我们可以实现对字段级的安全控制。&lt;/p&gt;&lt;h1 id=&quot;为Elastic设置安全及创建用户&quot;&gt;&lt;a href=&quot;#为Elastic设置安全及创建用户&quot; class=&quot;headerlink&quot; title=&quot;为Elastic设置安全及创建用户&quot;&gt;&lt;/a&gt;为Elastic设置安全及创建用户&lt;/h1&gt;&lt;p&gt;当我们设置完我们的安全账户后，最开始我们使用最原始的elastic的账号进行登录。请注意这里的密码是我们设置elastic账号的密码：&lt;/p&gt;&lt;p&gt;![](&lt;a href=&quot;https://img-blog.csdnimg.cn/20190904225704187.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1VidW50dVRvdWNo,size_16,color_FFFFFF,t_70&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://img-blog.csdnimg.cn/20190904225704187.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1VidW50dVRvdWNo,size_16,color_FFFFFF,t_70&lt;/a&gt;&lt;/p&gt;&lt;p&gt;等登录进去之后，现在我们去Manage/Sercurity/Users页面：&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20191029203231824.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1VidW50dVRvdWNo,size_16,color_FFFFFF,t_70&quot; alt&gt;&lt;/p&gt;&lt;p&gt;我们来创建一个新的账号。针对我的情况，我想创建一个叫做liuxg的用户名。点击当前页面的Create User按钮：&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20191029203444267.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1VidW50dVRvdWNo,size_16,color_FFFFFF,t_70&quot; alt&gt;&lt;/p&gt;&lt;p&gt;然后填入我们所需要的信息：&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20191029203635379.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1VidW50dVRvdWNo,size_16,color_FFFFFF,t_70&quot; alt&gt;&lt;/p&gt;&lt;p&gt;点击Create User按钮，这样我们就创建了我们的用户。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20191029203851749.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1VidW50dVRvdWNo,size_16,color_FFFFFF,t_70&quot; alt&gt;&lt;/p&gt;&lt;p&gt;按照同样的步骤，我们来创建另外一个叫做user1的用户。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20191029210507840.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1VidW50dVRvdWNo,size_16,color_FFFFFF,t_70&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="elk" scheme="https://yongnights.github.io/categories/elk/"/>
    
    
      <category term="elk" scheme="https://yongnights.github.io/tags/elk/"/>
    
  </entry>
  
  <entry>
    <title>Elasticsearch：使用function_score及soft_score定制搜索结果的分数</title>
    <link href="https://yongnights.github.io/2020/01/02/Elasticsearch%EF%BC%9A%E4%BD%BF%E7%94%A8function_score%E5%8F%8Asoft_score%E5%AE%9A%E5%88%B6%E6%90%9C%E7%B4%A2%E7%BB%93%E6%9E%9C%E7%9A%84%E5%88%86%E6%95%B0/"/>
    <id>https://yongnights.github.io/2020/01/02/Elasticsearch：使用function_score及soft_score定制搜索结果的分数/</id>
    <published>2020-01-02T02:51:19.413Z</published>
    <updated>2020-01-02T02:41:56.704Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Jan 02 2020 10:53:05 GMT+0800 (GMT+08:00) --><p>我们将介绍使用function_score的基础知识，并介绍一些function core技术非常有用和有效的用例。</p><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>评分的概念是任何搜索引擎（包括Elasticsearch）的核心。评分可以粗略地定义为：找到符合一组标准的数据并按相关性顺序将其返回。相关性通常是通过类似TF-IDF的算法来实现的，该算法试图找出文本上与提交的查询最相似的文档。尽管TF-IDF及其表亲（例如BM25）非常棒，但有时必须通过其他算法或通过其他评分启发式方法来解决相关性问题。在这里，Elasticsearch的script_score和function_score功能变得非常有用。本文将介绍这些工具的用法。</p><p>文本相似性不是最重要因素的一个域示例是地理搜索。如果正在寻找在给定点附近的好咖啡店，则按与查询在文本上的相似程度对咖啡店进行排名对用户而言不是很有用，但按地理位置在附近的排名对他们。</p><p>另一个示例可能是视频共享站点上的视频，其中搜索结果可能应该考虑视频的相对受欢迎程度。如果某个流行歌星上传了具有给定标题的视频，从而获得了数百万的观看次数，那么该视频可能应该比具有相似文字相关性的不受欢迎的视频更胜一筹。</p><p>在使用Elasticsearch进行全文搜索的时候，默认是使用BM25计算的_score字段进行降序排序的。当我们需要用其他字段进行降序或者升序排序的时候，可以使用sort字段，传入我们想要的排序字段和方式。 当简单的使用几个字段升降序排列组合无法满足我们的需求的时候，我们就需要自定义排序的特性，Elasticsearch提供了function_score的DSL来自定义打分，这样就可以根据自定义的_score来进行排序。</p><p>在实际的使用中，我们必须注意的是：soft_score和function_score是耗资源的。您只需要计算一组经过过滤的文档的分数。</p><p>下面我们来用一个例子来具体说明如何来通过script_core和function_core来定制我们的分数。</p><a id="more"></a><h1 id="准备数据"><a href="#准备数据" class="headerlink" title="准备数据"></a>准备数据</h1><p>我们首先来下载我们的测试数据：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/liu-xiao-guo/best_games_json_data</span><br></pre></td></tr></table></figure><p></p><p>然后我们通过Kibana把这个数据来导入到我们的Elasticsearch中：</p><p><img src="https://img-blog.csdnimg.cn/20191221142831118.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9lbGFzdGljc3RhY2suYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt></p><p>在导入的过程中，我们选择Time field为year，并且指定相应的日期格式：</p><p><img src="https://img-blog.csdnimg.cn/20191221143046534.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9lbGFzdGljc3RhY2suYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt></p><p>我们指定我们的索引名字为best_games：<br><img src="https://img-blog.csdnimg.cn/20191221143221419.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9lbGFzdGljc3RhY2suYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt></p><p>我们可以查看一下一个样本的文档就像是下面的格式一样：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&quot;_source&quot; : &#123;</span><br><span class="line">  &quot;global_sales&quot; : 82.53,</span><br><span class="line">  &quot;year&quot; : 2006,</span><br><span class="line">  &quot;image_url&quot; : &quot;https://upload.wikimedia.org/wikipedia/en/thumb/e/e0/Wii_Sports_Europe.jpg/220px-Wii_Sports_Europe.jpg&quot;,</span><br><span class="line">  &quot;platform&quot; : &quot;Wii&quot;,</span><br><span class="line">  &quot;@timestamp&quot; : &quot;2006-01-01T00:00:00.000+08:00&quot;,</span><br><span class="line">  &quot;user_score&quot; : 8,</span><br><span class="line">  &quot;critic_score&quot; : 76,</span><br><span class="line">  &quot;name&quot; : &quot;Wii Sports&quot;,</span><br><span class="line">  &quot;genre&quot; : &quot;Sports&quot;,</span><br><span class="line">  &quot;publisher&quot; : &quot;Nintendo&quot;,</span><br><span class="line">  &quot;developer&quot; : &quot;Nintendo&quot;,</span><br><span class="line">  &quot;id&quot; : &quot;wii-sports-wii-2006&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>在上面我们可以看出来这个文档里有两个很重要的字段：critic_score及user_score。一个是表示这个游戏的难度，另外一个表示游戏的受欢迎的程度。</p><h1 id="正常查询"><a href="#正常查询" class="headerlink" title="正常查询"></a>正常查询</h1><p>首先我们来看看如果不使用任何的分数定制，那么情况是怎么样的。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">GET best_games/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;_source&quot;: [</span><br><span class="line">    &quot;name&quot;,</span><br><span class="line">    &quot;critic_score&quot;,</span><br><span class="line">    &quot;user_score&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;name&quot;: &quot;Final Fantasy&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>在上面的查询中，为了说明问题的方便，在返回的结果中，我们只返回name, critic_score和user_score字段。我们在name字段里含有“Final Fantasy”的所有游戏，那么显示显示的结果是：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&quot;hits&quot; : [</span><br><span class="line">     &#123;</span><br><span class="line">       &quot;_index&quot; : &quot;best_games&quot;,</span><br><span class="line">       &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">       &quot;_id&quot; : &quot;2qccJ28BCSSrjaXdSOnC&quot;,</span><br><span class="line">       &quot;_score&quot; : 8.138414,</span><br><span class="line">       &quot;_source&quot; : &#123;</span><br><span class="line">         &quot;user_score&quot; : 9,</span><br><span class="line">         &quot;critic_score&quot; : 92,</span><br><span class="line">         &quot;name&quot; : &quot;Final Fantasy VII&quot;</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;,</span><br><span class="line">     &#123;</span><br><span class="line">       &quot;_index&quot; : &quot;best_games&quot;,</span><br><span class="line">       &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">       &quot;_id&quot; : &quot;6KccJ28BCSSrjaXdSOnC&quot;,</span><br><span class="line">       &quot;_score&quot; : 8.138414,</span><br><span class="line">       &quot;_source&quot; : &#123;</span><br><span class="line">         &quot;user_score&quot; : 8,</span><br><span class="line">         &quot;critic_score&quot; : 92,</span><br><span class="line">         &quot;name&quot; : &quot;Final Fantasy X&quot;</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;,</span><br><span class="line">     &#123;</span><br><span class="line">       &quot;_index&quot; : &quot;best_games&quot;,</span><br><span class="line">       &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">       &quot;_id&quot; : &quot;6qccJ28BCSSrjaXdSOnC&quot;,</span><br><span class="line">       &quot;_score&quot; : 8.138414,</span><br><span class="line">       &quot;_source&quot; : &#123;</span><br><span class="line">         &quot;user_score&quot; : 8,</span><br><span class="line">         &quot;critic_score&quot; : 90,</span><br><span class="line">         &quot;name&quot; : &quot;Final Fantasy VIII&quot;</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;,</span><br><span class="line">  ...</span><br></pre></td></tr></table></figure><p></p><p>从上面的结果中，我们可以看出来Final Fantasy VII是最匹配的结果。它的分数是最高的。</p><h1 id="Soft-score-查询"><a href="#Soft-score-查询" class="headerlink" title="Soft_score  查询"></a>Soft_score 查询</h1><p>加入我们我们是游戏的运营商，那么我们也许我们自己想要的排名的方法。比如，虽然所有的结果都很匹配，但是我们也许不只单单是匹配Final Fantasy，而且我们想把user_score和critic_score加进来（虽然你可以使用其中的一个）。我们想这样来算我们的分数。</p><p>最终<code>score = score*(user_score*10 + critic_score)/2/100</code></p><p>也就是我们把user_score乘以10，从而变成100分制。它和critic_score加起来，然后除以2，并除以100，这样就得出来最后的分数的加权系数。这个加权系数再乘以先前在上一步得出来的分数才是最终的分数值。经过这样的改造后，我们发现我们的分数其实不光是全文搜索的相关性，同时它也紧紧地关联了我们的用户体验和游戏的难道系数。</p><p>那么我们如何使用这个呢？</p><p>参照Elastics的官方文档soft_score，我们现在做如下的搜索：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">GET best_games/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;_source&quot;: [</span><br><span class="line">    &quot;name&quot;,</span><br><span class="line">    &quot;critic_score&quot;,</span><br><span class="line">    &quot;user_score&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;script_score&quot;: &#123;</span><br><span class="line">      &quot;query&quot;: &#123;</span><br><span class="line">        &quot;match&quot;: &#123;</span><br><span class="line">          &quot;name&quot;: &quot;Final Fantasy&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;script&quot;: &#123;</span><br><span class="line">        &quot;source&quot;: &quot;_score * (doc[&apos;user_score&apos;].value*10+doc[&apos;critic_score&apos;].value)/2/100&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>在上面的查询中，我们可以看到我们使用了新的公式：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;script&quot;: &#123;</span><br><span class="line">  &quot;source&quot;: &quot;_score * (doc[&apos;user_score&apos;].value*10+doc[&apos;critic_score&apos;].value)/2/100&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>那么我查询后的结果为：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">   &quot;hits&quot; : [</span><br><span class="line">     &#123;</span><br><span class="line">       &quot;_index&quot; : &quot;best_games&quot;,</span><br><span class="line">       &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">       &quot;_id&quot; : &quot;2qccJ28BCSSrjaXdSOnC&quot;,</span><br><span class="line">       &quot;_score&quot; : 7.405957,</span><br><span class="line">       &quot;_source&quot; : &#123;</span><br><span class="line">         &quot;user_score&quot; : 9,</span><br><span class="line">         &quot;critic_score&quot; : 92,</span><br><span class="line">         &quot;name&quot; : &quot;Final Fantasy VII&quot;</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;,</span><br><span class="line">     &#123;</span><br><span class="line">       &quot;_index&quot; : &quot;best_games&quot;,</span><br><span class="line">       &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">       &quot;_id&quot; : &quot;K6ccJ28BCSSrjaXdSOrC&quot;,</span><br><span class="line">       &quot;_score&quot; : 7.0804205,</span><br><span class="line">       &quot;_source&quot; : &#123;</span><br><span class="line">         &quot;user_score&quot; : 8,</span><br><span class="line">         &quot;critic_score&quot; : 94,</span><br><span class="line">         &quot;name&quot; : &quot;Final Fantasy IX&quot;</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;,</span><br><span class="line">     &#123;</span><br><span class="line">       &quot;_index&quot; : &quot;best_games&quot;,</span><br><span class="line">       &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">       &quot;_id&quot; : &quot;6KccJ28BCSSrjaXdSOnC&quot;,</span><br><span class="line">       &quot;_score&quot; : 6.9990363,</span><br><span class="line">       &quot;_source&quot; : &#123;</span><br><span class="line">         &quot;user_score&quot; : 8,</span><br><span class="line">         &quot;critic_score&quot; : 92,</span><br><span class="line">         &quot;name&quot; : &quot;Final Fantasy X&quot;</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;,</span><br><span class="line">     &#123;</span><br><span class="line">       &quot;_index&quot; : &quot;best_games&quot;,</span><br><span class="line">       &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">       &quot;_id&quot; : &quot;6qccJ28BCSSrjaXdSOnC&quot;,</span><br><span class="line">       &quot;_score&quot; : 6.917652,</span><br><span class="line">       &quot;_source&quot; : &#123;</span><br><span class="line">         &quot;user_score&quot; : 8,</span><br><span class="line">         &quot;critic_score&quot; : 90,</span><br><span class="line">         &quot;name&quot; : &quot;Final Fantasy VIII&quot;</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;,</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p></p><p>我们从上面可以看出来最终的分数_score是完全不一样的值。我们同时也看出来尽管第一名的Final Fantasy VII没有发生变化，但是第二名的位置由Final Fantasy X变为Final Fantasy IX了。</p><p>针对script的运算，有一些预定义好的函数可以供我们调用，它们可以帮我们加速我们的计算。</p><ul><li>Saturation</li><li>Sigmoid</li><li>Random score function</li><li>Decay functions for numeric fields</li><li>Decay functions for geo fields</li><li>Decay functions for date fields</li><li>Functions for vector fields<br>我们可以参考Elastic的官方文档来帮我们更深入地了解。</li></ul><h1 id="Function-score-查询"><a href="#Function-score-查询" class="headerlink" title="Function score 查询"></a>Function score 查询</h1><p>function_score允许您修改查询检索的文档分数。 例如，如果分数函数在计算上很昂贵，并且足以在过滤后的文档集上计算分数，则此功能很有用。</p><p>要使用function_score，用户必须定义一个查询和一个或多个函数，这些函数为查询返回的每个文档计算一个新分数。</p><p>function_score可以只与一个函数一起使用，比如：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">GET /_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;function_score&quot;: &#123;</span><br><span class="line">      &quot;query&quot;: &#123;</span><br><span class="line">        &quot;match_all&quot;: &#123;&#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;boost&quot;: &quot;5&quot;,</span><br><span class="line">      &quot;random_score&quot;: &#123;&#125;,</span><br><span class="line">      &quot;boost_mode&quot;: &quot;multiply&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>这里它把所有的文档的分数由5和一个由random_score (返回0到1之间的值)相乘而得到。那么这个分数就是一个从0到5之间的一个数值：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&quot;hits&quot; : [</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;_index&quot; : &quot;chicago_employees&quot;,</span><br><span class="line">    &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">    &quot;_id&quot; : &quot;Hrz0_W4BDM8YqwyDD06A&quot;,</span><br><span class="line">    &quot;_score&quot; : 4.9999876,</span><br><span class="line">    &quot;_source&quot; : &#123;</span><br><span class="line">      &quot;Name&quot; : &quot;ADKINS,  WILLIAM J&quot;,</span><br><span class="line">      &quot;Job Titles&quot; : &quot;SUPERVISING FIRE COMMUNICATIONS OPERATOR&quot;,</span><br><span class="line">      &quot;Department&quot; : &quot;OEMC&quot;,</span><br><span class="line">      &quot;Full or Part-Time&quot; : &quot;F&quot;,</span><br><span class="line">      &quot;Salary or Hourly&quot; : &quot;Salary&quot;,</span><br><span class="line">      &quot;Annual Salary&quot; : 121472.04</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;_index&quot; : &quot;kibana_sample_data_logs&quot;,</span><br><span class="line">    &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">    &quot;_id&quot; : &quot;eXNIHm8BjrINWI3xYF0J&quot;,</span><br><span class="line">    &quot;_score&quot; : 4.9999495,</span><br><span class="line">    &quot;_source&quot; : &#123;</span><br><span class="line">      &quot;agent&quot; : &quot;Mozilla/5.0 (X11; Linux i686) AppleWebKit/534.24 (KHTML, like Gecko) Chrome/11.0.696.50 Safari/534.24&quot;,</span><br><span class="line">      &quot;bytes&quot; : 6630,</span><br><span class="line">      &quot;clientip&quot; : &quot;77.5.51.49&quot;,</span><br><span class="line">      &quot;extension&quot; : &quot;&quot;,</span><br><span class="line">      &quot;geo&quot; : &#123;</span><br><span class="line">        &quot;srcdest&quot; : &quot;CN:ID&quot;,</span><br><span class="line"> ...</span><br></pre></td></tr></table></figure><p></p><p>尽管这个分数没有多大实际的意思，但是它可以让我们每次进入一个网页看到不同的文档，而不是严格按照固定的匹配而得到的固定的结果。</p><p>我们也可以配合soft_score一起来使用function_score：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">GET best_games/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;_source&quot;: [</span><br><span class="line">    &quot;name&quot;,</span><br><span class="line">    &quot;critic_score&quot;,</span><br><span class="line">    &quot;user_score&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;function_score&quot;: &#123;</span><br><span class="line">      &quot;query&quot;: &#123;</span><br><span class="line">        &quot;match&quot;: &#123;</span><br><span class="line">          &quot;name&quot;: &quot;Final Fantasy&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;script_score&quot;: &#123;</span><br><span class="line">        &quot;script&quot;: &quot;_score * (doc[&apos;user_score&apos;].value*10+doc[&apos;critic_score&apos;].value)/2/100&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>那么显示的结果是：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&quot;hits&quot; : [</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;_index&quot; : &quot;best_games&quot;,</span><br><span class="line">    &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">    &quot;_id&quot; : &quot;2qccJ28BCSSrjaXdSOnC&quot;,</span><br><span class="line">    &quot;_score&quot; : 60.272747,</span><br><span class="line">    &quot;_source&quot; : &#123;</span><br><span class="line">      &quot;user_score&quot; : 9,</span><br><span class="line">      &quot;critic_score&quot; : 92,</span><br><span class="line">      &quot;name&quot; : &quot;Final Fantasy VII&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;_index&quot; : &quot;best_games&quot;,</span><br><span class="line">    &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">    &quot;_id&quot; : &quot;K6ccJ28BCSSrjaXdSOrC&quot;,</span><br><span class="line">    &quot;_score&quot; : 57.623398,</span><br><span class="line">    &quot;_source&quot; : &#123;</span><br><span class="line">      &quot;user_score&quot; : 8,</span><br><span class="line">      &quot;critic_score&quot; : 94,</span><br><span class="line">      &quot;name&quot; : &quot;Final Fantasy IX&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;_index&quot; : &quot;best_games&quot;,</span><br><span class="line">    &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">    &quot;_id&quot; : &quot;6KccJ28BCSSrjaXdSOnC&quot;,</span><br><span class="line">    &quot;_score&quot; : 56.96106,</span><br><span class="line">    &quot;_source&quot; : &#123;</span><br><span class="line">      &quot;user_score&quot; : 8,</span><br><span class="line">      &quot;critic_score&quot; : 92,</span><br><span class="line">      &quot;name&quot; : &quot;Final Fantasy X&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;_index&quot; : &quot;best_games&quot;,</span><br><span class="line">    &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">    &quot;_id&quot; : &quot;6qccJ28BCSSrjaXdSOnC&quot;,</span><br><span class="line">    &quot;_score&quot; : 56.29872,</span><br><span class="line">    &quot;_source&quot; : &#123;</span><br><span class="line">      &quot;user_score&quot; : 8,</span><br><span class="line">      &quot;critic_score&quot; : 90,</span><br><span class="line">      &quot;name&quot; : &quot;Final Fantasy VIII&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  ...</span><br></pre></td></tr></table></figure><p></p><p>细心的读者可能看出来了。我们的分数和之前的那个soft_score结果是不一样的，但是我们搜索的结果的排序是一样的。</p><p>在上面的script的写法中，我们使用了硬编码，也就是把10硬写入到script中了。假如有一种情况，我将来想修改这个值为20或其它的值，重新看看查询的结果。由于script的改变，需要重新进行编译，这样的效率并不高。一种较好的办法是如下的写法：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">GET best_games/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;_source&quot;: [</span><br><span class="line">    &quot;name&quot;,</span><br><span class="line">    &quot;critic_score&quot;,</span><br><span class="line">    &quot;user_score&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;script_score&quot;: &#123;</span><br><span class="line">      &quot;query&quot;: &#123;</span><br><span class="line">        &quot;match&quot;: &#123;</span><br><span class="line">          &quot;name&quot;: &quot;Final Fantasy&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;script&quot;: &#123;</span><br><span class="line">        &quot;params&quot;:&#123;</span><br><span class="line">          &quot;multiplier&quot;: 10</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;source&quot;: &quot;_score * (doc[&apos;user_score&apos;].value*params.multiplier+doc[&apos;critic_score&apos;].value)/2/100&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>脚本编译被缓存以加快执行速度。 如果脚本具有需要考虑的参数，则最好重用相同的脚本并为其提供参数。</p><h1 id="boost-mode"><a href="#boost-mode" class="headerlink" title="boost_mode"></a>boost_mode</h1><p>boost_mode是用来定义最新计算出来的分数如何和查询的分数来相结合的。</p><p>mulitply 查询分数和功能分数相乘（默认）<br>replace 仅使用功能分数，查询分数将被忽略<br>sum 查询分数和功能分数相加<br>avg 平均值<br>max 查询分数和功能分数的最大值<br>min 查询分数和功能分数的最小值</p><h1 id="field-value-factor"><a href="#field-value-factor" class="headerlink" title="field_value_factor"></a>field_value_factor</h1><p>field_value_factor函数使您可以使用文档中的字段来影响得分。 与使用script_score函数类似，但是它避免了脚本编写的开销。 如果用于多值字段，则在计算中仅使用该字段的第一个值。</p><p>例如，假设您有一个用数字likes字段索引的文档，并希望通过该字段影响文档的得分，那么这样做的示例如下所示：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">GET /_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;function_score&quot;: &#123;</span><br><span class="line">      &quot;field_value_factor&quot;: &#123;</span><br><span class="line">        &quot;field&quot;: &quot;likes&quot;,</span><br><span class="line">        &quot;factor&quot;: 1.2,</span><br><span class="line">        &quot;modifier&quot;: &quot;sqrt&quot;,</span><br><span class="line">        &quot;missing&quot;: 1</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>上面的function_score将根据field_value_factore按照如下的方式来计算分数：</p><p><code>sqrt(1.2 * doc[&#39;likes&#39;].value)</code></p><p>field_value_factor函数有许多选项：</p><p>field 要从文档中提取的字段。<br>factor 字段值乘以的可选因子，默认为1。<br>modifier 应用于字段值的修饰符可以是以下之一：none，log，log1p，log2p，ln，ln1p，ln2p，平方，sqrt或reciprocal。 默认为无。<br>missing 如果文档没有该字段，则使用该值。 就像从文档中读取一样，修饰符和因数仍然适用于它。</p><p>针对我们的例子，我们也可以使用如下的方法来重新计算分数：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">GET best_games/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;_source&quot;: [</span><br><span class="line">    &quot;name&quot;,</span><br><span class="line">    &quot;critic_score&quot;,</span><br><span class="line">    &quot;user_score&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;function_score&quot;: &#123;</span><br><span class="line">      &quot;query&quot;: &#123;</span><br><span class="line">        &quot;match&quot;: &#123;</span><br><span class="line">          &quot;name&quot;: &quot;Final Fantasy&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;field_value_factor&quot;: &#123;</span><br><span class="line">        &quot;field&quot;: &quot;user_score&quot;,</span><br><span class="line">        &quot;factor&quot;: 1.2,</span><br><span class="line">        &quot;modifier&quot;: &quot;none&quot;,</span><br><span class="line">        &quot;missing&quot;: 1</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>在上面的例子里，我们使用user_score字段，并把这个字段的factor设置为1.2。这样加大这个字段的重要性。重新进行搜索：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">    &quot;hits&quot; : [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;best_games&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;2qccJ28BCSSrjaXdSOnC&quot;,</span><br><span class="line">        &quot;_score&quot; : 87.89488,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;user_score&quot; : 9,</span><br><span class="line">          &quot;critic_score&quot; : 92,</span><br><span class="line">          &quot;name&quot; : &quot;Final Fantasy VII&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;best_games&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;6KccJ28BCSSrjaXdSOnC&quot;,</span><br><span class="line">        &quot;_score&quot; : 78.128784,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;user_score&quot; : 8,</span><br><span class="line">          &quot;critic_score&quot; : 92,</span><br><span class="line">          &quot;name&quot; : &quot;Final Fantasy X&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;best_games&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;6qccJ28BCSSrjaXdSOnC&quot;,</span><br><span class="line">        &quot;_score&quot; : 78.128784,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;user_score&quot; : 8,</span><br><span class="line">          &quot;critic_score&quot; : 90,</span><br><span class="line">          &quot;name&quot; : &quot;Final Fantasy VIII&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;best_games&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;K6ccJ28BCSSrjaXdSOrC&quot;,</span><br><span class="line">        &quot;_score&quot; : 78.128784,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;user_score&quot; : 8,</span><br><span class="line">          &quot;critic_score&quot; : 94,</span><br><span class="line">          &quot;name&quot; : &quot;Final Fantasy IX&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line"> </span><br><span class="line">...</span><br></pre></td></tr></table></figure><p></p><p>我们可以看出来我们的分数又有些变化。而且排序也有变化。</p><h1 id="functions"><a href="#functions" class="headerlink" title="functions"></a>functions</h1><p>上面的例子中，每一个doc都会乘以相同的系数，有时候我们需要对不同的doc采用不同的权重。这时，使用functions是一种不错的选择。几个function可以组合。 在这种情况下，可以选择仅在文档与给定的过滤查询匹配时才应用该function:<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">GET /_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;function_score&quot;: &#123;</span><br><span class="line">      &quot;query&quot;: &#123;</span><br><span class="line">        &quot;match_all&quot;: &#123;&#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;boost&quot;: &quot;5&quot;,</span><br><span class="line">      &quot;functions&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;filter&quot;: &#123;</span><br><span class="line">            &quot;match&quot;: &#123;</span><br><span class="line">              &quot;test&quot;: &quot;bar&quot;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;random_score&quot;: &#123;&#125;,</span><br><span class="line">          &quot;weight&quot;: 23</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;filter&quot;: &#123;</span><br><span class="line">            &quot;match&quot;: &#123;</span><br><span class="line">              &quot;test&quot;: &quot;cat&quot;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;weight&quot;: 42</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      &quot;max_boost&quot;: 42,</span><br><span class="line">      &quot;score_mode&quot;: &quot;max&quot;,</span><br><span class="line">      &quot;boost_mode&quot;: &quot;multiply&quot;,</span><br><span class="line">      &quot;min_score&quot;: 42</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>上面的boost为5，也即所有的文档的加权都是5。我们同时也看到几个定义的functions。它们是针对相应的匹配的文档分别进行加权的。如果匹配了，就可以乘以相应的加权。</p><p>针对我们的例子，我们也可以做如下的实验。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">GET best_games/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;function_score&quot;: &#123;</span><br><span class="line">      &quot;query&quot;: &#123;</span><br><span class="line">        &quot;match&quot;: &#123;</span><br><span class="line">          &quot;name&quot;: &quot;Final Fantasy&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;boost&quot;: &quot;1&quot;,</span><br><span class="line">      &quot;functions&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;filter&quot;: &#123;</span><br><span class="line">            &quot;match&quot;: &#123;</span><br><span class="line">              &quot;name&quot;: &quot; XIII&quot;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;weight&quot;: 10000000</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      &quot;boost_mode&quot;: &quot;multiply&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>我们想把name含有XIII的所有游戏都加一个权。这样它可以排到最前面。我们给它的加权值很大：10000000。</p><p>搜索后的结果是：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">    &quot;hits&quot; : [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;best_games&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;KqccJ28BCSSrjaXdSOrC&quot;,</span><br><span class="line">        &quot;_score&quot; : 8.1384144E7,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;global_sales&quot; : 5.33,</span><br><span class="line">          &quot;year&quot; : 2009,</span><br><span class="line">          &quot;image_url&quot; : &quot;https://www.wired.com/images_blogs/gamelife/2009/09/ffxiii-01.jpg&quot;,</span><br><span class="line">          &quot;platform&quot; : &quot;PS3&quot;,</span><br><span class="line">          &quot;@timestamp&quot; : &quot;2009-01-01T00:00:00.000+08:00&quot;,</span><br><span class="line">          &quot;user_score&quot; : 7,</span><br><span class="line">          &quot;critic_score&quot; : 83,</span><br><span class="line">          &quot;name&quot; : &quot;Final Fantasy XIII&quot;,</span><br><span class="line">          &quot;genre&quot; : &quot;Role-Playing&quot;,</span><br><span class="line">          &quot;publisher&quot; : &quot;Square Enix&quot;,</span><br><span class="line">          &quot;developer&quot; : &quot;Square Enix&quot;,</span><br><span class="line">          &quot;id&quot; : &quot;final-fantasy-xiii-ps3-2009&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;best_games&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;OKccJ28BCSSrjaXdSOvC&quot;,</span><br><span class="line">        &quot;_score&quot; : 7.2601472E7,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;global_sales&quot; : 2.63,</span><br><span class="line">          &quot;year&quot; : 2011,</span><br><span class="line">          &quot;image_url&quot; : &quot;https://i.ytimg.com/vi/tSJH_vhaYUk/maxresdefault.jpg&quot;,</span><br><span class="line">          &quot;platform&quot; : &quot;PS3&quot;,</span><br><span class="line">          &quot;@timestamp&quot; : &quot;2011-01-01T00:00:00.000+08:00&quot;,</span><br><span class="line">          &quot;user_score&quot; : 6,</span><br><span class="line">          &quot;critic_score&quot; : 79,</span><br><span class="line">          &quot;name&quot; : &quot;Final Fantasy XIII-2&quot;,</span><br><span class="line">          &quot;genre&quot; : &quot;Role-Playing&quot;,</span><br><span class="line">          &quot;publisher&quot; : &quot;Square Enix&quot;,</span><br><span class="line">          &quot;developer&quot; : &quot;Square Enix&quot;,</span><br><span class="line">          &quot;id&quot; : &quot;final-fantasy-xiii-2-ps3-2011&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;best_games&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;2qccJ28BCSSrjaXdSOnC&quot;,</span><br><span class="line">        &quot;_score&quot; : 8.138414,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;global_sales&quot; : 9.72,</span><br><span class="line">          &quot;year&quot; : 1997,</span><br><span class="line">          &quot;image_url&quot; : &quot;https://r.hswstatic.com/w_907/gif/finalfantasyvii-MAIN.jpg&quot;,</span><br><span class="line">          &quot;platform&quot; : &quot;PS&quot;,</span><br><span class="line">          &quot;@timestamp&quot; : &quot;1997-01-01T00:00:00.000+08:00&quot;,</span><br><span class="line">          &quot;user_score&quot; : 9,</span><br><span class="line">          &quot;critic_score&quot; : 92,</span><br><span class="line">          &quot;name&quot; : &quot;Final Fantasy VII&quot;,</span><br><span class="line">          &quot;genre&quot; : &quot;Role-Playing&quot;,</span><br><span class="line">          &quot;publisher&quot; : &quot;Sony Computer Entertainment&quot;,</span><br><span class="line">          &quot;developer&quot; : &quot;SquareSoft&quot;,</span><br><span class="line">          &quot;id&quot; : &quot;final-fantasy-vii-ps-1997&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;best_games&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;6KccJ28BCSSrjaXdSOnC&quot;,</span><br><span class="line">        &quot;_score&quot; : 8.138414,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;global_sales&quot; : 8.05,</span><br><span class="line">          &quot;year&quot; : 2001,</span><br><span class="line">          &quot;image_url&quot; : &quot;https://www.mobygames.com/images/promo/l/192477-final-fantasy-x-screenshot.jpg&quot;,</span><br><span class="line">          &quot;platform&quot; : &quot;PS2&quot;,</span><br><span class="line">          &quot;@timestamp&quot; : &quot;2001-01-01T00:00:00.000+08:00&quot;,</span><br><span class="line">          &quot;user_score&quot; : 8,</span><br><span class="line">          &quot;critic_score&quot; : 92,</span><br><span class="line">          &quot;name&quot; : &quot;Final Fantasy X&quot;,</span><br><span class="line">          &quot;genre&quot; : &quot;Role-Playing&quot;,</span><br><span class="line">          &quot;publisher&quot; : &quot;Sony Computer Entertainment&quot;,</span><br><span class="line">          &quot;developer&quot; : &quot;SquareSoft&quot;,</span><br><span class="line">          &quot;id&quot; : &quot;final-fantasy-x-ps2-2001&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p></p><p>我们可以看出来，在这一次的搜索中Final Fantasy XIII的排名变成第一了。</p><h1 id="Elasticsearch中的衰变函数"><a href="#Elasticsearch中的衰变函数" class="headerlink" title="Elasticsearch中的衰变函数"></a>Elasticsearch中的衰变函数</h1><p>在Elasticsearch中，常见的Decay function （衰变函数）有一下的几种：</p><p><img src="https://img-blog.csdnimg.cn/20191221164124868.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9lbGFzdGljc3RhY2suYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt></p><p>Function评分技术不仅可以修改默认的Elasticsearch评分算法，还可以用于完全替代它。 一个很好的例子是“trending”搜索，显示主题中正在迅速流行的项目。</p><p>这样的分数不能基于简单的指标（例如“喜欢”或“观看次数”），而必须根据当前时间不断调整。 与在24小时内获得10000次观看的视频相比，在1小时内获得1000次观看的视频通常被认为“更热”。 Elasticsearch附带了几个衰减函数，这些函数使解决此类问题变得轻而易举。</p><p>我们现在以gauss来为例展示如何使用这个衰变函数的。曲线的形状可以通过orgin，scale，offset和decay来控制。 这三个变量是控制曲线形状的主要工具。 可以将origin和scale参数视为您的最小值和最大值，它定义了将在其中定义曲线的边界框。 如果我们希望趋势视频列表涵盖一整天，则最好将原点定义为当前时间戳，比例尺定义为24小时。 offset可用于在开始时将曲线完全平坦，例如将其设置为1h，可消除最近视频的所有惩罚，也即最近1个小时里的所有视频不受影响 。最后，衰减选项会根据文档的位置更改文档降级的严重程度。 默认的衰减值是0.5，较大的值会使曲线更陡峭，其效果也更明显。</p><p><img src="https://img-blog.csdnimg.cn/20191221164633498.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9lbGFzdGljc3RhY2suYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt></p><p>我们还是拿我们的best_games来为例：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">GET best_games/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;_source&quot;: [</span><br><span class="line">    &quot;name&quot;,</span><br><span class="line">    &quot;critic_score&quot;,</span><br><span class="line">    &quot;user_score&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;function_score&quot;: &#123;</span><br><span class="line">      &quot;query&quot;: &#123;</span><br><span class="line">        &quot;match&quot;: &#123;</span><br><span class="line">          &quot;name&quot;: &quot;Final Fantasy&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;functions&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;gauss&quot;: &#123;</span><br><span class="line">            &quot;@timestamp&quot;: &#123;</span><br><span class="line">              &quot;origin&quot;: &quot;2016-01-01T00:00:00&quot;,</span><br><span class="line">              &quot;scale&quot;: &quot;365d&quot;,</span><br><span class="line">              &quot;offset&quot;: &quot;0h&quot;,</span><br><span class="line">              &quot;decay&quot;: 0.1</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      &quot;boost_mode&quot;: &quot;multiply&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>上面的查询是基于2016-010-01这一天开始，在365天之内的文档不收衰减，那么超过这个时间的所有文档，衰减的加权值为0.1。也就是说1年开外的所有文档对我的意义并不是太多。</p><p>重新运行我们的查询，结果显示：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">    &quot;hits&quot; : [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;best_games&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;OKccJ28BCSSrjaXdSOvC&quot;,</span><br><span class="line">        &quot;_score&quot; : 6.6742494E-25,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;user_score&quot; : 6,</span><br><span class="line">          &quot;critic_score&quot; : 79,</span><br><span class="line">          &quot;name&quot; : &quot;Final Fantasy XIII-2&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;best_games&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;2qccJ28BCSSrjaXdSOnC&quot;,</span><br><span class="line">        &quot;_score&quot; : 0.0,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;user_score&quot; : 9,</span><br><span class="line">          &quot;critic_score&quot; : 92,</span><br><span class="line">          &quot;name&quot; : &quot;Final Fantasy VII&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;best_games&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;6KccJ28BCSSrjaXdSOnC&quot;,</span><br><span class="line">        &quot;_score&quot; : 0.0,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;user_score&quot; : 8,</span><br><span class="line">          &quot;critic_score&quot; : 92,</span><br><span class="line">          &quot;name&quot; : &quot;Final Fantasy X&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;best_games&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;6qccJ28BCSSrjaXdSOnC&quot;,</span><br><span class="line">        &quot;_score&quot; : 0.0,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;user_score&quot; : 8,</span><br><span class="line">          &quot;critic_score&quot; : 90,</span><br><span class="line">          &quot;name&quot; : &quot;Final Fantasy VIII&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;best_games&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;FqccJ28BCSSrjaXdSOrC&quot;,</span><br><span class="line">        &quot;_score&quot; : 0.0,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;user_score&quot; : 7,</span><br><span class="line">          &quot;critic_score&quot; : 92,</span><br><span class="line">          &quot;name&quot; : &quot;Final Fantasy XII&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p></p><p>这次的搜索结果显示Final Fantasy XIII-2是得分最高的文档。</p><p>参考：<br>【1】<a href="https://www.elastic.co/blog/found-function-scoring" target="_blank" rel="noopener">https://www.elastic.co/blog/found-function-scoring</a><br>【2】<a href="https://medium.com/horrible-hacks/customizing-scores-in-elasticsearch-for-product-recommendations-9e0d02ce1dbd" target="_blank" rel="noopener">https://medium.com/horrible-hacks/customizing-scores-in-elasticsearch-for-product-recommendations-9e0d02ce1dbd</a><br>【3】<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-function-score-query.html#function-field-value-factor" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-function-score-query.html#function-field-value-factor</a><br>【4】<a href="https://juejin.im/post/5df8f465518825123751c089" target="_blank" rel="noopener">https://juejin.im/post/5df8f465518825123751c089</a><br>【5】<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-script-score-query.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-script-score-query.html</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Thu Jan 02 2020 10:53:05 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;我们将介绍使用function_score的基础知识，并介绍一些function core技术非常有用和有效的用例。&lt;/p&gt;&lt;h1 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h1&gt;&lt;p&gt;评分的概念是任何搜索引擎（包括Elasticsearch）的核心。评分可以粗略地定义为：找到符合一组标准的数据并按相关性顺序将其返回。相关性通常是通过类似TF-IDF的算法来实现的，该算法试图找出文本上与提交的查询最相似的文档。尽管TF-IDF及其表亲（例如BM25）非常棒，但有时必须通过其他算法或通过其他评分启发式方法来解决相关性问题。在这里，Elasticsearch的script_score和function_score功能变得非常有用。本文将介绍这些工具的用法。&lt;/p&gt;&lt;p&gt;文本相似性不是最重要因素的一个域示例是地理搜索。如果正在寻找在给定点附近的好咖啡店，则按与查询在文本上的相似程度对咖啡店进行排名对用户而言不是很有用，但按地理位置在附近的排名对他们。&lt;/p&gt;&lt;p&gt;另一个示例可能是视频共享站点上的视频，其中搜索结果可能应该考虑视频的相对受欢迎程度。如果某个流行歌星上传了具有给定标题的视频，从而获得了数百万的观看次数，那么该视频可能应该比具有相似文字相关性的不受欢迎的视频更胜一筹。&lt;/p&gt;&lt;p&gt;在使用Elasticsearch进行全文搜索的时候，默认是使用BM25计算的_score字段进行降序排序的。当我们需要用其他字段进行降序或者升序排序的时候，可以使用sort字段，传入我们想要的排序字段和方式。 当简单的使用几个字段升降序排列组合无法满足我们的需求的时候，我们就需要自定义排序的特性，Elasticsearch提供了function_score的DSL来自定义打分，这样就可以根据自定义的_score来进行排序。&lt;/p&gt;&lt;p&gt;在实际的使用中，我们必须注意的是：soft_score和function_score是耗资源的。您只需要计算一组经过过滤的文档的分数。&lt;/p&gt;&lt;p&gt;下面我们来用一个例子来具体说明如何来通过script_core和function_core来定制我们的分数。&lt;/p&gt;
    
    </summary>
    
      <category term="elk" scheme="https://yongnights.github.io/categories/elk/"/>
    
    
      <category term="elk" scheme="https://yongnights.github.io/tags/elk/"/>
    
  </entry>
  
  <entry>
    <title>Elasticsearch：如何把Elasticsearch中的数据导出为CSV格式的文件</title>
    <link href="https://yongnights.github.io/2020/01/02/Elasticsearch%EF%BC%9A%E5%A6%82%E4%BD%95%E6%8A%8AElasticsearch%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%87%BA%E4%B8%BACSV%E6%A0%BC%E5%BC%8F%E7%9A%84%E6%96%87%E4%BB%B6/"/>
    <id>https://yongnights.github.io/2020/01/02/Elasticsearch：如何把Elasticsearch中的数据导出为CSV格式的文件/</id>
    <published>2020-01-02T02:51:19.411Z</published>
    <updated>2020-01-02T02:41:30.400Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Jan 02 2020 10:53:05 GMT+0800 (GMT+08:00) --><p>本教程向您展示如何将数据从Elasticsearch导出到CSV文件。 想象一下，您想要在Excel中打开一些Elasticsearch中的数据，并根据这些数据创建数据透视表。 这只是一个用例，其中将数据从Elasticsearch导出到CSV文件将很有用。</p><h1 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h1><p>其实这种方法最简单了。我们可以直接使用Kibana中提供的功能实现这个需求。</p><p>我们首先来准备数据：</p><p><img src="https://img-blog.csdnimg.cn/20191219192355642.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9lbGFzdGljc3RhY2suYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt></p><p><img src="https://img-blog.csdnimg.cn/20191219192543840.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9lbGFzdGljc3RhY2suYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt></p><p>再接着选择Add data。这样我们的Elasticsearch中就会有我们的eCommerce索引了。</p><p>我们接着选择Discover，并选择我们刚才建立的eCommerce索引。</p><p><img src="https://img-blog.csdnimg.cn/20191219193027904.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9lbGFzdGljc3RhY2suYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt></p><p>我们同时要记得在time picker里选择我们所需要的时间段：</p><p><img src="https://img-blog.csdnimg.cn/2019121919305845.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9lbGFzdGljc3RhY2suYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt></p><a id="more"></a><p>我们可以做一些我们想要的搜索：</p><p><img src="https://img-blog.csdnimg.cn/20191219193238837.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9lbGFzdGljc3RhY2suYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt></p><p>我们点击左上角的Save按钮：</p><p><img src="https://img-blog.csdnimg.cn/20191219193357231.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9lbGFzdGljc3RhY2suYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt></p><p>接下来，我们点击Share按钮：</p><p><img src="https://img-blog.csdnimg.cn/2019121919352965.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9lbGFzdGljc3RhY2suYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt></p><p>这样我们就可以得到我们当前搜索结果的csv文件。我们只需要在Kibana中下载即可：</p><p><img src="https://img-blog.csdnimg.cn/20191219193739183.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9lbGFzdGljc3RhY2suYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt></p><h1 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h1><p>我们可以使用Logstash提供的功能来做这个。这个的好处是可以通过编程的方式来进行。Logstash不只光可以把数据传上Elasticsearch，同时它还可以把数据从Elasticsearch中导出。</p><p>我们首先必须安装和Elasticsearch相同版本的 Logstash。如果大家还不指定如安装Logstash的话，请参阅我的文章“如何安装Elastic栈中的Logstash”。</p><p>我们可以进一步查看我们的Logstash是否支持csv的output:<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/logstash-plugin list --group output</span><br></pre></td></tr></table></figure><p></p><p>显示：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">logstash-output-cloudwatch</span><br><span class="line">logstash-output-csv</span><br><span class="line">logstash-output-elastic_app_search</span><br><span class="line">logstash-output-elasticsearch</span><br><span class="line">logstash-output-email</span><br><span class="line">logstash-output-file</span><br><span class="line">logstash-output-graphite</span><br><span class="line">logstash-output-http</span><br><span class="line">logstash-output-lumberjack</span><br><span class="line">logstash-output-nagios</span><br><span class="line">logstash-output-null</span><br><span class="line">logstash-output-pipe</span><br><span class="line">logstash-output-rabbitmq</span><br><span class="line">logstash-output-redis</span><br><span class="line">logstash-output-s3</span><br><span class="line">logstash-output-sns</span><br><span class="line">logstash-output-sqs</span><br><span class="line">logstash-output-stdout</span><br><span class="line">logstash-output-tcp</span><br><span class="line">logstash-output-udp</span><br><span class="line">logstash-output-webhdfs</span><br></pre></td></tr></table></figure><p></p><p>显然logstash-ouput-csv是在列表中。也就是说我们logstash支持csv格式的输出。</p><p>我们建立如下的Logstash的配置文件：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">convert_csv.conf</span><br><span class="line"></span><br><span class="line">input &#123;</span><br><span class="line"> elasticsearch &#123;</span><br><span class="line">    hosts =&gt; &quot;localhost:9200&quot;</span><br><span class="line">    index =&gt; &quot;kibana_sample_data_ecommerce&quot;</span><br><span class="line">    query =&gt; &apos;&#123;  </span><br><span class="line">    &quot;query&quot;: &#123;</span><br><span class="line">        &quot;bool&quot;: &#123;</span><br><span class="line">          &quot;must&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">              &quot;match&quot;: &#123;</span><br><span class="line">                &quot;currency&quot;: &quot;EUR&quot;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              &quot;match&quot;: &#123;</span><br><span class="line">                &quot;products.quantity&quot;: 1</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;&apos;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">output &#123;</span><br><span class="line">  csv &#123;</span><br><span class="line">    # This is the fields that you would like to output in CSV format.</span><br><span class="line">    # The field needs to be one of the fields shown in the output when you run your</span><br><span class="line">    # Elasticsearch query</span><br><span class="line"> </span><br><span class="line">    fields =&gt; [&quot;category&quot;, &quot;customer_birth_date&quot;, &quot;customer_first_name&quot;, &quot;customer_full_name&quot;, &quot;day_of_week&quot;]</span><br><span class="line">  </span><br><span class="line">    # This is where we store output. We can use several files to store our output</span><br><span class="line">    # by using a timestamp to determine the filename where to store output.    </span><br><span class="line">    path =&gt; &quot;/Users/liuxg/tmp/csv-export.csv&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>请注意上面的path需要自己去定义时候自己环境的路径。这里我们在fields里定义了我们想要的字段。</p><p>然后，我们可以运行我们的Logstash应用：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/logstash -f ~/data/convert_csv.conf</span><br></pre></td></tr></table></figure><p></p><p>这样在我们定义的文件路径/Users/liuxg/tmp/csv-export.csv可以看到一个输出的csv文件。我们可以打开这个文件，并看到像这样的文档：</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Thu Jan 02 2020 10:53:05 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;本教程向您展示如何将数据从Elasticsearch导出到CSV文件。 想象一下，您想要在Excel中打开一些Elasticsearch中的数据，并根据这些数据创建数据透视表。 这只是一个用例，其中将数据从Elasticsearch导出到CSV文件将很有用。&lt;/p&gt;&lt;h1 id=&quot;方法一&quot;&gt;&lt;a href=&quot;#方法一&quot; class=&quot;headerlink&quot; title=&quot;方法一&quot;&gt;&lt;/a&gt;方法一&lt;/h1&gt;&lt;p&gt;其实这种方法最简单了。我们可以直接使用Kibana中提供的功能实现这个需求。&lt;/p&gt;&lt;p&gt;我们首先来准备数据：&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20191219192355642.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9lbGFzdGljc3RhY2suYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70&quot; alt&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20191219192543840.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9lbGFzdGljc3RhY2suYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70&quot; alt&gt;&lt;/p&gt;&lt;p&gt;再接着选择Add data。这样我们的Elasticsearch中就会有我们的eCommerce索引了。&lt;/p&gt;&lt;p&gt;我们接着选择Discover，并选择我们刚才建立的eCommerce索引。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20191219193027904.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9lbGFzdGljc3RhY2suYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70&quot; alt&gt;&lt;/p&gt;&lt;p&gt;我们同时要记得在time picker里选择我们所需要的时间段：&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/2019121919305845.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9lbGFzdGljc3RhY2suYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="elk" scheme="https://yongnights.github.io/categories/elk/"/>
    
    
      <category term="elk" scheme="https://yongnights.github.io/tags/elk/"/>
    
  </entry>
  
</feed>
