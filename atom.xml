<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>个人博客</title>
  
  <subtitle>记录工作中的点点滴滴</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://yongnights.github.io/"/>
  <updated>2019-12-31T04:00:48.287Z</updated>
  <id>https://yongnights.github.io/</id>
  
  <author>
    <name>永夜初晗凝碧天</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>网络_udp</title>
    <link href="https://yongnights.github.io/2019/12/31/%E7%BD%91%E7%BB%9C_udp/"/>
    <id>https://yongnights.github.io/2019/12/31/网络_udp/</id>
    <published>2019-12-31T04:00:48.286Z</published>
    <updated>2019-12-31T04:00:48.287Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Dec 31 2019 13:39:54 GMT+0800 (GMT+08:00) --><h1 id="网络通信概述"><a href="#网络通信概述" class="headerlink" title="网络通信概述"></a>网络通信概述</h1><ol><li><p>什么是网络<br>一种辅助双方或者多方能够连接在一起的工具</p></li><li><p>使用网络的目的<br>就是为了联通多方然后进行通信用的，即把数据从一方传递给另外一方,为了让在不同的电脑上运行的软件之间能够互相传递数据，就需要借助网络的功能</p></li></ol><p>小总结:</p><ul><li>使用网络能够把多方链接在一起，然后可以进行数据传递</li><li>所谓的网络编程就是，让在不同的电脑上的软件能够进行数据传递，即进程之间的通信</li></ul><p><img src="/images_udp/001.png" alt></p><a id="more"></a><h1 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h1><ol><li><p>什么是IP地址<br>用来在网络中标记一台电脑，比如192.168.1.1；在本地局域网上是唯一的。</p></li><li><p>ip地址的作用</p></li></ol><p><img src="/images_udp/002.png" alt></p><ol start="3"><li>ip地址的分类（了解）<br>每一个IP地址包括两部分：网络地址和主机地址<br><img src="/images_udp/003.png" alt></li></ol><h2 id="A类IP地址"><a href="#A类IP地址" class="headerlink" title="A类IP地址"></a>A类IP地址</h2><p>一个A类IP地址由1字节的网络地址和3字节主机地址组成，网络地址的最高位必须是“0”，<br>地址范围1.0.0.1-126.255.255.254<br>二进制表示为：00000001 00000000 00000000 00000001 - 01111110 11111111 11111111 11111110<br>可用的A类网络有126个，每个网络能容纳1677214个主机</p><h2 id="B类IP地址"><a href="#B类IP地址" class="headerlink" title="B类IP地址"></a>B类IP地址</h2><p>一个B类IP地址由2个字节的网络地址和2个字节的主机地址组成，网络地址的最高位必须是“10”，<br>地址范围128.1.0.1-191.255.255.254<br>二进制表示为：10000000 00000001 00000000 00000001 - 10111111 11111111 11111111 11111110<br>可用的B类网络有16384个，每个网络能容纳65534主机</p><h2 id="C类IP地址"><a href="#C类IP地址" class="headerlink" title="C类IP地址"></a>C类IP地址</h2><p>一个C类IP地址由3字节的网络地址和1字节的主机地址组成，网络地址的最高位必须是“110”<br>范围192.0.1.1-223.255.255.254<br>二进制表示为: 11000000 00000000 00000001 00000001 - 11011111 11111111 11111110 11111110<br>C类网络可达2097152个，每个网络能容纳254个主机</p><h2 id="D类地址用于多点广播"><a href="#D类地址用于多点广播" class="headerlink" title="D类地址用于多点广播"></a>D类地址用于多点广播</h2><p>D类IP地址第一个字节以“1110”开始，它是一个专门保留的地址。<br>它并不指向特定的网络，目前这一类地址被用在多点广播（Multicast）中<br>多点广播地址用来一次寻址一组计算机 s 地址范围224.0.0.1-239.255.255.254</p><h2 id="E类IP地址"><a href="#E类IP地址" class="headerlink" title="E类IP地址"></a>E类IP地址</h2><p>以“1111”开始，为将来使用保留<br>E类地址保留，仅作实验和开发用</p><h2 id="私有ip"><a href="#私有ip" class="headerlink" title="私有ip"></a>私有ip</h2><p>在这么多网络IP中，国际规定有一部分IP地址是用于我们的局域网使用，也就是属于私网IP，不在公网中使用的，它们的范围是：<br>10.0.0.0～10.255.255.255<br>172.16.0.0～172.31.255.255<br>192.168.0.0～192.168.255.255</p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>IP地址127．0．0．1~127．255．255．255用于回路测试，<br>如：127.0.0.1可以代表本机IP地址，用<a href="http://127.0.0.1就可以测试本机中配置的Web服务器。" target="_blank" rel="noopener">http://127.0.0.1就可以测试本机中配置的Web服务器。</a></p><h1 id="Linux命令-ping-ifconfig"><a href="#Linux命令-ping-ifconfig" class="headerlink" title="Linux命令(ping, ifconfig)"></a>Linux命令(ping, ifconfig)</h1><h2 id="查看或配置网卡信息：ifconfig"><a href="#查看或配置网卡信息：ifconfig" class="headerlink" title="查看或配置网卡信息：ifconfig"></a>查看或配置网卡信息：ifconfig</h2><p>敲：ifconfig，它会显示所有网卡的信息<br><img src="/images_udp/004.png" alt></p><p><img src="/images_udp/005.png" alt></p><h2 id="测试远程主机连通性：ping"><a href="#测试远程主机连通性：ping" class="headerlink" title="测试远程主机连通性：ping"></a>测试远程主机连通性：ping</h2><p>通常用ping来检测网络是否正常<br><img src="/images_udp/006.png" alt></p><h1 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h1><h2 id="什么是端口"><a href="#什么是端口" class="headerlink" title="什么是端口"></a>什么是端口</h2><p>端口就好一个房子的门，是出入这间房子的必经之路。如果一个程序需要收发网络数据，那么就需要有这样的端口.在linux系统中，端口可以有65536（2的16次方）个之多！既然有这么多，操作系统为了统一管理，所以进行了编号，这就是<code>端口号</code>。</p><h2 id="端口号"><a href="#端口号" class="headerlink" title="端口号"></a>端口号</h2><p>端口是通过端口号来标记的，端口号只有整数，范围是从0到65535<br>注意：端口数不一样的*nix系统不一样，还可以手动修改</p><h2 id="端口是怎样分配的"><a href="#端口是怎样分配的" class="headerlink" title="端口是怎样分配的"></a>端口是怎样分配的</h2><p>端口号不是随意使用的，而是按照一定的规定进行分配。<br>端口的分类标准有好几种，我们这里不做详细讲解，只介绍一下知名端口和动态端口</p><h3 id="知名端口（Well-Known-Ports）"><a href="#知名端口（Well-Known-Ports）" class="headerlink" title="知名端口（Well Known Ports）"></a>知名端口（Well Known Ports）</h3><p>知名端口是众所周知的端口号，范围从0到1023<br>80端口分配给HTTP服务<br>21端口分配给FTP服务<br>可以理解为，一些常用的功能使用的号码是估计的，好比 电话号码110、10086、10010一样<br>一般情况下，如果一个程序需要使用知名端口的需要有root权限。</p><h3 id="动态端口（Dynamic-Ports）"><a href="#动态端口（Dynamic-Ports）" class="headerlink" title="动态端口（Dynamic Ports）"></a>动态端口（Dynamic Ports）</h3><p>动态端口的范围是从1024到65535<br>之所以称为动态端口，是因为它一般不固定分配某种服务，而是动态分配。<br>动态分配是指当一个系统程序或应用程序程序需要网络通信时，它向主机申请一个端口，主机从可用的端口号中分配一个供它使用。<br>当这个程序关闭时，同时也就释放了所占用的端口号。</p><h3 id="怎样查看端口-？"><a href="#怎样查看端口-？" class="headerlink" title="怎样查看端口 ？"></a>怎样查看端口 ？</h3><ul><li>用“netstat －an”查看端口状态</li><li>lsof -i [tcp/udp]:2425</li></ul><h2 id="小总结"><a href="#小总结" class="headerlink" title="小总结"></a>小总结</h2><p>端口有什么用呢 ？ 我们知道，一台拥有IP地址的主机可以提供许多服务，比如HTTP（万维网服务）、FTP（文件传输）、SMTP（电子邮件）等，这些服务完全可以通过1个IP地址来实现。那么，主机是怎样区分不同的网络服务呢？显然不能只靠IP地址，因为IP地址与网络服务的关系是一对多的关系。实际上是通过“IP地址+端口号”来区分不同的服务的。 需要注意的是，端口并不是一一对应的。比如你的电脑作为客户机访问一台WWW服务器时，WWW服务器使用“80”端口与你的电脑通信，但你的电脑则可能使用“3457”这样的端口。</p><h1 id="socket简介"><a href="#socket简介" class="headerlink" title="socket简介"></a>socket简介</h1><h2 id="不同电脑上的进程之间如何通信"><a href="#不同电脑上的进程之间如何通信" class="headerlink" title="不同电脑上的进程之间如何通信"></a>不同电脑上的进程之间如何通信</h2><p>首要解决的问题是如何唯一标识一个进程，否则通信无从谈起！<br>在1台电脑上可以通过进程号（PID）来唯一标识一个进程，但是在网络中这是行不通的。<br>其实TCP/IP协议族已经帮我们解决了这个问题，网络层的“ip地址”可以唯一标识网络中的主机，而传输层的“协议+端口”可以唯一标识主机中的应用进程（进程）。<br>这样利用ip地址，协议，端口就可以标识网络的进程了，网络中的进程通信就可以利用这个标志与其它进程进行交互。<br>注意:</p><ul><li>所谓进程指的是：运行的程序以及运行时用到的资源这个整体称之为进程（在讲解多任务编程时进行详细讲解）</li><li>所谓进程间通信指的是：运行的程序之间的数据共享</li><li>后面课程中会详细说到，像网络层等知识，不要着急</li></ul><h2 id="什么是socket"><a href="#什么是socket" class="headerlink" title="什么是socket"></a>什么是socket</h2><p>socket(简称 套接字) 是进程间通信的一种方式，它与其他进程间通信的一个主要不同是：<br>它能实现不同主机间的进程间通信，我们网络上各种各样的服务大多都是基于 Socket 来完成通信的<br>例如我们每天浏览网页、QQ 聊天、收发 email 等等</p><p>socket套接字走的是全双工</p><h2 id="创建socket"><a href="#创建socket" class="headerlink" title="创建socket"></a>创建socket</h2><p>在 Python 中 使用socket 模块的函数 socket 就可以完成：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">socket.socket(AddressFamily, Type)</span><br></pre></td></tr></table></figure><p></p><p>说明：<br>函数 socket.socket 创建一个 socket，该函数带有两个参数：</p><ul><li>Address Family：可以选择 AF_INET（用于 Internet 进程间通信） 或者 AF_UNIX（用于同一台机器进程间通信）,实际工作中常用AF_INET</li><li>Type：套接字类型，可以是 SOCK_STREAM（流式套接字，主要用于 TCP 协议）或者 SOCK_DGRAM（数据报套接字，主要用于 UDP 协议）</li></ul><p>创建一个tcp socket（tcp套接字）<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建tcp的套接字</span></span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ...这里是使用套接字的功能（省略）...</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 不用的时候，关闭套接字</span></span><br><span class="line">s.close()</span><br></pre></td></tr></table></figure><p></p><p>创建一个udp socket（udp套接字）<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建udp的套接字</span></span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ...这里是使用套接字的功能（省略）...</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 不用的时候，关闭套接字</span></span><br><span class="line">s.close()</span><br></pre></td></tr></table></figure><p></p><p>说明</p><ul><li>套接字使用流程 与 文件的使用流程很类似<ol><li>创建套接字</li><li>使用套接字收/发数据</li><li>关闭套接字</li></ol></li></ul><h1 id="udp网络程序-发送、接收数据"><a href="#udp网络程序-发送、接收数据" class="headerlink" title="udp网络程序-发送、接收数据"></a>udp网络程序-发送、接收数据</h1><h2 id="udp网络程序-发送数据"><a href="#udp网络程序-发送数据" class="headerlink" title="udp网络程序-发送数据"></a>udp网络程序-发送数据</h2><p>创建一个基于udp的网络程序流程很简单，具体步骤如下：</p><pre><code>1. 创建客户端套接字2. 发送/接收数据3. 关闭套接字</code></pre><p><img src="/images_udp/007.png" alt></p><p>代码如下：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 创建udp套接字</span></span><br><span class="line">udp_socket = socket(AF_INET, SOCK_DGRAM)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 准备接收方的地址</span></span><br><span class="line"><span class="comment"># '192.168.1.103'表示目的ip地址</span></span><br><span class="line"><span class="comment"># 8080表示目的端口</span></span><br><span class="line">dest_addr = (<span class="string">'192.168.1.103'</span>, <span class="number">8080</span>)  <span class="comment"># 注意 是元组，ip是字符串，端口是数字</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 从键盘获取数据</span></span><br><span class="line">send_data = input(<span class="string">"请输入要发送的数据:"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 发送数据到指定的电脑上的指定程序中</span></span><br><span class="line">udp_socket.sendto(send_data.encode(<span class="string">'utf-8'</span>), dest_addr)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5. 关闭套接字</span></span><br><span class="line">udp_socket.close()</span><br></pre></td></tr></table></figure><p></p><p>运行现象：<br>在Ubuntu中运行脚本：<br><img src="/images_udp/008.png" alt></p><p>在windows中运行“网络调试助手”：<br><img src="/images_udp/009.png" alt></p><h2 id="udp网络程序-发送、接收数据-1"><a href="#udp网络程序-发送、接收数据-1" class="headerlink" title="udp网络程序-发送、接收数据"></a>udp网络程序-发送、接收数据</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 创建udp套接字</span></span><br><span class="line">udp_socket = socket(AF_INET, SOCK_DGRAM)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 准备接收方的地址</span></span><br><span class="line">dest_addr = (<span class="string">'192.168.236.129'</span>, <span class="number">8080</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 从键盘获取数据</span></span><br><span class="line">send_data = input(<span class="string">"请输入要发送的数据:"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 发送数据到指定的电脑上</span></span><br><span class="line">udp_socket.sendto(send_data.encode(<span class="string">'utf-8'</span>), dest_addr)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5. 等待接收对方发送的数据</span></span><br><span class="line">recv_data = udp_socket.recvfrom(<span class="number">1024</span>)  <span class="comment"># 1024表示本次接收的最大字节数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 6. 显示对方发送的数据</span></span><br><span class="line"><span class="comment"># 接收到的数据recv_data是一个元组</span></span><br><span class="line"><span class="comment"># 第1个元素是对方发送的数据</span></span><br><span class="line"><span class="comment"># 第2个元素是对方的ip和端口</span></span><br><span class="line">print(recv_data[<span class="number">0</span>].decode(<span class="string">'gbk'</span>))</span><br><span class="line">print(recv_data[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 7. 关闭套接字</span></span><br><span class="line">udp_socket.close()</span><br></pre></td></tr></table></figure><p>python脚本：<br><img src="/images_udp/010.png" alt></p><p>网络调试助手截图：<br><img src="/images_udp/011.png" alt></p><h1 id="python3编码转换"><a href="#python3编码转换" class="headerlink" title="python3编码转换"></a>python3编码转换</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str-&gt;bytes:encode编码</span><br><span class="line">bytes-&gt;str:decode解码</span><br></pre></td></tr></table></figure><p>字符串通过编码成为字节码，字节码通过解码成为字符串。<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>text = <span class="string">'我是文本'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>text</span><br><span class="line"><span class="string">'我是文本'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(text)</span><br><span class="line">我是文本</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bytesText = text.encode()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bytesText</span><br><span class="line"><span class="string">b'\xe6\x88\x91\xe6\x98\xaf\xe6\x96\x87\xe6\x9c\xac'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(bytesText)</span><br><span class="line"><span class="string">b'\xe6\x88\x91\xe6\x98\xaf\xe6\x96\x87\xe6\x9c\xac'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(text)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">str</span>'&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">type</span><span class="params">(bytesText)</span></span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> '<span class="title">bytes</span>'&gt;</span></span><br><span class="line">&gt;&gt;&gt; textDecode = bytesText.decode()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>textDecode</span><br><span class="line"><span class="string">'我是文本'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(textDecode)</span><br><span class="line">我是文本</span><br></pre></td></tr></table></figure><p></p><p>其中decode()与encode()方法可以接受参数，其声明分别为:<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bytes.decode(encoding=<span class="string">"utf-8"</span>, errors=<span class="string">"strict"</span>)</span><br><span class="line">str.encode(encoding=<span class="string">"utf-8"</span>, errors=<span class="string">"strict"</span>)</span><br></pre></td></tr></table></figure><p></p><p>其中的encoding是指在解码编码过程中使用的编码(此处指“编码方案”是名词)，errors是指错误的处理方案。</p><h1 id="udp绑定信息"><a href="#udp绑定信息" class="headerlink" title="udp绑定信息"></a>udp绑定信息</h1><h2 id="udp网络程序-端口问题"><a href="#udp网络程序-端口问题" class="headerlink" title="udp网络程序-端口问题"></a>udp网络程序-端口问题</h2><ul><li>会变的端口号<br>重新运行多次脚本，然后在“网络调试助手”中，看到的现象如下：<br><img src="/images_udp/012.png" alt></li></ul><p>说明：</p><ul><li>每重新运行一次网络程序，上图中红圈中的数字，不一样的原因在于，这个数字标识这个网络程序，当重新运行时，如果没有确定到底用哪个，系统默认会随机分配</li><li>记住一点：这个网络程序在运行的过程中，这个就唯一标识这个程序，所以如果其他电脑上的网络程序如果想要向此程序发送数据，那么就需要向这个数字（即端口）标识的程序发送即可</li></ul><h2 id="udp绑定信息-1"><a href="#udp绑定信息-1" class="headerlink" title="udp绑定信息"></a>udp绑定信息</h2><h3 id="绑定信息"><a href="#绑定信息" class="headerlink" title="绑定信息"></a>绑定信息</h3><p>一般情况下，在一台电脑上运行的网络程序有很多，为了不与其他的网络程序占用同一个端口号，往往在编程中，udp的端口号一般不绑定<br>但是如果需要做成一个服务器端的程序的话，是需要绑定的，想想看这又是为什么呢？<br>如果报警电话每天都在变，想必世界就会乱了，所以一般服务性的程序，往往需要一个固定的端口号，这就是所谓的端口绑定</p><h3 id="绑定示例"><a href="#绑定示例" class="headerlink" title="绑定示例"></a>绑定示例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 创建套接字</span></span><br><span class="line">udp_socket = socket(AF_INET, SOCK_DGRAM)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 绑定本地的相关信息，如果一个网络程序不绑定，则系统会随机分配</span></span><br><span class="line">local_addr = (<span class="string">''</span>, <span class="number">7788</span>) <span class="comment">#  ip地址和端口号，ip一般不用写，表示本机的任何一个ip</span></span><br><span class="line">udp_socket.bind(local_addr)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 等待接收对方发送的数据</span></span><br><span class="line">recv_data = udp_socket.recvfrom(<span class="number">1024</span>) <span class="comment">#  1024表示本次接收的最大字节数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 显示接收到的数据</span></span><br><span class="line">print(recv_data[<span class="number">0</span>].decode(<span class="string">'gbk'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5. 关闭套接字</span></span><br><span class="line">udp_socket.close()</span><br></pre></td></tr></table></figure><p>运行结果：<br><img src="/images_udp/013.png" alt></p><p>总结:</p><ul><li>一个udp网络程序，可以不绑定，此时操作系统会随机进行分配一个端口，如果重新运行此程序端口可能会发生变化</li><li>一个udp网络程序，也可以绑定信息（ip地址，端口号），如果绑定成功，那么操作系统用这个端口号来进行区别收到的网络数据是否是此进程的</li></ul><h1 id="网络通信过程-简单版"><a href="#网络通信过程-简单版" class="headerlink" title="网络通信过程(简单版)"></a>网络通信过程(简单版)</h1><p>网络通信过程中，之所需要ip、port等，就是为了能够将一个复杂的通信过程进行任务划分，从而保证数据准确无误的传递</p><h1 id="应用：udp聊天器"><a href="#应用：udp聊天器" class="headerlink" title="应用：udp聊天器"></a>应用：udp聊天器</h1><p>说明</p><ul><li>在一个电脑中编写1个程序，有2个功能<br>1.获取键盘数据，并将其发送给对方<br>2.接收数据并显示</li><li>并且功能数据进行选择以上的2个功能调用</li></ul><p>参考代码:<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_msg</span><span class="params">(udp_socket)</span>:</span></span><br><span class="line">    <span class="string">"""获取键盘数据，并将其发送给对方"""</span></span><br><span class="line">    <span class="comment"># 1. 从键盘输入数据</span></span><br><span class="line">    msg = input(<span class="string">"\n请输入要发送的数据:"</span>)</span><br><span class="line">    <span class="comment"># 2. 输入对方的ip地址</span></span><br><span class="line">    dest_ip = input(<span class="string">"\n请输入对方的ip地址:"</span>)</span><br><span class="line">    <span class="comment"># 3. 输入对方的port</span></span><br><span class="line">    dest_port = int(input(<span class="string">"\n请输入对方的port:"</span>))</span><br><span class="line">    <span class="comment"># 4. 发送数据</span></span><br><span class="line">    udp_socket.sendto(msg.encode(<span class="string">"utf-8"</span>), (dest_ip, dest_port))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">recv_msg</span><span class="params">(udp_socket)</span>:</span></span><br><span class="line">    <span class="string">"""接收数据并显示"""</span></span><br><span class="line">    <span class="comment"># 1. 接收数据</span></span><br><span class="line">    recv_msg = udp_socket.recvfrom(<span class="number">1024</span>)</span><br><span class="line">    <span class="comment"># 2. 解码</span></span><br><span class="line">    recv_ip = recv_msg[<span class="number">1</span>]</span><br><span class="line">    recv_msg = recv_msg[<span class="number">0</span>].decode(<span class="string">"utf-8"</span>)</span><br><span class="line">    <span class="comment"># 3. 显示接收到的数据</span></span><br><span class="line">    print(<span class="string">"&gt;&gt;&gt;%s:%s"</span> % (str(recv_ip), recv_msg))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 1. 创建套接字</span></span><br><span class="line">    udp_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line">    <span class="comment"># 2. 绑定本地信息</span></span><br><span class="line">    udp_socket.bind((<span class="string">""</span>, <span class="number">7890</span>))</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 3. 选择功能</span></span><br><span class="line">        print(<span class="string">"="</span>*<span class="number">30</span>)</span><br><span class="line">        print(<span class="string">"1:发送消息"</span>)</span><br><span class="line">        print(<span class="string">"2:接收消息"</span>)</span><br><span class="line">        print(<span class="string">"="</span>*<span class="number">30</span>)</span><br><span class="line">        op_num = input(<span class="string">"请输入要操作的功能序号:"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 4. 根据选择调用相应的函数</span></span><br><span class="line">        <span class="keyword">if</span> op_num == <span class="string">"1"</span>:</span><br><span class="line">            send_msg(udp_socket)</span><br><span class="line">        <span class="keyword">elif</span> op_num == <span class="string">"2"</span>:</span><br><span class="line">            recv_msg(udp_socket)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"输入有误，请重新输入..."</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p></p><p>想一想</p><ul><li>以上的程序如果选择了接收数据功能，并且此时没有数据，程序会堵塞在这，那么怎样才能让这个程序收发数据一起进行呢？</li></ul><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Dec 31 2019 13:39:54 GMT+0800 (GMT+08:00) --&gt;&lt;h1 id=&quot;网络通信概述&quot;&gt;&lt;a href=&quot;#网络通信概述&quot; class=&quot;headerlink&quot; title=&quot;网络通信概述&quot;&gt;&lt;/a&gt;网络通信概述&lt;/h1&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;什么是网络&lt;br&gt;一种辅助双方或者多方能够连接在一起的工具&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;使用网络的目的&lt;br&gt;就是为了联通多方然后进行通信用的，即把数据从一方传递给另外一方,为了让在不同的电脑上运行的软件之间能够互相传递数据，就需要借助网络的功能&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;小总结:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;使用网络能够把多方链接在一起，然后可以进行数据传递&lt;/li&gt;&lt;li&gt;所谓的网络编程就是，让在不同的电脑上的软件能够进行数据传递，即进程之间的通信&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;/images_udp/001.png&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://yongnights.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://yongnights.github.io/tags/Python/"/>
    
      <category term="udp" scheme="https://yongnights.github.io/tags/udp/"/>
    
  </entry>
  
  <entry>
    <title>网络_tcp</title>
    <link href="https://yongnights.github.io/2019/12/31/%E7%BD%91%E7%BB%9C_tcp/"/>
    <id>https://yongnights.github.io/2019/12/31/网络_tcp/</id>
    <published>2019-12-31T04:00:48.285Z</published>
    <updated>2019-12-31T04:00:48.286Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Dec 31 2019 13:39:54 GMT+0800 (GMT+08:00) --><h1 id="TCP简介"><a href="#TCP简介" class="headerlink" title="TCP简介"></a>TCP简介</h1><h2 id="TCP介绍"><a href="#TCP介绍" class="headerlink" title="TCP介绍"></a>TCP介绍</h2><p>TCP协议，传输控制协议（英语：Transmission Control Protocol，缩写为 TCP）是一种面向连接的、可靠的、基于字节流的传输层通信协议，由IETF的RFC 793定义。<br>TCP通信需要经过创建连接、数据传送、终止连接三个步骤。<br>TCP通信模型中，在通信开始之前，一定要先建立相关的链接，才能发送数据，类似于生活中，”打电话””</p><h2 id="TCP特点"><a href="#TCP特点" class="headerlink" title="TCP特点"></a>TCP特点</h2><h3 id="面向连接"><a href="#面向连接" class="headerlink" title="面向连接"></a>面向连接</h3><p>通信双方必须先建立连接才能进行数据的传输，双方都必须为该连接分配必要的系统内核资源，以管理连接的状态和连接上的传输。<br>双方间的数据传输都可以通过这一个连接进行。<br>完成数据交换后，双方必须断开此连接，以释放系统资源。<br>这种连接是一对一的，因此TCP不适用于广播的应用程序，基于广播的应用程序请使用UDP协议。</p><h3 id="可靠传输"><a href="#可靠传输" class="headerlink" title="可靠传输"></a>可靠传输</h3><ol><li>TCP采用发送应答机制<br>TCP发送的每个报文段都必须得到接收方的应答才认为这个TCP报文段传输成功</li><li>超时重传<br>发送端发出一个报文段之后就启动定时器，如果在定时时间内没有收到应答就重新发送这个报文段。<br>TCP为了保证不发生丢包，就给每个包一个序号，同时序号也保证了传送到接收端实体的包的按序接收。然后接收端实体对已成功收到的包发回一个相应的确认（ACK）；如果发送端实体在合理的往返时延（RTT）内未收到确认，那么对应的数据包就被假设为已丢失将会被进行重传。</li></ol><a id="more"></a><h3 id="错误校验"><a href="#错误校验" class="headerlink" title="错误校验"></a>错误校验</h3><p>TCP用一个校验和函数来检验数据是否有错误；在发送和接收时都要计算校验和。</p><h3 id="流量控制和阻塞管理"><a href="#流量控制和阻塞管理" class="headerlink" title="流量控制和阻塞管理"></a>流量控制和阻塞管理</h3><p>流量控制用来避免主机发送得过快而使接收方来不及完全收下。</p><h2 id="TCP与UDP的不同点"><a href="#TCP与UDP的不同点" class="headerlink" title="TCP与UDP的不同点"></a>TCP与UDP的不同点</h2><ul><li>面向连接（确认有创建三方交握，连接已创建才作传输。）</li><li>有序数据传输重发丢失的数据包</li><li>舍弃重复的数据包</li><li>无差错的数据传输</li><li>阻塞/流量控制</li></ul><h2 id="udp通信模型"><a href="#udp通信模型" class="headerlink" title="udp通信模型"></a>udp通信模型</h2><p>udp通信模型中，在通信开始之前，不需要建立相关的链接，只需要发送数据即可，类似于生活中，”写信””<br><img src="/images_tcp/001.png" alt></p><h2 id="TCP通信模型"><a href="#TCP通信模型" class="headerlink" title="TCP通信模型"></a>TCP通信模型</h2><p>tcp通信模型中，在通信开始之前，一定要先建立相关的链接，才能发送数据，类似于生活中，”打电话””<br><img src="/images_tcp/002.png" alt></p><h1 id="tcp客户端"><a href="#tcp客户端" class="headerlink" title="tcp客户端"></a>tcp客户端</h1><p>所谓的服务器端：就是提供服务的一方，而客户端，就是需要被服务的一方</p><h2 id="tcp客户端构建流程"><a href="#tcp客户端构建流程" class="headerlink" title="tcp客户端构建流程"></a>tcp客户端构建流程</h2><p>tcp的客户端要比服务器端简单很多，如果说服务器端是需要自己买手机、查手机卡、设置铃声、等待别人打电话流程的话，那么客户端就只需要找一个电话亭，拿起电话拨打即可，流程要少很多<br>示例代码：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建socket</span></span><br><span class="line">tcp_client_socket = socket(AF_INET, SOCK_STREAM)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 目的信息</span></span><br><span class="line">server_ip = input(<span class="string">"请输入服务器ip:"</span>)</span><br><span class="line">server_port = int(input(<span class="string">"请输入服务器port:"</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 链接服务器</span></span><br><span class="line">tcp_client_socket.connect((server_ip, server_port))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提示用户输入数据</span></span><br><span class="line">send_data = input(<span class="string">"请输入要发送的数据："</span>)</span><br><span class="line"></span><br><span class="line">tcp_client_socket.send(send_data.encode(<span class="string">"gbk"</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 接收对方发送过来的数据，最大接收1024个字节</span></span><br><span class="line">recvData = tcp_client_socket.recv(<span class="number">1024</span>)</span><br><span class="line">print(<span class="string">'接收到的数据为:'</span>, recvData.decode(<span class="string">'gbk'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭套接字</span></span><br><span class="line">tcp_client_socket.close()</span><br></pre></td></tr></table></figure><p></p><h3 id="运行流程"><a href="#运行流程" class="headerlink" title="运行流程"></a>运行流程</h3><ol><li><p>tcp客户端</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">请输入服务器ip:10.10.0.47</span><br><span class="line">请输入服务器port:8080</span><br><span class="line">请输入要发送的数据：你好啊</span><br><span class="line">接收到的数据为: 我很好，你呢</span><br></pre></td></tr></table></figure></li><li><p>网络调试助手<br><img src="/images_tcp/003.png" alt></p></li></ol><h2 id="tcp服务器"><a href="#tcp服务器" class="headerlink" title="tcp服务器"></a>tcp服务器</h2><p>在程序中，如果想要完成一个tcp服务器的功能，需要的流程如下：</p><ol><li>socket创建一个套接字</li><li>bind绑定ip和port</li><li>listen使套接字变为可以被动链接</li><li>accept等待客户端的链接</li><li>recv/send接收发送数据<br>一个很简单的tcp服务器如下：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建socket</span></span><br><span class="line">tcp_server_socket = socket(AF_INET, SOCK_STREAM)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 本地信息</span></span><br><span class="line">address = (<span class="string">''</span>, <span class="number">7788</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绑定</span></span><br><span class="line">tcp_server_socket.bind(address)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用socket创建的套接字默认的属性是主动的，使用listen将其变为被动的，这样就可以接收别人的链接了</span></span><br><span class="line">tcp_server_socket.listen(<span class="number">128</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果有新的客户端来链接服务器，那么就产生一个新的套接字专门为这个客户端服务</span></span><br><span class="line"><span class="comment"># client_socket用来为这个客户端服务</span></span><br><span class="line"><span class="comment"># tcp_server_socket就可以省下来专门等待其他新客户端的链接</span></span><br><span class="line">client_socket, clientAddr = tcp_server_socket.accept()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 接收对方发送过来的数据</span></span><br><span class="line">recv_data = client_socket.recv(<span class="number">1024</span>)  <span class="comment"># 接收1024个字节</span></span><br><span class="line">print(<span class="string">'接收到的数据为:'</span>, recv_data.decode(<span class="string">'gbk'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送一些数据到客户端</span></span><br><span class="line">client_socket.send(<span class="string">"thank you !"</span>.encode(<span class="string">'gbk'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭为这个客户端服务的套接字，只要关闭了，就意味着为不能再为这个客户端服务了，如果还需要服务，只能再次重新连接</span></span><br><span class="line">client_socket.close()</span><br></pre></td></tr></table></figure></li></ol><h3 id="运行流程-1"><a href="#运行流程-1" class="headerlink" title="运行流程"></a>运行流程</h3><ol><li><p>tcp服务器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">接收到的数据为: 你在么？</span><br></pre></td></tr></table></figure></li><li><p>网络调试助手<br><img src="/images_tcp/004.png" alt></p></li></ol><h1 id="tcp注意点"><a href="#tcp注意点" class="headerlink" title="tcp注意点"></a>tcp注意点</h1><ol><li>tcp服务器一般情况下都需要绑定，否则客户端找不到这个服务器</li><li>tcp客户端一般不绑定，因为是主动链接服务器，所以只要确定好服务器的ip、port等信息就好，本地客户端可以随机</li><li>tcp服务器中通过listen可以将socket创建出来的主动套接字变为被动的，这是做tcp服务器时必须要做的</li><li>当客户端需要链接服务器时，就需要使用connect进行链接，udp是不需要链接的而是直接发送，但是tcp必须先链接，只有链接成功才能通信</li><li>当一个tcp客户端连接服务器时，服务器端会有1个新的套接字，这个套接字用来标记这个客户端，单独为这个客户端服务</li><li>listen后的套接字是被动套接字，用来接收新的客户端的链接请求的，而accept返回的新套接字是标记这个新客户端的</li><li>关闭listen后的套接字意味着被动套接字关闭了，会导致新的客户端不能够链接服务器，但是之前已经链接成功的客户端正常通信。</li><li>关闭accept返回的套接字意味着这个客户端已经服务完毕</li><li>当客户端的套接字调用close后，服务器端会recv解堵塞，并且返回的长度为0，因此服务器可以通过返回数据的长度来区别客户端是否已经下线</li></ol><h1 id="案例-文件下载器"><a href="#案例-文件下载器" class="headerlink" title="案例:文件下载器"></a>案例:文件下载器</h1><h2 id="服务器-参考代码如下"><a href="#服务器-参考代码如下" class="headerlink" title="服务器 参考代码如下:"></a>服务器 参考代码如下:</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_file_content</span><span class="params">(file_name)</span>:</span></span><br><span class="line">    <span class="string">"""获取文件的内容"""</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> open(file_name, <span class="string">"rb"</span>) <span class="keyword">as</span> f:</span><br><span class="line">            content = f.read()</span><br><span class="line">        <span class="keyword">return</span> content</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        print(<span class="string">"没有下载的文件:%s"</span> % file_name)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> len(sys.argv) != <span class="number">2</span>:</span><br><span class="line">        print(<span class="string">"请按照如下方式运行：python3 xxx.py 7890"</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 运行方式为python3 xxx.py 7890</span></span><br><span class="line">        port = int(sys.argv[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建socket</span></span><br><span class="line">    tcp_server_socket = socket(AF_INET, SOCK_STREAM)</span><br><span class="line">    <span class="comment"># 本地信息</span></span><br><span class="line">    address = (<span class="string">''</span>, port)</span><br><span class="line">    <span class="comment"># 绑定本地信息</span></span><br><span class="line">    tcp_server_socket.bind(address)</span><br><span class="line">    <span class="comment"># 将主动套接字变为被动套接字</span></span><br><span class="line">    tcp_server_socket.listen(<span class="number">128</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 等待客户端的链接，即为这个客户端发送文件</span></span><br><span class="line">        client_socket, clientAddr = tcp_server_socket.accept()</span><br><span class="line">        <span class="comment"># 接收对方发送过来的数据</span></span><br><span class="line">        recv_data = client_socket.recv(<span class="number">1024</span>)  <span class="comment"># 接收1024个字节</span></span><br><span class="line">        file_name = recv_data.decode(<span class="string">"utf-8"</span>)</span><br><span class="line">        print(<span class="string">"对方请求下载的文件名为:%s"</span> % file_name)</span><br><span class="line">        file_content = get_file_content(file_name)</span><br><span class="line">        <span class="comment"># 发送文件的数据给客户端</span></span><br><span class="line">        <span class="comment"># 因为获取打开文件时是以rb方式打开，所以file_content中的数据已经是二进制的格式，因此不需要encode编码</span></span><br><span class="line">        <span class="keyword">if</span> file_content:</span><br><span class="line">            client_socket.send(file_content)</span><br><span class="line">        <span class="comment"># 关闭这个套接字</span></span><br><span class="line">        client_socket.close()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 关闭监听套接字</span></span><br><span class="line">    tcp_server_socket.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h2 id="客户端-参考代码如下"><a href="#客户端-参考代码如下" class="headerlink" title="客户端 参考代码如下:"></a>客户端 参考代码如下:</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建socket</span></span><br><span class="line">    tcp_client_socket = socket(AF_INET, SOCK_STREAM)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 目的信息</span></span><br><span class="line">    server_ip = input(<span class="string">"请输入服务器ip:"</span>)</span><br><span class="line">    server_port = int(input(<span class="string">"请输入服务器port:"</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 链接服务器</span></span><br><span class="line">    tcp_client_socket.connect((server_ip, server_port))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 输入需要下载的文件名</span></span><br><span class="line">    file_name = input(<span class="string">"请输入要下载的文件名："</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 发送文件下载请求</span></span><br><span class="line">    tcp_client_socket.send(file_name.encode(<span class="string">"utf-8"</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 接收对方发送过来的数据，最大接收1024个字节（1K）</span></span><br><span class="line">    recv_data = tcp_client_socket.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="comment"># print('接收到的数据为:', recv_data.decode('utf-8'))</span></span><br><span class="line">    <span class="comment"># 如果接收到数据再创建文件，否则不创建</span></span><br><span class="line">    <span class="keyword">if</span> recv_data:</span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">"[接收]"</span>+file_name, <span class="string">"wb"</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(recv_data)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 关闭套接字</span></span><br><span class="line">    tcp_client_socket.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h1 id="tcp的3次握手"><a href="#tcp的3次握手" class="headerlink" title="tcp的3次握手"></a>tcp的3次握手</h1><p><img src="imges_tcp/005.png" alt></p><h1 id="tcp的4次挥手"><a href="#tcp的4次挥手" class="headerlink" title="tcp的4次挥手"></a>tcp的4次挥手</h1><p><img src="imges_tcp/006.png" alt></p><h1 id="tcp长连接和短连接"><a href="#tcp长连接和短连接" class="headerlink" title="tcp长连接和短连接"></a>tcp长连接和短连接</h1><p>TCP在真正的读写操作之前，server与client之间必须建立一个连接，当读写操作完成后，双方不再需要这个连接时它们可以释放这个连接，连接的建立通过三次握手，释放则需要四次握手，所以说每个连接的建立都是需要资源消耗和时间消耗的。</p><p>TCP通信的整个过程，如下图:<br><img src="/images_tcp/006.png" alt></p><h2 id="TCP短连接"><a href="#TCP短连接" class="headerlink" title="TCP短连接"></a>TCP短连接</h2><p>模拟一种TCP短连接的情况:</p><pre><code>1. client 向 server 发起连接请求2. server 接到请求，双方建立连接3. client 向 server 发送消息4. server 回应 client5. 一次读写完成，此时双方任何一个都可以发起 close 操作</code></pre><p>在步骤5中，一般都是 client 先发起 close 操作。当然也不排除有特殊的情况。<br>从上面的描述看，短连接一般只会在 client/server 间传递一次读写操作！</p><h2 id="TCP长连接"><a href="#TCP长连接" class="headerlink" title="TCP长连接"></a>TCP长连接</h2><p>再模拟一种长连接的情况:</p><pre><code>1. client 向 server 发起连接2. server 接到请求，双方建立连接3. client 向 server 发送消息4. server 回应 client5. 一次读写完成，连接不关闭6. 后续读写操作...7. 长时间操作之后client发起关闭请求</code></pre><h2 id="TCP长-短连接操作过程"><a href="#TCP长-短连接操作过程" class="headerlink" title="TCP长/短连接操作过程"></a>TCP长/短连接操作过程</h2><h3 id="短连接的操作步骤是："><a href="#短连接的操作步骤是：" class="headerlink" title="短连接的操作步骤是："></a>短连接的操作步骤是：</h3><p>建立连接——数据传输——关闭连接…建立连接——数据传输——关闭连接<br><img src="/images_tcp/007.png" alt></p><h3 id="长连接的操作步骤是："><a href="#长连接的操作步骤是：" class="headerlink" title="长连接的操作步骤是："></a>长连接的操作步骤是：</h3><p>建立连接——数据传输…（保持连接）…数据传输——关闭连接<br><img src="/images_tcp/008.png" alt></p><h2 id="TCP长-短连接的优点和缺点"><a href="#TCP长-短连接的优点和缺点" class="headerlink" title="TCP长/短连接的优点和缺点"></a>TCP长/短连接的优点和缺点</h2><ul><li>长连接可以省去较多的TCP建立和关闭的操作，减少浪费，节约时间。</li><li>对于频繁请求资源的客户来说，较适用长连接。</li><li>client与server之间的连接如果一直不关闭的话，会存在一个问题，</li><li>随着客户端连接越来越多，server早晚有扛不住的时候，这时候server端需要采取一些策略，</li><li>如关闭一些长时间没有读写事件发生的连接，这样可以避免一些恶意连接导致server端服务受损；</li><li>如果条件再允许就可以以客户端机器为颗粒度，限制每个客户端的最大长连接数，</li><li>这样可以完全避免某个蛋疼的客户端连累后端服务。</li><li>短连接对于服务器来说管理较为简单，存在的连接都是有用的连接，不需要额外的控制手段。</li><li>但如果客户请求频繁，将在TCP的建立和关闭操作上浪费时间和带宽。</li></ul><h2 id="TCP长-短连接的应用场景"><a href="#TCP长-短连接的应用场景" class="headerlink" title="TCP长/短连接的应用场景"></a>TCP长/短连接的应用场景</h2><ul><li>长连接多用于操作频繁，点对点的通讯，而且连接数不能太多情况。<br>每个TCP连接都需要三次握手，这需要时间，如果每个操作都是先连接，<br>再操作的话那么处理速度会降低很多，所以每个操作完后都不断开，<br>再次处理时直接发送数据包就OK了，不用建立TCP连接。<br>例如：数据库的连接用长连接，如果用短连接频繁的通信会造成socket错误，<br>而且频繁的socket 创建也是对资源的浪费。</li><li>而像WEB网站的http服务一般都用短链接，因为长连接对于服务端来说会耗费一定的资源，<br>而像WEB网站这么频繁的成千上万甚至上亿客户端的连接用短连接会更省一些资源，<br>如果用长连接，而且同时有成千上万的用户，如果每个用户都占用一个连接的话，<br>那可想而知吧。所以并发量大，但每个用户无需频繁操作情况下需用短链接好。</li></ul><h1 id="tcp-ip简介"><a href="#tcp-ip简介" class="headerlink" title="tcp-ip简介"></a>tcp-ip简介</h1><h2 id="什么是协议"><a href="#什么是协议" class="headerlink" title="什么是协议"></a>什么是协议</h2><p>为了解决不同种族人之间的语言沟通障碍，现规定国际通用语言是英语，这就是一个规定，这就是协议</p><h2 id="计算机网络沟通用什么"><a href="#计算机网络沟通用什么" class="headerlink" title="计算机网络沟通用什么"></a>计算机网络沟通用什么</h2><p>不同的计算机只需要能够联网（有线无线都可以）那么就可以相互进行传递数据<br>就像说不同语言的人沟通一样，只要有一种大家都认可都遵守的协议即可，那么这个计算机都遵守的网络通信协议叫做TCP/IP协议</p><h2 id="TCP-IP协议-族"><a href="#TCP-IP协议-族" class="headerlink" title="TCP/IP协议(族)"></a>TCP/IP协议(族)</h2><p>为了把全世界的所有不同类型的计算机都连接起来，就必须规定一套全球通用的协议，为了实现互联网这个目标，互联网协议族（Internet Protocol Suite）就是通用协议标准。<br>因为互联网协议包含了上百种协议标准，但是最重要的两个协议是TCP和IP协议，所以，大家把互联网的协议简称TCP/IP协议(族)<br>常用的网络协议如下图所示：<br><img src="/images_tcp/009.png" alt></p><p><img src="/images_tcp/010.png" alt></p><p>说明：</p><ul><li>网际层也称为：网络层</li><li>网络接口层也称为：链路层</li></ul><p>另外一套标准:<br><img src="/images_tcp/011.png" alt></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Dec 31 2019 13:39:54 GMT+0800 (GMT+08:00) --&gt;&lt;h1 id=&quot;TCP简介&quot;&gt;&lt;a href=&quot;#TCP简介&quot; class=&quot;headerlink&quot; title=&quot;TCP简介&quot;&gt;&lt;/a&gt;TCP简介&lt;/h1&gt;&lt;h2 id=&quot;TCP介绍&quot;&gt;&lt;a href=&quot;#TCP介绍&quot; class=&quot;headerlink&quot; title=&quot;TCP介绍&quot;&gt;&lt;/a&gt;TCP介绍&lt;/h2&gt;&lt;p&gt;TCP协议，传输控制协议（英语：Transmission Control Protocol，缩写为 TCP）是一种面向连接的、可靠的、基于字节流的传输层通信协议，由IETF的RFC 793定义。&lt;br&gt;TCP通信需要经过创建连接、数据传送、终止连接三个步骤。&lt;br&gt;TCP通信模型中，在通信开始之前，一定要先建立相关的链接，才能发送数据，类似于生活中，”打电话””&lt;/p&gt;&lt;h2 id=&quot;TCP特点&quot;&gt;&lt;a href=&quot;#TCP特点&quot; class=&quot;headerlink&quot; title=&quot;TCP特点&quot;&gt;&lt;/a&gt;TCP特点&lt;/h2&gt;&lt;h3 id=&quot;面向连接&quot;&gt;&lt;a href=&quot;#面向连接&quot; class=&quot;headerlink&quot; title=&quot;面向连接&quot;&gt;&lt;/a&gt;面向连接&lt;/h3&gt;&lt;p&gt;通信双方必须先建立连接才能进行数据的传输，双方都必须为该连接分配必要的系统内核资源，以管理连接的状态和连接上的传输。&lt;br&gt;双方间的数据传输都可以通过这一个连接进行。&lt;br&gt;完成数据交换后，双方必须断开此连接，以释放系统资源。&lt;br&gt;这种连接是一对一的，因此TCP不适用于广播的应用程序，基于广播的应用程序请使用UDP协议。&lt;/p&gt;&lt;h3 id=&quot;可靠传输&quot;&gt;&lt;a href=&quot;#可靠传输&quot; class=&quot;headerlink&quot; title=&quot;可靠传输&quot;&gt;&lt;/a&gt;可靠传输&lt;/h3&gt;&lt;ol&gt;&lt;li&gt;TCP采用发送应答机制&lt;br&gt;TCP发送的每个报文段都必须得到接收方的应答才认为这个TCP报文段传输成功&lt;/li&gt;&lt;li&gt;超时重传&lt;br&gt;发送端发出一个报文段之后就启动定时器，如果在定时时间内没有收到应答就重新发送这个报文段。&lt;br&gt;TCP为了保证不发生丢包，就给每个包一个序号，同时序号也保证了传送到接收端实体的包的按序接收。然后接收端实体对已成功收到的包发回一个相应的确认（ACK）；如果发送端实体在合理的往返时延（RTT）内未收到确认，那么对应的数据包就被假设为已丢失将会被进行重传。&lt;/li&gt;&lt;/ol&gt;
    
    </summary>
    
      <category term="Python" scheme="https://yongnights.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://yongnights.github.io/tags/Python/"/>
    
      <category term="tcp" scheme="https://yongnights.github.io/tags/tcp/"/>
    
  </entry>
  
  <entry>
    <title>爬取干货集中营的图片</title>
    <link href="https://yongnights.github.io/2019/12/31/%E7%88%AC%E5%8F%96%E5%B9%B2%E8%B4%A7%E9%9B%86%E4%B8%AD%E8%90%A5%E7%9A%84%E5%9B%BE%E7%89%87/"/>
    <id>https://yongnights.github.io/2019/12/31/爬取干货集中营的图片/</id>
    <published>2019-12-31T04:00:48.284Z</published>
    <updated>2019-12-31T04:00:48.284Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Dec 31 2019 13:39:54 GMT+0800 (GMT+08:00) --><h3 id="网站地址"><a href="#网站地址" class="headerlink" title="网站地址"></a>网站地址</h3><pre><code>http://gank.io/</code></pre><h3 id="分析网站"><a href="#分析网站" class="headerlink" title="分析网站"></a>分析网站</h3><pre><code>网站地址:https://gank.io/, 要爬取的是网站首页上展示出来的图片</code></pre><p><img src="https://i.imgur.com/6Mkilm4.jpg" alt></p><a id="more"></a><pre><code>在网站首页底部左上角有API地址,点击进入到干货集中营 API 文档</code></pre><p><img src="https://i.imgur.com/crIyWfb.png" alt></p><pre><code>其中有这样的内容显示,如下图：</code></pre><p><img src="https://i.imgur.com/oHqL8X3.png" alt></p><pre><code>尝试访问:https://gank.io/api/data/福利/10/1, 出来如下的json数据：</code></pre><p><img src="https://i.imgur.com/mezrl8t.png" alt></p><pre><code>通过API文档描述,可以知道链接地址中的请求个数和请求页数,获取到所有的图片信息。比如:https://gank.io/api/data/福利/700/1, 请求700条数据,获取第一页,发现返回的结果中总共有670条数据(截止到20190314),第二页没有数据.再次请求:https://gank.io/api/data/福利/600/1, 请求600条数据,获取第一页,发现确实有600条数据,然后再请求第二页(https://gank.io/api/data/福利/600/2),有70条数据。结合以上分析,截止到今天(20190314),共有670条数据,避免使用翻页的情况,就直接使用如下网址获取全部数据:https://gank.io/api/data/福利/700/1根据获取到的son数据,提取出所需要的图片链接,最后下载这些图片并保存.</code></pre><h3 id="实际代码"><a href="#实际代码" class="headerlink" title="实际代码"></a>实际代码</h3><pre><code>#!/usr/bin/env python# -*- coding: utf-8 -*-import datetimeimport osfrom _md5 import md5import requestsfrom requests import RequestExceptiondef get_one_page(url):    try:        response = requests.get(url)        if response.status_code == 200:            return response.json()    except:        return Nonedef utc_to_local(utc_time_str, utc_format=&apos;%Y-%m-%dT%H:%M:%S.%fZ&apos;):    &quot;&quot;&quot;    &quot;2015-06-05T03:54:29.403Z&quot;格式的时间转换成2015-06-05 11:54:29    &quot;&quot;&quot;    local_format = &quot;%Y-%m-%d %H:%M:%S&quot;    utc_dt = datetime.datetime.strptime(utc_time_str, utc_format)    local_dt = utc_dt + datetime.timedelta(hours=8)    time_str = local_dt.strftime(local_format)    return time_strdef https_to_http(url):    &quot;&quot;&quot;    把图片链接是https的换成http    &quot;&quot;&quot;    if url[0:5] == &apos;https&apos;:        url = url.replace(url[0:5], &apos;http&apos;)    return urldef parse_one_page(html):    items = html[&apos;results&apos;]    for item in items:        yield {            &apos;id&apos;: item[&apos;_id&apos;],            &apos;publishedAt&apos;: utc_to_local(item[&apos;publishedAt&apos;]),            &apos;url&apos;: https_to_http(item[&apos;url&apos;])        }# 请求图片url,获取图片二进制数据def download_image(url):    try:        response = requests.get(url)        if response.status_code == 200:            save_image(response.content)  # response.contenter二进制数据 response.text文本数据        return None    except RequestException:        print(&apos;请求图片出错&apos;, url)        return Nonedef save_image(content):    &quot;&quot;&quot;    需要提前建好目录D:\\pachong\\gank1\\    &quot;&quot;&quot;    file_path = &apos;D:\\pachong\\gank1\\{1}.{2}&apos;.format(os.getcwd(), md5(content).hexdigest(), &apos;jpg&apos;)    if not os.path.exists(file_path):        with open(file_path, &apos;wb&apos;) as f:            f.write(content)def main():    url = &apos;http://gank.io/api/data/福利/700/1&apos;    html = get_one_page(url)    for item in parse_one_page(html):        download_image(item[&apos;url&apos;])if __name__ == &apos;__main__&apos;:    main()</code></pre><h3 id="结果分析"><a href="#结果分析" class="headerlink" title="结果分析"></a>结果分析</h3><pre><code>总共700条json数据,实际只有564条数据,通过分析获取到的图片url,发现有些图片url链接本身已失效,使用浏览器打开这些图片链接会报如下错误:</code></pre><p><img src="https://i.imgur.com/2s8gC9m.png" alt></p><pre><code>失效链接展示:</code></pre><p><img src="https://i.imgur.com/4BlHV74.png" alt></p><pre><code>实际结果：</code></pre><p><img src="https://i.imgur.com/bNlaWbd.jpg" alt></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Dec 31 2019 13:39:54 GMT+0800 (GMT+08:00) --&gt;&lt;h3 id=&quot;网站地址&quot;&gt;&lt;a href=&quot;#网站地址&quot; class=&quot;headerlink&quot; title=&quot;网站地址&quot;&gt;&lt;/a&gt;网站地址&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;http://gank.io/
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;分析网站&quot;&gt;&lt;a href=&quot;#分析网站&quot; class=&quot;headerlink&quot; title=&quot;分析网站&quot;&gt;&lt;/a&gt;分析网站&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;网站地址:https://gank.io/, 要爬取的是网站首页上展示出来的图片
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/6Mkilm4.jpg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://yongnights.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://yongnights.github.io/tags/Python/"/>
    
      <category term="爬虫" scheme="https://yongnights.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="美女" scheme="https://yongnights.github.io/tags/%E7%BE%8E%E5%A5%B3/"/>
    
  </entry>
  
  <entry>
    <title>爬取美图录网站图片</title>
    <link href="https://yongnights.github.io/2019/12/31/%E7%88%AC%E5%8F%96%E7%BE%8E%E5%9B%BE%E5%BD%95%E7%BD%91%E7%AB%99%E5%9B%BE%E7%89%87/"/>
    <id>https://yongnights.github.io/2019/12/31/爬取美图录网站图片/</id>
    <published>2019-12-31T04:00:48.284Z</published>
    <updated>2019-12-31T04:00:48.284Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Dec 31 2019 13:39:54 GMT+0800 (GMT+08:00) --><h3 id="网站地址"><a href="#网站地址" class="headerlink" title="网站地址"></a>网站地址</h3><pre><code>https://www.meitulu.com/</code></pre><h3 id="分析该网站"><a href="#分析该网站" class="headerlink" title="分析该网站"></a>分析该网站</h3><pre><code>1. 打开网站地址后，查看网站右侧导航菜单，目标是提取出爬取网站图片所需的链接地址，这些链接地址最好是包含整个网站的链接地址。</code></pre><p><img src="https://i.imgur.com/zJMMLna.png" alt></p><a id="more"></a><pre><code>2. 随便点开一个图集分类下的类别，比如&quot;女神&quot;，，进入到的链接地址是：https://www.meitulu.com/t/nvshen/. </code></pre><p><img src="https://i.imgur.com/YktKpZe.png" alt></p><pre><code>3. 从中随便选一个图集点开，进入到该图集的详情页面。上面显示的该图集的相关信息，下面显示的是该图集的每张图片。   右上角显示的是该图集的当前位置。注意这个当前位置。</code></pre><p><img src="https://i.imgur.com/LRmpzoR.jpg" alt></p><pre><code>4. 再从图集类别中选一个进入到该图集的详情页面，发现右上角也有当前位置。</code></pre><p><img src="https://i.imgur.com/S9n6Kpn.jpg" alt></p><pre><code>5. 点击导航菜单中的精选美女，进入到某一个图集详情页面，发现右上角也有当前位置。</code></pre><p><img src="https://i.imgur.com/DoWAv1W.jpg" alt></p><pre><code>6. 点击导航菜单中的日韩美女，进入到某一个图集详情页面，发现右上角也有当前位置。</code></pre><p><img src="https://i.imgur.com/fQzVhCY.jpg" alt></p><pre><code>7. 经过以上分析可知，该网站的图集分为如下三大类：日韩美女，港台美女和国产美女。图集分类中是每一个图集的标签汇总。8. 提取出图集三大类的地址如下：日韩美女：https://www.meitulu.com/rihan/, 港台美女：https://www.meitulu.com/gangtai/， 国产美女：https://www.meitulu.com/guochan/, 经查看这三个网址，只有最后的不一样，前面的网址等都是一样的，可以构造列表来遍历循环使用，[&apos;rihan&apos;,&apos;gangtai&apos;,&apos;guochan&apos;]9. 假如进入国产美女里。通过分析页面信息，每一个图集信息都是在一个li标签里，可以使用正则表达式提取出这些li标签。</code></pre><p><img src="https://i.imgur.com/eyZKAQe.png" alt></p><pre><code>10.点击其中一个图集，其链接是：https://www.meitulu.com/item/16889.html, 进入到该图集的详情页面.最上面显示该图集的图片共有96张，每页显示4张图片，拉到最后的第24页，24*4=96张。</code></pre><p><img src="https://i.imgur.com/jDZcdii.png" alt></p><pre><code>10.查看该图集下的每一个图片链接，发现是在一个img标签里，第一个的4张图片地址依次是：https://mtl.ttsqgs.com/images/img/16889/1.jpg， https://mtl.ttsqgs.com/images/img/16889/2.jpg， https://mtl.ttsqgs.com/images/img/16889/3.jpg，https://mtl.ttsqgs.com/images/img/16889/4.jpg，</code></pre><p><img src="https://i.imgur.com/5lCB65u.png" alt></p><pre><code>最后24页的4张图片地址链接是：https://www.meitulu.com/item/16889_24.html， 每一个图片的地址依次是：    https://mtl.ttsqgs.com/images/img/16889/93.jpg，    https://mtl.ttsqgs.com/images/img/16889/94.jpg，    https://mtl.ttsqgs.com/images/img/16889/95.jpg，    https://mtl.ttsqgs.com/images/img/16889/96.jpg</code></pre><p><img src="https://i.imgur.com/dyq5K7p.png" alt></p><pre><code>同时页面显示的有&quot;美图录提示：点击图片，查看原尺寸高清大图&quot;,js代码是:    function() {         window.open(&quot;/img.html?img=&quot; + this.src + &quot;&quot;)    }点击图片进入原尺寸高清大图，复制出网址如下：https://www.meitulu.com/img.html?img=https://mtl.ttsqgs.com/images/img/16889/1.jpg。</code></pre><p><img src="https://i.imgur.com/0D6MLbR.png" alt></p><pre><code>11. 分析第10步的图片链接，可以发现：(1)图集链接地址(https://www.meitulu.com/item/16889.html)中的数字16889跟该图集中的每一个张图片的链接地址(https://mtl.ttsqgs.com/images/img/16889/1.jpg)相关.(2)每一个图片的链接地址最后的数字是从1开始的，一直到该图集的总数第96(2)图集详情页中的图片总数跟图集分页数有关，图片总数除以4，若有余数再加1，得到的数字就是该图集的分页数。(3)该图集的链接地址也有规律，比如图集的第一页地址是：https://www.meitulu.com/item/16889.html， 第二页的是：https://www.meitulu.com/item/16889_2.html， 最后第24页的是：https://www.meitulu.com/item/16889_24.html。(4)经过以上分析，优先采用(1)和(2)中得到的规律，提取出每一个图集的名称，图集的链接和图片总数，然后构造该图集下的每一个图片的链接。(5)图集的链接也有规律，比如国产美女分类，第一页的地址是：https://www.meitulu.com/guochan/， 第二页的地址是：https://www.meitulu.com/guochan/2.html， 第164页的地址是：https://www.meitulu.com/guochan/164.html。 可以采用遍历的方式。</code></pre><h3 id="实际操作中的坑"><a href="#实际操作中的坑" class="headerlink" title="实际操作中的坑"></a>实际操作中的坑</h3><pre><code>1. 使用requests的get方式请求每一个图片的链接，得到的图片是损坏的，向群里其他人请教得知，请求是需要加上headers头部信息，必须有Referer，且Referer参数值还有要求，比如说某张图片的图片地址是：https://mtl.ttsqgs.com/images/img/16889/13.jpg， 则Referer的值是https://www.meitulu.com/img.html?img=https://mtl.ttsqgs.com/images/img/16889/13.jpg， 注意查看这俩网址之间的关系。2. 请求次数过多会报403 Forbidden，通过使用模块fake_useragent生成随机的User-Agent信息。可以解决一小部分情况，时间一长还是会再次报403 Forbidden，只能再次随机生成不同的User-Agent值。3. 时间长的话会出现这样一个情况，往后的每个图集只能下载保存前9张图片，以后的图片访问请求均报403 Forbidden，这个估计是封IP了，所以还需要使用代理才行。4. 在网上找到的一个能用的代理软件，地址是：https://github.com/chenjiandongx/async-proxy-pool， 若使用的redis版本低于3.0，则代理池代码可以直接运行使用，若高于3.0版本，则需要修改其中一个文件，具体如下：async_proxy_pool/database.py，修改其中的第45行，原先是self.redis.zadd(REDIS_KEY, proxy, score)，修改成：self.redis.zadd(REDIS_KEY, ｛proxy： score｝)。5. 使用代理(1)运行客户端，启动收集器和校验器：python3 client.py(2)运行服务器，启动 web 服务:python3 server_flask.py(3)获取代理地址信息import requestsproxy = requests.get(&apos;http://192.168.0.200:3289/pop&apos;)proxies = proxy.json()print(proxies)(4)爬虫代码中使用代理跟(3)合二为一import requestsproxy = requests.get(&apos;http://192.168.0.200:3289/pop&apos;)requests.get(&quot;http://example.org&quot;, proxies=proxies)</code></pre><h3 id="实际代码"><a href="#实际代码" class="headerlink" title="实际代码"></a>实际代码</h3><pre><code>#!/usr/bin/env python# -*- coding: utf-8 -*-import osimport randomimport reimport requestsfrom fake_useragent import UserAgentfrom requests.exceptions import RequestException</code></pre><p>​</p><pre><code># 获取三大分类页面详细数据def get_one_page(url):    try:        response = requests.get(url)        if response.status_code == 200:            response.encoding = &apos;utf8&apos;            return response.text        else:            return None    except RequestException:        print(&apos;请求失败&apos;)        return None</code></pre><p>​</p><pre><code># 解析三大分类页面数据，提取需要的数据def parse_one_page(html):    pattern = re.compile(&apos;&lt;li&gt;.*?&lt;p&gt;数量： (.*?) 张&lt;/p&gt;.*?&lt;p class=p_title&gt;&lt;a href=&quot;(.*?)&quot;.*?&gt;(.*?)&lt;/a&gt;&lt;/p&gt;.*?&lt;/li&gt;&apos;,                         re.S | re.M)    items = re.findall(pattern, html)    for i in range(len(items)):        yield {            &apos;num&apos;: int(items[i][0]),  # 获取图集的图片总数            &apos;name&apos;: items[i][2],  # 获取图集名称            &apos;url&apos;: items[i][1].split(&apos;/&apos;)[4][:-5],  # 获取图集id        }</code></pre><p>​</p><pre><code># 获取随机请求头def GetUserAgent():    ua = UserAgent()    return random.choice([ua.safari, ua.firefox, ua.chrome, ua.opera, ua.ie, ua.random])</code></pre><p>​</p><pre><code># 获取随机代理地址,因爬取速度慢，暂不使用def GetProxy():    proxy = requests.get(&apos;http://192.168.0.200:3289/pop&apos;)    proxies = proxy.json()    return proxies</code></pre><p>​</p><pre><code># 请求图片链接地址def download_image(item):    try:        file_path = item[&apos;name&apos;]  # 获取图集名称        id = item[&apos;url&apos;]  # 获取图集id        num = item[&apos;num&apos;]  # 获取图集的图片总数        for i in range(1, num + 1):            url = f&apos;https://mtl.ttsqgs.com/images/img/{id}/{i}.jpg&apos;  # 使用f-string的方式拼接字符串            headers = {  # 构造请求头                &apos;User-Agent&apos;: GetUserAgent(),                &apos;Accept&apos;: &apos;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8&apos;,                &apos;Accept-Encoding&apos;: &apos;gzip, deflate, br&apos;,                &apos;Accept-Language&apos;: &apos;zh-CN,en-US;q=0.8,zh;q=0.5,en;q=0.3&apos;,                &apos;Referer&apos;: &apos;https://www.meitulu.com/img.html?img=%s&apos; % url,            }            yield {                &apos;name&apos;: file_path,                &apos;headers&apos;: headers,                &apos;i&apos;: i,                &apos;url&apos;: url,                &apos;num&apos;: num            }    except RequestException:        print(&apos;请求图片出错&apos;)        return None</code></pre><p>​</p><pre><code># 保存图片，使用第三方错误重试模块，该模块需要导入# @retry(stop_max_attempt_number=3)def save_image(path, x):    name = x[&apos;name&apos;]    i = x[&apos;i&apos;]    headers = x[&apos;headers&apos;]    url = x[&apos;url&apos;]    num = x[&apos;num&apos;]    base_path = f&apos;{os.getcwd()}{os.sep}{path}{os.sep}{name}&apos;    if not os.path.exists(base_path):        os.makedirs(base_path)    save_path = f&apos;{base_path}{os.sep}{i}.jpg&apos;    if not os.path.exists(save_path):        try:            requests.packages.urllib3.disable_warnings()            response = requests.get(url, headers=headers, verify=False)        except:            print(f&apos;请求{name}图集的第{i}张图片链接地址失败,共{num}张,图片链接是{url}&apos;)        else:            if response.status_code == 200:                try:                    with open(save_path, &apos;wb&apos;) as f:                        f.write(response.content)                        print(f&apos;保存{name}图集的第{i}张图片成功,共{num}张&apos;)                except:                    print(f&apos;保存{name}图集的第{i}张图片失败,共{num}张,图片链接是{url}&apos;)            else:                print(f&apos;请求{name}图集的第{i}张图片链接地址状态不是200,共{num}张,图片链接是{url}&apos;)    else:        print(f&apos;{name}图集文件夹已存在,请求一下图集&apos;)# 遍历三大分类def img_url():    img_ict = {&apos;rihan&apos;: 88, &apos;gangtai&apos;: 36, &apos;guochan&apos;: 165}    for k, v in img_ict.items():        yield {            &apos;name&apos;: k,            &apos;num&apos;: v        }# 新传分类名称def main():    for img_u in img_url():        for i in range(1, img_u[&apos;num&apos;]):            if i == 1:                url = f&apos;https://www.meitulu.com/{img_u[&quot;name&quot;]}/&apos;            else:                url = f&apos;https://www.meitulu.com/{img_u[&quot;name&quot;]}/{i}.html&apos;            html = get_one_page(url)            for item in parse_one_page(html):                for x in download_image(item):                    save_image(img_u[&apos;name&apos;], x)</code></pre><p>​<br>if <strong>name</strong> == ‘<strong>main</strong>‘:<br>main()</p><h3 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h3><p><img src="https://i.imgur.com/a4CQfBm.png" alt></p><p><img src="https://i.imgur.com/Atho4b7.png" alt></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Dec 31 2019 13:39:54 GMT+0800 (GMT+08:00) --&gt;&lt;h3 id=&quot;网站地址&quot;&gt;&lt;a href=&quot;#网站地址&quot; class=&quot;headerlink&quot; title=&quot;网站地址&quot;&gt;&lt;/a&gt;网站地址&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;https://www.meitulu.com/
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;分析该网站&quot;&gt;&lt;a href=&quot;#分析该网站&quot; class=&quot;headerlink&quot; title=&quot;分析该网站&quot;&gt;&lt;/a&gt;分析该网站&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;1. 打开网站地址后，查看网站右侧导航菜单，目标是提取出爬取网站图片所需的链接地址，这些链接地址最好是包含整个网站的链接地址。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/zJMMLna.png&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://yongnights.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://yongnights.github.io/tags/Python/"/>
    
      <category term="爬虫" scheme="https://yongnights.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="美女" scheme="https://yongnights.github.io/tags/%E7%BE%8E%E5%A5%B3/"/>
    
      <category term="requests" scheme="https://yongnights.github.io/tags/requests/"/>
    
  </entry>
  
  <entry>
    <title>多任务_进程</title>
    <link href="https://yongnights.github.io/2019/12/31/%E5%A4%9A%E4%BB%BB%E5%8A%A1_%E8%BF%9B%E7%A8%8B/"/>
    <id>https://yongnights.github.io/2019/12/31/多任务_进程/</id>
    <published>2019-12-31T04:00:48.283Z</published>
    <updated>2019-12-31T04:00:48.283Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Dec 31 2019 13:39:54 GMT+0800 (GMT+08:00) --><h1 id="进程以及状态"><a href="#进程以及状态" class="headerlink" title="进程以及状态"></a>进程以及状态</h1><h2 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h2><p>程序：例如xxx.py这是程序，是一个静态的<br>进程：一个程序运行起来后，代码+用到的资源 称之为进程，它是操作系统分配资源的基本单元。<br>不仅可以通过线程完成多任务，进程也是可以的</p><h2 id="进程的状态"><a href="#进程的状态" class="headerlink" title="进程的状态"></a>进程的状态</h2><p>工作中，任务数往往大于cpu的核数，即一定有一些任务正在执行，而另外一些任务在等待cpu进行执行，因此导致了有了不同的状态<br><img src="/images_jincheng/001.png" alt></p><a id="more"></a><ul><li>就绪态：运行的条件都已经慢去，正在等在cpu执行</li><li>执行态：cpu正在执行其功能</li><li>等待态：等待某些条件满足，例如一个程序sleep了，此时就处于等待态</li></ul><h1 id="进程的创建-multiprocessing"><a href="#进程的创建-multiprocessing" class="headerlink" title="进程的创建-multiprocessing"></a>进程的创建-multiprocessing</h1><p>multiprocessing模块就是跨平台版本的多进程模块，提供了一个Process类来代表一个进程对象，这个对象可以理解为是一个独立的进程，可以执行另外的事情</p><h2 id="2个while循环一起执行"><a href="#2个while循环一起执行" class="headerlink" title="2个while循环一起执行"></a>2个while循环一起执行</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_proc</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""子进程要执行的代码"""</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        print(<span class="string">"----2----"</span>)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</span><br><span class="line">    p = Process(target=run_proc)</span><br><span class="line">    p.start()</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        print(<span class="string">"----1----"</span>)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>说明</p><ul><li>创建子进程时，只需要传入一个执行函数和函数的参数，创建一个Process实例，用start()方法启动</li></ul><h2 id="进程pid"><a href="#进程pid" class="headerlink" title="进程pid"></a>进程pid</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_proc</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""子进程要执行的代码"""</span></span><br><span class="line">    print(<span class="string">'子进程运行中，pid=%d...'</span> % os.getpid())  <span class="comment"># os.getpid获取当前进程的进程号</span></span><br><span class="line">    print(<span class="string">'子进程将要结束...'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    print(<span class="string">'父进程pid: %d'</span> % os.getpid())  <span class="comment"># os.getpid获取当前进程的进程号</span></span><br><span class="line">    p = Process(target=run_proc)</span><br><span class="line">    p.start()</span><br></pre></td></tr></table></figure><h2 id="Process语法结构"><a href="#Process语法结构" class="headerlink" title="Process语法结构"></a>Process语法结构</h2><p>Process([group [, target [, name [, args [, kwargs]]]]])</p><ul><li>target：如果传递了函数的引用，可以任务这个子进程就执行这里的代码</li><li>args：给target指定的函数传递的参数，以元组的方式传递</li><li>kwargs：给target指定的函数传递命名参数</li><li>name：给进程设定一个名字，可以不设定</li><li>group：指定进程组，大多数情况下用不到</li></ul><p>Process创建的实例对象的常用方法：</p><ul><li>start()：启动子进程实例（创建子进程）</li><li>is_alive()：判断进程子进程是否还在活着</li><li>join([timeout])：是否等待子进程执行结束，或等待多少秒</li><li>terminate()：不管任务是否完成，立即终止子进程</li></ul><p>Process创建的实例对象的常用属性：</p><ul><li>name：当前进程的别名，默认为Process-N，N为从1开始递增的整数</li><li>pid：当前进程的pid（进程号）</li></ul><h2 id="给子进程指定的函数传递参数"><a href="#给子进程指定的函数传递参数" class="headerlink" title="给子进程指定的函数传递参数"></a>给子进程指定的函数传递参数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_proc</span><span class="params">(name, age, **kwargs)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        print(<span class="string">'子进程运行中，name= %s,age=%d ,pid=%d...'</span> % (name, age, os.getpid()))</span><br><span class="line">        print(kwargs)</span><br><span class="line">        sleep(<span class="number">0.2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</span><br><span class="line">    p = Process(target=run_proc, args=(<span class="string">'test'</span>,<span class="number">18</span>), kwargs=&#123;<span class="string">"m"</span>:<span class="number">20</span>&#125;)</span><br><span class="line">    p.start()</span><br><span class="line">    sleep(<span class="number">1</span>)  <span class="comment"># 1秒中之后，立即结束子进程</span></span><br><span class="line">    p.terminate()</span><br><span class="line">    p.join()</span><br></pre></td></tr></table></figure><h2 id="进程间不共享全局变量"><a href="#进程间不共享全局变量" class="headerlink" title="进程间不共享全局变量"></a>进程间不共享全局变量</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">nums = [<span class="number">11</span>, <span class="number">22</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""子进程要执行的代码"""</span></span><br><span class="line">    print(<span class="string">"in process1 pid=%d ,nums=%s"</span> % (os.getpid(), nums))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        nums.append(i)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        print(<span class="string">"in process1 pid=%d ,nums=%s"</span> % (os.getpid(), nums))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work2</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""子进程要执行的代码"""</span></span><br><span class="line">    print(<span class="string">"in process2 pid=%d ,nums=%s"</span> % (os.getpid(), nums))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    p1 = Process(target=work1)</span><br><span class="line">    p1.start()</span><br><span class="line">    p1.join()</span><br><span class="line"></span><br><span class="line">    p2 = Process(target=work2)</span><br><span class="line">    p2.start()</span><br></pre></td></tr></table></figure><p>运行结果:<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">in</span> process1 pid=11349 ,nums=[11, 22]</span><br><span class="line"><span class="keyword">in</span> process1 pid=11349 ,nums=[11, 22, 0]</span><br><span class="line"><span class="keyword">in</span> process1 pid=11349 ,nums=[11, 22, 0, 1]</span><br><span class="line"><span class="keyword">in</span> process1 pid=11349 ,nums=[11, 22, 0, 1, 2]</span><br><span class="line"><span class="keyword">in</span> process2 pid=11350 ,nums=[11, 22]</span><br></pre></td></tr></table></figure><p></p><h1 id="进程、线程对比"><a href="#进程、线程对比" class="headerlink" title="进程、线程对比"></a>进程、线程对比</h1><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><ul><li>进程，能够完成多任务，比如 在一台电脑上能够同时运行多个QQ</li><li>线程，能够完成多任务，比如 一个QQ中的多个聊天窗口</li></ul><h2 id="定义的不同"><a href="#定义的不同" class="headerlink" title="定义的不同"></a>定义的不同</h2><ul><li>进程是系统进行资源分配和调度的一个独立单位.</li><li>线程是进程的一个实体,是CPU调度和分派的基本单位,它是比进程更小的能独立运行的基本单位.线程自己基本上不拥有系统资源,只拥有一点在运行中必不可少的资源(如程序计数器,一组寄存器和栈),但是它可与同属一个进程的其他的线程共享进程所拥有的全部资源.</li></ul><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><ul><li>一个程序至少有一个进程,一个进程至少有一个线程.</li><li>线程的划分尺度小于进程(资源比进程少)，使得多线程程序的并发性高。</li><li><p>进程在执行过程中拥有独立的内存单元，而多个线程共享内存，从而极大地提高了程序的运行效率<br>![]/images_jincheng/002.png)</p></li><li><p>线程不能够独立执行，必须依存在进程中</p></li><li>可以将进程理解为工厂中的一条流水线，而其中的线程就是这个流水线上的工人</li></ul><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><p>线程和进程在使用上各有优缺点：线程执行开销小，但不利于资源的管理和保护；而进程正相反。</p><h1 id="进程间通信-Queue"><a href="#进程间通信-Queue" class="headerlink" title="进程间通信-Queue"></a>进程间通信-Queue</h1><p>Process之间有时需要通信，操作系统提供了很多机制来实现进程间的通信。</p><h2 id="Queue的使用"><a href="#Queue的使用" class="headerlink" title="Queue的使用"></a>Queue的使用</h2><p>可以使用multiprocessing模块的Queue实现多进程之间的数据传递，Queue本身是一个消息列队程序，首先用一个小实例来演示一下Queue的工作原理：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Queue</span><br><span class="line">q=Queue(<span class="number">3</span>) <span class="comment">#初始化一个Queue对象，最多可接收三条put消息</span></span><br><span class="line">q.put(<span class="string">"消息1"</span>) </span><br><span class="line">q.put(<span class="string">"消息2"</span>)</span><br><span class="line">print(q.full())  <span class="comment">#False</span></span><br><span class="line">q.put(<span class="string">"消息3"</span>)</span><br><span class="line">print(q.full()) <span class="comment">#True</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#因为消息列队已满下面的try都会抛出异常，第一个try会等待2秒后再抛出异常，第二个Try会立刻抛出异常</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    q.put(<span class="string">"消息4"</span>,<span class="literal">True</span>,<span class="number">2</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    print(<span class="string">"消息列队已满，现有消息数量:%s"</span>%q.qsize())</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    q.put_nowait(<span class="string">"消息4"</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    print(<span class="string">"消息列队已满，现有消息数量:%s"</span>%q.qsize())</span><br><span class="line"></span><br><span class="line"><span class="comment">#推荐的方式，先判断消息列队是否已满，再写入</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> q.full():</span><br><span class="line">    q.put_nowait(<span class="string">"消息4"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#读取消息时，先判断消息列队是否为空，再读取</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> q.empty():</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(q.qsize()):</span><br><span class="line">        print(q.get_nowait())</span><br></pre></td></tr></table></figure><p></p><p>运行结果:<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">False</span><br><span class="line">True</span><br><span class="line">消息列队已满，现有消息数量:3</span><br><span class="line">消息列队已满，现有消息数量:3</span><br><span class="line">消息1</span><br><span class="line">消息2</span><br><span class="line">消息3</span><br></pre></td></tr></table></figure><p></p><p>说明<br>初始化Queue()对象时（例如：q=Queue()），若括号中没有指定最大可接收的消息数量，或数量为负值，那么就代表可接受的消息数量没有上限（直到内存的尽头）；</p><ul><li>Queue.qsize()：返回当前队列包含的消息数量；</li><li>Queue.empty()：如果队列为空，返回True，反之False ；</li><li>Queue.full()：如果队列满了，返回True,反之False；</li><li>Queue.get([block[, timeout]])：获取队列中的一条消息，然后将其从列队中移除，block默认值为True；</li></ul><p>1）如果block使用默认值，且没有设置timeout（单位秒），消息列队如果为空，此时程序将被阻塞（停在读取状态），直到从消息列队读到消息为止，如果设置了timeout，则会等待timeout秒，若还没读取到任何消息，则抛出”Queue.Empty”异常；<br>2）如果block值为False，消息列队如果为空，则会立刻抛出”Queue.Empty”异常；</p><ul><li>Queue.get_nowait()：相当Queue.get(False)；</li><li>Queue.put(item,[block[, timeout]])：将item消息写入队列，block默认值为True；</li></ul><p>1）如果block使用默认值，且没有设置timeout（单位秒），消息列队如果已经没有空间可写入，此时程序将被阻塞（停在写入状态），直到从消息列队腾出空间为止，如果设置了timeout，则会等待timeout秒，若还没空间，则抛出”Queue.Full”异常；<br>2）如果block值为False，消息列队如果没有空间可写入，则会立刻抛出”Queue.Full”异常；</p><ul><li>Queue.put_nowait(item)：相当Queue.put(item, False)；</li></ul><h2 id="Queue实例"><a href="#Queue实例" class="headerlink" title="Queue实例"></a>Queue实例</h2><p>我们以Queue为例，在父进程中创建两个子进程，一个往Queue里写数据，一个从Queue里读数据：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process, Queue</span><br><span class="line"><span class="keyword">import</span> os, time, random</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写数据进程执行的代码:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write</span><span class="params">(q)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> value <span class="keyword">in</span> [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>]:</span><br><span class="line">        print(<span class="string">'Put %s to queue...'</span> % value)</span><br><span class="line">        q.put(value)</span><br><span class="line">        time.sleep(random.random())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读数据进程执行的代码:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read</span><span class="params">(q)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> q.empty():</span><br><span class="line">            value = q.get(<span class="literal">True</span>)</span><br><span class="line">            print(<span class="string">'Get %s from queue.'</span> % value)</span><br><span class="line">            time.sleep(random.random())</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># 父进程创建Queue，并传给各个子进程：</span></span><br><span class="line">    q = Queue()</span><br><span class="line">    pw = Process(target=write, args=(q,))</span><br><span class="line">    pr = Process(target=read, args=(q,))</span><br><span class="line">    <span class="comment"># 启动子进程pw，写入:</span></span><br><span class="line">    pw.start()    </span><br><span class="line">    <span class="comment"># 等待pw结束:</span></span><br><span class="line">    pw.join()</span><br><span class="line">    <span class="comment"># 启动子进程pr，读取:</span></span><br><span class="line">    pr.start()</span><br><span class="line">    pr.join()</span><br><span class="line">    <span class="comment"># pr进程里是死循环，无法等待其结束，只能强行终止:</span></span><br><span class="line">    print(<span class="string">''</span>)</span><br><span class="line">    print(<span class="string">'所有数据都写入并且读完'</span>)</span><br></pre></td></tr></table></figure><p></p><h1 id="进程池Pool"><a href="#进程池Pool" class="headerlink" title="进程池Pool"></a>进程池Pool</h1><p>当需要创建的子进程数量不多时，可以直接利用multiprocessing中的Process动态成生多个进程，但如果是上百甚至上千个目标，手动的去创建进程的工作量巨大，此时就可以用到multiprocessing模块提供的Pool方法。</p><p>初始化Pool时，可以指定一个最大进程数，当有新的请求提交到Pool中时，如果池还没有满，那么就会创建一个新的进程用来执行该请求；但如果池中的进程数已经达到指定的最大值，那么该请求就会等待，直到池中有进程结束，才会用之前的进程来执行新的任务，请看下面的实例：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</span><br><span class="line"><span class="keyword">import</span> os, time, random</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">worker</span><span class="params">(msg)</span>:</span></span><br><span class="line">    t_start = time.time()</span><br><span class="line">    print(<span class="string">"%s开始执行,进程号为%d"</span> % (msg,os.getpid()))</span><br><span class="line">    <span class="comment"># random.random()随机生成0~1之间的浮点数</span></span><br><span class="line">    time.sleep(random.random()*<span class="number">2</span>) </span><br><span class="line">    t_stop = time.time()</span><br><span class="line">    print(msg,<span class="string">"执行完毕，耗时%0.2f"</span> % (t_stop-t_start))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    po = Pool(<span class="number">3</span>)  <span class="comment"># 定义一个进程池，最大进程数3</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">10</span>):</span><br><span class="line">        <span class="comment"># Pool().apply_async(要调用的目标,(传递给目标的参数元祖,))</span></span><br><span class="line">        <span class="comment"># 每次循环将会用空闲出来的子进程去调用目标</span></span><br><span class="line">        po.apply_async(worker, (i,))</span><br><span class="line"></span><br><span class="line">    print(<span class="string">"----start----"</span>)</span><br><span class="line">    po.close()  <span class="comment"># 关闭进程池，关闭后po不再接收新的请求</span></span><br><span class="line">    po.join()  <span class="comment"># 等待po中所有子进程执行完成，必须放在close语句之后</span></span><br><span class="line">    print(<span class="string">"-----end-----"</span>)</span><br></pre></td></tr></table></figure><p></p><p>运行结果:<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">----start----</span><br><span class="line">0开始执行,进程号为21466</span><br><span class="line">1开始执行,进程号为21468</span><br><span class="line">2开始执行,进程号为21467</span><br><span class="line">0 执行完毕，耗时1.01</span><br><span class="line">3开始执行,进程号为21466</span><br><span class="line">2 执行完毕，耗时1.24</span><br><span class="line">4开始执行,进程号为21467</span><br><span class="line">3 执行完毕，耗时0.56</span><br><span class="line">5开始执行,进程号为21466</span><br><span class="line">1 执行完毕，耗时1.68</span><br><span class="line">6开始执行,进程号为21468</span><br><span class="line">4 执行完毕，耗时0.67</span><br><span class="line">7开始执行,进程号为21467</span><br><span class="line">5 执行完毕，耗时0.83</span><br><span class="line">8开始执行,进程号为21466</span><br><span class="line">6 执行完毕，耗时0.75</span><br><span class="line">9开始执行,进程号为21468</span><br><span class="line">7 执行完毕，耗时1.03</span><br><span class="line">8 执行完毕，耗时1.05</span><br><span class="line">9 执行完毕，耗时1.69</span><br><span class="line">-----end-----</span><br></pre></td></tr></table></figure><p></p><p>multiprocessing.Pool常用函数解析：</p><ul><li>apply_async(func[, args[, kwds]]) ：使用非阻塞方式调用func（并行执行，堵塞方式必须等待上一个进程退出才能执行下一个进程），args为传递给func的参数列表，kwds为传递给func的关键字参数列表；</li><li>close()：关闭Pool，使其不再接受新的任务；</li><li>terminate()：不管任务是否完成，立即终止；</li><li>join()：主进程阻塞，等待子进程的退出， 必须在close或terminate之后使用；</li></ul><h2 id="进程池中的Queue"><a href="#进程池中的Queue" class="headerlink" title="进程池中的Queue"></a>进程池中的Queue</h2><p>如果要使用Pool创建进程，就需要使用multiprocessing.Manager()中的Queue()，而不是multiprocessing.Queue()，否则会得到一条如下的错误信息：<br>RuntimeError: Queue objects should only be shared between processes through inheritance.<br>下面的实例演示了进程池中的进程如何通信：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改import中的Queue为Manager</span></span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Manager,Pool</span><br><span class="line"><span class="keyword">import</span> os,time,random</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reader</span><span class="params">(q)</span>:</span></span><br><span class="line">    print(<span class="string">"reader启动(%s),父进程为(%s)"</span> % (os.getpid(), os.getppid()))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(q.qsize()):</span><br><span class="line">        print(<span class="string">"reader从Queue获取到消息：%s"</span> % q.get(<span class="literal">True</span>))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">writer</span><span class="params">(q)</span>:</span></span><br><span class="line">    print(<span class="string">"writer启动(%s),父进程为(%s)"</span> % (os.getpid(), os.getppid()))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">"itcast"</span>:</span><br><span class="line">        q.put(i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</span><br><span class="line">    print(<span class="string">"(%s) start"</span> % os.getpid())</span><br><span class="line">    q = Manager().Queue()  <span class="comment"># 使用Manager中的Queue</span></span><br><span class="line">    po = Pool()</span><br><span class="line">    po.apply_async(writer, (q,))</span><br><span class="line"></span><br><span class="line">    time.sleep(<span class="number">1</span>)  <span class="comment"># 先让上面的任务向Queue存入数据，然后再让下面的任务开始从中取数据</span></span><br><span class="line"></span><br><span class="line">    po.apply_async(reader, (q,))</span><br><span class="line">    po.close()</span><br><span class="line">    po.join()</span><br><span class="line">    print(<span class="string">"(%s) End"</span> % os.getpid())</span><br></pre></td></tr></table></figure><p></p><p>运行结果:<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">(11095) start</span><br><span class="line">writer启动(11097),父进程为(11095)</span><br><span class="line">reader启动(11098),父进程为(11095)</span><br><span class="line">reader从Queue获取到消息：i</span><br><span class="line">reader从Queue获取到消息：t</span><br><span class="line">reader从Queue获取到消息：c</span><br><span class="line">reader从Queue获取到消息：a</span><br><span class="line">reader从Queue获取到消息：s</span><br><span class="line">reader从Queue获取到消息：t</span><br><span class="line">(11095) End</span><br></pre></td></tr></table></figure><p></p><h1 id="应用：文件夹copy器（多进程版）"><a href="#应用：文件夹copy器（多进程版）" class="headerlink" title="应用：文件夹copy器（多进程版）"></a>应用：文件夹copy器（多进程版）</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">copy_file</span><span class="params">(queue, file_name,source_folder_name,  dest_folder_name)</span>:</span></span><br><span class="line">    <span class="string">"""copy文件到指定的路径"""</span></span><br><span class="line">    f_read = open(source_folder_name + <span class="string">"/"</span> + file_name, <span class="string">"rb"</span>)</span><br><span class="line">    f_write = open(dest_folder_name + <span class="string">"/"</span> + file_name, <span class="string">"wb"</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        time.sleep(random.random())</span><br><span class="line">        content = f_read.read(<span class="number">1024</span>)</span><br><span class="line">        <span class="keyword">if</span> content:</span><br><span class="line">            f_write.write(content)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    f_read.close()</span><br><span class="line">    f_write.close()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 发送已经拷贝完毕的文件名字</span></span><br><span class="line">    queue.put(file_name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 获取要复制的文件夹</span></span><br><span class="line">    source_folder_name = input(<span class="string">"请输入要复制文件夹名字:"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 整理目标文件夹</span></span><br><span class="line">    dest_folder_name = source_folder_name + <span class="string">"[副本]"</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建目标文件夹</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        os.mkdir(dest_folder_name)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span>  <span class="comment"># 如果文件夹已经存在，那么创建会失败</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取这个文件夹中所有的普通文件名</span></span><br><span class="line">    file_names = os.listdir(source_folder_name)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建Queue</span></span><br><span class="line">    queue = multiprocessing.Manager().Queue()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建进程池</span></span><br><span class="line">    pool = multiprocessing.Pool(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> file_name <span class="keyword">in</span> file_names:</span><br><span class="line">        <span class="comment"># 向进程池中添加任务</span></span><br><span class="line">        pool.apply_async(copy_file, args=(queue, file_name, source_folder_name, dest_folder_name))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 主进程显示进度</span></span><br><span class="line">    pool.close()</span><br><span class="line"></span><br><span class="line">    all_file_num = len(file_names)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        file_name = queue.get()</span><br><span class="line">        <span class="keyword">if</span> file_name <span class="keyword">in</span> file_names:</span><br><span class="line">            file_names.remove(file_name)</span><br><span class="line"></span><br><span class="line">        copy_rate = (all_file_num-len(file_names))*<span class="number">100</span>/all_file_num</span><br><span class="line">        print(<span class="string">"\r%.2f...(%s)"</span> % (copy_rate, file_name) + <span class="string">" "</span>*<span class="number">50</span>, end=<span class="string">""</span>)</span><br><span class="line">        <span class="keyword">if</span> copy_rate &gt;= <span class="number">100</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    print()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Dec 31 2019 13:39:54 GMT+0800 (GMT+08:00) --&gt;&lt;h1 id=&quot;进程以及状态&quot;&gt;&lt;a href=&quot;#进程以及状态&quot; class=&quot;headerlink&quot; title=&quot;进程以及状态&quot;&gt;&lt;/a&gt;进程以及状态&lt;/h1&gt;&lt;h2 id=&quot;进程&quot;&gt;&lt;a href=&quot;#进程&quot; class=&quot;headerlink&quot; title=&quot;进程&quot;&gt;&lt;/a&gt;进程&lt;/h2&gt;&lt;p&gt;程序：例如xxx.py这是程序，是一个静态的&lt;br&gt;进程：一个程序运行起来后，代码+用到的资源 称之为进程，它是操作系统分配资源的基本单元。&lt;br&gt;不仅可以通过线程完成多任务，进程也是可以的&lt;/p&gt;&lt;h2 id=&quot;进程的状态&quot;&gt;&lt;a href=&quot;#进程的状态&quot; class=&quot;headerlink&quot; title=&quot;进程的状态&quot;&gt;&lt;/a&gt;进程的状态&lt;/h2&gt;&lt;p&gt;工作中，任务数往往大于cpu的核数，即一定有一些任务正在执行，而另外一些任务在等待cpu进行执行，因此导致了有了不同的状态&lt;br&gt;&lt;img src=&quot;/images_jincheng/001.png&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://yongnights.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://yongnights.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>多任务_线程</title>
    <link href="https://yongnights.github.io/2019/12/31/%E5%A4%9A%E4%BB%BB%E5%8A%A1_%E7%BA%BF%E7%A8%8B/"/>
    <id>https://yongnights.github.io/2019/12/31/多任务_线程/</id>
    <published>2019-12-31T04:00:48.282Z</published>
    <updated>2019-12-31T04:00:48.282Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Dec 31 2019 13:39:54 GMT+0800 (GMT+08:00) --><h1 id="多任务的概念"><a href="#多任务的概念" class="headerlink" title="多任务的概念"></a>多任务的概念</h1><p>简单地说，就是操作系统可以同时运行多个任务。</p><p>现在，多核CPU已经非常普及了，但是，即使过去的单核CPU，也可以执行多任务。由于CPU执行代码都是顺序执行的，那么，单核CPU是怎么执行多任务的呢？</p><p>答案就是操作系统轮流让各个任务交替执行，任务1执行0.01秒，切换到任务2，任务2执行0.01秒，再切换到任务3，执行0.01秒……这样反复执行下去。表面上看，每个任务都是交替执行的，但是，由于CPU的执行速度实在是太快了，我们感觉就像所有任务都在同时执行一样。</p><p>真正的并行执行多任务只能在多核CPU上实现，但是，由于任务数量远远多于CPU的核心数量，所以，操作系统也会自动把很多任务轮流调度到每个核心上执行。</p><p>注意：</p><ul><li>并发：指的是任务数多于cpu核数，通过操作系统的各种任务调度算法，实现用多个任务“一起”执行（实际上总有一些任务不在执行，因为切换任务的速度相当快，看上去一起执行而已）</li><li>并行：指的是任务数小于等于cpu核数，即任务真的是一起执行的</li></ul><h1 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h1><p>python的thread模块是比较底层的模块，python的threading模块是对thread做了一些包装的，可以更加方便的被使用</p><h2 id="使用threading模块"><a href="#使用threading模块" class="headerlink" title="使用threading模块"></a>使用threading模块</h2><h3 id="单线程执行"><a href="#单线程执行" class="headerlink" title="单线程执行"></a>单线程执行</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">saySorry</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"亲爱的，我错了，我能吃饭了吗？"</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">        saySorry()</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="多线程执行"><a href="#多线程执行" class="headerlink" title="多线程执行"></a>多线程执行</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">saySorry</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"亲爱的，我错了，我能吃饭了吗？"</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">        t = threading.Thread(target=saySorry)</span><br><span class="line">        t.start() <span class="comment">#启动线程，即让线程开始执行</span></span><br></pre></td></tr></table></figure><p>说明</p><ul><li>可以明显看出使用了多线程并发的操作，花费时间要短很多</li><li>当调用start()时，才会真正的创建线程，并且开始执行</li></ul><h2 id="主线程会等待所有的子线程结束后才结束"><a href="#主线程会等待所有的子线程结束后才结束" class="headerlink" title="主线程会等待所有的子线程结束后才结束"></a>主线程会等待所有的子线程结束后才结束</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep,ctime</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sing</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        print(<span class="string">"正在唱歌...%d"</span>%i)</span><br><span class="line">        sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dance</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        print(<span class="string">"正在跳舞...%d"</span>%i)</span><br><span class="line">        sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    print(<span class="string">'---开始---:%s'</span>%ctime())</span><br><span class="line"></span><br><span class="line">    t1 = threading.Thread(target=sing)</span><br><span class="line">    t2 = threading.Thread(target=dance)</span><br><span class="line"></span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br><span class="line"></span><br><span class="line">    <span class="comment">#sleep(5) # 屏蔽此行代码，试试看，程序是否会立马结束？</span></span><br><span class="line">    print(<span class="string">'---结束---:%s'</span>%ctime())</span><br></pre></td></tr></table></figure><h2 id="查看线程数量"><a href="#查看线程数量" class="headerlink" title="查看线程数量"></a>查看线程数量</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep,ctime</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sing</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        print(<span class="string">"正在唱歌...%d"</span>%i)</span><br><span class="line">        sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dance</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        print(<span class="string">"正在跳舞...%d"</span>%i)</span><br><span class="line">        sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    print(<span class="string">'---开始---:%s'</span>%ctime())</span><br><span class="line"></span><br><span class="line">    t1 = threading.Thread(target=sing)</span><br><span class="line">    t2 = threading.Thread(target=dance)</span><br><span class="line"></span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        length = len(threading.enumerate())</span><br><span class="line">        print(<span class="string">'当前运行的线程数为：%d'</span>%length)</span><br><span class="line">        <span class="keyword">if</span> length&lt;=<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        sleep(<span class="number">0.5</span>)</span><br></pre></td></tr></table></figure><h1 id="线程-注意点"><a href="#线程-注意点" class="headerlink" title="线程-注意点"></a>线程-注意点</h1><h2 id="线程执行代码的封装"><a href="#线程执行代码的封装" class="headerlink" title="线程执行代码的封装"></a>线程执行代码的封装</h2><p>通过使用threading模块能完成多任务的程序开发，为了让每个线程的封装性更完美，所以使用threading模块时，往往会定义一个新的子类class，只要继承threading.Thread就可以了，然后重写run方法<br>示例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">            msg = <span class="string">"I'm "</span>+self.name+<span class="string">' @ '</span>+str(i) <span class="comment">#name属性中保存的是当前线程的名字</span></span><br><span class="line">            print(msg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    t = MyThread()</span><br><span class="line">    t.start()</span><br></pre></td></tr></table></figure><p>说明</p><ul><li>python的threading.Thread类有一个run方法，用于定义线程的功能函数，可以在自己的线程类中覆盖该方法。而创建自己的线程实例后，通过Thread类的start方法，可以启动该线程，交给python虚拟机进行调度，当该线程获得执行的机会时，就会调用run方法执行线程。</li></ul><h2 id="线程的执行顺序"><a href="#线程的执行顺序" class="headerlink" title="线程的执行顺序"></a>线程的执行顺序</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">            msg = <span class="string">"I'm "</span>+self.name+<span class="string">' @ '</span>+str(i)</span><br><span class="line">            print(msg)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">        t = MyThread()</span><br><span class="line">        t.start()</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    test()</span><br></pre></td></tr></table></figure><p>说明</p><ul><li>从代码和执行结果我们可以看出，多线程程序的执行顺序是不确定的。当执行到sleep语句时，线程将被阻塞（Blocked），到sleep结束后，线程进入就绪（Runnable）状态，等待调度。而线程调度将自行选择一个线程执行。上面的代码中只能保证每个线程都运行完整个run函数，但是线程的启动顺序、run函数中每次循环的执行顺序都不能确定。</li></ul><p>修改上述代码,使之能按顺序执行<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">            <span class="comment"># time.sleep(1)</span></span><br><span class="line">            msg = <span class="string">"I'm "</span> + self.name + <span class="string">' @ '</span> + str(i)</span><br><span class="line">            print(msg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">        t = MyThread()</span><br><span class="line">        t.start()</span><br><span class="line">        time.sleep(<span class="number">1</span>) <span class="comment"># 延迟时间可适当延长</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    test()</span><br></pre></td></tr></table></figure><p></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>每个线程默认有一个名字，尽管上面的例子中没有指定线程对象的name，但是python会自动为线程指定一个名字。</li><li>当线程的run()方法结束时该线程完成。</li><li>无法控制线程调度程序，但可以通过别的方式来影响线程调度的方式。</li></ol><h1 id="多线程-共享全局变量"><a href="#多线程-共享全局变量" class="headerlink" title="多线程-共享全局变量"></a>多线程-共享全局变量</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">g_num = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> g_num</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        g_num += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">"----in work1, g_num is %d---"</span> % g_num)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work2</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> g_num</span><br><span class="line">    print(<span class="string">"----in work2, g_num is %d---"</span> % g_num)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(<span class="string">"---线程创建之前g_num is %d---"</span> % g_num)</span><br><span class="line"></span><br><span class="line">t1 = Thread(target=work1)</span><br><span class="line">t1.start()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 延时一会，保证t1线程中的事情做完</span></span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">t2 = Thread(target=work2)</span><br><span class="line">t2.start()</span><br></pre></td></tr></table></figure><h2 id="列表当做实参传递到线程中"><a href="#列表当做实参传递到线程中" class="headerlink" title="列表当做实参传递到线程中"></a>列表当做实参传递到线程中</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work1</span><span class="params">(nums)</span>:</span></span><br><span class="line">    nums.append(<span class="number">44</span>)</span><br><span class="line">    print(<span class="string">"----in work1---"</span>, nums)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work2</span><span class="params">(nums)</span>:</span></span><br><span class="line">    <span class="comment"># 延时一会，保证t1线程中的事情做完</span></span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">"----in work2---"</span>, nums)</span><br><span class="line"></span><br><span class="line">g_nums = [<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>]</span><br><span class="line"></span><br><span class="line">t1 = Thread(target=work1, args=(g_nums,))</span><br><span class="line">t1.start()</span><br><span class="line"></span><br><span class="line">t2 = Thread(target=work2, args=(g_nums,))</span><br><span class="line">t2.start()</span><br></pre></td></tr></table></figure><h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><ul><li>在一个进程内的所有线程共享全局变量，很方便在多个线程间共享数据</li><li>缺点就是，线程是对全局变量随意遂改可能造成多线程之间对全局变量的混乱（即线程非安全）</li></ul><h1 id="多线程-共享全局变量问题"><a href="#多线程-共享全局变量问题" class="headerlink" title="多线程-共享全局变量问题"></a>多线程-共享全局变量问题</h1><h2 id="多线程开发可能遇到的问题"><a href="#多线程开发可能遇到的问题" class="headerlink" title="多线程开发可能遇到的问题"></a>多线程开发可能遇到的问题</h2><p>假设两个线程t1和t2都要对全局变量g_num(默认是0)进行加1运算，t1和t2都各对g_num加10次，g_num的最终的结果应该为20。</p><p>但是由于是多线程同时操作，有可能出现下面情况：</p><ol><li>在g_num=0时，t1取得g_num=0。此时系统把t1调度为”sleeping”状态，把t2转换为”running”状态，t2也获得g_num=0</li><li>然后t2对得到的值进行加1并赋给g_num，使得g_num=1</li><li>然后系统又把t2调度为”sleeping”，把t1转为”running”。线程t1又把它之前得到的0加1后赋值给g_num。</li><li>这样导致虽然t1和t2都对g_num加1，但结果仍然是g_num=1</li></ol><h2 id="测试1"><a href="#测试1" class="headerlink" title="测试1"></a>测试1</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">g_num = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work1</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> g_num</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(num):</span><br><span class="line">        g_num += <span class="number">1</span></span><br><span class="line">    print(<span class="string">"----in work1, g_num is %d---"</span> % g_num)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work2</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> g_num</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(num):</span><br><span class="line">        g_num += <span class="number">1</span></span><br><span class="line">    print(<span class="string">"----in work2, g_num is %d---"</span> % g_num)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(<span class="string">"---线程创建之前g_num is %d---"</span> % g_num)</span><br><span class="line"></span><br><span class="line">t1 = threading.Thread(target=work1, args=(<span class="number">100</span>,))</span><br><span class="line">t1.start()</span><br><span class="line"></span><br><span class="line">t2 = threading.Thread(target=work2, args=(<span class="number">100</span>,))</span><br><span class="line">t2.start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> len(threading.enumerate()) != <span class="number">1</span>:</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"2个线程对同一个全局变量操作之后的最终结果是:%s"</span> % g_num)</span><br></pre></td></tr></table></figure><p>运行结果:<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">---线程创建之前g_num is 0---</span><br><span class="line">----<span class="keyword">in</span> work1, g_num is 100---</span><br><span class="line">----<span class="keyword">in</span> work2, g_num is 200---</span><br><span class="line">2个线程对同一个全局变量操作之后的最终结果是:200</span><br></pre></td></tr></table></figure><p></p><h2 id="测试2"><a href="#测试2" class="headerlink" title="测试2"></a>测试2</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">g_num = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work1</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> g_num</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(num):</span><br><span class="line">        g_num += <span class="number">1</span></span><br><span class="line">    print(<span class="string">"----in work1, g_num is %d---"</span> % g_num)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work2</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> g_num</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(num):</span><br><span class="line">        g_num += <span class="number">1</span></span><br><span class="line">    print(<span class="string">"----in work2, g_num is %d---"</span> % g_num)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(<span class="string">"---线程创建之前g_num is %d---"</span> % g_num)</span><br><span class="line"></span><br><span class="line">t1 = threading.Thread(target=work1, args=(<span class="number">1000000</span>,))</span><br><span class="line">t1.start()</span><br><span class="line"></span><br><span class="line"><span class="comment"># time.sleep(5) # 可加延时确保t1先执行完</span></span><br><span class="line"></span><br><span class="line">t2 = threading.Thread(target=work2, args=(<span class="number">1000000</span>,))</span><br><span class="line">t2.start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> len(threading.enumerate()) != <span class="number">1</span>:</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"2个线程对同一个全局变量操作之后的最终结果是:%s"</span> % g_num)</span><br></pre></td></tr></table></figure><p>运行结果:<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">---线程创建之前g_num is 0---</span><br><span class="line">----<span class="keyword">in</span> work2, g_num is 1306621---</span><br><span class="line">----<span class="keyword">in</span> work1, g_num is 1329573---</span><br><span class="line">2个线程对同一个全局变量操作之后的最终结果是:1329573</span><br></pre></td></tr></table></figure><p></p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><ul><li>如果多个线程同时对同一个全局变量操作，会出现资源竞争问题，从而数据结果会不正确</li></ul><h1 id="同步的概念"><a href="#同步的概念" class="headerlink" title="同步的概念"></a>同步的概念</h1><p>同步就是协同步调，按预定的先后次序进行运行。如:你说完，我再说。<br>“同”字从字面上容易理解为一起动作,其实不是，”同”字应是指协同、协助、互相配合。<br>如进程、线程同步，可理解为进程或线程A和B一块配合，A执行到一定程度时要依靠B的某个结果，于是停下来，示意B运行;B执行，再将结果给A;A再继续操作。</p><h2 id="解决线程同时修改全局变量的方式"><a href="#解决线程同时修改全局变量的方式" class="headerlink" title="解决线程同时修改全局变量的方式"></a>解决线程同时修改全局变量的方式</h2><p>可以通过线程同步来进行解决,思路如下:</p><ol><li>系统调用t1，然后获取到g_num的值为0，此时上一把锁，即不允许其他线程操作g_num</li><li>t1对g_num的值进行+1</li><li>t1解锁，此时g_num的值为1，其他的线程就可以使用g_num了，而且是g_num的值不是0而是1</li><li>同理其他线程在对g_num进行修改时，都要先上锁，处理完后再解锁，在上锁的整个过程中不允许其他线程访问，就保证了数据的正确性</li></ol><h1 id="互斥锁"><a href="#互斥锁" class="headerlink" title="互斥锁"></a>互斥锁</h1><p>当多个线程几乎同时修改某一个共享数据的时候，需要进行同步控制<br>线程同步能够保证多个线程安全访问竞争资源，最简单的同步机制是引入互斥锁。<br>互斥锁为资源引入一个状态：锁定/非锁定<br>某个线程要更改共享数据时，先将其锁定，此时资源的状态为“锁定”，其他线程不能更改；直到该线程释放资源，将资源的状态变成“非锁定”，其他的线程才能再次锁定该资源。互斥锁保证了每次只有一个线程进行写入操作，从而保证了多线程情况下数据的正确性。</p><p>threading模块中定义了Lock类，可以方便的处理锁定：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建锁</span></span><br><span class="line">mutex = threading.Lock()</span><br><span class="line"><span class="comment"># 锁定</span></span><br><span class="line">mutex.acquire()</span><br><span class="line"><span class="comment"># 释放</span></span><br><span class="line">mutex.release()</span><br></pre></td></tr></table></figure><p></p><p>注意：</p><ul><li>如果这个锁之前是没有上锁的，那么acquire不会堵塞</li><li>如果在调用acquire对这个锁上锁之前 它已经被 其他线程上了锁，那么此时acquire会堵塞，直到这个锁被解锁为止</li></ul><h2 id="使用互斥锁完成2个线程对同一个全局变量各加100万次的操作"><a href="#使用互斥锁完成2个线程对同一个全局变量各加100万次的操作" class="headerlink" title="使用互斥锁完成2个线程对同一个全局变量各加100万次的操作"></a>使用互斥锁完成2个线程对同一个全局变量各加100万次的操作</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">g_num = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test1</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> g_num</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(num):</span><br><span class="line">        mutex.acquire()  <span class="comment"># 上锁</span></span><br><span class="line">        g_num += <span class="number">1</span></span><br><span class="line">        mutex.release()  <span class="comment"># 解锁</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">"---test1---g_num=%d"</span> % g_num)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test2</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> g_num</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(num):</span><br><span class="line">        mutex.acquire()  <span class="comment"># 上锁</span></span><br><span class="line">        g_num += <span class="number">1</span></span><br><span class="line">        mutex.release()  <span class="comment"># 解锁</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">"---test2---g_num=%d"</span> % g_num)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个互斥锁</span></span><br><span class="line"><span class="comment"># 默认是未上锁的状态</span></span><br><span class="line">mutex = threading.Lock()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建2个线程，让他们各自对g_num加1000000次</span></span><br><span class="line">p1 = threading.Thread(target=test1, args=(<span class="number">1000000</span>,))</span><br><span class="line">p1.start()</span><br><span class="line"></span><br><span class="line">p2 = threading.Thread(target=test2, args=(<span class="number">1000000</span>,))</span><br><span class="line">p2.start()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 等待计算完成</span></span><br><span class="line"><span class="keyword">while</span> len(threading.enumerate()) != <span class="number">1</span>:</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"2个线程对同一个全局变量操作之后的最终结果是:%s"</span> % g_num)</span><br></pre></td></tr></table></figure><p>运行结果：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">---test1---g_num=1940444</span><br><span class="line">---test2---g_num=2000000</span><br><span class="line">2个线程对同一个全局变量操作之后的最终结果是:2000000</span><br></pre></td></tr></table></figure><p></p><p>可以看到最后的结果，加入互斥锁后，其结果与预期相符。</p><h2 id="上锁解锁过程"><a href="#上锁解锁过程" class="headerlink" title="上锁解锁过程"></a>上锁解锁过程</h2><p>当一个线程调用锁的acquire()方法获得锁时，锁就进入“locked”状态。<br>每次只有一个线程可以获得锁。如果此时另一个线程试图获得这个锁，该线程就会变为“blocked”状态，称为“阻塞”，直到拥有锁的线程调用锁的release()方法释放锁之后，锁进入“unlocked”状态。<br>线程调度程序从处于同步阻塞状态的线程中选择一个来获得锁，并使得该线程进入运行（running）状态。</p><h2 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h2><p>锁的好处：</p><ul><li>确保了某段关键代码只能由一个线程从头到尾完整地执行<br>锁的坏处：</li><li>阻止了多线程并发执行，包含锁的某段代码实际上只能以单线程模式执行，效率就大大地下降了</li><li>由于可以存在多个锁，不同的线程持有不同的锁，并试图获取对方持有的锁时，可能会造成死锁</li></ul><h1 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h1><p>在线程间共享多个资源的时候，如果两个线程分别占有一部分资源并且同时等待对方的资源，就会造成死锁。<br>尽管死锁很少发生，但一旦发生就会造成应用的停止响应。下面看一个死锁的例子<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread1</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 对mutexA上锁</span></span><br><span class="line">        mutexA.acquire()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># mutexA上锁后，延时1秒，等待另外那个线程 把mutexB上锁</span></span><br><span class="line">        print(self.name+<span class="string">'----do1---up----'</span>)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 此时会堵塞，因为这个mutexB已经被另外的线程抢先上锁了</span></span><br><span class="line">        mutexB.acquire()</span><br><span class="line">        print(self.name+<span class="string">'----do1---down----'</span>)</span><br><span class="line">        mutexB.release()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 对mutexA解锁</span></span><br><span class="line">        mutexA.release()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread2</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 对mutexB上锁</span></span><br><span class="line">        mutexB.acquire()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># mutexB上锁后，延时1秒，等待另外那个线程 把mutexA上锁</span></span><br><span class="line">        print(self.name+<span class="string">'----do2---up----'</span>)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 此时会堵塞，因为这个mutexA已经被另外的线程抢先上锁了</span></span><br><span class="line">        mutexA.acquire()</span><br><span class="line">        print(self.name+<span class="string">'----do2---down----'</span>)</span><br><span class="line">        mutexA.release()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 对mutexB解锁</span></span><br><span class="line">        mutexB.release()</span><br><span class="line"></span><br><span class="line">mutexA = threading.Lock()</span><br><span class="line">mutexB = threading.Lock()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    t1 = MyThread1()</span><br><span class="line">    t2 = MyThread2()</span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br></pre></td></tr></table></figure><p></p><p>运行此代码会发现此时已经进入到了死锁状态，可以使用ctrl-c退出</p><h2 id="避免死锁"><a href="#避免死锁" class="headerlink" title="避免死锁"></a>避免死锁</h2><ul><li>程序设计时要尽量避免（银行家算法）</li><li>添加超时时间等</li></ul><p>附录-银行家算法</p><p>[背景知识]</p><p>一个银行家如何将一定数目的资金安全地借给若干个客户，使这些客户既能借到钱完成要干的事，同时银行家又能收回全部资金而不至于破产，这就是银行家问题。这个问题同操作系统中资源分配问题十分相似：银行家就像一个操作系统，客户就像运行的进程，银行家的资金就是系统的资源。</p><p>[问题的描述]</p><p>一个银行家拥有一定数量的资金，有若干个客户要贷款。每个客户须在一开始就声明他所需贷款的总额。若该客户贷款总额不超过银行家的资金总数，银行家可以接收客户的要求。客户贷款是以每次一个资金单位（如1万RMB等）的方式进行的，客户在借满所需的全部单位款额之前可能会等待，但银行家须保证这种等待是有限的，可完成的。</p><p>例如：有三个客户C1，C2，C3，向银行家借款，该银行家的资金总额为10个资金单位，其中C1客户要借9各资金单位，C2客户要借3个资金单位，C3客户要借8个资金单位，总计20个资金单位。某一时刻的状态如图所示。</p><p><img src="/images_xiancheng/001.png" alt></p><p>对于a图的状态，按照安全序列的要求，我们选的第一个客户应满足该客户所需的贷款小于等于银行家当前所剩余的钱款，可以看出只有C2客户能被满足：C2客户需1个资金单位，小银行家手中的2个资金单位，于是银行家把1个资金单位借给C2客户，使之完成工作并归还所借的3个资金单位的钱，进入b图。同理，银行家把4个资金单位借给C3客户，使其完成工作，在c图中，只剩一个客户C1，它需7个资金单位，这时银行家有8个资金单位，所以C1也能顺利借到钱并完成工作。最后（见图d）银行家收回全部10个资金单位，保证不赔本。那麽客户序列{C1，C2，C3}就是个安全序列，按照这个序列贷款，银行家才是安全的。否则的话，若在图b状态时，银行家把手中的4个资金单位借给了C1，则出现不安全状态：这时C1，C3均不能完成工作，而银行家手中又没有钱了，系统陷入僵持局面，银行家也不能收回投资。</p><p>综上所述，银行家算法是从当前状态出发，逐个按安全序列检查各客户谁能完成其工作，然后假定其完成工作且归还全部贷款，再进而检查下一个能完成工作的客户，……。如果所有客户都能完成工作，则找到一个安全序列，银行家才是安全的。</p><h1 id="案例：多任务版udp聊天器"><a href="#案例：多任务版udp聊天器" class="headerlink" title="案例：多任务版udp聊天器"></a>案例：多任务版udp聊天器</h1><p><img src="/images_xiancheng/002.png" alt></p><p>说明</p><ul><li>编写一个有2个线程的程序</li><li>线程1用来接收数据然后显示</li><li>线程2用来检测键盘数据然后通过udp发送数据</li></ul><p>参考代码:<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_msg</span><span class="params">(udp_socket)</span>:</span></span><br><span class="line">    <span class="string">"""获取键盘数据，并将其发送给对方"""</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 1. 从键盘输入数据</span></span><br><span class="line">        msg = input(<span class="string">"\n请输入要发送的数据:"</span>)</span><br><span class="line">        <span class="comment"># 2. 输入对方的ip地址</span></span><br><span class="line">        dest_ip = input(<span class="string">"\n请输入对方的ip地址:"</span>)</span><br><span class="line">        <span class="comment"># 3. 输入对方的port</span></span><br><span class="line">        dest_port = int(input(<span class="string">"\n请输入对方的port:"</span>))</span><br><span class="line">        <span class="comment"># 4. 发送数据</span></span><br><span class="line">        udp_socket.sendto(msg.encode(<span class="string">"utf-8"</span>), (dest_ip, dest_port))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">recv_msg</span><span class="params">(udp_socket)</span>:</span></span><br><span class="line">    <span class="string">"""接收数据并显示"""</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 1. 接收数据</span></span><br><span class="line">        recv_msg = udp_socket.recvfrom(<span class="number">1024</span>)</span><br><span class="line">        <span class="comment"># 2. 解码</span></span><br><span class="line">        recv_ip = recv_msg[<span class="number">1</span>]</span><br><span class="line">        recv_msg = recv_msg[<span class="number">0</span>].decode(<span class="string">"utf-8"</span>)</span><br><span class="line">        <span class="comment"># 3. 显示接收到的数据</span></span><br><span class="line">        print(<span class="string">"&gt;&gt;&gt;%s:%s"</span> % (str(recv_ip), recv_msg))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 1. 创建套接字</span></span><br><span class="line">    udp_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line">    <span class="comment"># 2. 绑定本地信息</span></span><br><span class="line">    udp_socket.bind((<span class="string">""</span>, <span class="number">7890</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3. 创建一个子线程用来接收数据</span></span><br><span class="line">    t = threading.Thread(target=recv_msg, args=(udp_socket,))</span><br><span class="line">    t.start()</span><br><span class="line">    <span class="comment"># 4. 让主线程用来检测键盘数据并且发送</span></span><br><span class="line">    send_msg(udp_socket)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Dec 31 2019 13:39:54 GMT+0800 (GMT+08:00) --&gt;&lt;h1 id=&quot;多任务的概念&quot;&gt;&lt;a href=&quot;#多任务的概念&quot; class=&quot;headerlink&quot; title=&quot;多任务的概念&quot;&gt;&lt;/a&gt;多任务的概念&lt;/h1&gt;&lt;p&gt;简单地说，就是操作系统可以同时运行多个任务。&lt;/p&gt;&lt;p&gt;现在，多核CPU已经非常普及了，但是，即使过去的单核CPU，也可以执行多任务。由于CPU执行代码都是顺序执行的，那么，单核CPU是怎么执行多任务的呢？&lt;/p&gt;&lt;p&gt;答案就是操作系统轮流让各个任务交替执行，任务1执行0.01秒，切换到任务2，任务2执行0.01秒，再切换到任务3，执行0.01秒……这样反复执行下去。表面上看，每个任务都是交替执行的，但是，由于CPU的执行速度实在是太快了，我们感觉就像所有任务都在同时执行一样。&lt;/p&gt;&lt;p&gt;真正的并行执行多任务只能在多核CPU上实现，但是，由于任务数量远远多于CPU的核心数量，所以，操作系统也会自动把很多任务轮流调度到每个核心上执行。&lt;/p&gt;&lt;p&gt;注意：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;并发：指的是任务数多于cpu核数，通过操作系统的各种任务调度算法，实现用多个任务“一起”执行（实际上总有一些任务不在执行，因为切换任务的速度相当快，看上去一起执行而已）&lt;/li&gt;&lt;li&gt;并行：指的是任务数小于等于cpu核数，即任务真的是一起执行的&lt;/li&gt;&lt;/ul&gt;&lt;h1 id=&quot;线程&quot;&gt;&lt;a href=&quot;#线程&quot; class=&quot;headerlink&quot; title=&quot;线程&quot;&gt;&lt;/a&gt;线程&lt;/h1&gt;&lt;p&gt;python的thread模块是比较底层的模块，python的threading模块是对thread做了一些包装的，可以更加方便的被使用&lt;/p&gt;&lt;h2 id=&quot;使用threading模块&quot;&gt;&lt;a href=&quot;#使用threading模块&quot; class=&quot;headerlink&quot; title=&quot;使用threading模块&quot;&gt;&lt;/a&gt;使用threading模块&lt;/h2&gt;&lt;h3 id=&quot;单线程执行&quot;&gt;&lt;a href=&quot;#单线程执行&quot; class=&quot;headerlink&quot; title=&quot;单线程执行&quot;&gt;&lt;/a&gt;单线程执行&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#coding=utf-8&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; time&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;saySorry&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(&lt;span class=&quot;string&quot;&gt;&quot;亲爱的，我错了，我能吃饭了吗？&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    time.sleep(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; __name__ == &lt;span class=&quot;string&quot;&gt;&quot;__main__&quot;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; range(&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        saySorry()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Python" scheme="https://yongnights.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://yongnights.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>多任务_协程</title>
    <link href="https://yongnights.github.io/2019/12/31/%E5%A4%9A%E4%BB%BB%E5%8A%A1_%E5%8D%8F%E7%A8%8B/"/>
    <id>https://yongnights.github.io/2019/12/31/多任务_协程/</id>
    <published>2019-12-31T04:00:48.281Z</published>
    <updated>2019-12-31T04:00:48.282Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Dec 31 2019 13:39:53 GMT+0800 (GMT+08:00) --><h1 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h1><blockquote><p>迭代是访问集合元素的一种方式。迭代器是一个可以记住遍历的位置的对象。迭代器对象从集合的第一个元素开始访问，直到所有的元素被访问完结束。迭代器只能往前不会后退。</p></blockquote><h2 id="1-可迭代对象"><a href="#1-可迭代对象" class="headerlink" title="1. 可迭代对象"></a>1. 可迭代对象</h2><p>我们已经知道可以对list、tuple、str等类型的数据使用for…in…的循环语法从其中依次拿到数据进行使用，我们把这样的过程称为遍历，也叫<strong>迭代</strong>。</p><p><strong>但是，是否所有的数据类型都可以放到for…in…的语句中，然后让for…in…每次从中取出一条数据供我们使用，即供我们迭代吗？</strong></p><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">100</span>:</span><br><span class="line"><span class="meta">... </span>    print(i)</span><br><span class="line">...</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: <span class="string">'int'</span> object <span class="keyword">is</span> <span class="keyword">not</span> iterable</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="comment"># int整型不是iterable，即int整型不是可以迭代的</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 我们自定义一个容器MyList用来存放数据，可以通过add方法向其中添加数据</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">MyList</span><span class="params">(object)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="meta">... </span>            self.container = []</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(self, item)</span>:</span></span><br><span class="line"><span class="meta">... </span>            self.container.append(item)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mylist = MyList()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mylist.add(<span class="number">1</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mylist.add(<span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mylist.add(<span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> num <span class="keyword">in</span> mylist:</span><br><span class="line"><span class="meta">... </span>    print(num)</span><br><span class="line">...</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: <span class="string">'MyList'</span> object <span class="keyword">is</span> <span class="keyword">not</span> iterable</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="comment"># MyList容器的对象也是不能迭代的</span></span><br></pre></td></tr></table></figure><p>我们自定义了一个容器类型MyList，在将一个存放了多个数据的MyList对象放到for…in…的语句中，发现for…in…并不能从中依次取出一条数据返回给我们，也就说我们随便封装了一个可以存放多条数据的类型却并不能被迭代使用。</p><p>我们把可以通过for…in…这类语句迭代读取一条数据供我们使用的对象称之为可迭代对象（Iterable）**。</p><h2 id="2-如何判断一个对象是否可以迭代"><a href="#2-如何判断一个对象是否可以迭代" class="headerlink" title="2. 如何判断一个对象是否可以迭代"></a>2. 如何判断一个对象是否可以迭代</h2><p>可以使用 isinstance() 判断一个对象是否是 Iterable 对象：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">50</span>]: <span class="keyword">from</span> collections <span class="keyword">import</span> Iterable</span><br><span class="line"></span><br><span class="line">In [<span class="number">51</span>]: isinstance([], Iterable)</span><br><span class="line">Out[<span class="number">51</span>]: <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">52</span>]: isinstance(&#123;&#125;, Iterable)</span><br><span class="line">Out[<span class="number">52</span>]: <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">53</span>]: isinstance(<span class="string">'abc'</span>, Iterable)</span><br><span class="line">Out[<span class="number">53</span>]: <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">54</span>]: isinstance(mylist, Iterable)</span><br><span class="line">Out[<span class="number">54</span>]: <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">55</span>]: isinstance(<span class="number">100</span>, Iterable)</span><br><span class="line">Out[<span class="number">55</span>]: <span class="literal">False</span></span><br></pre></td></tr></table></figure><h2 id="3-可迭代对象的本质"><a href="#3-可迭代对象的本质" class="headerlink" title="3. 可迭代对象的本质"></a>3. 可迭代对象的本质</h2><p>我们分析对可迭代对象进行迭代使用的过程，发现每迭代一次（即在for…in…中每循环一次）都会返回对象中的下一条数据，一直向后读取数据直到迭代了所有数据后结束。那么，在这个过程中就应该有一个“人”去记录每次访问到了第几条数据，以便每次迭代都可以返回下一条数据。我们把这个能帮助我们进行数据迭代的“人”称为<strong>迭代器(Iterator)</strong>。</p><p>可迭代对象的本质就是可以向我们提供一个这样的中间“人”即迭代器帮助我们对其进行迭代遍历使用。</p><p>可迭代对象通过<code>__iter__</code>方法向我们提供一个迭代器，我们在迭代一个可迭代对象的时候，实际上就是先获取该对象提供的一个迭代器，然后通过这个迭代器来依次获取对象中的每一个数据.</p><p>那么也就是说，一个具备了<code>__iter__</code>方法的对象，就是一个可迭代对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">MyList</span><span class="params">(object)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="meta">... </span>            self.container = []</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(self, item)</span>:</span></span><br><span class="line"><span class="meta">... </span>            self.container.append(item)</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="meta">... </span>            <span class="string">"""返回一个迭代器"""</span></span><br><span class="line"><span class="meta">... </span>            <span class="comment"># 我们暂时忽略如何构造一个迭代器对象</span></span><br><span class="line"><span class="meta">... </span>            <span class="keyword">pass</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mylist = MyList()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> collections <span class="keyword">import</span> Iterable</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(mylist, Iterable)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="comment"># 这回测试发现添加了__iter__方法的mylist对象已经是一个可迭代对象了</span></span><br></pre></td></tr></table></figure><h2 id="4-iter-函数与next-函数"><a href="#4-iter-函数与next-函数" class="headerlink" title="4. iter()函数与next()函数"></a>4. iter()函数与next()函数</h2><p><strong>list、tuple等都是可迭代对象，我们可以通过iter()函数获取这些可迭代对象的迭代器。然后我们可以对获取到的迭代器不断使用next()函数来获取下一条数据。</strong>iter()函数实际上就是调用了可迭代对象的<code>__iter__</code>方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>li = [<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>, <span class="number">55</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>li_iter = iter(li)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(li_iter)</span><br><span class="line"><span class="number">11</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(li_iter)</span><br><span class="line"><span class="number">22</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(li_iter)</span><br><span class="line"><span class="number">33</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(li_iter)</span><br><span class="line"><span class="number">44</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(li_iter)</span><br><span class="line"><span class="number">55</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(li_iter)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">StopIteration</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p><strong>注意，当我们已经迭代完最后一个数据之后，再次调用next()函数会抛出StopIteration的异常，来告诉我们所有数据都已迭代完成，不用再执行next()函数了。</strong></p><h2 id="5-如何判断一个对象是否是迭代器"><a href="#5-如何判断一个对象是否是迭代器" class="headerlink" title="5. 如何判断一个对象是否是迭代器"></a>5. 如何判断一个对象是否是迭代器</h2><p>可以使用 isinstance() 判断一个对象是否是 Iterator 对象：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">56</span>]: <span class="keyword">from</span> collections <span class="keyword">import</span> Iterator</span><br><span class="line"></span><br><span class="line">In [<span class="number">57</span>]: isinstance([], Iterator)</span><br><span class="line">Out[<span class="number">57</span>]: <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">58</span>]: isinstance(iter([]), Iterator)</span><br><span class="line">Out[<span class="number">58</span>]: <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">59</span>]: isinstance(iter(<span class="string">"abc"</span>), Iterator)</span><br><span class="line">Out[<span class="number">59</span>]: <span class="literal">True</span></span><br></pre></td></tr></table></figure><h2 id="6-迭代器Iterator"><a href="#6-迭代器Iterator" class="headerlink" title="6. 迭代器Iterator"></a>6. 迭代器Iterator</h2><p>通过上面的分析，我们已经知道，迭代器是用来帮助我们记录每次迭代访问到的位置，当我们对迭代器使用next()函数的时候，迭代器会向我们返回它所记录位置的下一个位置的数据。实际上，在使用next()函数的时候，调用的就是迭代器对象的<code>__next__</code>方法（Python3中是对象的<code>__next__</code>方法，Python2中是对象的next()方法）。<strong>所以，我们要想构造一个迭代器，就要实现它的<strong>next</strong>方法</strong>。但这还不够，python要求迭代器本身也是可迭代的，所以我们还要为迭代器实现<code>__iter__</code>方法，而<code>__iter__</code>方法要返回一个迭代器，迭代器自身正是一个迭代器，所以迭代器的<code>__iter__</code>方法返回自身即可。</p><p><strong>一个实现了<strong>iter</strong>方法和<strong>next</strong>方法的对象，就是迭代器。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyList</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""自定义的一个可迭代对象"""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.items = []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(self, val)</span>:</span></span><br><span class="line">        self.items.append(val)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        myiterator = MyIterator(self)</span><br><span class="line">        <span class="keyword">return</span> myiterator</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyIterator</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""自定义的供上面可迭代对象使用的一个迭代器"""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, mylist)</span>:</span></span><br><span class="line">        self.mylist = mylist</span><br><span class="line">        <span class="comment"># current用来记录当前访问到的位置</span></span><br><span class="line">        self.current = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__next__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.current &lt; len(self.mylist.items):</span><br><span class="line">            item = self.mylist.items[self.current]</span><br><span class="line">            self.current += <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> item</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> StopIteration</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    mylist = MyList()</span><br><span class="line">    mylist.add(<span class="number">1</span>)</span><br><span class="line">    mylist.add(<span class="number">2</span>)</span><br><span class="line">    mylist.add(<span class="number">3</span>)</span><br><span class="line">    mylist.add(<span class="number">4</span>)</span><br><span class="line">    mylist.add(<span class="number">5</span>)</span><br><span class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> mylist:</span><br><span class="line">        print(num)</span><br></pre></td></tr></table></figure><h2 id="7-for…in…循环的本质"><a href="#7-for…in…循环的本质" class="headerlink" title="7. for…in…循环的本质"></a>7. for…in…循环的本质</h2><p>for <strong>item</strong> in <strong>Iterable</strong> 循环的本质就是先通过iter()函数获取可迭代对象Iterable的迭代器，然后对获取到的迭代器不断调用next()方法来获取下一个值并将其赋值给item，当遇到StopIteration的异常后循环结束。</p><h2 id="8-迭代器的应用场景"><a href="#8-迭代器的应用场景" class="headerlink" title="8. 迭代器的应用场景"></a>8. 迭代器的应用场景</h2><p>我们发现迭代器最核心的功能就是可以通过next()函数的调用来返回下一个数据值。如果每次返回的数据值不是在一个已有的数据集合中读取的，而是通过程序按照一定的规律计算生成的，那么也就意味着可以不用再依赖一个已有的数据集合，也就是说不用再将所有要迭代的数据都一次性缓存下来供后续依次读取，这样可以节省大量的存储（内存）空间。</p><p>举个例子，比如，数学中有个著名的斐波拉契数列（Fibonacci），数列中第一个数为0，第二个数为1，其后的每一个数都可由前两个数相加得到：</p><p>0, 1, 1, 2, 3, 5, 8, 13, 21, 34, …</p><p>现在我们想要通过for…in…循环来遍历迭代斐波那契数列中的前n个数。那么这个斐波那契数列我们就可以用迭代器来实现，每次迭代都通过数学计算来生成下一个数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FibIterator</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""斐波那契数列迭代器"""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, n)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :param n: int, 指明生成数列的前n个数</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.n = n</span><br><span class="line">        <span class="comment"># current用来保存当前生成到数列中的第几个数了</span></span><br><span class="line">        self.current = <span class="number">0</span></span><br><span class="line">        <span class="comment"># num1用来保存前前一个数，初始值为数列中的第一个数0</span></span><br><span class="line">        self.num1 = <span class="number">0</span></span><br><span class="line">        <span class="comment"># num2用来保存前一个数，初始值为数列中的第二个数1</span></span><br><span class="line">        self.num2 = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__next__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""被next()函数调用来获取下一个数"""</span></span><br><span class="line">        <span class="keyword">if</span> self.current &lt; self.n:</span><br><span class="line">            num = self.num1</span><br><span class="line">            self.num1, self.num2 = self.num2, self.num1+self.num2</span><br><span class="line">            self.current += <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> num</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> StopIteration</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""迭代器的__iter__返回自身即可"""</span></span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    fib = FibIterator(<span class="number">10</span>)</span><br><span class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> fib:</span><br><span class="line">        print(num, end=<span class="string">" "</span>)</span><br></pre></td></tr></table></figure><h2 id="9-并不是只有for循环能接收可迭代对象"><a href="#9-并不是只有for循环能接收可迭代对象" class="headerlink" title="9. 并不是只有for循环能接收可迭代对象"></a>9. 并不是只有for循环能接收可迭代对象</h2><p>除了for循环能接收可迭代对象，list、tuple等也能接收。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">li = list(FibIterator(<span class="number">15</span>))</span><br><span class="line">print(li)</span><br><span class="line">tp = tuple(FibIterator(<span class="number">6</span>))</span><br><span class="line">print(tp)</span><br></pre></td></tr></table></figure><h1 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h1><h2 id="1-生成器"><a href="#1-生成器" class="headerlink" title="1. 生成器"></a>1. 生成器</h2><p>利用迭代器，我们可以在每次迭代获取数据（通过next()方法）时按照特定的规律进行生成。但是我们在实现一个迭代器时，关于当前迭代到的状态需要我们自己记录，进而才能根据当前状态生成下一个数据。为了达到记录当前状态，并配合next()函数进行迭代使用，我们可以采用更简便的语法，即<strong>生成器(generator)。生成器是一类特殊的迭代器</strong>。</p><h2 id="2-创建生成器方法1"><a href="#2-创建生成器方法1" class="headerlink" title="2. 创建生成器方法1"></a>2. 创建生成器方法1</h2><p>要创建一个生成器，有很多种方法。第一种方法很简单，只要把一个列表生成式的 [ ] 改成 ( )</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">15</span>]: L = [ x*<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">5</span>)]</span><br><span class="line"></span><br><span class="line">In [<span class="number">16</span>]: L</span><br><span class="line">Out[<span class="number">16</span>]: [<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">17</span>]: G = ( x*<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line">In [<span class="number">18</span>]: G</span><br><span class="line">Out[<span class="number">18</span>]: &lt;generator object &lt;genexpr&gt; at <span class="number">0x7f626c132db0</span>&gt;</span><br><span class="line"></span><br><span class="line">In [<span class="number">19</span>]:</span><br></pre></td></tr></table></figure><p>创建 L 和 G 的区别仅在于最外层的 [ ] 和 ( ) ， L 是一个列表，而 G 是一个生成器。我们可以直接打印出列表L的每一个元素，而对于生成器G，我们可以按照迭代器的使用方法来使用，即可以通过next()函数、for循环、list()等方法使用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">19</span>]: next(G)</span><br><span class="line">Out[<span class="number">19</span>]: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">20</span>]: next(G)</span><br><span class="line">Out[<span class="number">20</span>]: <span class="number">2</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">21</span>]: next(G)</span><br><span class="line">Out[<span class="number">21</span>]: <span class="number">4</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">22</span>]: next(G)</span><br><span class="line">Out[<span class="number">22</span>]: <span class="number">6</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">23</span>]: next(G)</span><br><span class="line">Out[<span class="number">23</span>]: <span class="number">8</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">24</span>]: next(G)</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">StopIteration                             Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input<span class="number">-24</span><span class="number">-380e167</span>d6934&gt; <span class="keyword">in</span> &lt;module&gt;()</span><br><span class="line">----&gt; 1 next(G)</span><br><span class="line"></span><br><span class="line">StopIteration:</span><br><span class="line"></span><br><span class="line">In [<span class="number">25</span>]:</span><br><span class="line">In [<span class="number">26</span>]: G = ( x*<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line">In [<span class="number">27</span>]: <span class="keyword">for</span> x <span class="keyword">in</span> G:</span><br><span class="line">   ....:     print(x)</span><br><span class="line">   ....:     </span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">28</span>]:</span><br></pre></td></tr></table></figure><h2 id="3-创建生成器方法2"><a href="#3-创建生成器方法2" class="headerlink" title="3. 创建生成器方法2"></a>3. 创建生成器方法2</h2><p>generator非常强大。如果推算的算法比较复杂，用类似列表生成式的 for 循环无法实现的时候，还可以用函数来实现。</p><p>我们仍然用上一节提到的斐波那契数列来举例，回想我们在上一节用迭代器的实现方式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FibIterator</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""斐波那契数列迭代器"""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, n)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :param n: int, 指明生成数列的前n个数</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.n = n</span><br><span class="line">        <span class="comment"># current用来保存当前生成到数列中的第几个数了</span></span><br><span class="line">        self.current = <span class="number">0</span></span><br><span class="line">        <span class="comment"># num1用来保存前前一个数，初始值为数列中的第一个数0</span></span><br><span class="line">        self.num1 = <span class="number">0</span></span><br><span class="line">        <span class="comment"># num2用来保存前一个数，初始值为数列中的第二个数1</span></span><br><span class="line">        self.num2 = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__next__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""被next()函数调用来获取下一个数"""</span></span><br><span class="line">        <span class="keyword">if</span> self.current &lt; self.n:</span><br><span class="line">            num = self.num1</span><br><span class="line">            self.num1, self.num2 = self.num2, self.num1+self.num2</span><br><span class="line">            self.current += <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> num</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> StopIteration</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""迭代器的__iter__返回自身即可"""</span></span><br><span class="line">        <span class="keyword">return</span> self</span><br></pre></td></tr></table></figure><p>注意，在用迭代器实现的方式中，我们要借助几个变量(n、current、num1、num2)来保存迭代的状态。现在我们用生成器来实现一下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">30</span>]: <span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(n)</span>:</span></span><br><span class="line">   ....:     current = <span class="number">0</span></span><br><span class="line">   ....:     num1, num2 = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">   ....:     <span class="keyword">while</span> current &lt; n:</span><br><span class="line">   ....:         num = num1</span><br><span class="line">   ....:         num1, num2 = num2, num1+num2</span><br><span class="line">   ....:         current += <span class="number">1</span></span><br><span class="line">   ....:         <span class="keyword">yield</span> num</span><br><span class="line">   ....:     <span class="keyword">return</span> <span class="string">'done'</span></span><br><span class="line">   ....:</span><br><span class="line"></span><br><span class="line">In [<span class="number">31</span>]: F = fib(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">32</span>]: next(F)</span><br><span class="line">Out[<span class="number">32</span>]: <span class="number">1</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">33</span>]: next(F)</span><br><span class="line">Out[<span class="number">33</span>]: <span class="number">1</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">34</span>]: next(F)</span><br><span class="line">Out[<span class="number">34</span>]: <span class="number">2</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">35</span>]: next(F)</span><br><span class="line">Out[<span class="number">35</span>]: <span class="number">3</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">36</span>]: next(F)</span><br><span class="line">Out[<span class="number">36</span>]: <span class="number">5</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">37</span>]: next(F)</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">StopIteration                             Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input<span class="number">-37</span><span class="number">-8</span>c2b02b4361a&gt; <span class="keyword">in</span> &lt;module&gt;()</span><br><span class="line">----&gt; 1 next(F)</span><br><span class="line"></span><br><span class="line">StopIteration: done</span><br></pre></td></tr></table></figure><p>在使用生成器实现的方式中，我们将原本在迭代器<code>__next__</code>方法中实现的基本逻辑放到一个函数中来实现，但是将每次迭代返回数值的return换成了yield，此时新定义的函数便不再是函数，而是一个<strong>生成器</strong>了。简单来说：只要在def函数中有yield关键字的 就称为 生成器</p><p>此时按照调用函数的方式( 案例中为F = fib(5) )使用生成器就不再是执行函数体了，而是会返回一个生成器对象（ 案例中为F ），然后就可以按照使用迭代器的方式来使用生成器了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">38</span>]: <span class="keyword">for</span> n <span class="keyword">in</span> fib(<span class="number">5</span>):</span><br><span class="line">   ....:     print(n)</span><br><span class="line">   ....:     </span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">39</span>]:</span><br></pre></td></tr></table></figure><p>但是用for循环调用generator时，发现拿不到generator的return语句的返回值。如果想要拿到返回值，必须捕获StopIteration错误，返回值包含在StopIteration的value中：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">39</span>]: g = fib(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">40</span>]: <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">   ....:     <span class="keyword">try</span>:</span><br><span class="line">   ....:         x = next(g)</span><br><span class="line">   ....:         print(<span class="string">"value:%d"</span>%x)      </span><br><span class="line">   ....:     <span class="keyword">except</span> StopIteration <span class="keyword">as</span> e:</span><br><span class="line">   ....:         print(<span class="string">"生成器返回值:%s"</span>%e.value)</span><br><span class="line">   ....:         <span class="keyword">break</span></span><br><span class="line">   ....:     </span><br><span class="line">value:<span class="number">1</span></span><br><span class="line">value:<span class="number">1</span></span><br><span class="line">value:<span class="number">2</span></span><br><span class="line">value:<span class="number">3</span></span><br><span class="line">value:<span class="number">5</span></span><br><span class="line">生成器返回值:done</span><br><span class="line"></span><br><span class="line">In [<span class="number">41</span>]:</span><br></pre></td></tr></table></figure><p>总结</p><ul><li>使用了yield关键字的函数不再是函数，而是生成器。（使用了yield的函数就是生成器）</li><li>yield关键字有两点作用：<ul><li>保存当前运行状态（断点），然后暂停执行，即将生成器（函数）挂起</li><li>将yield关键字后面表达式的值作为返回值返回，此时可以理解为起到了return的作用</li></ul></li><li>可以使用next()函数让生成器从断点处继续执行，即唤醒生成器（函数）</li><li>Python3中的生成器可以使用return返回最终运行的返回值，而Python2中的生成器不允许使用return返回一个返回值（即可以使用return从生成器中退出，但return后不能有任何表达式）。</li></ul><h2 id="4-使用send唤醒"><a href="#4-使用send唤醒" class="headerlink" title="4. 使用send唤醒"></a>4. 使用send唤醒</h2><p>我们除了可以使用next()函数来唤醒生成器继续执行外，还可以使用send()函数来唤醒执行。使用send()函数的一个好处是可以在唤醒的同时向断点处传入一个附加数据。</p><p>例子：执行到yield时，gen函数作用暂时保存，返回i的值; temp接收下次c.send(“python”)，send发送过来的值，c.next()等价c.send(None)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">10</span>]: <span class="function"><span class="keyword">def</span> <span class="title">gen</span><span class="params">()</span>:</span></span><br><span class="line">   ....:     i = <span class="number">0</span></span><br><span class="line">   ....:     <span class="keyword">while</span> i&lt;<span class="number">5</span>:</span><br><span class="line">   ....:         temp = <span class="keyword">yield</span> i</span><br><span class="line">   ....:         print(temp)</span><br><span class="line">   ....:         i+=<span class="number">1</span></span><br><span class="line">   ....:</span><br></pre></td></tr></table></figure><h4 id="使用send"><a href="#使用send" class="headerlink" title="使用send"></a>使用send</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">43</span>]: f = gen()</span><br><span class="line"></span><br><span class="line">In [<span class="number">44</span>]: next(f)</span><br><span class="line">Out[<span class="number">44</span>]: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">45</span>]: f.send(<span class="string">'haha'</span>)</span><br><span class="line">haha</span><br><span class="line">Out[<span class="number">45</span>]: <span class="number">1</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">46</span>]: next(f)</span><br><span class="line"><span class="literal">None</span></span><br><span class="line">Out[<span class="number">46</span>]: <span class="number">2</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">47</span>]: f.send(<span class="string">'haha'</span>)</span><br><span class="line">haha</span><br><span class="line">Out[<span class="number">47</span>]: <span class="number">3</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">48</span>]:</span><br></pre></td></tr></table></figure><h4 id="使用next函数"><a href="#使用next函数" class="headerlink" title="使用next函数"></a>使用next函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">11</span>]: f = gen()</span><br><span class="line"></span><br><span class="line">In [<span class="number">12</span>]: next(f)</span><br><span class="line">Out[<span class="number">12</span>]: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">13</span>]: next(f)</span><br><span class="line"><span class="literal">None</span></span><br><span class="line">Out[<span class="number">13</span>]: <span class="number">1</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">14</span>]: next(f)</span><br><span class="line"><span class="literal">None</span></span><br><span class="line">Out[<span class="number">14</span>]: <span class="number">2</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">15</span>]: next(f)</span><br><span class="line"><span class="literal">None</span></span><br><span class="line">Out[<span class="number">15</span>]: <span class="number">3</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">16</span>]: next(f)</span><br><span class="line"><span class="literal">None</span></span><br><span class="line">Out[<span class="number">16</span>]: <span class="number">4</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">17</span>]: next(f)</span><br><span class="line"><span class="literal">None</span></span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">StopIteration                             Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input<span class="number">-17</span><span class="number">-468</span>f0afdf1b9&gt; <span class="keyword">in</span> &lt;module&gt;()</span><br><span class="line">----&gt; 1 next(f)</span><br><span class="line"></span><br><span class="line">StopIteration:</span><br></pre></td></tr></table></figure><h4 id="使用-next-方法（不常使用）"><a href="#使用-next-方法（不常使用）" class="headerlink" title="使用__next__()方法（不常使用）"></a>使用<code>__next__()</code>方法（不常使用）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">18</span>]: f = gen()</span><br><span class="line"></span><br><span class="line">In [<span class="number">19</span>]: f.__next__()</span><br><span class="line">Out[<span class="number">19</span>]: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">20</span>]: f.__next__()</span><br><span class="line"><span class="literal">None</span></span><br><span class="line">Out[<span class="number">20</span>]: <span class="number">1</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">21</span>]: f.__next__()</span><br><span class="line"><span class="literal">None</span></span><br><span class="line">Out[<span class="number">21</span>]: <span class="number">2</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">22</span>]: f.__next__()</span><br><span class="line"><span class="literal">None</span></span><br><span class="line">Out[<span class="number">22</span>]: <span class="number">3</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">23</span>]: f.__next__()</span><br><span class="line"><span class="literal">None</span></span><br><span class="line">Out[<span class="number">23</span>]: <span class="number">4</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">24</span>]: f.__next__()</span><br><span class="line"><span class="literal">None</span></span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">StopIteration                             Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input<span class="number">-24</span><span class="number">-39</span>ec527346a9&gt; <span class="keyword">in</span> &lt;module&gt;()</span><br><span class="line">----&gt; 1 f.__next__()</span><br><span class="line"></span><br><span class="line">StopIteration:</span><br></pre></td></tr></table></figure><h1 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h1><p>协程，又称微线程，纤程。英文名Coroutine。</p><h2 id="1-协程是啥"><a href="#1-协程是啥" class="headerlink" title="1.协程是啥"></a>1.协程是啥</h2><p>协程是python个中另外一种实现多任务的方式，只不过比线程更小占用更小执行单元（理解为需要的资源）。 为啥说它是一个执行单元，因为它自带CPU上下文。这样只要在合适的时机， 我们可以把一个协程 切换到另一个协程。 只要这个过程中保存或恢复 CPU上下文那么程序还是可以运行的。</p><p>通俗的理解：在一个线程中的某个函数，可以在任何地方保存当前函数的一些临时变量等信息，然后切换到另外一个函数中执行，注意不是通过调用函数的方式做到的，并且切换的次数以及什么时候再切换到原来的函数都由开发者自己确定</p><h2 id="2-协程和线程差异"><a href="#2-协程和线程差异" class="headerlink" title="2.协程和线程差异"></a>2.协程和线程差异</h2><p>在实现多任务时, 线程切换从系统层面远不止保存和恢复 CPU上下文这么简单。 操作系统为了程序运行的高效性每个线程都有自己缓存Cache等等数据，操作系统还会帮你做这些数据的恢复操作。 所以线程的切换非常耗性能。但是协程的切换只是单纯的操作CPU的上下文，所以一秒钟切换个上百万次系统都抗的住。</p><h2 id="3-简单实现协程"><a href="#3-简单实现协程" class="headerlink" title="3.简单实现协程"></a>3.简单实现协程</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        print(<span class="string">"----work1---"</span>)</span><br><span class="line">        <span class="keyword">yield</span></span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work2</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        print(<span class="string">"----work2---"</span>)</span><br><span class="line">        <span class="keyword">yield</span></span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    w1 = work1()</span><br><span class="line">    w2 = work2()</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        next(w1)</span><br><span class="line">        next(w2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">----work1---</span><br><span class="line">----work2---</span><br><span class="line">----work1---</span><br><span class="line">----work2---</span><br><span class="line">----work1---</span><br><span class="line">----work2---</span><br><span class="line">----work1---</span><br><span class="line">----work2---</span><br><span class="line">----work1---</span><br><span class="line">----work2---</span><br><span class="line">----work1---</span><br><span class="line">----work2---</span><br><span class="line">...省略...</span><br></pre></td></tr></table></figure><h1 id="greenlet"><a href="#greenlet" class="headerlink" title="greenlet"></a>greenlet</h1><p>为了更好使用协程来完成多任务，python中的greenlet模块对其封装，从而使得切换任务变的更加简单</p><p>安装方式</p><p>使用如下命令安装greenlet模块:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">sudo pip3 install greenlet</span><br><span class="line">#coding=utf-8</span><br><span class="line"></span><br><span class="line">from greenlet import greenlet</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">def test1():</span><br><span class="line">    while True:</span><br><span class="line">        print &quot;---A--&quot;</span><br><span class="line">        gr2.switch()</span><br><span class="line">        time.sleep(0.5)</span><br><span class="line"></span><br><span class="line">def test2():</span><br><span class="line">    while True:</span><br><span class="line">        print &quot;---B--&quot;</span><br><span class="line">        gr1.switch()</span><br><span class="line">        time.sleep(0.5)</span><br><span class="line"></span><br><span class="line">gr1 = greenlet(test1)</span><br><span class="line">gr2 = greenlet(test2)</span><br><span class="line"></span><br><span class="line">#切换到gr1中运行</span><br><span class="line">gr1.switch()</span><br></pre></td></tr></table></figure><p>运行效果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">---A--</span><br><span class="line">---B--</span><br><span class="line">---A--</span><br><span class="line">---B--</span><br><span class="line">---A--</span><br><span class="line">---B--</span><br><span class="line">---A--</span><br><span class="line">---B--</span><br><span class="line">...省略...</span><br></pre></td></tr></table></figure><h1 id="gevent"><a href="#gevent" class="headerlink" title="gevent"></a>gevent</h1><p>greenlet已经实现了协程，但是这个还的人工切换，是不是觉得太麻烦了，不要捉急，python还有一个比greenlet更强大的并且能够自动切换任务的模块<code>gevent</code></p><p>其原理是当一个greenlet遇到IO(指的是input output 输入输出，比如网络、文件操作等)操作时，比如访问网络，就自动切换到其他的greenlet，等到IO操作完成，再在适当的时候切换回来继续执行。</p><p>由于IO操作非常耗时，经常使程序处于等待状态，有了gevent为我们自动切换协程，就保证总有greenlet在运行，而不是等待IO</p><p>安装</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install gevent</span><br></pre></td></tr></table></figure><h2 id="1-gevent的使用"><a href="#1-gevent的使用" class="headerlink" title="1. gevent的使用"></a>1. gevent的使用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gevent</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">        print(gevent.getcurrent(), i)</span><br><span class="line"></span><br><span class="line">g1 = gevent.spawn(f, <span class="number">5</span>)</span><br><span class="line">g2 = gevent.spawn(f, <span class="number">5</span>)</span><br><span class="line">g3 = gevent.spawn(f, <span class="number">5</span>)</span><br><span class="line">g1.join()</span><br><span class="line">g2.join()</span><br><span class="line">g3.join()</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;Greenlet at <span class="number">0x10e49f550</span>: f(<span class="number">5</span>)&gt; <span class="number">0</span></span><br><span class="line">&lt;Greenlet at <span class="number">0x10e49f550</span>: f(<span class="number">5</span>)&gt; <span class="number">1</span></span><br><span class="line">&lt;Greenlet at <span class="number">0x10e49f550</span>: f(<span class="number">5</span>)&gt; <span class="number">2</span></span><br><span class="line">&lt;Greenlet at <span class="number">0x10e49f550</span>: f(<span class="number">5</span>)&gt; <span class="number">3</span></span><br><span class="line">&lt;Greenlet at <span class="number">0x10e49f550</span>: f(<span class="number">5</span>)&gt; <span class="number">4</span></span><br><span class="line">&lt;Greenlet at <span class="number">0x10e49f910</span>: f(<span class="number">5</span>)&gt; <span class="number">0</span></span><br><span class="line">&lt;Greenlet at <span class="number">0x10e49f910</span>: f(<span class="number">5</span>)&gt; <span class="number">1</span></span><br><span class="line">&lt;Greenlet at <span class="number">0x10e49f910</span>: f(<span class="number">5</span>)&gt; <span class="number">2</span></span><br><span class="line">&lt;Greenlet at <span class="number">0x10e49f910</span>: f(<span class="number">5</span>)&gt; <span class="number">3</span></span><br><span class="line">&lt;Greenlet at <span class="number">0x10e49f910</span>: f(<span class="number">5</span>)&gt; <span class="number">4</span></span><br><span class="line">&lt;Greenlet at <span class="number">0x10e49f4b0</span>: f(<span class="number">5</span>)&gt; <span class="number">0</span></span><br><span class="line">&lt;Greenlet at <span class="number">0x10e49f4b0</span>: f(<span class="number">5</span>)&gt; <span class="number">1</span></span><br><span class="line">&lt;Greenlet at <span class="number">0x10e49f4b0</span>: f(<span class="number">5</span>)&gt; <span class="number">2</span></span><br><span class="line">&lt;Greenlet at <span class="number">0x10e49f4b0</span>: f(<span class="number">5</span>)&gt; <span class="number">3</span></span><br><span class="line">&lt;Greenlet at <span class="number">0x10e49f4b0</span>: f(<span class="number">5</span>)&gt; <span class="number">4</span></span><br></pre></td></tr></table></figure><p>可以看到，3个greenlet是依次运行而不是交替运行</p><h2 id="2-gevent切换执行"><a href="#2-gevent切换执行" class="headerlink" title="2. gevent切换执行"></a>2. gevent切换执行</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gevent</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">        print(gevent.getcurrent(), i)</span><br><span class="line">        <span class="comment">#用来模拟一个耗时操作，注意不是time模块中的sleep</span></span><br><span class="line">        gevent.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">g1 = gevent.spawn(f, <span class="number">5</span>)</span><br><span class="line">g2 = gevent.spawn(f, <span class="number">5</span>)</span><br><span class="line">g3 = gevent.spawn(f, <span class="number">5</span>)</span><br><span class="line">g1.join()</span><br><span class="line">g2.join()</span><br><span class="line">g3.join()</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;Greenlet at <span class="number">0x7fa70ffa1c30</span>: f(<span class="number">5</span>)&gt; <span class="number">0</span></span><br><span class="line">&lt;Greenlet at <span class="number">0x7fa70ffa1870</span>: f(<span class="number">5</span>)&gt; <span class="number">0</span></span><br><span class="line">&lt;Greenlet at <span class="number">0x7fa70ffa1eb0</span>: f(<span class="number">5</span>)&gt; <span class="number">0</span></span><br><span class="line">&lt;Greenlet at <span class="number">0x7fa70ffa1c30</span>: f(<span class="number">5</span>)&gt; <span class="number">1</span></span><br><span class="line">&lt;Greenlet at <span class="number">0x7fa70ffa1870</span>: f(<span class="number">5</span>)&gt; <span class="number">1</span></span><br><span class="line">&lt;Greenlet at <span class="number">0x7fa70ffa1eb0</span>: f(<span class="number">5</span>)&gt; <span class="number">1</span></span><br><span class="line">&lt;Greenlet at <span class="number">0x7fa70ffa1c30</span>: f(<span class="number">5</span>)&gt; <span class="number">2</span></span><br><span class="line">&lt;Greenlet at <span class="number">0x7fa70ffa1870</span>: f(<span class="number">5</span>)&gt; <span class="number">2</span></span><br><span class="line">&lt;Greenlet at <span class="number">0x7fa70ffa1eb0</span>: f(<span class="number">5</span>)&gt; <span class="number">2</span></span><br><span class="line">&lt;Greenlet at <span class="number">0x7fa70ffa1c30</span>: f(<span class="number">5</span>)&gt; <span class="number">3</span></span><br><span class="line">&lt;Greenlet at <span class="number">0x7fa70ffa1870</span>: f(<span class="number">5</span>)&gt; <span class="number">3</span></span><br><span class="line">&lt;Greenlet at <span class="number">0x7fa70ffa1eb0</span>: f(<span class="number">5</span>)&gt; <span class="number">3</span></span><br><span class="line">&lt;Greenlet at <span class="number">0x7fa70ffa1c30</span>: f(<span class="number">5</span>)&gt; <span class="number">4</span></span><br><span class="line">&lt;Greenlet at <span class="number">0x7fa70ffa1870</span>: f(<span class="number">5</span>)&gt; <span class="number">4</span></span><br><span class="line">&lt;Greenlet at <span class="number">0x7fa70ffa1eb0</span>: f(<span class="number">5</span>)&gt; <span class="number">4</span></span><br></pre></td></tr></table></figure><h2 id="3-给程序打补丁"><a href="#3-给程序打补丁" class="headerlink" title="3. 给程序打补丁"></a>3. 给程序打补丁</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gevent <span class="keyword">import</span> monkey</span><br><span class="line"><span class="keyword">import</span> gevent</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">coroutine_work</span><span class="params">(coroutine_name)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        print(coroutine_name, i)</span><br><span class="line">        time.sleep(random.random())</span><br><span class="line"></span><br><span class="line">gevent.joinall([</span><br><span class="line">        gevent.spawn(coroutine_work, <span class="string">"work1"</span>),</span><br><span class="line">        gevent.spawn(coroutine_work, <span class="string">"work2"</span>)</span><br><span class="line">])</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">work1 <span class="number">0</span></span><br><span class="line">work1 <span class="number">1</span></span><br><span class="line">work1 <span class="number">2</span></span><br><span class="line">work1 <span class="number">3</span></span><br><span class="line">work1 <span class="number">4</span></span><br><span class="line">work1 <span class="number">5</span></span><br><span class="line">work1 <span class="number">6</span></span><br><span class="line">work1 <span class="number">7</span></span><br><span class="line">work1 <span class="number">8</span></span><br><span class="line">work1 <span class="number">9</span></span><br><span class="line">work2 <span class="number">0</span></span><br><span class="line">work2 <span class="number">1</span></span><br><span class="line">work2 <span class="number">2</span></span><br><span class="line">work2 <span class="number">3</span></span><br><span class="line">work2 <span class="number">4</span></span><br><span class="line">work2 <span class="number">5</span></span><br><span class="line">work2 <span class="number">6</span></span><br><span class="line">work2 <span class="number">7</span></span><br><span class="line">work2 <span class="number">8</span></span><br><span class="line">work2 <span class="number">9</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">from gevent import monkey</span><br><span class="line">import gevent</span><br><span class="line">import random</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line"># 有耗时操作时需要</span><br><span class="line">monkey.patch_all()  # 将程序中用到的耗时操作的代码，换为gevent中自己实现的模块</span><br><span class="line"></span><br><span class="line">def coroutine_work(coroutine_name):</span><br><span class="line">    for i in range(10):</span><br><span class="line">        print(coroutine_name, i)</span><br><span class="line">        time.sleep(random.random())</span><br><span class="line"></span><br><span class="line">gevent.joinall([</span><br><span class="line">        gevent.spawn(coroutine_work, &quot;work1&quot;),</span><br><span class="line">        gevent.spawn(coroutine_work, &quot;work2&quot;)</span><br><span class="line">])</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">work1 <span class="number">0</span></span><br><span class="line">work2 <span class="number">0</span></span><br><span class="line">work1 <span class="number">1</span></span><br><span class="line">work1 <span class="number">2</span></span><br><span class="line">work1 <span class="number">3</span></span><br><span class="line">work2 <span class="number">1</span></span><br><span class="line">work1 <span class="number">4</span></span><br><span class="line">work2 <span class="number">2</span></span><br><span class="line">work1 <span class="number">5</span></span><br><span class="line">work2 <span class="number">3</span></span><br><span class="line">work1 <span class="number">6</span></span><br><span class="line">work1 <span class="number">7</span></span><br><span class="line">work1 <span class="number">8</span></span><br><span class="line">work2 <span class="number">4</span></span><br><span class="line">work2 <span class="number">5</span></span><br><span class="line">work1 <span class="number">9</span></span><br><span class="line">work2 <span class="number">6</span></span><br><span class="line">work2 <span class="number">7</span></span><br><span class="line">work2 <span class="number">8</span></span><br><span class="line">work2 <span class="number">9</span></span><br></pre></td></tr></table></figure><h2 id="进程、线程、协程对比"><a href="#进程、线程、协程对比" class="headerlink" title="进程、线程、协程对比"></a>进程、线程、协程对比</h2><h4 id="1-请仔细理解如下的通俗描述"><a href="#1-请仔细理解如下的通俗描述" class="headerlink" title="1.请仔细理解如下的通俗描述"></a>1.请仔细理解如下的通俗描述</h4><ul><li>有一个老板想要开个工厂进行生产某件商品（例如剪子）</li><li>他需要花一些财力物力制作一条生产线，这个生产线上有很多的器件以及材料这些所有的 为了能够生产剪子而准备的资源称之为：进程</li><li>只有生产线是不能够进行生产的，所以老板的找个工人来进行生产，这个工人能够利用这些材料最终一步步的将剪子做出来，这个来做事情的工人称之为：线程</li><li>这个老板为了提高生产率，想到3种办法：<ol><li>在这条生产线上多招些工人，一起来做剪子，这样效率是成倍増长，即单进程 多线程方式</li><li>老板发现这条生产线上的工人不是越多越好，因为一条生产线的资源以及材料毕竟有限，所以老板又花了些财力物力购置了另外一条生产线，然后再招些工人这样效率又再一步提高了，即多进程 多线程方式</li><li>老板发现，现在已经有了很多条生产线，并且每条生产线上已经有很多工人了（即程序是多进程的，每个进程中又有多个线程），为了再次提高效率，老板想了个损招，规定：如果某个员工在上班时临时没事或者再等待某些条件（比如等待另一个工人生产完谋道工序 之后他才能再次工作） ，那么这个员工就利用这个时间去做其它的事情，那么也就是说：如果一个线程等待某些条件，可以充分利用这个时间去做其它事情，其实这就是：协程方式</li></ol></li></ul><h4 id="2-简单总结"><a href="#2-简单总结" class="headerlink" title="2.简单总结"></a>2.简单总结</h4><ol><li>进程是资源分配的单位</li><li>线程是操作系统调度的单位</li><li>进程切换需要的资源很最大，效率很低</li><li>线程切换需要的资源一般，效率一般（当然了在不考虑GIL的情况下）</li><li>协程切换任务资源很小，效率高</li><li>多进程、多线程根据cpu核数不一样可能是并行的，但是协程是在一个线程中 所以是并发</li></ol><h2 id="并发下载器"><a href="#并发下载器" class="headerlink" title="并发下载器"></a>并发下载器</h2><h3 id="1-并发下载原理"><a href="#1-并发下载原理" class="headerlink" title="1.并发下载原理"></a>1.并发下载原理</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gevent <span class="keyword">import</span> monkey</span><br><span class="line"><span class="keyword">import</span> gevent</span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line"><span class="comment"># 有耗时操作时需要</span></span><br><span class="line">monkey.patch_all()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_downLoad</span><span class="params">(url)</span>:</span></span><br><span class="line">    print(<span class="string">'GET: %s'</span> % url)</span><br><span class="line">    resp = urllib.request.urlopen(url)</span><br><span class="line">    data = resp.read()</span><br><span class="line">    print(<span class="string">'%d bytes received from %s.'</span> % (len(data), url))</span><br><span class="line"></span><br><span class="line">gevent.joinall([</span><br><span class="line">        gevent.spawn(my_downLoad, <span class="string">'http://www.baidu.com/'</span>),</span><br><span class="line">        gevent.spawn(my_downLoad, <span class="string">'http://www.itcast.cn/'</span>),</span><br><span class="line">        gevent.spawn(my_downLoad, <span class="string">'http://www.itheima.com/'</span>),</span><br><span class="line">])</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">GET: http://www.baidu.com/</span><br><span class="line">GET: http://www.itcast.cn/</span><br><span class="line">GET: http://www.itheima.com/</span><br><span class="line"><span class="number">111327</span> bytes received <span class="keyword">from</span> http://www.baidu.com/.</span><br><span class="line"><span class="number">172054</span> bytes received <span class="keyword">from</span> http://www.itheima.com/.</span><br><span class="line"><span class="number">215035</span> bytes received <span class="keyword">from</span> http://www.itcast.cn/.</span><br></pre></td></tr></table></figure><p>从上能够看到是先发送的获取baidu的相关信息，然后依次是itcast、itheima，但是收到数据的先后顺序不一定与发送顺序相同，这也就体现出了异步，即不确定什么时候会收到数据，顺序不一定</p><h3 id="2-实现多个视频下载"><a href="#2-实现多个视频下载" class="headerlink" title="2.实现多个视频下载"></a>2.实现多个视频下载</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gevent <span class="keyword">import</span> monkey</span><br><span class="line"><span class="keyword">import</span> gevent</span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line"><span class="comment">#有IO才做时需要这一句</span></span><br><span class="line">monkey.patch_all()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_downLoad</span><span class="params">(file_name, url)</span>:</span></span><br><span class="line">    print(<span class="string">'GET: %s'</span> % url)</span><br><span class="line">    resp = urllib.request.urlopen(url)</span><br><span class="line">    data = resp.read()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> open(file_name, <span class="string">"wb"</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(data)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'%d bytes received from %s.'</span> % (len(data), url))</span><br><span class="line"></span><br><span class="line">gevent.joinall([</span><br><span class="line">        gevent.spawn(my_downLoad, <span class="string">"1.mp4"</span>, <span class="string">'http://oo52bgdsl.bkt.clouddn.com/05day-08-%E3%80%90%E7%90%86%E8%A7%A3%E3%80%91%E5%87%BD%E6%95%B0%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93%EF%BC%88%E4%B8%80%EF%BC%89.mp4'</span>),</span><br><span class="line">        gevent.spawn(my_downLoad, <span class="string">"2.mp4"</span>, <span class="string">'http://oo52bgdsl.bkt.clouddn.com/05day-03-%E3%80%90%E6%8E%8C%E6%8F%A1%E3%80%91%E6%97%A0%E5%8F%82%E6%95%B0%E6%97%A0%E8%BF%94%E5%9B%9E%E5%80%BC%E5%87%BD%E6%95%B0%E7%9A%84%E5%AE%9A%E4%B9%89%E3%80%81%E8%B0%83%E7%94%A8%28%E4%B8%8B%29.mp4'</span>),</span><br><span class="line">])</span><br></pre></td></tr></table></figure><p>上面的url可以换为自己需要下载视频、音乐、图片等网址</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Dec 31 2019 13:39:53 GMT+0800 (GMT+08:00) --&gt;&lt;h1 id=&quot;迭代器&quot;&gt;&lt;a href=&quot;#迭代器&quot; class=&quot;headerlink&quot; title=&quot;迭代器&quot;&gt;&lt;/a&gt;迭代器&lt;/h1&gt;&lt;blockquote&gt;&lt;p&gt;迭代是访问集合元素的一种方式。迭代器是一个可以记住遍历的位置的对象。迭代器对象从集合的第一个元素开始访问，直到所有的元素被访问完结束。迭代器只能往前不会后退。&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id=&quot;1-可迭代对象&quot;&gt;&lt;a href=&quot;#1-可迭代对象&quot; class=&quot;headerlink&quot; title=&quot;1. 可迭代对象&quot;&gt;&lt;/a&gt;1. 可迭代对象&lt;/h2&gt;&lt;p&gt;我们已经知道可以对list、tuple、str等类型的数据使用for…in…的循环语法从其中依次拿到数据进行使用，我们把这样的过程称为遍历，也叫&lt;strong&gt;迭代&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;但是，是否所有的数据类型都可以放到for…in…的语句中，然后让for…in…每次从中取出一条数据供我们使用，即供我们迭代吗？&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://yongnights.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://yongnights.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>在pandas.DataFrame.to_sql时指定数据库表的列类型</title>
    <link href="https://yongnights.github.io/2019/12/31/%E5%9C%A8pandas.DataFrame.to_sql%E6%97%B6%E6%8C%87%E5%AE%9A%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A1%A8%E7%9A%84%E5%88%97%E7%B1%BB%E5%9E%8B/"/>
    <id>https://yongnights.github.io/2019/12/31/在pandas.DataFrame.to_sql时指定数据库表的列类型/</id>
    <published>2019-12-31T04:00:48.280Z</published>
    <updated>2019-12-31T04:00:48.281Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Dec 31 2019 13:39:53 GMT+0800 (GMT+08:00) --><p>该文章转载自以下链接：<a href="https://www.jianshu.com/p/4c5e1ebe8470?utm_source=oschina-app" target="_blank" rel="noopener">https://www.jianshu.com/p/4c5e1ebe8470?utm_source=oschina-app</a></p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>在数据分析并存储到数据库时，Python的Pandas包提供了to_sql 方法使存储的过程更为便捷，但如果在使用to_sql方法前不在数据库建好相对应的表，to_sql则会默认为你创建一个新表，这时新表的列类型可能并不是你期望的。例如我们通过下段代码往数据库中插入一部分数据：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame([[<span class="string">'a'</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2.0</span>, datetime.now(), <span class="literal">True</span>]], </span><br><span class="line">                  columns=[<span class="string">'str'</span>, <span class="string">'int'</span>, <span class="string">'float'</span>, <span class="string">'datetime'</span>, <span class="string">'boolean'</span>])</span><br><span class="line">print(df.dtypes)</span><br></pre></td></tr></table></figure><p></p><a id="more"></a><p>通过dtypes可知数据类型为object, int64, float64, datetime64[ns], bool 如果把数据通过to_sql方法插入到数据库中：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line">engine = create_engine(<span class="string">"mysql+mysqldb://&#123;&#125;:&#123;&#125;@&#123;&#125;/&#123;&#125;"</span>.format(<span class="string">'username'</span>, <span class="string">'password'</span>, <span class="string">'host:port'</span>, <span class="string">'database'</span>))</span><br><span class="line">con = engine.connect()</span><br><span class="line"></span><br><span class="line">df.to_sql(name=<span class="string">'test'</span>, con=con, if_exists=<span class="string">'append'</span>, index=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p></p><p>用MySQL的desc可以发现数据库自动创建了表并默认指定了列的格式：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在MySQL中查看表的列类型</span></span><br><span class="line">desc <span class="built_in">test</span>;</span><br></pre></td></tr></table></figure><p></p><table><thead><tr><th>Filed</th><th>Type</th><th>Null</th><th>Key</th><th>Default</th><th>Extra</th></tr></thead><tbody><tr><td>str</td><td>text</td><td>YES</td><td></td><td>NULL</td><td></td></tr><tr><td>int</td><td>bigint(20)</td><td>YES</td><td></td><td>NULL</td><td></td></tr><tr><td>float</td><td>double</td><td>YES</td><td></td><td>NULL</td><td></td></tr><tr><td>datetime</td><td>datetime</td><td>YES</td><td></td><td>NULL</td><td></td></tr><tr><td>boolean</td><td>tinyint(1)</td><td>YES</td><td></td><td>NULL</td></tr></tbody></table><p>其中str类型的数据在数据库表中被映射成text，int类型被映射成bigint(20)， float类型被映射成double类型。数据库中的列类型可能并非是我们所期望的格式，但我们又不想在数据插入前手动的创建数据库的表，而更希望根据DataFrame中数据的格式动态地改变数据库中表格式。</p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>通过查阅pandas.DataFrame.to_sql的api文档[^footnote]，可以通过指定dtype 参数值来改变数据库中创建表的列类型。</p><blockquote><p>dtype : dict of column name to SQL type, default None<br>Optional specifying the datatype for columns. The SQL type should be a SQLAlchemy type, or a string for sqlite3 fallback connection.</p></blockquote><p>根据描述，可以在执行to_sql方法时，将映射好列名和指定类型的dict赋值给dtype参数即可上，其中对于MySQL表的列类型可以使用SQLAlchemy包中封装好的类型。<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 执行前先在MySQL中删除表</span></span><br><span class="line">drop table <span class="built_in">test</span>;</span><br></pre></td></tr></table></figure><p></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy.types <span class="keyword">import</span> NVARCHAR, Float, Integer</span><br><span class="line"></span><br><span class="line">dtypedict = &#123;</span><br><span class="line">  <span class="string">'str'</span>: NVARCHAR(length=<span class="number">255</span>),</span><br><span class="line">  <span class="string">'int'</span>: Integer(),</span><br><span class="line">  <span class="string">'float'</span> Float()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">df.to_sql(name=<span class="string">'test'</span>, con=con, if_exists=<span class="string">'append'</span>, index=<span class="literal">False</span>, dtype=dtypedict)</span><br></pre></td></tr></table></figure><p>更新代码后，再查看数据库，可以看到数据库在建表时会根据dtypedict中的列名来指定相应的类型。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在MySQL中查看表的列类型</span></span><br><span class="line">desc <span class="built_in">test</span>;</span><br></pre></td></tr></table></figure><table><thead><tr><th>Filed</th><th>Type</th><th>Null</th><th>Key</th><th>Default</th><th>Extra</th></tr></thead><tbody><tr><td>str</td><td>varchar(255)</td><td>YES</td><td></td><td>NULL</td><td></td></tr><tr><td>int</td><td>int(11)</td><td>YES</td><td></td><td>NULL</td><td></td></tr><tr><td>float</td><td>float</td><td>YES</td><td></td><td>NULL</td><td></td></tr><tr><td>datetime</td><td>datetime</td><td>YES</td><td></td><td>NULL</td><td></td></tr><tr><td>boolean</td><td>tinyint(1)</td><td>YES</td><td></td><td>NULL</td></tr></tbody></table><h1 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h1><p>通过分析，我们已经知道在执行to_sql的方法时，可以通过创建一个类似“{“column_name”：sqlalchemy_type}”的映射结构来控制数据库中表的列类型。但在实际使用时，我们更希望能通过pandas.DataFrame中的column的数据类型来映射数据库中的列类型，而不是每此都要列出pandas.DataFrame的column名字。<br>写一个简单的def将pandas.DataFrame中列名和预指定的类型映射起来即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mapping_df_types</span><span class="params">(df)</span>:</span></span><br><span class="line">    dtypedict = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i, j <span class="keyword">in</span> zip(df.columns, df.dtypes):</span><br><span class="line">        <span class="keyword">if</span> <span class="string">"object"</span> <span class="keyword">in</span> str(j):</span><br><span class="line">            dtypedict.update(&#123;i: NVARCHAR(length=<span class="number">255</span>)&#125;)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">"float"</span> <span class="keyword">in</span> str(j):</span><br><span class="line">            dtypedict.update(&#123;i: Float(precision=<span class="number">2</span>, asdecimal=<span class="literal">True</span>)&#125;)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">"int"</span> <span class="keyword">in</span> str(j):</span><br><span class="line">            dtypedict.update(&#123;i: Integer()&#125;)</span><br><span class="line">    <span class="keyword">return</span> dtypedict</span><br></pre></td></tr></table></figure><p>只要在执行to_sql前使用此方法获得一个映射dict再赋值给to_sql的dtype参数即可，执行的结果与上一节相同，不再累述。<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">df = pd.DataFrame([[<span class="string">'a'</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2.0</span>, datetime.now(), <span class="literal">True</span>]], </span><br><span class="line">                  columns=[<span class="string">'str'</span>, <span class="string">'int'</span>, <span class="string">'float'</span>, <span class="string">'datetime'</span>, <span class="string">'boolean'</span>])</span><br><span class="line">dtypedict = mapping_df_types(df)</span><br><span class="line">df.to_sql(name=<span class="string">'test'</span>, con=con, if_exists=<span class="string">'append'</span>, index=<span class="literal">False</span>, dtype=dtypedict)</span><br></pre></td></tr></table></figure><p></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li>[^footnote]<a href="https://link.jianshu.com/?t=https%3A%2F%2Fpandas.pydata.org%2Fpandas-docs%2Fstable%2Findex.html" target="_blank" rel="noopener">pandas官方文档</a></li></ol><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Dec 31 2019 13:39:53 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;该文章转载自以下链接：&lt;a href=&quot;https://www.jianshu.com/p/4c5e1ebe8470?utm_source=oschina-app&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.jianshu.com/p/4c5e1ebe8470?utm_source=oschina-app&lt;/a&gt;&lt;/p&gt;&lt;h1 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h1&gt;&lt;p&gt;在数据分析并存储到数据库时，Python的Pandas包提供了to_sql 方法使存储的过程更为便捷，但如果在使用to_sql方法前不在数据库建好相对应的表，to_sql则会默认为你创建一个新表，这时新表的列类型可能并不是你期望的。例如我们通过下段代码往数据库中插入一部分数据：&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; pandas &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; pd&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; datetime &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; datetime&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;df = pd.DataFrame([[&lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2.0&lt;/span&gt;, datetime.now(), &lt;span class=&quot;literal&quot;&gt;True&lt;/span&gt;]], &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  columns=[&lt;span class=&quot;string&quot;&gt;&#39;str&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;int&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;float&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;datetime&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;boolean&#39;&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(df.dtypes)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://yongnights.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://yongnights.github.io/tags/Python/"/>
    
      <category term="pandas" scheme="https://yongnights.github.io/tags/pandas/"/>
    
  </entry>
  
  <entry>
    <title>前端知识汇总</title>
    <link href="https://yongnights.github.io/2019/12/31/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E6%B1%87%E6%80%BB/"/>
    <id>https://yongnights.github.io/2019/12/31/前端知识汇总/</id>
    <published>2019-12-31T04:00:48.279Z</published>
    <updated>2019-12-31T04:00:48.280Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Dec 31 2019 13:39:55 GMT+0800 (GMT+08:00) --><h1 id="1-前端开发概述"><a href="#1-前端开发概述" class="headerlink" title="1. 前端开发概述"></a>1. 前端开发概述</h1><p>包括html、css、PC端及移动端布局技巧、javascript、jquery、js特效制作、ajax前后台交互等。</p><h2 id="1-1-什么是前端开发？"><a href="#1-1-什么是前端开发？" class="headerlink" title="1.1 什么是前端开发？"></a>1.1 什么是前端开发？</h2><p>前端开发也叫做web前端开发，它指的是基于web的互联网产品的页面(也可叫界面)开发及功能开发。</p><h2 id="1-2-什么互联网产品？"><a href="#1-2-什么互联网产品？" class="headerlink" title="1.2 什么互联网产品？"></a>1.2 什么互联网产品？</h2><p>互联网产品就是指网站为满足用户需求而创建的用于运营的功能及服务，百度搜索、淘宝、QQ、微博、网易邮箱等都是互联网产品。</p><h2 id="1-3-互联网产品开发流程及前端开发岗位？"><a href="#1-3-互联网产品开发流程及前端开发岗位？" class="headerlink" title="1.3 互联网产品开发流程及前端开发岗位？"></a>1.3 互联网产品开发流程及前端开发岗位？</h2><p><img src="/qianduan_images/001.jpg" alt></p><h2 id="1-4-前端开发需要哪些技术？"><a href="#1-4-前端开发需要哪些技术？" class="headerlink" title="1.4 前端开发需要哪些技术？"></a>1.4 前端开发需要哪些技术？</h2><p>前端工程师参照产品的效果图来开发页面(也可叫界面)，效果图是由UI设计师用Photoshop(少量设计师用firework)来设计的，为了方便与UI设计师对接工作，前端需要掌握一些Photoshop的技能，Photoshop还可以辅助页面开发。把效果图布局成页面，需要用到HTML语言和CSS语言，页面功能的开发需要用到javascript,为了快速开发和系统开发，还需要学习一些前端的javascript库和框架。</p><a id="more"></a><h1 id="2-HTML"><a href="#2-HTML" class="headerlink" title="2. HTML"></a>2. HTML</h1><h2 id="2-1-html概述和基本结构"><a href="#2-1-html概述和基本结构" class="headerlink" title="2.1 html概述和基本结构"></a>2.1 html概述和基本结构</h2><h3 id="2-1-1-html概述"><a href="#2-1-1-html概述" class="headerlink" title="2.1.1 html概述"></a>2.1.1 html概述</h3><p>HTML是 HyperText Mark-up Language 的首字母简写，意思是超文本标记语言，超文本指的是超链接，标记指的是标签，是一种用来制作网页的语言，这种语言由一个个的标签组成，用这种语言制作的文件保存的是一个文本文件，文件的扩展名为html或者htm，一个html文件就是一个网页，html文件用编辑器打开显示的是文本，可以用文本的方式编辑它，如果用浏览器打开，浏览器会按照标签描述内容将文件渲染成网页，显示的网页可以从一个网页链接跳转到另外一个网页。</p><h3 id="2-1-2-html基本结构"><a href="#2-1-2-html基本结构" class="headerlink" title="2.1.2 html基本结构"></a>2.1.2 html基本结构</h3><p>一个html的基本结构如下：<br></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span>            </span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>网页标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">          网页显示内容</span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>第一行是文档声明，第二行“</p><html>”标签和最后一行“</html>”定义html文档的整体，“<html>”标签中的‘lang=“en”’定义网页的语言为英文，定义成中文是’lang=”zh-CN”‘,不定义也没什么影响，它一般作为分析统计用。 “<head><meta name="generator" content="Hexo 3.9.0">”标签和“</head><body>”标签是它的第一层子元素，“<head><meta name="generator" content="Hexo 3.9.0">”标签里面负责对网页进行一些设置以及定义标题，设置包括定义网页的编码格式，外链css样式文件和javascript文件等，设置的内容不会显示在网页上，标题的内容会显示在标题，“</head><body>”内编写网页上显示的内容。</body><script src="/live2dw/lib/L2Dwidget.min.js?0c58a1486de42ac6cc1c59c7d98ae887"></script><script>L2Dwidget.init({"log":false,"pluginJsPath":"lib/","pluginModelPath":"assets/","pluginRootPath":"live2dw/","tagMode":false});</script></body></html><p></p><h3 id="2-1-3-HTML文档类型"><a href="#2-1-3-HTML文档类型" class="headerlink" title="2.1.3 HTML文档类型"></a>2.1.3 HTML文档类型</h3><p>目前常用的两种文档类型是xhtml 1.0和html5</p><h4 id="xhtml-1-0"><a href="#xhtml-1-0" class="headerlink" title="xhtml 1.0"></a>xhtml 1.0</h4><p>xhtml 1.0 是html5之前的一个常用的版本，目前许多网站仍然使用此版本。<br>此版本文档用sublime text创建方法： html:xt + tab<br>文档示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/1999/xhtml"</span> <span class="attr">xml:lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html;charset=UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span> xhtml 1.0 文档类型 <span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="html5"><a href="#html5" class="headerlink" title="html5"></a>html5</h4><p>pc端可以使用xhtml 1.0，也可以使用html5，html5是向下兼容的<br>此版本文档用sublime text创建方法： html:5 + tab 或者 ! + tab<br>文档示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span> html5文档类型 <span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="两种文档的区别"><a href="#两种文档的区别" class="headerlink" title="两种文档的区别"></a>两种文档的区别</h4><p>1、文档声明和编码声明<br>2、html5新增了标签元素以及元素属性</p><h4 id="html注释"><a href="#html注释" class="headerlink" title="html注释"></a>html注释</h4><p>html文档代码中可以插入注释，注释是对代码的说明和解释，注释的内容不会显示在页面上，html代码中插入注释的方法是：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 这是一段注释  --&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-2-html标题标签"><a href="#2-2-html标题标签" class="headerlink" title="2.2 html标题标签"></a>2.2 html标题标签</h2><p>通过 <code>&lt;h1&gt;</code>、<code>&lt;h2&gt;</code>、<code>&lt;h3&gt;</code>、<code>&lt;h4&gt;</code>、<code>&lt;h5&gt;</code>、<code>&lt;h6&gt;</code>,标签可以在网页上定义6种级别的标题。6种级别的标题表示文档的6级目录层级关系，比如说： <code>&lt;h1&gt;</code>用作主标题，其后是 <code>&lt;h2&gt;</code>，再其次是 <code>&lt;h3&gt;</code>，以此类推。搜索引擎会使用标题将网页的结构和内容编制索引，所以网页上使用标题是很重要的。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是一级标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>这是二级标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>这是三级标题<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-3-html段落标签、换行标签与字符实体"><a href="#2-3-html段落标签、换行标签与字符实体" class="headerlink" title="2.3 html段落标签、换行标签与字符实体"></a>2.3 html段落标签、换行标签与字符实体</h2><h3 id="2-3-1-html段落标签"><a href="#2-3-1-html段落标签" class="headerlink" title="2.3.1 html段落标签"></a>2.3.1 html段落标签</h3><p><code>&lt;p&gt;</code>标签定义一个文本段落，一个段落含有默认的上下间距，段落之间会用这种默认间距隔开，代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>段落<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>HTML是 HyperText Mark-up Language 的首字母简写，意思是超文本标记语言，超</span><br><span class="line">    文本指的是超链接，标记指的是标签，是一种用来制作网页的语言，这种语言由一个个的</span><br><span class="line">    标签组成，用这种语言制作的文件保存的是一个文本文件，文件的扩展名为html或者htm。</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>一个html文件就是一个网页，html文件用编辑器打开显示的是文本，可以用文本的方</span><br><span class="line">    式编辑它，如果用浏览器打开，浏览器会按照标签描述内容将文件渲染成网页，显示的网</span><br><span class="line">    页可以从一个网页链接跳转到另外一个网页。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-3-2-html换行标签"><a href="#2-3-2-html换行标签" class="headerlink" title="2.3.2 html换行标签"></a>2.3.2 html换行标签</h3><p>代码中成段的文字，直接在代码中回车换行，在渲染成网页时候不认这种换行，如果真想换行，可以在代码的段落中插入<code>&lt;br /&gt;</code>来强制换行，代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">一个html文件就是一个网页，html文件用编辑器打开显示的是文本，可以用<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">文本的方式编辑它，如果用浏览器打开，浏览器会按照标签描述内容将文件<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">渲染成网页，显示的网页可以从一个网页链接跳转到另外一个网页。</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-3-3-html字符实体"><a href="#2-3-3-html字符实体" class="headerlink" title="2.3.3 html字符实体"></a>2.3.3 html字符实体</h3><p>代码中成段的文字，如果文字间想空多个空格，在代码中空多个空格，在渲染成网页时只会显示一个空格，如果想显示多个空格，可以使用空格的字符实体,代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--  在段落前想缩进两个文字的空格，使用空格的字符实体：&amp;nbsp;   --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">&amp;nbsp;&amp;nbsp;一个html文件就是一个网页，html文件用编辑器打开显示的是文本，可以用<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">文本的方式编辑它，如果用浏览器打开，浏览器会按照标签描述内容将文件<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">渲染成网页，显示的网页可以从一个网页链接跳转到另外一个网页。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在网页上显示 “&lt;” 和 “&gt;” 会误认为是标签，想在网页上显示“&lt;”和“&gt;”可以使用它们的字符实体，比如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- “&lt;” 和 “&gt;” 的字符实体为 &amp;lt; 和 &amp;gt;  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    3 &amp;lt; 5 <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    10 &amp;gt; 5</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-4-html块标签、含样式的标签"><a href="#2-4-html块标签、含样式的标签" class="headerlink" title="2.4 html块标签、含样式的标签"></a>2.4 html块标签、含样式的标签</h2><h3 id="2-4-1-html块标签"><a href="#2-4-1-html块标签" class="headerlink" title="2.4.1 html块标签"></a>2.4.1 html块标签</h3><p>1、<code>&lt;div&gt;</code> 标签 块元素，表示一块内容，没有任何样式，不表示具体的语义，里面可以嵌套其他标签。<br>2、<code>&lt;span&gt;</code> 标签 行内元素，表示一行中的一小段内容，没有具体的语义。</p><h3 id="2-4-2-含样式和语义的标签"><a href="#2-4-2-含样式和语义的标签" class="headerlink" title="2.4.2 含样式和语义的标签"></a>2.4.2 含样式和语义的标签</h3><p>1、<code>&lt;em&gt;</code> 标签 行内元素，表示语气中的强调词<br>2、<code>&lt;i&gt;</code> 标签 行内元素，表示专业词汇<br>3、<code>&lt;b&gt;</code> 标签 行内元素，表示文档中的关键字或者产品名<br>4、<code>&lt;strong&gt;</code> 标签 行内元素，表示非常重要的内容</p><h3 id="2-4-3-语义化的标签"><a href="#2-4-3-语义化的标签" class="headerlink" title="2.4.3 语义化的标签"></a>2.4.3 语义化的标签</h3><p>语义化的标签，就是在布局的时候多使用有语义的标签，搜索引擎在爬网的时候能认识这些标签，理解文档的结构，方便网站的收录。比如：h1标签是表示标题，p标签是表示段落，ul、li标签是表示列表，a标签表示链接，dl、dt、dd表示定义列表等，语义化的标签不多。</p><h2 id="2-5-html图像标签、绝对路径和相对路径"><a href="#2-5-html图像标签、绝对路径和相对路径" class="headerlink" title="2.5 html图像标签、绝对路径和相对路径"></a>2.5 html图像标签、绝对路径和相对路径</h2><h3 id="2-5-1-html图像标签"><a href="#2-5-1-html图像标签" class="headerlink" title="2.5.1 html图像标签"></a>2.5.1 html图像标签</h3><p><code>&lt;img&gt;</code>标签可以在网页上插入一张图片，它是独立使用的标签，它的常用属性有：</p><ul><li>src属性 定义图片的引用地址</li><li>alt属性 定义图片加载失败时显示的文字，搜索引擎会使用这个文字收录图片、盲人读屏软件会读取这个文字让盲人识别图片，所以此属性非常重要。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/pic.jpg"</span> <span class="attr">alt</span>=<span class="string">"产品图片"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-5-2-绝对路径和相对路径"><a href="#2-5-2-绝对路径和相对路径" class="headerlink" title="2.5.2 绝对路径和相对路径"></a>2.5.2 绝对路径和相对路径</h3><p>像网页上插入图片这种外部文件，需要定义文件的引用地址，引用外部文件还包括引用外部样式表，javascript等等，引用地址分为绝对地址和相对地址。</p><ul><li>绝对地址：相对于磁盘的位置去定位文件的地址</li><li>相对地址：相对于引用文件本身去定位被引用的文件地址</li></ul><p>绝对地址在整体文件迁移时会因为磁盘和顶层目录的改变而找不到文件，相对路径就没有这个问题。相对路径的定义技巧：</p><ul><li>“ ./ ” 表示当前文件所在目录下，比如：“./pic.jpg” 表示当前目录下的pic.jpg的图片，这个使用时可以省略。</li><li>“ ../ ” 表示当前文件所在目录下的上一级目录，比如：“../images/pic.jpg” 表示当前目录下的上一级目录下的images文件夹中的pic.jpg的图片。</li></ul><h2 id="2-6-html链接标签"><a href="#2-6-html链接标签" class="headerlink" title="2.6 html链接标签"></a>2.6 html链接标签</h2><p><a>标签可以在网页上定义一个链接地址，它的常用属性有：</a></p><ul><li>href属性 定义跳转的地址</li><li>title属性 定义鼠标悬停时弹出的提示文字框</li><li>target属性 定义链接窗口打开的位置<ul><li>target=”_self” 缺省值，新页面替换原来的页面，在原来位置打开</li><li>target=”_blank” 新页面会在新开的一个浏览器窗口打开</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="comment">&lt;!--  # 表示链接到页面顶部   --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.baidu.com/"</span> <span class="attr">title</span>=<span class="string">"跳转的百度网站"</span>&gt;</span>百度一下<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"2.html"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>测试页面2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-7-html列表标签"><a href="#2-7-html列表标签" class="headerlink" title="2.7 html列表标签"></a>2.7 html列表标签</h2><h3 id="2-7-1-有序列表"><a href="#2-7-1-有序列表" class="headerlink" title="2.7.1 有序列表"></a>2.7.1 有序列表</h3><p>在网页上定义一个有编号的内容列表可以用<code>&lt;ol&gt;</code>、<code>&lt;li&gt;</code>配合使用来实现，代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表文字一<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表文字二<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表文字三<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在网页上生成的列表，每条项目上会按1、2、3编号，有序列表在实际开发中较少使用。</p><h3 id="2-7-2-无序列表"><a href="#2-7-2-无序列表" class="headerlink" title="2.7.2 无序列表"></a>2.7.2 无序列表</h3><p>在网页上定义一个无编号的内容列表可以用<code>&lt;ul&gt;</code>、<code>&lt;li&gt;</code>配合使用来实现，代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>新闻标题一<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>新闻标题二<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>新闻标题三<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在网页上生成的列表，每条项目上会有一个小图标，这个小图标在不同浏览器上显示效果不同，所以一般会用样式去掉默认的小图标，如果需要图标，可以用样式自定义图标，从而达到在不同浏览器上显示的效果相同,实际开发中一般用这种列表。</p><p>定义列表通常用于术语的定义。</p><dl>标签表示列表的整体。<dt>标签定义术语的题目。<dd>标签是术语的解释。一个<dl>中可以有多个题目和解释，代码如下：</dl></dd></dt></dl><p></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>前端三大块<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>html<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>负责页面的结构<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>css<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>负责页面的表现<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>javascript<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>负责页面的行为<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-8-html表单"><a href="#2-8-html表单" class="headerlink" title="2.8 html表单"></a>2.8 html表单</h2><p>表单用于搜集不同类型的用户输入，表单由不同类型的标签组成，相关标签及属性用法如下：</p><p>1、<code>&lt;form&gt;</code>标签 定义整体的表单区域</p><ul><li>action属性 定义表单数据提交地址</li><li>method属性 定义表单提交的方式，一般有“get”方式和“post”方式</li></ul><p>2、<code>&lt;label&gt;</code>标签 为表单元素定义文字标注</p><p>3、<code>&lt;input&gt;</code>标签 定义通用的表单元素</p><ul><li>type属性<ul><li>type=”text” 定义单行文本输入框</li><li>type=”password” 定义密码输入框</li><li>type=”radio” 定义单选框</li><li>type=”checkbox” 定义复选框</li><li>type=”file” 定义上传文件</li><li>type=”submit” 定义提交按钮</li><li>type=”reset” 定义重置按钮</li><li>type=”button” 定义一个普通按钮</li><li>type=”image” 定义图片作为提交按钮，用src属性定义图片地址</li><li>type=”hidden” 定义一个隐藏的表单域，用来存储值</li></ul></li><li>value属性 定义表单元素的值</li><li>name属性 定义表单元素的名称，此名称是提交数据时的键名</li></ul><p>4、<code>&lt;textarea&gt;</code>标签 定义多行文本输入框</p><p>5、<code>&lt;select&gt;</code>标签 定义下拉表单元素</p><p>6、<code>&lt;option&gt;</code>标签 与<code>&lt;select&gt;</code>标签配合，定义下拉表单元素中的选项</p><p>2.8.1 <strong>注册表单实例：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"http://www..."</span> <span class="attr">method</span>=<span class="string">"get"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>姓名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>密码：<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>性别：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"gender"</span> <span class="attr">value</span>=<span class="string">"0"</span> /&gt;</span> 男</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"gender"</span> <span class="attr">value</span>=<span class="string">"1"</span> /&gt;</span> 女</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>爱好：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"like"</span> <span class="attr">value</span>=<span class="string">"sing"</span> /&gt;</span> 唱歌</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"like"</span> <span class="attr">value</span>=<span class="string">"run"</span> /&gt;</span> 跑步</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"like"</span> <span class="attr">value</span>=<span class="string">"swiming"</span> /&gt;</span> 游泳</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>照片：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"person_pic"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>个人描述：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">"about"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>籍贯：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"site"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"0"</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"2"</span>&gt;</span>广州<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"3"</span>&gt;</span>深圳<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- input类型为submit定义提交按钮  </span></span><br><span class="line"><span class="comment">     还可以用图片控件代替submit按钮提交，一般会导致提交两次，不建议使用。如：</span></span><br><span class="line"><span class="comment">     &lt;input type="image" src="xxx.gif"&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"reset"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"重置"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-9-html表格"><a href="#2-9-html表格" class="headerlink" title="2.9 html表格"></a>2.9 html表格</h2><p>1、<code>&lt;table&gt;</code>标签：声明一个表格，它的常用属性如下：</p><ul><li>border属性 定义表格的边框，设置值是数值</li><li>cellpadding属性 定义单元格内容与边框的距离，设置值是数值</li><li>cellspacing属性 定义单元格与单元格之间的距离，设置值是数值</li><li>align属性 设置整体表格相对于浏览器窗口的水平对齐方式,设置值有：left | center | right ，默认left</li></ul><p>2、<code>&lt;tr&gt;</code>标签：定义表格中的一行</p><p>3、<code>&lt;td&gt;</code>和<code>&lt;th&gt;</code>标签：定义一行中的一个单元格，td代表普通单元格，th表示表头单元格，它们的常用属性如下：</p><ul><li>align 设置单元格中内容的水平对齐方式,设置值有：left | center | right ，默认left</li><li>valign 设置单元格中内容的垂直对齐方式 top | middle | bottom ，默认top</li><li>colspan 设置单元格水平合并，设置值是数值</li><li>rowspan 设置单元格垂直合并，设置值是数值</li></ul><p>表格制作练习：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>表格<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span> <span class="attr">width</span>=<span class="string">"600"</span> <span class="attr">height</span>=<span class="string">"300"</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"5"</span>&gt;</span>基本情况<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">"25%"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">"15%"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">"25%"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">"15%"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>  <span class="attr">rowspan</span>=<span class="string">"5"</span> <span class="attr">width</span>=<span class="string">"20%"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">alt</span>=<span class="string">"person"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p>快速创建表格框架<br></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">比如：</span><br><span class="line">1. 输入table后按Tab键，就会出来一个<span class="tag">&lt;<span class="name">table</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">2. 输入table&gt;tr后按Tab键,就会出来一个</span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">3. 输入table&gt;tr&gt;td后按Tab键,就会出来一个</span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">4. 输入table&gt;tr&gt;td*2后按Tab键,就会出来一个</span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">5. 输入table&gt;(tr&gt;td*2)*2后按Tab键,就会出来一个</span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><h2 id="2-10-页面布局概述"><a href="#2-10-页面布局概述" class="headerlink" title="2.10 页面布局概述"></a>2.10 页面布局概述</h2><p>布局也可以叫做排版，它指的是把文字和图片等元素按照我们的意愿有机地排列在页面上，布局的方式分为两种：</p><p>1、table布局：通过table元素将页面空间划分成若干个单元格，将文字或图片等元素放入单元格中，隐藏表格的边框，从而实现布局。这种布局方式也叫传统布局，目前主要使用在EDM(广告邮件中的页面)中，主流的布局方式不用这种。</p><p>2、HTML+CSS布局(DIV+CSS)：主要通过CSS样式设置来布局文字或图片等元素，需要用到CSS盒子模型、盒子类型、CSS浮动、CSS定位、CSS背景图定位等知识来布局，它比传统布局要复杂，目前是主流的布局方式。</p><h2 id="2-11-table布局及实例"><a href="#2-11-table布局及实例" class="headerlink" title="2.11 table布局及实例"></a>2.11 table布局及实例</h2><p>table来做整体页面的布局，布局的技巧归纳为如下几点：</p><p>1、按照设计图的尺寸设置表格的宽高以及单元格的宽高。</p><p>2、将表格border、cellpadding、cellspacing全部设置为0，表格的边框和间距就不占有页面空间，它只起到划分空间的作用。</p><p>3、针对局部复杂的布局，可以在单元格里面再嵌套表格，嵌套表格划分局部的空间。</p><p>4、单元格中的元素或者嵌套的表格用align和valign设置对齐方式</p><p>5、通过属性或者css样式设置单元格中元素的样式</p><h1 id="3-CSS"><a href="#3-CSS" class="headerlink" title="3. CSS"></a>3. CSS</h1><p>CSS是 Cascading Style Sheets 的首字母缩写，意思是层叠样式表。有了CSS，html中大部分表现样式的标签就废弃不用了，html只负责文档的结构和内容，表现形式完全交给CSS，html文档变得更加简洁。</p><h2 id="3-1-css基本语法及页面引用"><a href="#3-1-css基本语法及页面引用" class="headerlink" title="3.1 css基本语法及页面引用"></a>3.1 css基本语法及页面引用</h2><h3 id="3-1-1-css基本语法"><a href="#3-1-1-css基本语法" class="headerlink" title="3.1.1 css基本语法"></a>3.1.1 css基本语法</h3><p>css的定义方法是：</p><p>选择器 { 属性:值; 属性:值; 属性:值;}</p><p>选择器是将样式和页面元素关联起来的名称，属性是希望设置的样式属性每个属性有一个或多个值。代码示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    css注释 ctrl+shift+"/"</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span>&#123; </span><br><span class="line">    <span class="attribute">width</span>:<span class="number">100px</span>; </span><br><span class="line">    <span class="attribute">height</span>:<span class="number">100px</span>; </span><br><span class="line">    <span class="attribute">color</span>:red </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-1-2-css页面引入方法："><a href="#3-1-2-css页面引入方法：" class="headerlink" title="3.1.2 css页面引入方法："></a>3.1.2 css页面引入方法：</h3><p>1、外联式：通过link标签，链接到外部样式表到页面中。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"css/main.css"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、嵌入式：通过style标签，在网页上创建嵌入的样式表。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;style type="text/css"&gt;</span><br><span class="line">    <span class="selector-tag">div</span>&#123; <span class="attribute">width</span>:<span class="number">100px</span>; <span class="attribute">height</span>:<span class="number">100px</span>; <span class="attribute">color</span>:red &#125;</span><br><span class="line">    ......</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>3、内联式：通过标签的style属性，在标签上直接写样式。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"width:100px; height:100px; color:red "</span>&gt;</span>......<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-2-css文本设置"><a href="#3-2-css文本设置" class="headerlink" title="3.2 css文本设置"></a>3.2 css文本设置</h2><p>常用的应用文本的css样式：</p><ul><li>color 设置文字的颜色，如： color:red;</li><li>font-size 设置文字的大小，如：font-size:12px;</li><li>font-family 设置文字的字体，如：font-family:’微软雅黑’;</li><li>font-style 设置字体是否倾斜，如：font-style:’normal’; 设置不倾斜，font-style:’italic’;设置文字倾斜</li><li>font-weight 设置文字是否加粗，如：font-weight:bold; 设置加粗 font-weight:normal 设置不加粗</li><li>line-height 设置文字的行高，设置行高相当于在每行文字的上下同时加间距， 如：line-height:24px;</li><li>font 同时设置文字的几个属性，写的顺序有兼容问题，建议按照如下顺序写： font：是否加粗 字号/行高 字体；如： font:normal 12px/36px ‘微软雅黑’;</li><li>text-decoration 设置文字的下划线，如：text-decoration:none; 将文字下划线去掉</li><li>text-indent 设置文字首行缩进，如：text-indent:24px; 设置文字首行缩进24px</li><li>text-align 设置文字水平对齐方式，如text-align:center 设置文字水平居中</li></ul><h2 id="3-3-css颜色表示法"><a href="#3-3-css颜色表示法" class="headerlink" title="3.3 css颜色表示法"></a>3.3 css颜色表示法</h2><p>css颜色值主要有三种表示方法：</p><p>1、颜色名表示，比如：red 红色，gold 金色</p><p>2、rgb表示，比如：rgb(255,0,0)表示红色</p><p>3、16进制数值表示，比如：#ff0000 表示红色，这种可以简写成 #f00</p><h2 id="3-4-css选择器"><a href="#3-4-css选择器" class="headerlink" title="3.4 css选择器"></a>3.4 css选择器</h2><p>常用的选择器有如下几种：</p><h3 id="3-4-1-标签选择器"><a href="#3-4-1-标签选择器" class="headerlink" title="3.4.1 标签选择器"></a>3.4.1 标签选择器</h3><p>标签选择器，此种选择器影响范围大，建议尽量应用在层级选择器中。<br>举例：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">*&#123;<span class="attribute">margin</span>:<span class="number">0</span>;<span class="attribute">padding</span>:<span class="number">0</span>&#125;</span><br><span class="line"><span class="selector-tag">div</span>&#123;<span class="attribute">color</span>:red&#125;   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;div&gt;....&lt;/div&gt;   &lt;!-- 对应以上两条样式 --&gt;</span><br><span class="line">&lt;div class="box"&gt;....&lt;/div&gt;   &lt;!-- 对应以上两条样式 --&gt;</span><br></pre></td></tr></table></figure><h3 id="3-4-2-id选择器"><a href="#3-4-2-id选择器" class="headerlink" title="3.4.2 id选择器"></a>3.4.2 id选择器</h3><p>通过id名来选择元素，元素的id名称不能重复，所以一个样式设置项只能对应于页面上一个元素，不能复用，id名一般给程序使用，所以不推荐使用id作为选择器。<br>举例：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#box</span>&#123;<span class="attribute">color</span>:red&#125; </span><br><span class="line"></span><br><span class="line">&lt;div id="box"&gt;....&lt;/div&gt;   &lt;!-- 对应以上一条样式，其它元素不允许应用此样式 --&gt;</span><br></pre></td></tr></table></figure><h3 id="3-4-3-类选择器"><a href="#3-4-3-类选择器" class="headerlink" title="3.4.3 类选择器"></a>3.4.3 类选择器</h3><p>通过类名来选择元素，一个类可应用于多个元素，一个元素上也可以使用多个类，应用灵活，可复用，是css中应用最多的一种选择器。<br>举例：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.red</span>&#123;<span class="attribute">color</span>:red&#125;</span><br><span class="line"><span class="selector-class">.big</span>&#123;<span class="attribute">font-size</span>:<span class="number">20px</span>&#125;</span><br><span class="line"><span class="selector-class">.mt10</span>&#123;<span class="attribute">margin-top</span>:<span class="number">10px</span>&#125; </span><br><span class="line"></span><br><span class="line">&lt;div class="red"&gt;....&lt;/div&gt;</span><br><span class="line">&lt;h1 class="red big mt10"&gt;....&lt;/h1&gt;</span><br><span class="line">&lt;p class="red mt10"&gt;....&lt;/p&gt;</span><br></pre></td></tr></table></figure><h3 id="3-4-4-层级选择器"><a href="#3-4-4-层级选择器" class="headerlink" title="3.4.4 层级选择器"></a>3.4.4 层级选择器</h3><p>主要应用在选择父元素下的子元素，或者子元素下面的子元素，可与标签元素结合使用，减少命名，同时也可以通过层级，防止命名冲突。<br>举例：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> <span class="selector-tag">span</span>&#123;<span class="attribute">color</span>:red&#125;</span><br><span class="line"><span class="selector-class">.box</span> <span class="selector-class">.red</span>&#123;<span class="attribute">color</span>:pink&#125;</span><br><span class="line"><span class="selector-class">.red</span>&#123;<span class="attribute">color</span>:red&#125;</span><br><span class="line"></span><br><span class="line">&lt;div class="box"&gt;</span><br><span class="line">    &lt;span&gt;....&lt;/span&gt;</span><br><span class="line">    &lt;a href="#" class="red"&gt;....&lt;/a&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;h3 class="red"&gt;....&lt;/h3&gt;</span><br></pre></td></tr></table></figure><h3 id="3-4-5-组选择器"><a href="#3-4-5-组选择器" class="headerlink" title="3.4.5 组选择器"></a>3.4.5 组选择器</h3><p>多个选择器，如果有同样的样式设置，可以使用组选择器。<br>举例：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box1</span>,<span class="selector-class">.box2</span>,<span class="selector-class">.box3</span>&#123;<span class="attribute">width</span>:<span class="number">100px</span>;<span class="attribute">height</span>:<span class="number">100px</span>&#125;</span><br><span class="line"><span class="selector-class">.box1</span>&#123;<span class="attribute">background</span>:red&#125;</span><br><span class="line"><span class="selector-class">.box2</span>&#123;<span class="attribute">background</span>:pink&#125;</span><br><span class="line"><span class="selector-class">.box3</span>&#123;<span class="attribute">background</span>:gold&#125;</span><br><span class="line"></span><br><span class="line">&lt;div class="box1"&gt;....&lt;/div&gt;</span><br><span class="line">&lt;div class="box2"&gt;....&lt;/div&gt;</span><br><span class="line">&lt;div class="box3"&gt;....&lt;/div&gt;</span><br></pre></td></tr></table></figure><h3 id="3-4-6-伪类及伪元素选择器"><a href="#3-4-6-伪类及伪元素选择器" class="headerlink" title="3.4.6 伪类及伪元素选择器"></a>3.4.6 伪类及伪元素选择器</h3><p>常用的伪类选择器有hover，表示鼠标悬浮在元素上时的状态，伪元素选择器有before和after,它们可以通过样式在元素中插入内容。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box1</span><span class="selector-pseudo">:hover</span>&#123;<span class="attribute">color</span>:red&#125;</span><br><span class="line"><span class="selector-class">.box2</span><span class="selector-pseudo">:before</span>&#123;<span class="attribute">content</span>:<span class="string">'行首文字'</span>;&#125;</span><br><span class="line"><span class="selector-class">.box3</span><span class="selector-pseudo">:after</span>&#123;<span class="attribute">content</span>:<span class="string">'行尾文字'</span>;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;div class="box1"&gt;....&lt;/div&gt;</span><br><span class="line">&lt;div class="box2"&gt;....&lt;/div&gt;</span><br><span class="line">&lt;div class="box3"&gt;....&lt;/div&gt;</span><br></pre></td></tr></table></figure><h2 id="3-5-CSS盒子模型"><a href="#3-5-CSS盒子模型" class="headerlink" title="3.5 CSS盒子模型"></a>3.5 CSS盒子模型</h2><h3 id="3-5-1-盒子模型解释"><a href="#3-5-1-盒子模型解释" class="headerlink" title="3.5.1 盒子模型解释"></a>3.5.1 <strong>盒子模型解释</strong></h3><p>元素(标签)在页面中显示成一个方块，类似一个盒子，CSS盒子模型就是使用现实中盒子来做比喻，帮助我们设置元素对应的样式。盒子模型示意图如下：</p><p><img src="/qianduan_images/002.jpg" alt="盒子模型示例图片"></p><p>把元素叫做盒子，设置对应的样式分别为：盒子的宽度(width)、盒子的高度(height)、盒子的边框(border)、盒子内的内容和边框之间的间距(padding)、盒子与盒子之间的间距(margin)。</p><h3 id="3-5-2-设置宽高"><a href="#3-5-2-设置宽高" class="headerlink" title="3.5.2 设置宽高"></a>3.5.2 <strong>设置宽高</strong></h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">width</span><span class="selector-pseudo">:200px</span>;  <span class="comment">/* 设置盒子的宽度，此宽度是指盒子内容的宽度，不是盒子整体宽度(难点) */</span> </span><br><span class="line"><span class="selector-tag">height</span><span class="selector-pseudo">:200px</span>; <span class="comment">/* 设置盒子的高度，此高度是指盒子内容的高度，不是盒子整体高度(难点) */</span></span><br></pre></td></tr></table></figure><h3 id="3-5-3-设置边框"><a href="#3-5-3-设置边框" class="headerlink" title="3.5.3 设置边框"></a>3.5.3 <strong>设置边框</strong></h3><p>设置一边的边框，比如顶部边框，可以按如下设置：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">border-top-color</span><span class="selector-pseudo">:red</span>;    <span class="comment">/* 设置顶部边框颜色为红色 */</span>  </span><br><span class="line"><span class="selector-tag">border-top-width</span><span class="selector-pseudo">:10px</span>;   <span class="comment">/* 设置顶部边框粗细为10px */</span>   </span><br><span class="line"><span class="selector-tag">border-top-style</span><span class="selector-pseudo">:solid</span>;  <span class="comment">/* 设置顶部边框的线性为实线，常用的有：solid(实线)  </span></span><br><span class="line"><span class="comment">  dashed(虚线)  dotted(点线); */</span></span><br></pre></td></tr></table></figure><p>上面三句可以简写成一句：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">border-top</span><span class="selector-pseudo">:10px</span> <span class="selector-tag">solid</span> <span class="selector-tag">red</span>;  <span class="comment">/* 顺序无所谓，怎么写都可以 */</span></span><br></pre></td></tr></table></figure><p>设置其它三个边的方法和上面一样，把上面的’top’换成’left’就是设置左边，换成’right’就是设置右边，换成’bottom’就是设置底边。</p><p>四个边如果设置一样，可以将四个边的设置合并成一句：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">border</span><span class="selector-pseudo">:10px</span> <span class="selector-tag">solid</span> <span class="selector-tag">red</span>;</span><br></pre></td></tr></table></figure><h3 id="3-5-4-设置内间距padding"><a href="#3-5-4-设置内间距padding" class="headerlink" title="3.5.4 设置内间距padding"></a>3.5.4 <strong>设置内间距padding</strong></h3><p>设置盒子四边的内间距，可设置如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">padding-top</span>：20<span class="selector-tag">px</span>;     <span class="comment">/* 设置顶部内间距20px */</span> </span><br><span class="line"><span class="selector-tag">padding-left</span><span class="selector-pseudo">:30px</span>;     <span class="comment">/* 设置左边内间距30px */</span> </span><br><span class="line"><span class="selector-tag">padding-right</span><span class="selector-pseudo">:40px</span>;    <span class="comment">/* 设置右边内间距40px */</span> </span><br><span class="line"><span class="selector-tag">padding-bottom</span><span class="selector-pseudo">:50px</span>;   <span class="comment">/* 设置底部内间距50px */</span></span><br></pre></td></tr></table></figure><p>上面的设置可以简写如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">padding</span>：20<span class="selector-tag">px</span> 40<span class="selector-tag">px</span> 50<span class="selector-tag">px</span> 30<span class="selector-tag">px</span>; <span class="comment">/* 四个值按照顺时针方向，分别设置的是 上 右 下 左  </span></span><br><span class="line"><span class="comment">四个方向的内边距值。 */</span></span><br></pre></td></tr></table></figure><p>padding后面还可以跟3个值，2个值和1个值，它们分别设置的项目如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">padding</span>：20<span class="selector-tag">px</span> 40<span class="selector-tag">px</span> 50<span class="selector-tag">px</span>; <span class="comment">/* 设置顶部内边距为20px，左右内边距为40px，底部内边距为50px */</span> </span><br><span class="line"><span class="selector-tag">padding</span>：20<span class="selector-tag">px</span> 40<span class="selector-tag">px</span>; <span class="comment">/* 设置上下内边距为20px，左右内边距为40px*/</span> </span><br><span class="line"><span class="selector-tag">padding</span>：20<span class="selector-tag">px</span>; <span class="comment">/* 设置四边内边距为20px */</span></span><br></pre></td></tr></table></figure><h3 id="3-5-5-设置外间距margin"><a href="#3-5-5-设置外间距margin" class="headerlink" title="3.5.5 设置外间距margin"></a>3.5.5 <strong>设置外间距margin</strong></h3><p>外边距的设置方法和padding的设置方法相同，将上面设置项中的’padding’换成’margin’就是外边距设置方法。</p><h3 id="3-5-6-理解练习"><a href="#3-5-6-理解练习" class="headerlink" title="3.5.6 理解练习"></a>3.5.6 <strong>理解练习</strong></h3><p>通过盒子模型的原理，制作下面的盒子：</p><p><img src="/qianduan_images/003.jpg" alt="课堂练习示例图片"></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">140px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">140px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: gold;</span><br><span class="line">    <span class="attribute">border</span>: black <span class="number">10px</span> solid;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;div class="box"&gt;盒子里面的文字内容，距离边框有一定距离。&lt;/div&gt;</span><br></pre></td></tr></table></figure><h2 id="3-6-盒模型的实际尺寸"><a href="#3-6-盒模型的实际尺寸" class="headerlink" title="3.6 盒模型的实际尺寸"></a>3.6 盒模型的实际尺寸</h2><p>按照下面代码制作页面：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="selector-tag">DOCTYPE</span> <span class="selector-tag">html</span>&gt;</span><br><span class="line">&lt;html lang="en"&gt;</span><br><span class="line">&lt;<span class="selector-tag">head</span>&gt;</span><br><span class="line">    &lt;meta charset="UTF-8"&gt;</span><br><span class="line">    &lt;title&gt;盒子的真实尺寸&lt;/title&gt;</span><br><span class="line">    &lt;style type="text/css"&gt;</span><br><span class="line">        <span class="selector-class">.box01</span>&#123;<span class="attribute">width</span>:<span class="number">50px</span>;<span class="attribute">height</span>:<span class="number">50px</span>;<span class="attribute">background-color</span>:gold;&#125;</span><br><span class="line">        <span class="selector-class">.box02</span>&#123;<span class="attribute">width</span>:<span class="number">50px</span>;<span class="attribute">height</span>:<span class="number">50px</span>;<span class="attribute">background-color</span>:gold;<span class="attribute">border</span>:<span class="number">50px</span></span><br><span class="line">         solid <span class="number">#000</span>&#125;</span><br><span class="line">        <span class="selector-class">.box03</span>&#123;<span class="attribute">width</span>:<span class="number">50px</span>;<span class="attribute">height</span>:<span class="number">50px</span>;<span class="attribute">background-color</span>:gold;<span class="attribute">border</span>:<span class="number">50px</span></span><br><span class="line">         solid <span class="number">#000</span>;<span class="attribute">padding</span>: <span class="number">50px</span>;&#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">    &lt;div class="box01"&gt;1&lt;/div&gt;</span><br><span class="line">    &lt;br /&gt;</span><br><span class="line">    &lt;div class="box02"&gt;2&lt;/div&gt;</span><br><span class="line">    &lt;br /&gt;</span><br><span class="line">    &lt;div class="box03"&gt;3&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>页面显示效果如下：<br><img src="/qianduan_images/004.jpg" alt="盒子尺寸示例图片"></p><p>通过上面的页面得出结论：盒子的width和height设置的是盒子内容的宽和高，不是盒子本身的宽和高，盒子的真实尺寸计算公式如下：</p><ul><li>盒子宽度 = width + padding左右 + border左右</li><li>盒子高度 = height + padding上下 + border上下</li></ul><p><strong>理解练习</strong><br>通过盒子模型的原理，制作下面的盒子：</p><p><img src="/qianduan_images/005.jpg" alt="课堂练习示例图片"></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">380px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">35px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">"Microsoft YaHei"</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">    <span class="attribute">border-top</span>: <span class="number">1px</span> solid <span class="number">#ff0000</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">3px</span> solid <span class="number">#666666</span>;</span><br><span class="line">    <span class="attribute">padding-top</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;div class="box"&gt;新闻列表&lt;/div&gt;</span><br></pre></td></tr></table></figure><h2 id="3-7-盒模型使用技巧及相关问题"><a href="#3-7-盒模型使用技巧及相关问题" class="headerlink" title="3.7 盒模型使用技巧及相关问题"></a>3.7 盒模型使用技巧及相关问题</h2><h3 id="3-7-1-margin相关技巧"><a href="#3-7-1-margin相关技巧" class="headerlink" title="3.7.1 margin相关技巧"></a>3.7.1 <strong>margin相关技巧</strong></h3><p>1、设置元素水平居中： margin:x auto;<br>2、margin负值让元素位移及边框合并</p><p><strong>理解练习</strong><br>1、制作一个600*100的盒子，边框1像素黑色，距离浏览器顶部100px，水平居中。<br></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">598px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">98px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> black solid;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;div class="box"&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><p></p><p>2、制作下面的菜单效果：<br><img src="/qianduan_images/006.jpg" alt="课堂练习示例图片"></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">0</span>; <span class="comment">/* body标签本身带有8像素的间隔，需要去掉这个盒子才能贴边 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">150px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">50px</span> auto <span class="number">0</span>; <span class="comment">/* 设置auto表示水平居中 */</span></span><br><span class="line">    <span class="attribute">background-color</span>: gold;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> <span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> green solid;</span><br><span class="line">    <span class="attribute">background-color</span>: gold;</span><br><span class="line">    <span class="attribute">margin-top</span>: -<span class="number">1px</span>; <span class="comment">/* 设置负值表示边框重叠 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;div class="box"&gt;</span><br><span class="line">    &lt;div class="box1"&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class="box2"&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class="box3"&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class="box4"&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class="box5"&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h3 id="3-7-2-外边距合并"><a href="#3-7-2-外边距合并" class="headerlink" title="3.7.2 外边距合并"></a>3.7.2 <strong>外边距合并</strong></h3><p>外边距合并指的是，当两个垂直外边距相遇时，它们将形成一个外边距。合并后的外边距的高度等于两个发生合并的外边距的高度中的较大者。解决方法如下：</p><p>1、使用这种特性<br>2、设置一边的外边距，一般设置margin-top<br>3、将元素浮动或者定位</p><p><strong>理解练习</strong><br>使用div标签制作如下布局:<br><img src="/qianduan_images/007.jpg" alt="课堂练习示例图片"></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">50px</span> auto <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> <span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">20px</span>; <span class="comment">/* 中间的间隔应该是40px,但是因为是合并，实际是20px*/</span></span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 或者使用如下的这个汇总形式</span></span><br><span class="line"><span class="comment">.box div &#123;</span></span><br><span class="line"><span class="comment">    margin: 20px;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">&lt;div class="box"&gt;</span><br><span class="line">    &lt;<span class="selector-tag">div</span>&gt;</span><br><span class="line">        外边距合并指的是，当两个垂直外边距相遇时，它们将形成一个外边距。合并后的外边距的高度等于两个发生合并的外边距的高度中的较大者。</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;<span class="selector-tag">div</span>&gt;</span><br><span class="line">        外边距合并指的是，当两个垂直外边距相遇时，它们将形成一个外边距。合并后的外边距的高度等于两个发生合并的外边距的高度中的较大者。</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;<span class="selector-tag">div</span>&gt;</span><br><span class="line">        外边距合并指的是，当两个垂直外边距相遇时，它们将形成一个外边距。合并后的外边距的高度等于两个发生合并的外边距的高度中的较大者。</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;<span class="selector-tag">div</span>&gt;</span><br><span class="line">        外边距合并指的是，当两个垂直外边距相遇时，它们将形成一个外边距。合并后的外边距的高度等于两个发生合并的外边距的高度中的较大者。</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h3 id="3-7-3-margin-top-塌陷"><a href="#3-7-3-margin-top-塌陷" class="headerlink" title="3.7.3 margin-top 塌陷"></a>3.7.3 <strong>margin-top 塌陷</strong></h3><p>在两个盒子嵌套时候，内部的盒子设置的margin-top会加到外边的盒子上，导致内部的盒子margin-top设置失败，解决方法如下：</p><p>1、外部盒子设置一个边框<br>2、外部盒子设置 overflow:hidden<br>3、使用伪元素类：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:before</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">    <span class="attribute">display</span>:table;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>理解练习</strong><br>分别使用margin间距和padding间距制作下面的例子： <img src="/qianduan_images/008.jpg" alt="课堂练习示例图片"></p><p>第一个图<br></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: gold;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box1</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">120px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: green;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">75px</span> auto <span class="number">40px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;div class="box"&gt;</span><br><span class="line">    &lt;div class="box1"&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p></p><p>第二个图<br></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: gold;</span><br><span class="line">    <span class="comment">/*border: 1px solid black;  第一种解决塌陷的方法：给外部盒子加个边框 */</span></span><br><span class="line">    <span class="comment">/*overflow: hidden; 第二种解决塌陷的方法：处理css外部溢出 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box1</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">120px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: green;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">75px</span> auto <span class="number">40px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span><span class="selector-pseudo">:before</span>&#123; <span class="comment">/* 第三种解决塌陷的方法：使用伪元素类，推荐使用这个*/</span></span><br><span class="line">    <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">    <span class="attribute">display</span>:table;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;div class="box"&gt;</span><br><span class="line">    &lt;div class="box1"&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p></p><h2 id="3-8-css元素溢出"><a href="#3-8-css元素溢出" class="headerlink" title="3.8 css元素溢出"></a>3.8 css元素溢出</h2><p>当子元素的尺寸超过父元素的尺寸时，需要设置父元素显示溢出的子元素的方式，设置的方法是通过overflow属性来设置。</p><p><strong>overflow的设置项：</strong><br>1、visible 默认值。内容不会被修剪，会呈现在元素框之外。<br>2、hidden 内容会被修剪，并且其余内容是不可见的，此属性还有清除浮动、清除margin-top塌陷的功能。<br>3、scroll 内容会被修剪，但是浏览器会显示滚动条以便查看其余的内容。<br>4、auto 如果内容被修剪，则浏览器会显示滚动条以便查看其余的内容。<br>5、inherit 规定应该从父元素继承 overflow 属性的值。</p><p>元素溢出示例：<br><img src="/qianduan_images/009.jpg" alt="课堂练习示例图片"></p><h2 id="3-9-块元素、内联元素、内联块元素"><a href="#3-9-块元素、内联元素、内联块元素" class="headerlink" title="3.9 块元素、内联元素、内联块元素"></a>3.9 块元素、内联元素、内联块元素</h2><p>元素就是标签，布局中常用的有三种标签，块元素、内联元素、内联块元素，了解这三种元素的特性，才能熟练的进行页面布局。</p><h3 id="3-9-1-块元素"><a href="#3-9-1-块元素" class="headerlink" title="3.9.1 块元素"></a>3.9.1 <strong>块元素</strong></h3><p>块元素，也可以称为行元素，布局中常用的标签如：div、p、ul、li、h1~h6、dl、dt、dd等等都是块元素，它在布局中的行为：</p><ul><li>支持全部的样式</li><li>如果没有设置宽度，默认的宽度为父级宽度100%</li><li>盒子占据一行、即使设置了宽度</li></ul><h3 id="3-9-2-内联元素"><a href="#3-9-2-内联元素" class="headerlink" title="3.9.2 内联元素"></a>3.9.2 <strong>内联元素</strong></h3><p>内联元素，也可以称为行内元素，布局中常用的标签如：a、span、em、b、strong、i等等都是内联元素，它们在布局中的行为：</p><ul><li>支持部分样式（不支持宽、高、margin上下、padding上下）</li><li>宽高由内容决定</li><li>盒子并在一行</li><li>代码换行，盒子之间会产生间距</li><li>子元素是内联元素，父元素可以用text-align属性设置子元素水平对齐方式</li></ul><p><strong>解决内联元素间隙的方法</strong><br>1、去掉内联元素之间的换行<br>2、将内联元素的父级设置font-size为0，内联元素自身再设置font-size</p><h3 id="3-9-3-内联块元素"><a href="#3-9-3-内联块元素" class="headerlink" title="3.9.3 内联块元素"></a>3.9.3 <strong>内联块元素</strong></h3><p>内联块元素，也叫行内块元素，是新增的元素类型，现有元素没有归于此类别的，img和input元素的行为类似这种元素，但是也归类于内联元素，我们可以用display属性将块元素或者内联元素转化成这种元素。它们在布局中表现的行为：</p><ul><li>支持全部样式</li><li>如果没有设置宽高，宽高由内容决定</li><li>盒子并在一行</li><li>代码换行，盒子会产生间距</li><li>子元素是内联块元素，父元素可以用text-align属性设置子元素水平对齐方式。</li></ul><p>这三种元素，可以通过display属性来相互转化，不过实际开发中，块元素用得比较多，所以我们经常把内联元素转化为块元素，少量转化为内联块，而要使用内联元素时，直接使用内联元素，而不用块元素转化了。</p><h3 id="3-9-4-display属性"><a href="#3-9-4-display属性" class="headerlink" title="3.9.4 display属性"></a>3.9.4 <strong>display属性</strong></h3><p>display属性是用来设置元素的类型及隐藏的，常用的属性有：<br>1、none 元素隐藏且不占位置<br>2、block 元素以块元素显示<br>3、inline 元素以内联元素显示<br>4、inline-block 元素以内联块元素显示</p><p><strong>课堂练习</strong></p><p>请制作图中所示的菜单：<br><img src="/qianduan_images/010.jpg" alt="课堂练习示例图片"></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;style type="text/css"&gt;</span><br><span class="line">    <span class="selector-class">.menu</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">694px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">50px</span> auto <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">0</span>; <span class="comment">/* 解决内联元素间隙：父级设置font-size为0，内联元素自身再设置font-size */</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.menu</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">98px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">48px</span>;</span><br><span class="line">        <span class="attribute">background-color</span>: <span class="number">#ffffff</span>; <span class="comment">/* 背景色 */</span></span><br><span class="line">        <span class="attribute">display</span>: inline-block; <span class="comment">/* 行内块 */</span></span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">16px</span>; <span class="comment">/* 字体大小 */</span></span><br><span class="line">        <span class="attribute">font-family</span>: <span class="string">"Microsoft YaHei"</span>; <span class="comment">/* 字体样式 */</span></span><br><span class="line">        <span class="attribute">color</span>: pink; <span class="comment">/* 字体颜色 */</span></span><br><span class="line">        <span class="attribute">border</span>: <span class="number">1px</span> solid gold; <span class="comment">/* 边框线 */</span></span><br><span class="line">        <span class="attribute">margin-left</span>: -<span class="number">1px</span>; <span class="comment">/* 去掉重叠的边框线 */</span></span><br><span class="line">        <span class="attribute">text-align</span>: center; <span class="comment">/* 文字水平居中 */</span></span><br><span class="line">        <span class="attribute">line-height</span>: <span class="number">48px</span>; <span class="comment">/* 文字垂直居中 */</span></span><br><span class="line">        <span class="attribute">text-decoration</span>: none; <span class="comment">/* 去掉超链接下划线 */</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="selector-class">.menu</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123; <span class="comment">/* 伪类 */</span></span><br><span class="line">        <span class="attribute">background-color</span>: gold;</span><br><span class="line">        <span class="attribute">color</span>: white;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class="menu"&gt;</span><br><span class="line">    &lt;a href="#"&gt;首页&lt;/a&gt;</span><br><span class="line">    &lt;a href="#"&gt;公司简介&lt;/a&gt;</span><br><span class="line">    &lt;a href="#"&gt;解决方案&lt;/a&gt;</span><br><span class="line">    &lt;a href="#"&gt;公司新闻&lt;/a&gt;</span><br><span class="line">    &lt;a href="#"&gt;行业动态&lt;/a&gt;</span><br><span class="line">    &lt;a href="#"&gt;招贤纳士&lt;/a&gt;</span><br><span class="line">    &lt;a href="#"&gt;联系我们&lt;/a&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p><strong>display属性扩展</strong><br><code>none</code> 元素隐藏且不占位置<br>以下示例是元素默认隐藏不显示，只有当鼠标放在元素上时才会显示出来<br></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.con</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.con</span> <span class="selector-tag">h3</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box2</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: gold;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.con</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.box2</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;div class="con"&gt;</span><br><span class="line">    &lt;h3&gt;文字标题&lt;/h3&gt;</span><br><span class="line">    &lt;div class="box2"&gt;文字标题的说明&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p></p><h2 id="3-10-浮动"><a href="#3-10-浮动" class="headerlink" title="3.10 浮动"></a>3.10 浮动</h2><h3 id="3-10-1-浮动特性"><a href="#3-10-1-浮动特性" class="headerlink" title="3.10.1 浮动特性"></a>3.10.1 <strong>浮动特性</strong></h3><p>1、浮动元素有左浮动(float:left)和右浮动(float:right)两种</p><p>2、浮动的元素会向左或向右浮动，碰到父元素边界、其他元素才停下来</p><p>3、相邻浮动的块元素可以并在一行，超出父级宽度就换行</p><p>4、浮动让行内元素或块元素自动转化为行内块元素(此时不会有行内块元素间隙问题)</p><p>5、浮动元素后面没有浮动的元素会占据浮动元素的位置，没有浮动的元素内的文字会避开浮动的元素，形成文字饶图的效果</p><p>6、父元素如果没有设置尺寸(一般是高度不设置)，父元素内整体浮动的元素无法撑开父元素，父元素需要清除浮动</p><p>7、浮动元素之间没有垂直margin的合并</p><p><strong>理解练习</strong><br>1、两端对齐浮动<br><img src="/qianduan_images/011.jpg" alt="课堂练习示例图片"></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;style type="text/css"&gt;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.con</span>&#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">80px</span>;</span><br><span class="line">        <span class="attribute">border</span>: <span class="number">1px</span> solid gold;</span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">50px</span> auto <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.con</span> <span class="selector-tag">div</span>&#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">60px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">60px</span>;</span><br><span class="line">        <span class="attribute">display</span>: inline-block;</span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">10px</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.box01</span>&#123;</span><br><span class="line">        <span class="attribute">background-color</span>: <span class="number">#90ee90</span>;</span><br><span class="line">        <span class="attribute">float</span>: left;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.box02</span>&#123;</span><br><span class="line">        <span class="attribute">background-color</span>: pink;</span><br><span class="line">        <span class="attribute">float</span>: right;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;!<span class="selector-tag">--div</span><span class="selector-class">.con</span>&gt;<span class="selector-tag">div</span><span class="selector-class">.box01--</span>&gt;</span><br><span class="line">&lt;div class="con"&gt;</span><br><span class="line">&lt;div class="box01"&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class="box02"&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p><img src="/qianduan_images/012.jpg" alt="课堂练习示例图片"></p><p>2、请使用浮动制作图中所示的菜单：<br><img src="/qianduan_images/013.jpg" alt="课堂练习示例图片"></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.menu</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">694px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">list-style</span>: none; <span class="comment">/* 去掉无序列表前面的小圆点 */</span></span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">50px</span> auto <span class="number">0</span>; <span class="comment">/* 覆盖原始的ul margin */</span></span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>; <span class="comment">/* 覆盖原始的ul padding */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.menu</span> <span class="selector-tag">li</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">98px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">48px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid gold;</span><br><span class="line">    <span class="attribute">background-color</span>: white;</span><br><span class="line">    <span class="comment">/*display: inline-block;*/</span></span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">1px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.menu</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">98px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">48px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">48px</span>;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">"Microsoft YaHei"</span>;</span><br><span class="line">    <span class="attribute">color</span>: pink;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.menu</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: gold;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;ul class="menu"&gt;</span><br><span class="line">    &lt;li&gt;&lt;a href="#"&gt;公司简介&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;&lt;a href="#"&gt;公司简介&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;&lt;a href="#"&gt;公司简介&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;&lt;a href="#"&gt;公司简介&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;&lt;a href="#"&gt;公司简介&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;&lt;a href="#"&gt;公司简介&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;&lt;a href="#"&gt;公司简介&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><p>3、文字饶图效果:<br><img src="/qianduan_images/014.jpg" alt="课堂练习示例图片"></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;style type="text/css"&gt;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.con</span>&#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">450px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">210px</span>;</span><br><span class="line">        <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">50px</span> auto <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.pic</span>&#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">80px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">80px</span>;</span><br><span class="line">        <span class="attribute">background-color</span>: gold;</span><br><span class="line">        <span class="attribute">float</span>: left;</span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">10px</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.text</span>&#123;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">130px</span>;</span><br><span class="line">        <span class="comment">/*background-color: green;*/</span></span><br><span class="line">        <span class="attribute">color</span>: <span class="number">#666</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class="con"&gt;</span><br><span class="line">    &lt;div class="pic"&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class="text"&gt;浮动元素后面没有浮动的元素会占据浮动元素的位置，没有浮动的元素内的文字会避开浮动的元素，形成文字饶图的效果浮动元素后面没有浮动的元素会占据浮动元素的位置，没有浮动的元素内的文字会避开浮动的元素，形成文字饶图的效果浮动元素后面没有浮动的元素会占据浮动元素的位置，没有浮动的元素内的文字会避开浮动的元素，形成文字饶图的效果&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h3 id="3-10-2-清除浮动"><a href="#3-10-2-清除浮动" class="headerlink" title="3.10.2 清除浮动"></a>3.10.2 <strong>清除浮动</strong></h3><ul><li><p>父级上增加属性overflow：hidden</p></li><li><p>在最后一个子元素的后面加一个空的div，给它样式属性 clear:both（不推荐）</p></li><li><p>使用成熟的清浮动样式类，clearfix</p></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span>,<span class="selector-class">.clearfix</span><span class="selector-pseudo">:before</span>&#123; <span class="attribute">content</span>: <span class="string">""</span>;<span class="attribute">display</span>: table;&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span>&#123; <span class="attribute">clear</span>:both;&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span>&#123;<span class="attribute">zoom</span>:<span class="number">1</span>;&#125;</span><br></pre></td></tr></table></figure><p>清除浮动的使用方法：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.con2&#123;... overflow:hidden&#125;</span><br><span class="line">或者</span><br><span class="line">&lt;div class="con2 clearfix"&gt;</span><br></pre></td></tr></table></figure><p><strong>理解练习</strong><br>父级盒子不给高度，子集盒子浮动，父级盒子需要清除浮动<br><img src="/qianduan_images/015.jpg" alt="课堂练习示例图片"></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.list</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">210px</span>;</span><br><span class="line">    <span class="comment">/*height: 400px;*/</span></span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">50px</span> auto <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/* 第一种清除浮动的方法 */</span></span><br><span class="line">    <span class="comment">/*overflow: hidden;*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.list</span> <span class="selector-tag">li</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: gold;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 第二种清除浮动的方法 */</span></span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span>,<span class="selector-class">.clearfix</span><span class="selector-pseudo">:before</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">    <span class="attribute">display</span>: table;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line">    <span class="attribute">clear</span>:both;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 兼容IE，网页不缩放 */</span></span><br><span class="line"><span class="selector-class">.clearfix</span>&#123;</span><br><span class="line">    <span class="attribute">zoom</span>:<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;!--ul.list&gt;li&#123;$&#125;*8--&gt;</span><br><span class="line">&lt;ul class="list clearfix"&gt;</span><br><span class="line">    &lt;li&gt;1&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;2&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;3&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;4&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;5&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;6&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;7&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;8&lt;/li&gt;</span><br><span class="line">    &lt;!<span class="selector-tag">--</span>第二种清除浮动的方法<span class="selector-tag">--</span>&gt;</span><br><span class="line">    &lt;!--&lt;div style="clear: both"&gt;&lt;/div&gt;--&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><h2 id="3-11-定位"><a href="#3-11-定位" class="headerlink" title="3.11 定位"></a>3.11 定位</h2><h3 id="3-11-1-文档流"><a href="#3-11-1-文档流" class="headerlink" title="3.11.1 文档流"></a>3.11.1 <strong>文档流</strong></h3><p>文档流，是指盒子按照html标签编写的顺序依次从上到下，从左到右排列，块元素占一行，行内元素在一行之内从左到右排列，先写的先排列，后写的排在后面，每个盒子都占据自己的位置。</p><h3 id="3-11-2-关于定位"><a href="#3-11-2-关于定位" class="headerlink" title="3.11.2 关于定位"></a>3.11.2 <strong>关于定位</strong></h3><p>我们可以使用css的position属性来设置元素的定位类型，postion的设置项如下：</p><ul><li>relative 生成相对定位元素，元素所占据的文档流的位置保留，元素本身相对自身原位置进行偏移。</li><li>absolute 生成绝对定位元素，元素脱离文档流，不占据文档流的位置，可以理解为漂浮在文档流的上方，相对于上一个设置了定位的父级元素来进行定位，如果找不到，则相对于body元素进行定位。</li><li>fixed 生成固定定位元素，元素脱离文档流，不占据文档流的位置，可以理解为漂浮在文档流的上方，相对于浏览器窗口进行定位。</li><li>static 默认值，没有定位，元素出现在正常的文档流中，相当于取消定位属性或者不设置定位属性。</li><li>inherit 从父元素继承 position 属性的值。</li></ul><p><img src="/qianduan_images/037.png" alt><br></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* relative 相对定位元素 */</span></span><br><span class="line">&lt;style type="text/css"&gt;</span><br><span class="line">    <span class="selector-class">.con</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000000</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">50px</span> auto <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box01</span>,<span class="selector-class">.box02</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box01</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: green;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box02</span>&#123;</span><br><span class="line"><span class="attribute">background-color</span>: gold;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class="con"&gt;</span><br><span class="line">    &lt;div class="box01"&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class="box02"&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p></p><p><img src="/qianduan_images/038.png" alt></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* absolute 绝对定位元素:相对于body元素进行定位 */</span></span><br><span class="line">&lt;style type="text/css"&gt;</span><br><span class="line">    <span class="selector-class">.con</span>&#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000000</span>;</span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">50px</span> auto <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.box01</span>,<span class="selector-class">.box02</span>&#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">10px</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.box01</span>&#123;</span><br><span class="line">        <span class="attribute">background-color</span>: green;</span><br><span class="line">        <span class="attribute">position</span>: absolute;</span><br><span class="line">        <span class="attribute">left</span>: <span class="number">50px</span>;</span><br><span class="line">        <span class="attribute">top</span>: <span class="number">50px</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.box02</span>&#123;</span><br><span class="line">        <span class="attribute">background-color</span>: gold;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class="con"&gt;</span><br><span class="line">    &lt;div class="box01"&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class="box02"&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p><img src="/qianduan_images/039.png" alt><br></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* absolute 绝对定位元素:相对于上一个设置了定位的父级元素来进行定位 */</span></span><br><span class="line">&lt;style type="text/css"&gt;</span><br><span class="line">    <span class="selector-class">.con</span>&#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000000</span>;</span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">50px</span> auto <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.box01</span>,<span class="selector-class">.box02</span>&#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">10px</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.box01</span>&#123;</span><br><span class="line">        <span class="attribute">background-color</span>: green;</span><br><span class="line">        <span class="attribute">position</span>: absolute;</span><br><span class="line">        <span class="attribute">left</span>: <span class="number">50px</span>;</span><br><span class="line">        <span class="attribute">top</span>: <span class="number">50px</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.box02</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: gold;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class="con"&gt;</span><br><span class="line">    &lt;div class="box01"&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class="box02"&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p></p><p><img src="/qianduan_images/040.png" alt></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* fixed 固定定位元素:相对于浏览器窗口进行定位 */</span></span><br><span class="line">&lt;style type="text/css"&gt;</span><br><span class="line">    <span class="selector-class">.con</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000000</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">50px</span> auto <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box01</span>,<span class="selector-class">.box02</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box01</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: green;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box02</span>&#123;</span><br><span class="line"><span class="attribute">background-color</span>: gold;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class="con"&gt;</span><br><span class="line">    &lt;div class="box01"&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class="box02"&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h3 id="3-11-3-定位元素的偏移"><a href="#3-11-3-定位元素的偏移" class="headerlink" title="3.11.3 定位元素的偏移"></a>3.11.3 <strong>定位元素的偏移</strong></h3><p>定位的元素还需要用left、right、top或者bottom来设置相对于参照元素的偏移值。</p><h3 id="3-11-4-定位元素层级"><a href="#3-11-4-定位元素层级" class="headerlink" title="3.11.4 定位元素层级"></a>3.11.4 <strong>定位元素层级</strong></h3><p>定位元素是浮动的正常的文档流之上的，可以用z-index属性来设置元素的层级</p><p>伪代码如下:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box01</span>&#123;</span><br><span class="line">    ......</span><br><span class="line">    <span class="selector-tag">position</span><span class="selector-pseudo">:absolute</span>;  <span class="comment">/* 设置了绝对定位 */</span></span><br><span class="line">    <span class="selector-tag">left</span><span class="selector-pseudo">:200px</span>;         <span class="comment">/* 相对于参照元素左边向右偏移200px */</span></span><br><span class="line">    <span class="selector-tag">top</span><span class="selector-pseudo">:100px</span>;          <span class="comment">/* 相对于参照元素顶部向下偏移100px */</span></span><br><span class="line">    <span class="selector-tag">z-index</span><span class="selector-pseudo">:10</span>          <span class="comment">/* 将元素层级设置为10(没有单位) 弹框使用：盖过所有的元素 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&lt;style type="text/css"&gt;</span><br><span class="line">    <span class="selector-class">.con</span>&#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000000</span>;</span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">50px</span> auto <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">position</span>: relative;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.con</span> <span class="selector-tag">div</span>&#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">        <span class="attribute">position</span>: absolute;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.box01</span>&#123;</span><br><span class="line">        <span class="attribute">background-color</span>: green;</span><br><span class="line">        <span class="attribute">left</span>: <span class="number">20px</span>;</span><br><span class="line">        <span class="attribute">top</span>: <span class="number">20px</span>;</span><br><span class="line">        <span class="attribute">z-index</span>: <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.box02</span>&#123;</span><br><span class="line">        <span class="attribute">background-color</span>: gold;</span><br><span class="line">        <span class="attribute">left</span>: <span class="number">40px</span>;</span><br><span class="line">        <span class="attribute">top</span>: <span class="number">40px</span>;</span><br><span class="line">        <span class="attribute">z-index</span>: <span class="number">11</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.box03</span>&#123;</span><br><span class="line">        <span class="attribute">background-color</span>: rebeccapurple;</span><br><span class="line">        <span class="attribute">left</span>: <span class="number">60px</span>;</span><br><span class="line">        <span class="attribute">top</span>: <span class="number">60px</span>;</span><br><span class="line">        <span class="attribute">z-index</span>: <span class="number">12</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.box04</span>&#123;</span><br><span class="line">        <span class="attribute">background-color</span>: pink;</span><br><span class="line">        <span class="attribute">left</span>: <span class="number">80px</span>;</span><br><span class="line">        <span class="attribute">top</span>: <span class="number">80px</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class="con"&gt;</span><br><span class="line">    &lt;div class="box01"&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class="box02"&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class="box03"&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class="box04"&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h3 id="3-11-5-定位元素特性"><a href="#3-11-5-定位元素特性" class="headerlink" title="3.11.5 定位元素特性"></a>3.11.5 <strong>定位元素特性</strong></h3><p>绝对定位和固定定位的块元素和行内元素会自动转化为行内块元素</p><h3 id="3-11-6-理解练习"><a href="#3-11-6-理解练习" class="headerlink" title="3.11.6 理解练习"></a>3.11.6 <strong>理解练习</strong></h3><p>1、制作如下布局：<br><img src="/qianduan_images/016.jpg" alt="课堂练习示例图片"></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;style type="text/css"&gt;</span><br><span class="line">    <span class="selector-class">.con</span>&#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">        <span class="attribute">background-color</span>: gold;</span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">50px</span> auto <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">position</span>: relative;</span><br><span class="line">        <span class="comment">/*去掉尖角成圆的，若是圆形需要设置成50px*/</span></span><br><span class="line">        <span class="attribute">border-radius</span>: <span class="number">14px</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.box</span>&#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">28px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">28px</span>;</span><br><span class="line">        <span class="attribute">background-color</span>: red;</span><br><span class="line">        <span class="attribute">color</span>: white;</span><br><span class="line">        <span class="attribute">text-align</span>: center;</span><br><span class="line">        <span class="attribute">line-height</span>: <span class="number">28px</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 位置 */</span></span><br><span class="line">        <span class="attribute">position</span>: absolute;</span><br><span class="line">        <span class="attribute">left</span>: <span class="number">86px</span>;</span><br><span class="line">        <span class="attribute">top</span>: -<span class="number">14px</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 变成圆的 */</span></span><br><span class="line">        <span class="attribute">border-radius</span>: <span class="number">14px</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class="con"&gt;</span><br><span class="line">    &lt;div class="box"&gt;5&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>2、固定在顶部的水平居中的菜单</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;style type="text/css"&gt;</span><br><span class="line">    <span class="selector-class">.menu</span>&#123;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">80px</span>;</span><br><span class="line">        <span class="attribute">background-color</span>: gold;</span><br><span class="line">        <span class="attribute">position</span>: fixed;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">960px</span>;</span><br><span class="line">        <span class="attribute">top</span>: <span class="number">0px</span>;</span><br><span class="line">        <span class="comment">/* 根据窗口大小设置百分比 */</span></span><br><span class="line">        <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">        <span class="comment">/* 根据前面的百分比再进行偏移，负值表示往左侧偏移 */</span></span><br><span class="line">        <span class="attribute">margin-left</span>: -<span class="number">480px</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class="menu"&gt;菜单文字&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>3、相对于浏览器窗口水平垂直居中的弹框</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">&lt;style type="text/css"&gt;</span><br><span class="line">    <span class="selector-class">.menu</span>&#123;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">80px</span>;</span><br><span class="line">        <span class="attribute">background-color</span>: gold;</span><br><span class="line">        <span class="attribute">position</span>: fixed;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">960px</span>;</span><br><span class="line">        <span class="attribute">top</span>: <span class="number">0px</span>;</span><br><span class="line">        <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">        <span class="attribute">margin-left</span>: -<span class="number">480px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">p</span>&#123;</span><br><span class="line">        <span class="attribute">text-align</span>: center;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.popup</span>&#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000000</span>;</span><br><span class="line">        <span class="attribute">background-color</span>: <span class="number">#ffffff</span>;</span><br><span class="line">        <span class="attribute">position</span>: fixed;</span><br><span class="line">        <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">        <span class="attribute">margin-left</span>: -<span class="number">251px</span>;</span><br><span class="line">        <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">        <span class="attribute">margin-top</span>: -<span class="number">151px</span>;</span><br><span class="line">        <span class="attribute">z-index</span>: <span class="number">9999</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.popup</span> <span class="selector-tag">h2</span>&#123;</span><br><span class="line">        <span class="attribute">background-color</span>: gold;</span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">10px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.mask</span>&#123;</span><br><span class="line">        <span class="attribute">position</span>: fixed;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">background-color</span>: grey;</span><br><span class="line">        <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="comment">/*透明度*/</span></span><br><span class="line">        <span class="attribute">opacity</span>: <span class="number">0.5</span>;</span><br><span class="line">        <span class="attribute">z-index</span>: <span class="number">9998</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.popup</span>&#123;</span><br><span class="line">        <span class="attribute">display</span>: block;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class="menu"&gt;菜单文字&lt;/div&gt;</span><br><span class="line">&lt;div class="pop_con"&gt;</span><br><span class="line">    &lt;div class="popup"&gt;</span><br><span class="line">        &lt;h2&gt;弹框的标题&lt;/h2&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class="mask"&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;网页内容&lt;/p&gt;</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">&lt;p&gt;网页内容&lt;/p&gt;</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">&lt;p&gt;网页内容&lt;/p&gt;</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">&lt;br /&gt;</span><br></pre></td></tr></table></figure><h2 id="3-12-background属性"><a href="#3-12-background属性" class="headerlink" title="3.12 background属性"></a>3.12 background属性</h2><h3 id="3-12-1-属性解释"><a href="#3-12-1-属性解释" class="headerlink" title="3.12.1 属性解释"></a>3.12.1 <strong>属性解释</strong></h3><p>background属性是css中应用比较多，且比较重要的一个属性，它是负责给盒子设置背景图片和背景颜色的，background是一个复合属性，它可以分解成如下几个设置项：</p><ul><li>background-color 设置背景颜色</li><li>background-image 设置背景图片地址</li><li>background-repeat 设置背景图片如何重复平铺</li><li>background-position 设置背景图片的位置</li><li>background-attachment 设置背景图片是固定还是随着页面滚动条滚动</li></ul><p>实际应用中，我们可以用background属性将上面所有的设置项放在一起，而且也建议这么做，这样做性能更高，而且兼容性更好，比如：“background: #00FF00 url(bgimage.gif) no-repeat left center fixed”，这里面的“#00ff00”是设置background-color；“url(bgimage.gif)”是设置background-image；“no-repeat”是设置background-repeat；“left center”是设置background-position；“fixed”是设置background-attachment，各个设置项用空格隔开，有的设置项不写也是可以的，它会使用默认值。</p><h3 id="3-12-2-举例"><a href="#3-12-2-举例" class="headerlink" title="3.12.2 举例"></a>3.12.2 <strong>举例</strong></h3><p>下面这些例子使用下面这张图片做为背景图：<br><img src="/qianduan_images/017.jpg" alt="background示例图片"></p><p>1、“background:url(bg.jpg)”，默认设置一个图片地址，图片会从盒子的左上角开始将盒子铺满。</p><p><img src="/qianduan_images/018.jpg" alt="background示例图片"></p><p>2、“background:cyan url(bg.jpg) repeat-x”，横向平铺盒子，盒子其他部分显示背景颜色“cyan”。</p><p><img src="/qianduan_images/019.jpg" alt="background示例图片"></p><p>3、“background:cyan url(bg.jpg) repeat-y”，纵向平铺盒子，盒子其他部分显示背景颜色“cyan”。</p><p><img src="/qianduan_images/020.jpg" alt="background示例图片"></p><p>4、“background:cyan url(bg.jpg) no-repeat”，背景不重复，背景和盒子左上角对齐，盒子其他部分显示背景颜色“cyan”。</p><p><img src="/qianduan_images/021.jpg" alt="background示例图片"></p><p>5、“background:cyan url(bg.jpg) no-repeat left center”，背景不重复，背景和盒子左中对齐，盒子其他部分显示背景颜色“cyan”。</p><p><img src="/qianduan_images/022.jpg" alt="background示例图片"></p><p>6、“background:cyan url(bg.jpg) no-repeat right center”，背景不重复，背景和盒子右中对齐，也就是背景图片的右边对齐盒子的右边，盒子其他部分显示背景颜色“cyan”。</p><p><img src="/qianduan_images/023.jpg" alt="background示例图片"></p><p>相关代码：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="selector-tag">DOCTYPE</span> <span class="selector-tag">html</span>&gt;</span><br><span class="line">&lt;html lang="en"&gt;</span><br><span class="line">&lt;<span class="selector-tag">head</span>&gt;</span><br><span class="line">    &lt;meta charset="UTF-8"&gt;</span><br><span class="line">    &lt;title&gt;test background&lt;/title&gt;</span><br><span class="line">    &lt;style type="text/css"&gt;</span><br><span class="line">        <span class="selector-class">.backshow</span>&#123;</span><br><span class="line">            <span class="attribute">width</span>:<span class="number">320px</span>;</span><br><span class="line">            <span class="attribute">height</span>:<span class="number">160px</span>;</span><br><span class="line">            <span class="attribute">border</span>:<span class="number">3px</span> solid <span class="number">#333</span>;</span><br><span class="line">            <span class="attribute">float</span>:left;</span><br><span class="line">            <span class="attribute">margin</span>:<span class="number">10px</span>;            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-class">.bg1</span>&#123;<span class="attribute">background</span>:cyan <span class="built_in">url</span>(bg.jpg);&#125;</span><br><span class="line">        <span class="selector-class">.bg2</span>&#123;<span class="attribute">background</span>:cyan <span class="built_in">url</span>(bg.jpg) repeat-x;&#125;</span><br><span class="line">        <span class="selector-class">.bg3</span>&#123;<span class="attribute">background</span>:cyan <span class="built_in">url</span>(bg.jpg) repeat-y;&#125;</span><br><span class="line">        <span class="selector-class">.bg4</span>&#123;<span class="attribute">background</span>:cyan <span class="built_in">url</span>(bg.jpg) no-repeat;&#125;</span><br><span class="line">        <span class="selector-class">.bg5</span>&#123;<span class="attribute">background</span>:cyan <span class="built_in">url</span>(bg.jpg) no-repeat left center;&#125;</span><br><span class="line">        <span class="selector-class">.bg6</span>&#123;<span class="attribute">background</span>:cyan <span class="built_in">url</span>(bg.jpg) no-repeat right center;&#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">    &lt;div class="backshow bg1"&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class="backshow bg2"&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class="backshow bg3"&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class="backshow bg4"&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class="backshow bg5"&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class="backshow bg6"&gt;&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>例子说明：</p><p>background-position的设置，可以在水平方向设置“left”、“center”、“right”，在垂直方向设置“top”、“center”、“bottom”，除了设置这些方位词之外，还可以设置具体的数值。</p><p>比如说，我们想把下边的盒子用右边的图片作为背景，并且让背景显示图片中靠近底部的那朵花：<br><img src="/qianduan_images/024.jpg" alt="background示例图片"><br>用上面中间那张图片作为左边那个比它尺寸小的盒子的背景，上面右边的实现效果设置为：“background:url(location_bg.jpg) -110px -150px”，第一个数值表示背景图相对于自己的左上角向左偏移110px，负值向左，正值向右，第二个数值表示背景图相对于自己的左上角向上偏移150px，负值向上，正值向下。</p><p>实现原理示意图：<br><img src="/qianduan_images/025.jpg" alt="background示例图片"></p><p>对应代码：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="selector-tag">DOCTYPE</span> <span class="selector-tag">html</span>&gt;</span><br><span class="line">&lt;html lang="en"&gt;</span><br><span class="line">&lt;<span class="selector-tag">head</span>&gt;</span><br><span class="line">    &lt;meta charset="UTF-8"&gt;</span><br><span class="line">    &lt;title&gt;test background&lt;/title&gt;</span><br><span class="line">    &lt;style type="text/css"&gt;</span><br><span class="line">        <span class="selector-class">.backshow</span>&#123;</span><br><span class="line">            <span class="attribute">width</span>:<span class="number">320px</span>;</span><br><span class="line">            <span class="attribute">height</span>:<span class="number">160px</span>;</span><br><span class="line">            <span class="attribute">border</span>:<span class="number">3px</span> solid <span class="number">#333</span>;</span><br><span class="line">            <span class="attribute">float</span>:left;</span><br><span class="line">            <span class="attribute">margin</span>:<span class="number">10px</span>;            </span><br><span class="line">        &#125;        </span><br><span class="line">        <span class="selector-class">.bg</span>&#123;<span class="attribute">width</span>:<span class="number">94px</span>;</span><br><span class="line">            <span class="attribute">height</span>:<span class="number">94px</span>;</span><br><span class="line">            <span class="attribute">border</span>:<span class="number">3px</span> solid <span class="number">#666</span>;</span><br><span class="line">            <span class="attribute">background</span>:<span class="built_in">url</span>(location_bg.jpg) -<span class="number">110px</span> -<span class="number">150px</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">    &lt;div class="bg"&gt;&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>理解练习：<br>通过雪碧图制作如下布局：</p><p><img src="/qianduan_images/026.jpg" alt="background示例图片"></p><h2 id="3-13-特征布局实例讲习"><a href="#3-13-特征布局实例讲习" class="headerlink" title="3.13 特征布局实例讲习"></a>3.13 特征布局实例讲习</h2><p>经过对前面知识点的巩固和加深，我们可以使用前面学习到的知识来制作实际开发中碰到的一些典型的布局，以此来达到综合应用知识的目的。</p><p>1、特征布局：翻页（所需知识点：盒模型、内联元素）</p><p><img src="/qianduan_images/027.jpg" alt="布局示例图片"></p><p>2、特征布局：导航条01（所需知识点：盒模型、行内元素布局）</p><p><img src="/qianduan_images/028.jpg" alt="布局示例图片"></p><p>3、特征布局：导航条02（所需知识点：盒模型、浮动、定位、字体对齐）</p><p><img src="/qianduan_images/029.jpg" alt="布局示例图片"></p><p>4、特征布局：图片列表（所需知识点：盒模型、浮动）</p><p><img src="/qianduan_images/030.jpg" alt="布局示例图片"></p><p>5、特征布局：新闻列表（所需知识点：盒模型、浮动）</p><p><img src="/qianduan_images/031.jpg" alt="布局示例图片"></p><p><strong>课后练习</strong></p><p><img src="/qianduan_images/032.jpg" alt="布局示例图片"></p><p><img src="/qianduan_images/033.jpg" alt="布局示例图片"></p><h1 id="4-Photoshop"><a href="#4-Photoshop" class="headerlink" title="4. Photoshop"></a>4. Photoshop</h1><h2 id="4-1-常用图片格式"><a href="#4-1-常用图片格式" class="headerlink" title="4.1 常用图片格式"></a>4.1 常用图片格式</h2><p>图片是网页制作中很重要的素材，图片有不同的格式，每种格式都有自己的特性，了解这些特效，可以方便我们在制作网页时选取适合的图片格式，图片格式及特性如下：</p><p><strong>1、psd</strong><br>photoshop的专用格式。<br>优点：完整保存图像的信息，包括未压缩的图像数据、图层、透明等信息，方便图像的编辑。<br>缺点：应用范围窄，图片容量相对比较大。</p><p><strong>2、jpg</strong><br>网页制作及日常使用最普遍的图像格式。<br>优点：图像压缩效率高，图像容量相对最小。<br>缺点：有损压缩，图像会丢失数据而失真，不支持透明背景，不能制作成动画。</p><p><strong>3、gif</strong><br>制作网页小动画的常用图像格式。<br>优点：无损压缩，图像容量小、可以制作成动画、支持透明背景。<br>缺点：图像色彩范围最多只有256色，不能保存色彩丰富的图像，不支持半透明，透明图像边缘有锯齿。</p><p><strong>4、png</strong><br>网页制作及日常使用比较普遍的图像格式。<br>优点：无损压缩，图像容量小、支持透明背景和半透明色彩、透明图像的边缘光滑。<br>缺点：不能制作成动画</p><p><strong>5、webp</strong><br>将要取代jpg的图像格式。<br>优点：同jpg格式，容量相对比jpg还要小。<br>缺点：同jpg格式，目前不支持所有的浏览器。</p><p><strong>位图和矢量图</strong><br>位图也叫点阵图，是由一个个的方形的像素点排列在一起拼接而成的，位图在放大时，图像会失真。上面讲的5种图像都属于位图。<br>矢量图和位图组成图像的原理不同，它的图像轮廓是由函数曲线生成的，当放大图像时，实际的原理就是将曲线乘以一个倍数，图像可以轻易地放大，而且不会出现像素块，图像边缘也不会出现锯齿。</p><p><strong>svg</strong><br>目前首选的网页矢量图格式。<br>优点：图像容量小、图像放大不失真、支持透明背景和半透明色彩、图像边缘光滑。<br>缺点：色彩不够丰富。</p><p><strong>flash</strong><br>退出历史的重量级网页矢量图格式。<br>优点：图像容量小、图像放大不失真、支持透明背景和半透明色彩、图像边缘光滑、还可以制作动画、可编写交互。<br>缺点：不支持搜索引擎、运行慢、浏览器需要装插件才可支持。</p><p><strong>总结</strong><br>在网页制作中，如何选择合适的图片格式呢？<br>1、使用大幅面图片时，如果要使用不透明背景的图片，就使用jpg图片；如果要使用透明或者半透明背景的图片，就使用png图片；<br>2、使用小幅面图片或者图标图片时，如果图片含多种颜色，可以使用gif或png图片；如果图片是单色，而且要求有很好的显示效果，可以使用svg；如果是图片时动画的，可以使用gif。</p><h2 id="4-2-photoshop常用图片处理技巧"><a href="#4-2-photoshop常用图片处理技巧" class="headerlink" title="4.2 photoshop常用图片处理技巧"></a>4.2 photoshop常用图片处理技巧</h2><p>photoshop是一款优秀的图像处理软件，作为前端开发工程师，掌握它的一些常用功能是必须的。photoshop的常用功能有：选择、裁剪图像、修图、取色、插入文字等等。除了这些常用功能，前端还需要掌握制作新图像、切图等技巧。本次讲解的photoshop版本为cs6。</p><h3 id="4-2-1-图片格式转换与压缩"><a href="#4-2-1-图片格式转换与压缩" class="headerlink" title="4.2.1 图片格式转换与压缩"></a>4.2.1 <strong>图片格式转换与压缩</strong></h3><p>1、文件/存储为 选择图片类型以及压缩比；（不推荐）<br>2、文件/存储为web所用格式 选择图片类型以及压缩比 （推荐）；</p><h3 id="4-2-2-图像放缩，平移"><a href="#4-2-2-图像放缩，平移" class="headerlink" title="4.2.2 图像放缩，平移"></a>4.2.2 <strong>图像放缩，平移</strong></h3><p>1、<img src="/qianduan_images/icons/001.jpg" alt="ps软件示例图片"> 放缩工具 图像放大缩小，在图像上点击放大，按住alt键点击缩小，快捷键Ctrl+“+”放大 Ctrl+“-”缩小，双击此工具可以让图像按照原始大小显示。</p><p>2、<img src="/qianduan_images/icons/002.jpg" alt="ps软件示例图片"> 平移工具 对图像进行移动，在使用其他工具时，按住空格键盘的空格键，可以切换到此工具，移动完后松开空格键回到原来的工具。双击此工具可以让图像放缩到显示区域完全显示。</p><h3 id="4-2-3-新建图像"><a href="#4-2-3-新建图像" class="headerlink" title="4.2.3 新建图像"></a>4.2.3 <strong>新建图像</strong></h3><p>执行菜单命令 文件/新建 可以新建一张图片，设置大小，颜色模式选RGB，网页图片一般选择72像素/英寸，如果图像要打印，可设为300/英寸。背景按情况选透明或白色。</p><h3 id="4-2-4-移动选择与图层面板"><a href="#4-2-4-移动选择与图层面板" class="headerlink" title="4.2.4 移动选择与图层面板"></a>4.2.4 <strong>移动选择与图层面板</strong></h3><p>1、按住Ctrl，在图像上点击可以选中图层<br>2、<img src="/qianduan_images/icons/003.jpg" alt="ps软件示例图片"> 选择此工具，勾选工具属性栏上的“自动选择图层”，可以在图像上点击选中图层<br>3、移动元素同时按住Alt键可复制一个图层<br>4、图层面板的操作，包括图层的显示隐藏、图层顺序、新建图层、图层删除</p><h3 id="4-2-5-针对图像中选中图层的操作"><a href="#4-2-5-针对图像中选中图层的操作" class="headerlink" title="4.2.5 针对图像中选中图层的操作"></a>4.2.5 <strong>针对图像中选中图层的操作</strong></h3><p>1、移动<br>2、自由变换 执行菜单命令 编辑/自由变换<br>3、拖拽到另一张图像上完成图层拷贝</p><h3 id="4-2-6-历史记录面板"><a href="#4-2-6-历史记录面板" class="headerlink" title="4.2.6 历史记录面板"></a>4.2.6 <strong>历史记录面板</strong></h3><p>记录20部操作，可以点击已经记录的操作步骤回到之前</p><h3 id="4-2-7-选择工具"><a href="#4-2-7-选择工具" class="headerlink" title="4.2.7 选择工具"></a>4.2.7 <strong>选择工具</strong></h3><p>1、<img src="/qianduan_images/icons/004.jpg" alt="ps软件示例图片"> 矩形选择工具<br>2、<img src="/qianduan_images/icons/005.jpg" alt="ps软件示例图片"> 椭圆选择工具 按住alt+shift键可以从中心拉出正圆<br>3、<img src="/qianduan_images/icons/006.jpg" alt="ps软件示例图片"> 任意套索工具 用手任意画出选区，不精确，不常用<br>4、<img src="/qianduan_images/icons/007.jpg" alt="ps软件示例图片"> 多边形套索 可以选择多边形物体，对于结构复杂的物体，可以点多个小段来选择。<br>5、<img src="/qianduan_images/icons/008.jpg" alt="ps软件示例图片"> 磁性套索 可以自动在物体边缘生成选择线，但是由于太自动了，所以不够精确，也不常用。<br>6、<img src="/qianduan_images/icons/010.jpg" alt="ps软件示例图片"> 魔术棒选择工具 按照点击的点的颜色范围来选择，可以设置范围的容差，容差越大，选择区域越大，对于有单色背景的图像中的元素，可以用它点选背景，然后反选，从而选中元素。<br>7、<img src="/qianduan_images/icons/009.jpg" alt="ps软件示例图片"> 快速选择工具 直接在要选的元素上画，按照画的颜色范围进行选择。<br>8、对图层创建选区：按住Ctrl，用鼠标点击图层面板中图层的图标，在图层外框生成选区。</p><h3 id="4-2-8-选区的编辑技巧"><a href="#4-2-8-选区的编辑技巧" class="headerlink" title="4.2.8 选区的编辑技巧"></a>4.2.8 <strong>选区的编辑技巧</strong></h3><p>1、新选区模式下移动选区<br>2、选区的加、减、乘，工具属性栏上设置<br>3、调整边缘 工具属性栏或者执行菜单命令 选择/调整边缘<br>4、变换选区 执行菜单命令 选择/变换选区，可对选区进行缩放、移动等<br>5、反选 执行菜单命令 选择/反向<br>6、取消选择 执行菜单命令 选择/取消选择，快捷键ctrl+d</p><h3 id="4-2-9-选区特别注意"><a href="#4-2-9-选区特别注意" class="headerlink" title="4.2.9 选区特别注意"></a>4.2.9 <strong>选区特别注意</strong></h3><p>选区（蚂蚁线）只对当前图层器起作用，选区操作失败一般是当前图层弄错了</p><h3 id="4-2-10-裁剪图像"><a href="#4-2-10-裁剪图像" class="headerlink" title="4.2.10 裁剪图像"></a>4.2.10 <strong>裁剪图像</strong></h3><p>1、<img src="/qianduan_images/icons/011.jpg" alt="ps软件示例图片"> 裁切工具<br>2、对选区执行菜单命令 图像/裁剪<br>3、设置矩形框大小，创建固定宽高的矩形框，可进行固定尺寸裁剪</p><h3 id="4-2-11-针对确定选区的操作技巧"><a href="#4-2-11-针对确定选区的操作技巧" class="headerlink" title="4.2.11 针对确定选区的操作技巧"></a>4.2.11 <strong>针对确定选区的操作技巧</strong></h3><p>1、复制 执行菜单命令 编辑/拷贝 快捷键ctrl+c<br>2、粘贴 执行菜单命令 编辑/粘贴 快捷键ctrl+v<br>3、填充 执行菜单命令 编辑/填充<br>4、描边 执行菜单命令 编辑/描边<br>5、删除 执行菜单命令 编辑/清除 快捷键 delete<br>6、自由变换 执行菜单命令 编辑/自由变换 快捷键 ctrl+t</p><h3 id="4-2-12-擦除与修复工具"><a href="#4-2-12-擦除与修复工具" class="headerlink" title="4.2.12 擦除与修复工具"></a>4.2.12 <strong>擦除与修复工具</strong></h3><p>1、<img src="/qianduan_images/icons/016.jpg" alt="ps软件示例图片"> 擦除工具<br>2、<img src="/qianduan_images/icons/015.jpg" alt="ps软件示例图片"> 污点修复工具</p><h3 id="4-2-13-参考线技巧"><a href="#4-2-13-参考线技巧" class="headerlink" title="4.2.13 参考线技巧"></a>4.2.13 <strong>参考线技巧</strong></h3><p>1、视图/标尺，显示标尺，在标尺上按住鼠标拖动可以拉出参考线<br>2、视图/对齐到/参考线 让参考线移动时自动对齐到选框或者图像的边缘<br>3、视图/新建参考线 可以精确创建参考线</p><h3 id="4-2-14-文本输入"><a href="#4-2-14-文本输入" class="headerlink" title="4.2.14 文本输入"></a>4.2.14 <strong>文本输入</strong></h3><p>1、执行菜单命令 编辑/首选项/单位和标尺 设置文字的单位<br>2、<img src="/qianduan_images/icons/014.jpg" alt="ps软件示例图片"> 文本输入<br>3、文本编辑 属性工具栏上点击文本编辑按钮</p><h3 id="4-2-15-取色"><a href="#4-2-15-取色" class="headerlink" title="4.2.15 取色"></a>4.2.15 <strong>取色</strong></h3><p>1、<img src="/qianduan_images/icons/013.jpg" alt="ps软件示例图片">取色工具，点击前景色按钮，弹出取色对话框，当前工具切换成取色工具。<br>2、<img src="/qianduan_images/icons/017.jpg" alt="ps软件示例图片">点击前景色按钮，当前工具自动切换到取色工具</p><h3 id="4-2-16-图像大小与画布大小"><a href="#4-2-16-图像大小与画布大小" class="headerlink" title="4.2.16 图像大小与画布大小"></a>4.2.16 <strong>图像大小与画布大小</strong></h3><p>1、图像/图像大小 查看和设置图像的整体大小<br>2、图像/画布大小 查看和设置图像的画板大小</p><h3 id="4-2-17-尺寸测量"><a href="#4-2-17-尺寸测量" class="headerlink" title="4.2.17 尺寸测量"></a>4.2.17 <strong>尺寸测量</strong></h3><p>1、<img src="/qianduan_images/icons/012.jpg" alt="ps软件示例图片"> 切片工具 双击切片弹出切片对话框<br>2、<img src="/qianduan_images/icons/018.jpg" alt="ps软件示例图片"> 切片选择工具<br>2、<img src="/qianduan_images/icons/004.jpg" alt="ps软件示例图片"> 矩形框工具，打开信息面板</p><h2 id="4-3-photoshop批量切图技巧"><a href="#4-3-photoshop批量切图技巧" class="headerlink" title="4.3 photoshop批量切图技巧"></a>4.3 photoshop批量切图技巧</h2><p>切图，就是从效果图中把网页制作需要的小图片裁剪出来。</p><p>1、使用psd格式并且带有图层的图像切图</p><p>2、在图像上用切片工具切出需要的小图</p><p>3、双击切片，给切片命名</p><p>4、将需要制作透明背景图像的切片的背景隐藏</p><p>5、执行菜单命令 存储为web所用格式</p><p>6、点选切片，设置切片的图片格式</p><p>7、存储切片，选择“所有用户切片”，点存储(多个切片会自动存到所选文件夹中的images文件夹中)</p><h2 id="4-4-Photoshop制作雪碧图技巧"><a href="#4-4-Photoshop制作雪碧图技巧" class="headerlink" title="4.4 Photoshop制作雪碧图技巧"></a>4.4 Photoshop制作雪碧图技巧</h2><p>雪碧图，就是将网页制作中使用的多个小图片合并成一个图片，使用css技术将这张合成的图片应用在网页不同的地方，雪碧图可以减少网页加载时的http请求数，优化网页性能。</p><p>步骤：</p><p>1、使用Photoshop新建一张背景透明的图片</p><p>2、将小图片复制到此图片中，排列好每个图像的位置，图片幅面不够可以用画布大小调整大小</p><p>3、按照所有小图片的范围裁剪图片，存为透明背景的png图片</p><h1 id="5-前端页面开发流程"><a href="#5-前端页面开发流程" class="headerlink" title="5. 前端页面开发流程"></a>5. 前端页面开发流程</h1><p>1、创建页面项目目录</p><p>2、使用Photoshop对效果图切图，切出网页制作中需要的小图片</p><p>3、将装饰类图像合并，制作成雪碧图</p><p>4、结合Photoshop和代码编辑器，参照效果图，进行html和css代码书写，制作页面</p><h1 id="6-HTML5和CSS3"><a href="#6-HTML5和CSS3" class="headerlink" title="6. HTML5和CSS3"></a>6. HTML5和CSS3</h1><h2 id="6-1-CSS权重"><a href="#6-1-CSS权重" class="headerlink" title="6.1 CSS权重"></a>6.1 CSS权重</h2><p>CSS权重指的是样式的优先级，有两条或多条样式作用于一个元素，权重高的那条样式对元素起作用,权重相同的，后写的样式会覆盖前面写的样式。</p><h3 id="6-1-1-权重的等级"><a href="#6-1-1-权重的等级" class="headerlink" title="6.1.1 权重的等级"></a>6.1.1 权重的等级</h3><p>可以把样式的应用方式分为几个等级，按照等级来计算权重</p><p>1、!important，加在样式属性值后，权重值为 10000<br>2、内联样式，如：style=””，权重值为1000<br>3、ID选择器，如：#content，权重值为100<br>4、类，伪类和属性选择器，如： content、:hover 权重值为10<br>5、标签选择器和伪元素选择器，如：div、p、:before 权重值为1<br>6、通用选择器（*）、子选择器（&gt;）、相邻选择器（+）、同胞选择器（~）、权重值为0</p><h3 id="6-1-2-权重的计算实例"><a href="#6-1-2-权重的计算实例" class="headerlink" title="6.1.2 权重的计算实例"></a>6.1.2 权重的计算实例</h3><p>1、实例一：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;style type="text/css"&gt;</span><br><span class="line">    <span class="selector-tag">div</span>&#123;</span><br><span class="line">        <span class="attribute">color</span>:red <span class="meta">!important</span>;</span><br><span class="line">    &#125;        </span><br><span class="line">&lt;/style&gt;</span><br><span class="line">......</span><br><span class="line">&lt;div style="color:blue"&gt;这是一个div元素&lt;/div&gt;</span><br><span class="line">&lt;!<span class="selector-tag">--</span> </span><br><span class="line">两条样式同时作用一个<span class="selector-tag">div</span>，上面的样式权重值为10000+1，下面的行间样式的权重值为1000，</span><br><span class="line">所以文字的最终颜色为<span class="selector-tag">red</span> </span><br><span class="line"><span class="selector-tag">--</span>&gt;</span><br></pre></td></tr></table></figure><p>2、实例二：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;style type="text/css"&gt;</span><br><span class="line">    <span class="selector-id">#content</span> <span class="selector-tag">div</span><span class="selector-class">.main_content</span> <span class="selector-tag">h2</span>&#123;</span><br><span class="line">        <span class="attribute">color</span>:red;    </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-id">#content</span> <span class="selector-class">.main_content</span> <span class="selector-tag">h2</span>&#123;</span><br><span class="line">        <span class="attribute">color</span>:blue;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">......</span><br><span class="line">&lt;div id="content"&gt;</span><br><span class="line">    &lt;div class="main_content"&gt;</span><br><span class="line">        &lt;h2&gt;这是一个h2标题&lt;/h2&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;!<span class="selector-tag">--</span> </span><br><span class="line">第一条样式的权重计算： 100+1+10+1，结果为112；</span><br><span class="line">第二条样式的权重计算： 100+10+1，结果为111；</span><br><span class="line"><span class="selector-tag">h2</span>标题的最终颜色为<span class="selector-tag">red</span></span><br><span class="line"><span class="selector-tag">--</span>&gt;</span><br></pre></td></tr></table></figure><h2 id="6-2-CSS3新增选择器"><a href="#6-2-CSS3新增选择器" class="headerlink" title="6.2 CSS3新增选择器"></a>6.2 CSS3新增选择器</h2><p>1、E:nth-child(n)：匹配元素类型为E且是父元素的第n个子元素</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;style type="text/css"&gt;            </span><br><span class="line">    <span class="selector-class">.list</span> <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child(2)</span>&#123;</span><br><span class="line">        <span class="attribute">background-color</span>:red;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">......</span><br><span class="line">&lt;div class="list"&gt;</span><br><span class="line">    &lt;h2&gt;1&lt;/h2&gt;</span><br><span class="line">    &lt;div&gt;2&lt;/div&gt;</span><br><span class="line">    &lt;div&gt;3&lt;/div&gt;</span><br><span class="line">    &lt;div&gt;4&lt;/div&gt;</span><br><span class="line">    &lt;div&gt;5&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!<span class="selector-tag">--</span> 第2个子元素<span class="selector-tag">div</span>匹配 <span class="selector-tag">--</span>&gt;</span><br></pre></td></tr></table></figure><p>2、E:first-child：匹配元素类型为E且是父元素的第一个子元素<br>3、E:last-child：匹配元素类型为E且是父元素的最后一个子元素<br>4、E &gt; F E元素下面第一层子集<br>5、E ~ F E元素后面的兄弟元素<br>6、E + F 紧挨着的后面的兄弟元素</p><p>属性选择器：<br>1、E[attr] 含有attr属性的元素</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;style type="text/css"&gt;</span><br><span class="line">    <span class="selector-tag">div</span><span class="selector-attr">[data-attr='ok']</span>&#123;</span><br><span class="line">        <span class="attribute">color</span>:red;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">......</span><br><span class="line">&lt;div data-attr="ok"&gt;这是一个div元素&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>2、E[attr=’ok’] 含有attr属性的元素且它的值为“ok”<br>3、E[attr^=’ok’] 含有attr属性的元素且它的值的开头含有“ok”<br>4、E[attr$=’ok’] 含有attr属性的元素且它的值的结尾含有“ok”<br>5、E[attr*=’ok’] 含有attr属性的元素且它的值中含有“ok”</p><h2 id="6-3-CSS3圆角、rgba"><a href="#6-3-CSS3圆角、rgba" class="headerlink" title="6.3 CSS3圆角、rgba"></a>6.3 CSS3圆角、rgba</h2><h3 id="6-3-1-CSS3圆角"><a href="#6-3-1-CSS3圆角" class="headerlink" title="6.3.1 CSS3圆角"></a>6.3.1 CSS3圆角</h3><p>设置某一个角的圆角，比如设置左上角的圆角：<br>border-top-left-radius:30px 60px;</p><p>同时分别设置四个角： border-radius:30px 60px 120px 150px;</p><p>设置四个圆角相同：<br>border-radius:50%;</p><h3 id="6-3-2-rgba（新的颜色值表示法）"><a href="#6-3-2-rgba（新的颜色值表示法）" class="headerlink" title="6.3.2 rgba（新的颜色值表示法）"></a>6.3.2 rgba（新的颜色值表示法）</h3><p>1、盒子透明度表示法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">opacity</span>:<span class="number">0.1</span>;</span><br><span class="line">    <span class="comment">/* 兼容IE */</span></span><br><span class="line">    <span class="attribute">filter</span>:<span class="built_in">alpha</span>(opacity=10); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、rgba(0,0,0,0.1) 前三个数值表示颜色，第四个数值表示颜色的透明度</p><h2 id="6-4-CSS3-transition动画"><a href="#6-4-CSS3-transition动画" class="headerlink" title="6.4 CSS3 transition动画"></a>6.4 CSS3 transition动画</h2><p>1、transition-property 设置过渡的属性，比如：width height background-color<br>2、transition-duration 设置过渡的时间，比如：1s 500ms<br>3、transition-timing-function 设置过渡的运动方式，常用有 linear(匀速)|ease(缓冲运动)<br>4、transition-delay 设置动画的延迟<br>5、transition: property duration timing-function delay 同时设置四个属性</p><h3 id="综合练习："><a href="#综合练习：" class="headerlink" title="综合练习："></a>综合练习：</h3><p>制作鼠标移入图片时，图片说明滑入的效果</p><p><img src="/qianduan_images/034.png" alt="示例图片"></p><h2 id="6-5-CSS3-transform变换"><a href="#6-5-CSS3-transform变换" class="headerlink" title="6.5 CSS3 transform变换"></a>6.5 CSS3 transform变换</h2><p>1、translate(x,y) 设置盒子位移<br>2、scale(x,y) 设置盒子缩放<br>3、rotate(deg) 设置盒子旋转<br>4、skew(x-angle,y-angle) 设置盒子斜切<br>5、perspective 设置透视距离<br>6、transform-style flat | preserve-3d 设置盒子是否按3d空间显示<br>7、translateX、translateY、translateZ 设置三维移动<br>8、rotateX、rotateY、rotateZ 设置三维旋转<br>9、scaleX、scaleY、scaleZ 设置三维缩放<br>10、tranform-origin 设置变形的中心点<br>11、backface-visibility 设置盒子背面是否可见</p><p>举例：（翻面效果）</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="selector-tag">DOCTYPE</span> <span class="selector-tag">html</span>&gt;</span><br><span class="line">&lt;html lang="en"&gt;</span><br><span class="line">&lt;<span class="selector-tag">head</span>&gt;</span><br><span class="line">    &lt;meta charset="UTF-8"&gt;</span><br><span class="line">    &lt;title&gt;翻面&lt;/title&gt;</span><br><span class="line">    &lt;style type="text/css"&gt;</span><br><span class="line">        <span class="selector-class">.box</span>&#123;</span><br><span class="line">            <span class="attribute">width</span>:<span class="number">300px</span>;</span><br><span class="line">            <span class="attribute">height</span>:<span class="number">272px</span>;</span><br><span class="line">            <span class="attribute">margin</span>:<span class="number">50px</span> auto <span class="number">0</span>;</span><br><span class="line">            <span class="attribute">transform-style</span>:preserve-<span class="number">3</span>d;</span><br><span class="line">            <span class="attribute">position</span>:relative;            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-class">.box</span> <span class="selector-class">.pic</span>&#123;</span><br><span class="line">            <span class="attribute">width</span>:<span class="number">300px</span>;</span><br><span class="line">            <span class="attribute">height</span>:<span class="number">272px</span>;</span><br><span class="line">            <span class="attribute">position</span>:absolute;</span><br><span class="line">            <span class="attribute">background-color</span>:cyan;</span><br><span class="line">            <span class="attribute">left</span>:<span class="number">0</span>;</span><br><span class="line">            <span class="attribute">top</span>:<span class="number">0</span>;</span><br><span class="line">            <span class="attribute">transform</span>:<span class="built_in">perspective</span>(800px) <span class="built_in">rotateY</span>(0deg);</span><br><span class="line">            <span class="attribute">backface-visibility</span>:hidden;</span><br><span class="line">            <span class="attribute">transition</span>:all <span class="number">500ms</span> ease;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-class">.box</span> <span class="selector-class">.back_info</span>&#123;</span><br><span class="line">            <span class="attribute">width</span>:<span class="number">300px</span>;</span><br><span class="line">            <span class="attribute">height</span>:<span class="number">272px</span>;</span><br><span class="line">            <span class="attribute">text-align</span>:center;</span><br><span class="line">            <span class="attribute">line-height</span>:<span class="number">272px</span>;</span><br><span class="line">            <span class="attribute">background-color</span>:gold;</span><br><span class="line">            <span class="attribute">position</span>:absolute;</span><br><span class="line">            <span class="attribute">left</span>:<span class="number">0</span>;</span><br><span class="line">            <span class="attribute">top</span>:<span class="number">0</span>;</span><br><span class="line">            <span class="attribute">transform</span>:<span class="built_in">rotateY</span>(180deg);</span><br><span class="line">            <span class="attribute">backface-visibility</span>:hidden;</span><br><span class="line">            <span class="attribute">transition</span>:all <span class="number">500ms</span> ease;            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-class">.box</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.pic</span>&#123;</span><br><span class="line">            <span class="attribute">transform</span>:<span class="built_in">perspective</span>(800px) <span class="built_in">rotateY</span>(180deg);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-class">.box</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.back_info</span>&#123;</span><br><span class="line">            <span class="attribute">transform</span>:<span class="built_in">perspective</span>(800px) <span class="built_in">rotateY</span>(0deg);</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">    &lt;div class="box"&gt;        </span><br><span class="line">        &lt;div class="pic"&gt;&lt;img src="images/location_bg.jpg"&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div class="back_info"&gt;背面文字说明&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="6-6-CSS3-animation动画"><a href="#6-6-CSS3-animation动画" class="headerlink" title="6.6 CSS3 animation动画"></a>6.6 CSS3 animation动画</h2><p>1、@keyframes 定义关键帧动画<br>2、animation-name 动画名称<br>3、animation-duration 动画时间<br>4、animation-timing-function 动画曲线 linear(匀速)|ease(缓冲)|steps(步数)<br>5、animation-delay 动画延迟<br>6、animation-iteration-count 动画播放次数 n|infinite<br>7、animation-direction 动画结束后是否反向还原 normal|alternate<br>8、animation-play-state 动画状态 paused(停止)|running(运动)<br>9、animation-fill-mode 动画前后的状态 none(缺省)|forwards(结束时停留在最后一帧)|backwards(开始时停留在定义的开始帧)|both(前后都应用)<br>10、animation:name duration timing-function delay iteration-count direction;同时设置多个属性</p><p>理解练习：<br>1、风车动画<br>2、loading动画<br><img src="/qianduan_images/035.png" alt="示例图片"></p><p>3、人物走路动画</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="selector-tag">DOCTYPE</span> <span class="selector-tag">html</span>&gt;</span><br><span class="line">&lt;html lang="en"&gt;</span><br><span class="line">&lt;<span class="selector-tag">head</span>&gt;</span><br><span class="line">    &lt;meta charset="UTF-8"&gt;</span><br><span class="line">    &lt;title&gt;走路动画&lt;/title&gt;</span><br><span class="line">    &lt;style type="text/css"&gt;        </span><br><span class="line">        <span class="selector-class">.box</span>&#123;</span><br><span class="line">            <span class="attribute">width</span>:<span class="number">120px</span>;</span><br><span class="line">            <span class="attribute">height</span>:<span class="number">180px</span>;</span><br><span class="line">            <span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#ccc</span>;            </span><br><span class="line">            <span class="attribute">margin</span>:<span class="number">50px</span> auto <span class="number">0</span>;</span><br><span class="line">            <span class="attribute">position</span>:relative;</span><br><span class="line">            <span class="attribute">overflow</span>:hidden;            </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="selector-class">.box</span> <span class="selector-tag">img</span>&#123;</span><br><span class="line">            <span class="attribute">display</span>:block;</span><br><span class="line">            <span class="attribute">width</span>:<span class="number">960px</span>;</span><br><span class="line">            <span class="attribute">height</span>:<span class="number">182px</span>;</span><br><span class="line">            <span class="attribute">position</span>: absolute;</span><br><span class="line">            <span class="attribute">left</span>:<span class="number">0</span>;</span><br><span class="line">            <span class="attribute">top</span>:<span class="number">0</span>;</span><br><span class="line">            <span class="attribute">animation</span>:walking <span class="number">1.0s</span> <span class="built_in">steps</span>(8) infinite;            </span><br><span class="line">        &#125;</span><br><span class="line">        @<span class="keyword">keyframes</span> walking&#123;</span><br><span class="line">            <span class="selector-tag">from</span>&#123;</span><br><span class="line">                <span class="attribute">left</span>:<span class="number">0px</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="selector-tag">to</span>&#123;</span><br><span class="line">                <span class="attribute">left</span>:-<span class="number">960px</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">    &lt;div class="box"&gt;&lt;img src="images/walking.png"&gt;&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>动画中使用的图片如下：</p><p><img src="/qianduan_images/036.png" alt="示例图片"></p><h2 id="6-7-CSS3-浏览器前缀"><a href="#6-7-CSS3-浏览器前缀" class="headerlink" title="6.7 CSS3 浏览器前缀"></a>6.7 CSS3 浏览器前缀</h2><h3 id="6-7-1-浏览器样式前缀"><a href="#6-7-1-浏览器样式前缀" class="headerlink" title="6.7.1 浏览器样式前缀"></a>6.7.1 浏览器样式前缀</h3><p>为了让CSS3样式兼容，需要将某些样式加上浏览器前缀：</p><p>-ms- 兼容IE浏览器<br>-moz- 兼容firefox<br>-o- 兼容opera<br>-webkit- 兼容chrome 和 safari</p><p>比如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span></span><br><span class="line">&#123;    </span><br><span class="line">    <span class="attribute">-ms-transform</span>: <span class="built_in">rotate</span>(30deg);        </span><br><span class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">rotate</span>(30deg);    </span><br><span class="line">    <span class="attribute">-o-transform</span>: <span class="built_in">rotate</span>(30deg);        </span><br><span class="line">    <span class="attribute">-moz-transform</span>: <span class="built_in">rotate</span>(30deg);    </span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(30deg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-7-2-自动添加浏览器前缀"><a href="#6-7-2-自动添加浏览器前缀" class="headerlink" title="6.7.2 自动添加浏览器前缀"></a>6.7.2 自动添加浏览器前缀</h3><p>目前的状况是，有些CSS3属性需要加前缀，有些不需要加，有些只需要加一部分，这些加前缀的工作可以交给插件来完成，比如安装： autoprefixer</p><p>可以在Sublime text中通过package control 安装 autoprefixer</p><h3 id="6-7-3-Autoprefixer在Sublime-text中的设置："><a href="#6-7-3-Autoprefixer在Sublime-text中的设置：" class="headerlink" title="6.7.3 Autoprefixer在Sublime text中的设置："></a>6.7.3 Autoprefixer在Sublime text中的设置：</h3><p>1、preferences/key Bindings-User</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; "keys": ["ctrl+alt+x"], "command": "autoprefixer" &#125;</span><br></pre></td></tr></table></figure><p>2、Preferences&gt;package setting&gt;AutoPrefixer&gt;Setting-User</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    "browsers": ["last 7 versions"],</span><br><span class="line">    "<span class="selector-tag">cascade</span>": <span class="selector-tag">true</span>,</span><br><span class="line">    "<span class="selector-tag">remove</span>": <span class="selector-tag">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>last 7 versions：最新的浏览器的7个版本<br>cascade：缩进美化属性值<br>remove：是否去掉不必要的前缀</p><h2 id="6-8-HTML5新增标签"><a href="#6-8-HTML5新增标签" class="headerlink" title="6.8 HTML5新增标签"></a>6.8 HTML5新增标签</h2><h3 id="6-8-1-新增语义标签"><a href="#6-8-1-新增语义标签" class="headerlink" title="6.8.1 新增语义标签"></a>6.8.1 <strong>新增语义标签</strong></h3><p>1、<code>&lt;header&gt;</code> 页面头部、页眉<br>2、<code>&lt;nav&gt;</code> 页面导航<br>3、<code>&lt;article&gt;</code> 一篇文章<br>4、<code>&lt;section&gt;</code> 文章中的章节<br>5、<code>&lt;aside&gt;</code> 侧边栏<br>6、<code>&lt;footer&gt;</code> 页面底部、页脚</p><h3 id="6-8-2-音频视频"><a href="#6-8-2-音频视频" class="headerlink" title="6.8.2 音频视频"></a>6.8.2 <strong>音频视频</strong></h3><p>1、<code>&lt;audio&gt;</code><br>2、<code>&lt;video&gt;</code></p><p>PC端兼容h5的新标签的方法，在页面中引入以下js文件:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type="text/javascript" src="//cdn.bootcss.com/html5shiv/r29/html5.js"&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="6-9-HTML5-新增表单控件"><a href="#6-9-HTML5-新增表单控件" class="headerlink" title="6.9 HTML5 新增表单控件"></a>6.9 HTML5 新增表单控件</h2><p>新增类型：网址 邮箱 日期 时间 星期 数量 范围 电话 颜色 搜索</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;label&gt;网址:&lt;/label&gt;&lt;input type=&quot;url&quot; name=&quot;&quot; required&gt;&lt;br&gt;&lt;br&gt; </span><br><span class="line">&lt;label&gt;邮箱:&lt;/label&gt;&lt;input type=&quot;email&quot; name=&quot;&quot; required&gt;&lt;br&gt;&lt;br&gt; </span><br><span class="line">&lt;label&gt;日期:&lt;/label&gt;&lt;input type=&quot;date&quot; name=&quot;&quot;&gt;&lt;br&gt;&lt;br&gt; </span><br><span class="line">&lt;label&gt;时间:&lt;/label&gt;&lt;input type=&quot;time&quot; name=&quot;&quot;&gt;&lt;br&gt;&lt;br&gt; </span><br><span class="line">&lt;label&gt;星期:&lt;/label&gt;&lt;input type=&quot;week&quot; name=&quot;&quot;&gt;&lt;br&gt;&lt;br&gt; </span><br><span class="line">&lt;label&gt;数量:&lt;/label&gt;&lt;input type=&quot;number&quot; name=&quot;&quot;&gt; &lt;br&gt;&lt;br&gt;</span><br><span class="line">&lt;label&gt;范围:&lt;/label&gt;&lt;input type=&quot;range&quot; name=&quot;&quot;&gt;&lt;br&gt;&lt;br&gt; </span><br><span class="line">&lt;label&gt;电话:&lt;/label&gt;&lt;input type=&quot;tel&quot; name=&quot;&quot;&gt;&lt;br&gt;&lt;br&gt; </span><br><span class="line">&lt;label&gt;颜色:&lt;/label&gt;&lt;input type=&quot;color&quot; name=&quot;&quot;&gt;&lt;br&gt;&lt;br&gt; </span><br><span class="line">&lt;label&gt;搜索:&lt;/label&gt;&lt;input type=&quot;search&quot; name=&quot;&quot;&gt;&lt;br&gt;&lt;br&gt;</span><br></pre></td></tr></table></figure><p>新增常用表单控件属性：<br>1、placeholder 设置文本框默认提示文字<br>2、autofocus 自动获得焦点<br>3、autocomplete 联想关键词</p><h1 id="7-移动端页面开发"><a href="#7-移动端页面开发" class="headerlink" title="7. 移动端页面开发"></a>7. 移动端页面开发</h1><h2 id="7-1-移动端与PC端页面布局区别"><a href="#7-1-移动端与PC端页面布局区别" class="headerlink" title="7.1 移动端与PC端页面布局区别"></a>7.1 移动端与PC端页面布局区别</h2><h3 id="7-1-1-视口"><a href="#7-1-1-视口" class="headerlink" title="7.1.1 视口"></a>7.1.1 视口</h3><p>视口是移动设备上用来显示网页的区域，一般会比移动设备可视区域大，宽度可能是980px或者1024px，目的是为了显示下整个为PC端设计的网页，这样带来的后果是移动端会出现横向滚动条，为了避免这种情况，移动端会将视口缩放到移动端窗口的大小。这样会让网页不容易观看，可以用 meta 标签，name=“viewport ” 来设置视口的大小，将视口的大小设置为和移动设备可视区一样的大小。</p><p>设置方法如下( 快捷方式：meta:vp + tab )：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">......</span><br><span class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, user-scalable=no,</span><br><span class="line"> initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;&gt;</span><br><span class="line">......</span><br><span class="line">&lt;/head&gt;</span><br></pre></td></tr></table></figure><p>pc端与移动端渲染网页过程：<br><img src="/qianduan_images/034.jpg" alt="示例图片"></p><h3 id="7-1-2-视网膜屏幕（retina屏幕）清晰度解决方案"><a href="#7-1-2-视网膜屏幕（retina屏幕）清晰度解决方案" class="headerlink" title="7.1.2 视网膜屏幕（retina屏幕）清晰度解决方案"></a>7.1.2 视网膜屏幕（retina屏幕）清晰度解决方案</h3><p>视网膜屏幕指的是屏幕的物理像素密度更高的屏幕，物理像素可以理解为屏幕上的一个发光点，无数发光的点组成的屏幕，视网膜屏幕比一般屏幕的物理像素点更小，常见有2倍的视网膜屏幕和3倍的视网膜屏幕，2倍的视网膜屏幕，它的物理像素点大小是一般屏幕的1/4,3倍的视网膜屏幕，它的物理像素点大小是一般屏幕的1/9。</p><p>图像在视网膜屏幕上显示的大小和在一般屏幕上显示的大小一样，但是由于视网膜屏幕的物理像素点比一般的屏幕小，图像在上面好像是被放大了，图像会变得模糊，为了解决这个问题，可以使用比原来大一倍的图像，然后用css样式强制把图像的尺寸设为原来图像尺寸的大小，就可以解决模糊的问题。</p><p>清晰度解决过程示意图：<br><img src="/qianduan_images/035.jpg" alt="示例图片"></p><p>背景图强制改变大小，可以使用background新属性</p><p><strong>background新属性</strong><br>background-size:</p><ul><li>length：用长度值指定背景图像大小。不允许负值。</li><li>percentage：用百分比指定背景图像大小。不允许负值。</li><li>auto：背景图像的真实大小。</li><li>cover：将背景图像等比缩放到完全覆盖容器，背景图像有可能超出容器。</li><li>contain：将背景图像等比缩放到宽度或高度与容器的宽度或高度相等，背景图像始终被包含在容器内。</li></ul><h2 id="7-2-适配布局类型"><a href="#7-2-适配布局类型" class="headerlink" title="7.2 适配布局类型"></a>7.2 适配布局类型</h2><h3 id="7-2-1-PC及移动端页面适配方法"><a href="#7-2-1-PC及移动端页面适配方法" class="headerlink" title="7.2.1 PC及移动端页面适配方法"></a>7.2.1 PC及移动端页面适配方法</h3><p>设备屏幕有多种不同的分辨率，页面适配方案有如下几种：</p><p>1、全适配：响应式布局+流体布局<br>2、移动端适配：</p><ul><li>流体布局+少量响应式</li><li>基于rem的布局</li></ul><h3 id="7-2-2-流体布局"><a href="#7-2-2-流体布局" class="headerlink" title="7.2.2 流体布局"></a>7.2.2 流体布局</h3><p>流体布局，就是使用百分比来设置元素的宽度，元素的高度按实际高度写固定值，流体布局中，元素的边线无法用百分比，可以使用样式中的计算函数 calc() 来设置宽度，或者使用 box-sizing 属性将盒子设置为从边线计算盒子尺寸。</p><p><strong>calc()</strong><br>可以通过计算的方式给元素加尺寸，比如： width：calc(25% - 4px);</p><p><strong>box-sizing</strong><br>1、content-box 默认的盒子尺寸计算方式<br>2、border-box 置盒子的尺寸计算方式为从边框开始，盒子的尺寸，边框和内填充算在盒子尺寸内</p><h3 id="7-2-3-响应式布局"><a href="#7-2-3-响应式布局" class="headerlink" title="7.2.3 响应式布局"></a>7.2.3 响应式布局</h3><p>响应式布局就是使用媒体查询的方式，通过查询浏览器宽度，不同的宽度应用不同的样式块，每个样式块对应的是该宽度下的布局方式，从而实现响应式布局。响应式布局的页面可以适配多种终端屏幕（pc、平板、手机）。</p><p>相应布局的伪代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@media (max-width:960px)&#123;</span><br><span class="line">    .left_con&#123;width:58%;&#125;</span><br><span class="line">    .right_con&#123;width:38%;&#125;</span><br><span class="line">&#125;</span><br><span class="line">@media (max-width:768px)&#123;</span><br><span class="line">    .left_con&#123;width:100%;&#125;</span><br><span class="line">    .right_con&#123;width:100%;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-2-4-基于rem的布局"><a href="#7-2-4-基于rem的布局" class="headerlink" title="7.2.4 基于rem的布局"></a>7.2.4 基于rem的布局</h3><p>首先了解em单位，em单位是参照元素自身的文字大小来设置尺寸，rem指的是参照根节点的文字大小，根节点指的是html标签，设置html标签的文字大小，其他的元素相关尺寸设置用rem，这样，所有元素都有了统一的参照标准，改变html文字的大小，就会改变所有元素用rem设置的尺寸大小。</p><p><strong>cssrem安装</strong></p><p>cssrem插件可以动态地将px尺寸换算成rem尺寸</p><p>下载本项目，比如：git clone <a href="https://github.com/flashlizi/cssrem" target="_blank" rel="noopener">https://github.com/flashlizi/cssrem</a> 进入packages目录：Sublime Text -&gt; Preferences -&gt; Browse Packages… 复制下载的cssrem目录到刚才的packges目录里。 重启Sublime Text。</p><p>配置参数 参数配置文件：Sublime Text -&gt; Preferences -&gt; Package Settings -&gt; cssrem px_to_rem - px转rem的单位比例，默认为40。 max_rem_fraction_length - px转rem的小数部分的最大长度。默认为6。 available_file_types - 启用此插件的文件类型。默认为：[“.css”, “.less”, “.sass”]。</p><h1 id="8-常用css列表"><a href="#8-常用css列表" class="headerlink" title="8. 常用css列表"></a>8. 常用css列表</h1><ul><li>color 设置文字的颜色，如： color:red;</li><li>font-size 设置文字的大小，如：font-size:12px;</li><li>font-family 设置文字的字体，如：font-family:’微软雅黑’;</li><li>font-style 设置字体是否倾斜，如：font-style:’normal’; 设置不倾斜，font-style:’italic’;设置文字倾斜</li><li>font-weight 设置文字是否加粗，如：font-weight:bold; 设置加粗 font-weight:normal 设置不加粗</li><li>line-height 设置文字的行高，设置行高相当于在每行文字的上下同时加间距， 如：line-height:24px;</li><li>font 同时设置文字的几个属性，写的顺序有兼容问题，建议按照如下顺序写： font：是否加粗 字号/行高 字体；如： font:normal 12px/36px ‘微软雅黑’;</li><li>text-decoration 设置文字的下划线，如：text-decoration:none; 将文字下划线去掉</li><li>text-indent 设置文字首行缩进，如：text-indent:24px; 设置文字首行缩进24px</li><li>text-align 设置文字水平对齐方式，如text-align:center 设置文字水平居中</li><li>text-overflow 设置一行文字宽度超过容器宽度时的显示方式，如：text-overflow:clip 将多出的文字裁剪掉 text-overflow:ellipsis 将多出的文字显示成省略号</li><li>white-space 一般用来设置文本不换行，如：white-space:nowrap 设置文本不换行 一般与text-overflow和overflow属性配合使用来让一行文字超出宽度时显示省略号</li><li>list-style 一般用来设置去掉ul或者ol列表中的小圆点或数字 如：list-style:none</li><li>width 设置盒子内容的宽度，如： width：100px;</li><li><p>height 设置盒子内容的高度，如： height：100px;</p></li><li><p>border-top 设置盒子顶部边框的三个属性 如：border-top:5px solid red;设置盒子顶部边框为3像素宽的红色的实线，详细设置说明：<a href="file:///F:/BaiduYunDownload/Python%E8%AF%BE%E4%BB%B6/%E5%9F%BA%E7%A1%80%E7%8F%AD-%E5%B0%B1%E4%B8%9A%E7%8F%AD%E8%AF%BE%E4%BB%B6%E8%B5%84%E6%96%99%20-1-4%E4%BD%8D%E5%9F%BA%E7%A1%80%E7%8F%AD%20%205-14%E5%B0%B1%E4%B8%9A%E7%8F%AD/06%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E9%98%B6%E6%AE%B5/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/%E5%89%8D%E7%AB%AF%E8%AF%BE%E4%BB%B6/02/mds/section01.html" target="_blank" rel="noopener">盒子模型</a></p></li><li><p>border-left 设置盒子左边边框的三个属性 如：border-left:3px dotted red;设置盒子左边边框为3像素宽的红色的点线，详细设置说明：<a href="file:///F:/BaiduYunDownload/Python%E8%AF%BE%E4%BB%B6/%E5%9F%BA%E7%A1%80%E7%8F%AD-%E5%B0%B1%E4%B8%9A%E7%8F%AD%E8%AF%BE%E4%BB%B6%E8%B5%84%E6%96%99%20-1-4%E4%BD%8D%E5%9F%BA%E7%A1%80%E7%8F%AD%20%205-14%E5%B0%B1%E4%B8%9A%E7%8F%AD/06%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E9%98%B6%E6%AE%B5/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/%E5%89%8D%E7%AB%AF%E8%AF%BE%E4%BB%B6/02/mds/section01.html" target="_blank" rel="noopener">盒子模型</a></p></li><li><p>border-right 设置盒子右边边框的三个属性 如：border-right:2px dashed red;设置盒子右边框为2像素宽的红色的虚线，详细设置说明：<a href="file:///F:/BaiduYunDownload/Python%E8%AF%BE%E4%BB%B6/%E5%9F%BA%E7%A1%80%E7%8F%AD-%E5%B0%B1%E4%B8%9A%E7%8F%AD%E8%AF%BE%E4%BB%B6%E8%B5%84%E6%96%99%20-1-4%E4%BD%8D%E5%9F%BA%E7%A1%80%E7%8F%AD%20%205-14%E5%B0%B1%E4%B8%9A%E7%8F%AD/06%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E9%98%B6%E6%AE%B5/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/%E5%89%8D%E7%AB%AF%E8%AF%BE%E4%BB%B6/02/mds/section01.html" target="_blank" rel="noopener">盒子模型</a></p></li><li><p>border-bottom 设置盒子底部边框的三个属性 如：border-bottom:1px solid red;设置盒子底部边框为1像素宽的红色的实线，详细设置说明：<a href="file:///F:/BaiduYunDownload/Python%E8%AF%BE%E4%BB%B6/%E5%9F%BA%E7%A1%80%E7%8F%AD-%E5%B0%B1%E4%B8%9A%E7%8F%AD%E8%AF%BE%E4%BB%B6%E8%B5%84%E6%96%99%20-1-4%E4%BD%8D%E5%9F%BA%E7%A1%80%E7%8F%AD%20%205-14%E5%B0%B1%E4%B8%9A%E7%8F%AD/06%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E9%98%B6%E6%AE%B5/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/%E5%89%8D%E7%AB%AF%E8%AF%BE%E4%BB%B6/02/mds/section01.html" target="_blank" rel="noopener">盒子模型</a></p></li><li><p>border 同时设置盒子的四个边框，如果四个边的样式统一就使用它 如：border:1px solid #000 设置盒子四个边都是1像素宽的黑色实线，详细设置说明：<a href="file:///F:/BaiduYunDownload/Python%E8%AF%BE%E4%BB%B6/%E5%9F%BA%E7%A1%80%E7%8F%AD-%E5%B0%B1%E4%B8%9A%E7%8F%AD%E8%AF%BE%E4%BB%B6%E8%B5%84%E6%96%99%20-1-4%E4%BD%8D%E5%9F%BA%E7%A1%80%E7%8F%AD%20%205-14%E5%B0%B1%E4%B8%9A%E7%8F%AD/06%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E9%98%B6%E6%AE%B5/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/%E5%89%8D%E7%AB%AF%E8%AF%BE%E4%BB%B6/02/mds/section01.html" target="_blank" rel="noopener">盒子模型</a></p></li><li><p>padding 设置盒子四个边的内边距 如：padding:10px 20px 30px 40px 分别设置盒子上边(10px)、右边(20px)、下边(30px)、左边(40px)的内边距(顺时针)，详细设置说明：<a href="file:///F:/BaiduYunDownload/Python%E8%AF%BE%E4%BB%B6/%E5%9F%BA%E7%A1%80%E7%8F%AD-%E5%B0%B1%E4%B8%9A%E7%8F%AD%E8%AF%BE%E4%BB%B6%E8%B5%84%E6%96%99%20-1-4%E4%BD%8D%E5%9F%BA%E7%A1%80%E7%8F%AD%20%205-14%E5%B0%B1%E4%B8%9A%E7%8F%AD/06%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E9%98%B6%E6%AE%B5/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/%E5%89%8D%E7%AB%AF%E8%AF%BE%E4%BB%B6/02/mds/section01.html" target="_blank" rel="noopener">盒子模型</a></p></li><li><p>margin 设置盒子四个边的外边距 如：margin:10px 20px 30px 40px 分别设置盒子上边(10px)、右边(20px)、下边(30px)、左边(40px)的外边距(顺时针)，详细设置说明：<a href="file:///F:/BaiduYunDownload/Python%E8%AF%BE%E4%BB%B6/%E5%9F%BA%E7%A1%80%E7%8F%AD-%E5%B0%B1%E4%B8%9A%E7%8F%AD%E8%AF%BE%E4%BB%B6%E8%B5%84%E6%96%99%20-1-4%E4%BD%8D%E5%9F%BA%E7%A1%80%E7%8F%AD%20%205-14%E5%B0%B1%E4%B8%9A%E7%8F%AD/06%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E9%98%B6%E6%AE%B5/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/%E5%89%8D%E7%AB%AF%E8%AF%BE%E4%BB%B6/02/mds/section01.html" target="_blank" rel="noopener">盒子模型</a></p></li><li><p>overflow 设置当子元素的尺寸超过父元素的尺寸时，盒子及子元素的显示方式 如：overflow:hidden 超出的子元素被裁切，详细设置说明：<a href="file:///F:/BaiduYunDownload/Python%E8%AF%BE%E4%BB%B6/%E5%9F%BA%E7%A1%80%E7%8F%AD-%E5%B0%B1%E4%B8%9A%E7%8F%AD%E8%AF%BE%E4%BB%B6%E8%B5%84%E6%96%99%20-1-4%E4%BD%8D%E5%9F%BA%E7%A1%80%E7%8F%AD%20%205-14%E5%B0%B1%E4%B8%9A%E7%8F%AD/06%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E9%98%B6%E6%AE%B5/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/%E5%89%8D%E7%AB%AF%E8%AF%BE%E4%BB%B6/02/mds/section004.html" target="_blank" rel="noopener">元素溢出</a></p></li><li>display 设置盒子的显示类型及隐藏，如：display:block 将盒子设置为以块元素显示 display:none 将元素隐藏，详细设置说明：<a href="file:///F:/BaiduYunDownload/Python%E8%AF%BE%E4%BB%B6/%E5%9F%BA%E7%A1%80%E7%8F%AD-%E5%B0%B1%E4%B8%9A%E7%8F%AD%E8%AF%BE%E4%BB%B6%E8%B5%84%E6%96%99%20-1-4%E4%BD%8D%E5%9F%BA%E7%A1%80%E7%8F%AD%20%205-14%E5%B0%B1%E4%B8%9A%E7%8F%AD/06%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E9%98%B6%E6%AE%B5/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/%E5%89%8D%E7%AB%AF%E8%AF%BE%E4%BB%B6/02/mds/section02.html" target="_blank" rel="noopener">元素类型</a></li><li>float 设置元浮动 如：float:left 设置左浮动 float:right 设置右浮动，详细设置说明：<a href="file:///F:/BaiduYunDownload/Python%E8%AF%BE%E4%BB%B6/%E5%9F%BA%E7%A1%80%E7%8F%AD-%E5%B0%B1%E4%B8%9A%E7%8F%AD%E8%AF%BE%E4%BB%B6%E8%B5%84%E6%96%99%20-1-4%E4%BD%8D%E5%9F%BA%E7%A1%80%E7%8F%AD%20%205-14%E5%B0%B1%E4%B8%9A%E7%8F%AD/06%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E9%98%B6%E6%AE%B5/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/%E5%89%8D%E7%AB%AF%E8%AF%BE%E4%BB%B6/02/mds/section03.html" target="_blank" rel="noopener">元素浮动</a></li><li>clear 在盒子两侧清除浮动 如：clear:both 在盒子两侧都不允许浮动，详细设置说明：<a href="file:///F:/BaiduYunDownload/Python%E8%AF%BE%E4%BB%B6/%E5%9F%BA%E7%A1%80%E7%8F%AD-%E5%B0%B1%E4%B8%9A%E7%8F%AD%E8%AF%BE%E4%BB%B6%E8%B5%84%E6%96%99%20-1-4%E4%BD%8D%E5%9F%BA%E7%A1%80%E7%8F%AD%20%205-14%E5%B0%B1%E4%B8%9A%E7%8F%AD/06%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E9%98%B6%E6%AE%B5/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/%E5%89%8D%E7%AB%AF%E8%AF%BE%E4%BB%B6/02/mds/section03.html" target="_blank" rel="noopener">元素浮动</a></li><li>position 设置元素定位 如：position:relative 设置元素相对定位，详细设置说明：<a href="file:///F:/BaiduYunDownload/Python%E8%AF%BE%E4%BB%B6/%E5%9F%BA%E7%A1%80%E7%8F%AD-%E5%B0%B1%E4%B8%9A%E7%8F%AD%E8%AF%BE%E4%BB%B6%E8%B5%84%E6%96%99%20-1-4%E4%BD%8D%E5%9F%BA%E7%A1%80%E7%8F%AD%20%205-14%E5%B0%B1%E4%B8%9A%E7%8F%AD/06%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E9%98%B6%E6%AE%B5/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/%E5%89%8D%E7%AB%AF%E8%AF%BE%E4%BB%B6/02/mds/section04.html" target="_blank" rel="noopener">元素定位</a></li><li>background 设置元素的背景色和背景图片，如：background:url(bg.jpg) cyan;设置盒子的背景图片为bg.jpg，背景色为cyan，详细设置说明：<a href="file:///F:/BaiduYunDownload/Python%E8%AF%BE%E4%BB%B6/%E5%9F%BA%E7%A1%80%E7%8F%AD-%E5%B0%B1%E4%B8%9A%E7%8F%AD%E8%AF%BE%E4%BB%B6%E8%B5%84%E6%96%99%20-1-4%E4%BD%8D%E5%9F%BA%E7%A1%80%E7%8F%AD%20%205-14%E5%B0%B1%E4%B8%9A%E7%8F%AD/06%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E9%98%B6%E6%AE%B5/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/%E5%89%8D%E7%AB%AF%E8%AF%BE%E4%BB%B6/02/mds/section05.html" target="_blank" rel="noopener">元素背景</a></li><li><p>background-size 设置盒子背景图的尺寸，如：background-size:30px 40px;设置背景图的尺寸宽为30px，高为40px，这个属性不能合到background属性中，详细设置说明：<a href="file:///F:/BaiduYunDownload/Python%E8%AF%BE%E4%BB%B6/%E5%9F%BA%E7%A1%80%E7%8F%AD-%E5%B0%B1%E4%B8%9A%E7%8F%AD%E8%AF%BE%E4%BB%B6%E8%B5%84%E6%96%99%20-1-4%E4%BD%8D%E5%9F%BA%E7%A1%80%E7%8F%AD%20%205-14%E5%B0%B1%E4%B8%9A%E7%8F%AD/06%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E9%98%B6%E6%AE%B5/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/%E5%89%8D%E7%AB%AF%E8%AF%BE%E4%BB%B6/08/mds/section05.html" target="_blank" rel="noopener">retina屏适配</a></p></li><li><p>opacity 设置元素整体透明度，一般为了兼容需要加上filter属性设置 如：opacity:0.1;filter:alpha(opacity=10)</p></li><li>cursor 设置鼠标悬停在元素上时指针的形状 如：cursor:pointer 设置为手型</li><li>outline 设置文本输入框周围凸显的蓝色的线，一般是设为没有 如：outline:none</li><li>border-radius 设置盒子的圆角 如：border-radius:10px 设置盒子的四个角为10px半径的圆角，详细设置说明：<a href="file:///F:/BaiduYunDownload/Python%E8%AF%BE%E4%BB%B6/%E5%9F%BA%E7%A1%80%E7%8F%AD-%E5%B0%B1%E4%B8%9A%E7%8F%AD%E8%AF%BE%E4%BB%B6%E8%B5%84%E6%96%99%20-1-4%E4%BD%8D%E5%9F%BA%E7%A1%80%E7%8F%AD%20%205-14%E5%B0%B1%E4%B8%9A%E7%8F%AD/06%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E9%98%B6%E6%AE%B5/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/%E5%89%8D%E7%AB%AF%E8%AF%BE%E4%BB%B6/06-07/mds/section02.html" target="_blank" rel="noopener">css圆角</a></li><li>box-shadow 设置盒子的阴影，如：box-shadow:10px 10px 5px 2px pink;设置盒子有粉色的阴影，详细设置说明：<a href="file:///F:/BaiduYunDownload/Python%E8%AF%BE%E4%BB%B6/%E5%9F%BA%E7%A1%80%E7%8F%AD-%E5%B0%B1%E4%B8%9A%E7%8F%AD%E8%AF%BE%E4%BB%B6%E8%B5%84%E6%96%99%20-1-4%E4%BD%8D%E5%9F%BA%E7%A1%80%E7%8F%AD%20%205-14%E5%B0%B1%E4%B8%9A%E7%8F%AD/06%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E9%98%B6%E6%AE%B5/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/%E5%89%8D%E7%AB%AF%E8%AF%BE%E4%BB%B6/06-07/mds/section02.html" target="_blank" rel="noopener">css阴影</a></li><li>transition 设置盒子的过渡动画，如：transition:all 1s ease;设置元素过渡动画为1秒完成，所有变动的属性都做动画，详细设置说明：<a href="file:///F:/BaiduYunDownload/Python%E8%AF%BE%E4%BB%B6/%E5%9F%BA%E7%A1%80%E7%8F%AD-%E5%B0%B1%E4%B8%9A%E7%8F%AD%E8%AF%BE%E4%BB%B6%E8%B5%84%E6%96%99%20-1-4%E4%BD%8D%E5%9F%BA%E7%A1%80%E7%8F%AD%20%205-14%E5%B0%B1%E4%B8%9A%E7%8F%AD/06%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E9%98%B6%E6%AE%B5/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/%E5%89%8D%E7%AB%AF%E8%AF%BE%E4%BB%B6/06-07/mds/section03.html" target="_blank" rel="noopener">过渡动画</a></li><li>animation 设置盒子的关键帧动画，详细设置说明：<a href="file:///F:/BaiduYunDownload/Python%E8%AF%BE%E4%BB%B6/%E5%9F%BA%E7%A1%80%E7%8F%AD-%E5%B0%B1%E4%B8%9A%E7%8F%AD%E8%AF%BE%E4%BB%B6%E8%B5%84%E6%96%99%20-1-4%E4%BD%8D%E5%9F%BA%E7%A1%80%E7%8F%AD%20%205-14%E5%B0%B1%E4%B8%9A%E7%8F%AD/06%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E9%98%B6%E6%AE%B5/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/%E5%89%8D%E7%AB%AF%E8%AF%BE%E4%BB%B6/06-07/mds/section05.html" target="_blank" rel="noopener">关键帧动画</a></li><li><p>transform 设置盒子的位移、旋转、缩放、斜切等变形，如：transform:rotate(45deg);设置盒子旋转45度，详细设置说明：<a href="file:///F:/BaiduYunDownload/Python%E8%AF%BE%E4%BB%B6/%E5%9F%BA%E7%A1%80%E7%8F%AD-%E5%B0%B1%E4%B8%9A%E7%8F%AD%E8%AF%BE%E4%BB%B6%E8%B5%84%E6%96%99%20-1-4%E4%BD%8D%E5%9F%BA%E7%A1%80%E7%8F%AD%20%205-14%E5%B0%B1%E4%B8%9A%E7%8F%AD/06%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E9%98%B6%E6%AE%B5/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%96%99/%E5%89%8D%E7%AB%AF%E8%AF%BE%E4%BB%B6/06-07/mds/section04.html" target="_blank" rel="noopener">元素变形</a></p></li><li><p>box-sizing 设置盒子的尺寸计算方式，如：box-sizing:border-box 将盒子的尺寸计算方法设置为按边框计算，此时width和height的值就是盒子的实际尺寸</p></li><li><p>border-collapse 设置表格边框是否合并，如：border-collapse:collapse，将表格边框合并，这样就可以制作1px边框的表格。</p></li></ul><h1 id="9-JavaScript"><a href="#9-JavaScript" class="headerlink" title="9. JavaScript"></a>9. JavaScript</h1><h2 id="9-1-JavaScript介绍"><a href="#9-1-JavaScript介绍" class="headerlink" title="9.1 JavaScript介绍"></a>9.1 JavaScript介绍</h2><p>JavaScript是运行在浏览器端的脚步语言，JavaScript主要解决的是前端与用户交互的问题，包括使用交互与数据交互。 JavaScript是浏览器解释执行的，前端脚本语言还有JScript（微软，IE独有），ActionScript( Adobe公司，需要插件)等。</p><p><strong>前端三大块</strong><br>1、HTML：页面结构<br>2、CSS：页面表现：元素大小、颜色、位置、隐藏或显示、部分动画效果<br>3、JavaScript：页面行为：部分动画效果、页面与用户的交互、页面功能</p><h2 id="9-2-JavaScript嵌入页面的方式"><a href="#9-2-JavaScript嵌入页面的方式" class="headerlink" title="9.2 JavaScript嵌入页面的方式"></a>9.2 JavaScript嵌入页面的方式</h2><p>1、行间事件（主要用于事件）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">"button"</span> name=<span class="string">""</span> onclick=<span class="string">"alert('ok！');"</span>&gt;</span><br></pre></td></tr></table></figure><p>2、页面script标签嵌入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;        </span><br><span class="line">    alert(<span class="string">'ok！'</span>);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>3、外部引入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"js/index.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="9-3-变量"><a href="#9-3-变量" class="headerlink" title="9.3 变量"></a>9.3 变量</h2><p>JavaScript 是一种弱类型语言，javascript的变量类型由它的值来决定。 定义变量需要用关键字 ‘var’</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> iNum = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">var</span> sTr = <span class="string">'asd'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//同时定义多个变量可以用","隔开，公用一个‘var’关键字</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> iNum = <span class="number">45</span>,sTr=<span class="string">'qwe'</span>,sCount=<span class="string">'68'</span>;</span><br></pre></td></tr></table></figure><h3 id="9-3-1-变量类型"><a href="#9-3-1-变量类型" class="headerlink" title="9.3.1 变量类型"></a>9.3.1 <strong>变量类型</strong></h3><p>5种基本数据类型：<br>1、number 数字类型<br>2、string 字符串类型<br>3、boolean 布尔类型 true 或 false<br>4、undefined undefined类型，变量声明未初始化，它的值就是undefined<br>5、null null类型，表示空对象，如果定义的变量将来准备保存对象，可以将变量初始化为null,在页面上获取不到对象，返回的值就是null</p><p>1种复合类型：object</p><h3 id="9-3-2-javascript语句与注释"><a href="#9-3-2-javascript语句与注释" class="headerlink" title="9.3.2 javascript语句与注释"></a>9.3.2 <strong>javascript语句与注释</strong></h3><p>1、一条javascript语句应该以“;”结尾</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;    </span><br><span class="line">    <span class="keyword">var</span> iNum = <span class="number">123</span>;</span><br><span class="line">    <span class="keyword">var</span> sTr = <span class="string">'abc123'</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fnAlert</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(sTr);</span><br><span class="line">    &#125;;</span><br><span class="line">    fnAlert();</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>2、javascript注释</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;    </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 单行注释</span></span><br><span class="line">    <span class="keyword">var</span> iNum = <span class="number">123</span>;</span><br><span class="line">    <span class="comment">/*  </span></span><br><span class="line"><span class="comment">        多行注释</span></span><br><span class="line"><span class="comment">        1、...</span></span><br><span class="line"><span class="comment">        2、...</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">var</span> sTr = <span class="string">'abc123'</span>;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="9-3-3-变量、函数、属性、函数参数命名规范"><a href="#9-3-3-变量、函数、属性、函数参数命名规范" class="headerlink" title="9.3.3 变量、函数、属性、函数参数命名规范"></a>9.3.3 <strong>变量、函数、属性、函数参数命名规范</strong></h3><p>1、区分大小写<br>2、第一个字符必须是字母、下划线（_）或者美元符号（$）<br>3、其他字符可以是字母、下划线、美元符或数字</p><h3 id="9-3-4-匈牙利命名风格"><a href="#9-3-4-匈牙利命名风格" class="headerlink" title="9.3.4 匈牙利命名风格"></a>9.3.4 <strong>匈牙利命名风格</strong></h3><p>对象o Object 比如：oDiv<br>数组a Array 比如：aItems<br>字符串s String 比如：sUserName<br>整数i Integer 比如：iItemCount<br>布尔值b Boolean 比如：bIsComplete<br>浮点数f Float 比如：fPrice<br>函数fn Function 比如：fnHandler<br>正则表达式re RegExp 比如：reEmailCheck</p><h2 id="9-4-获取元素方法一"><a href="#9-4-获取元素方法一" class="headerlink" title="9.4 获取元素方法一"></a>9.4 获取元素方法一</h2><p>可以使用内置对象document上的getElementById方法来获取页面上设置了id属性的元素，获取到的是一个html对象，然后将它赋值给一个变量，比如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="keyword">var</span> oDiv = <span class="built_in">document</span>.getElementById(<span class="string">'div1'</span>);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">....</span></span><br><span class="line"><span class="regexp">&lt;div id="div1"&gt;这是一个div元素&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure><p>上面的语句，如果把javascript写在元素的上面，就会出错，因为页面上从上往下加载执行的，javascript去页面上获取元素div1的时候，元素div1还没有加载，解决方法有两种：</p><p>第一种方法：将javascript放到页面最下边</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">....</span><br><span class="line">&lt;div id=<span class="string">"div1"</span>&gt;这是一个div元素&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">....</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script type="text/</span>javascript<span class="string">"&gt;</span></span><br><span class="line"><span class="string">    var oDiv = document.getElementById('div1');</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br></pre></td></tr></table></figure><p>第二种方法：将javascript语句放到window.onload触发的函数里面,获取元素的语句会在页面加载完后才执行，就不会出错了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> oDiv = <span class="built_in">document</span>.getElementById(<span class="string">'div1'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">....</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;div id="div1"&gt;这是一个div元素&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure><h2 id="9-5-操作元素属性"><a href="#9-5-操作元素属性" class="headerlink" title="9.5 操作元素属性"></a>9.5 操作元素属性</h2><p>获取的页面元素，就可以对页面元素的属性进行操作，属性的操作包括属性的读和写。</p><h3 id="9-5-1-操作属性的方法"><a href="#9-5-1-操作属性的方法" class="headerlink" title="9.5.1 操作属性的方法"></a>9.5.1 <strong>操作属性的方法</strong></h3><p>1、“.” 操作<br>2、“[ ]”操作</p><h3 id="9-5-2-属性写法"><a href="#9-5-2-属性写法" class="headerlink" title="9.5.2 属性写法"></a>9.5.2 <strong>属性写法</strong></h3><p>1、html的属性和js里面属性写法一样<br>2、“class” 属性写成 “className”<br>3、“style” 属性里面的属性，有横杠的改成驼峰式，比如：“font-size”，改成”style.fontSize”</p><p>通过“.”操作属性：具体来说是操作属性的值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当整个页面加载完毕之后再执行花括号里面的语句</span></span><br><span class="line">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过ID名获取元素赋值给oDiv变量</span></span><br><span class="line">        <span class="keyword">var</span> oDiv = <span class="built_in">document</span>.getElementById(<span class="string">"div1"</span>);</span><br><span class="line">        <span class="keyword">var</span> oA = <span class="built_in">document</span>.getElementById(<span class="string">"link"</span>);</span><br><span class="line">        <span class="keyword">var</span> oDiv2 = <span class="built_in">document</span>.getElementById(<span class="string">"div2"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 改变元素的属性</span></span><br><span class="line">        oDiv.style.color = <span class="string">"red"</span>;</span><br><span class="line">        oDiv.style.fontSize = <span class="string">"20px"</span>;</span><br><span class="line"></span><br><span class="line">        oA.href = <span class="string">"http://www.baidu.com"</span>;</span><br><span class="line">        oA.title = <span class="string">"这是一个百度网的链接"</span>;</span><br><span class="line"></span><br><span class="line">        oDiv2.className = <span class="string">"box2"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 读取元素的属性</span></span><br><span class="line">        <span class="keyword">var</span> sId = oDiv.id;</span><br><span class="line">        alert(sId)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;style type="text/</span>css<span class="string">"&gt;</span></span><br><span class="line"><span class="string">    .box&#123;</span></span><br><span class="line"><span class="string">        font-size: 20px;</span></span><br><span class="line"><span class="string">        color: gold;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    .box2&#123;</span></span><br><span class="line"><span class="string">        font-size: 30px;</span></span><br><span class="line"><span class="string">        color: pink;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&lt;/style&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;div id="</span>div1<span class="string">"&gt;这是一个div元素&lt;/div&gt;</span></span><br><span class="line">&lt;a href="#" id="link"&gt;这是一个链接&lt;/a&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"box"</span> id=<span class="string">"div2"</span>&gt;这是第二个div元素&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure><p>通过“[ ]”操作属性：具体来说是操作属性，把属性作为变量来处理，而不是作为一个值来处理</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> oInput1 = <span class="built_in">document</span>.getElementById(<span class="string">'input1'</span>);</span><br><span class="line">        <span class="keyword">var</span> oInput2 = <span class="built_in">document</span>.getElementById(<span class="string">'input2'</span>);</span><br><span class="line">        <span class="keyword">var</span> oA = <span class="built_in">document</span>.getElementById(<span class="string">'link1'</span>);</span><br><span class="line">        <span class="comment">// 读取属性</span></span><br><span class="line">        <span class="keyword">var</span> sVal1 = oInput1.value;</span><br><span class="line">        <span class="keyword">var</span> sVal2 = oInput2.value;</span><br><span class="line">        <span class="comment">// 写(设置)属性</span></span><br><span class="line">        <span class="comment">// oA.style.val1 = val2; 没反应</span></span><br><span class="line">        oA.style[sVal1] = sVal2;        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">......</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;input type="text" name="setattr" id="input1" value="fontSize"&gt;</span></span><br><span class="line"><span class="regexp">&lt;input type="text" name="setnum" id="input2" value="30px"&gt;</span></span><br><span class="line"><span class="regexp">&lt;a href="http:/</span><span class="regexp">/www.baidu.com" id="link1"&gt;这是百度网站地址&lt;/</span>a&gt;</span><br></pre></td></tr></table></figure><h3 id="9-5-3-innerHTML"><a href="#9-5-3-innerHTML" class="headerlink" title="9.5.3 innerHTML"></a>9.5.3 <strong>innerHTML</strong></h3><p>innerHTML可以读取或者写入标签包裹的内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> oDiv = <span class="built_in">document</span>.getElementById(<span class="string">'div1'</span>);</span><br><span class="line">        <span class="comment">//读取</span></span><br><span class="line">        <span class="keyword">var</span> sTxt = oDiv.innerHTML;</span><br><span class="line">        alert(sTxt);</span><br><span class="line">        <span class="comment">//写入</span></span><br><span class="line">        oDiv.innerHTML = <span class="string">'&lt;a href="http://http://www.baidu.com"&gt;这是百度网站地址&lt;a/&gt;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">......</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;div id="div1"&gt;这是一个div元素&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure><h2 id="9-6-函数"><a href="#9-6-函数" class="headerlink" title="9.6 函数"></a>9.6 函数</h2><p>函数就是重复执行的代码片。</p><h3 id="9-6-1-函数定义与执行"><a href="#9-6-1-函数定义与执行" class="headerlink" title="9.6.1 函数定义与执行"></a>9.6.1 <strong>函数定义与执行</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 函数的定义</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fnMyalert</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="string">'Hello world!'</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fnChange</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> oDiv = <span class="built_in">document</span>.getElementById(<span class="string">"div1"</span>);</span><br><span class="line">        oDiv.style.color = <span class="string">"red"</span>;</span><br><span class="line">        oDiv.style.fontSize = <span class="string">"30px"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//函数执行</span></span><br><span class="line">    <span class="comment">// fnChange();</span></span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;!--标签里调用函数执行--&gt;</span></span><br><span class="line"><span class="regexp">&lt;div id="div1" onclick="fnMyalert()"&gt;这是一个div元素&lt;/</span>div&gt;</span><br><span class="line">&lt;input type=<span class="string">"button"</span> name=<span class="string">""</span> value=<span class="string">"改变div"</span> onclick=<span class="string">"fnChange()"</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="9-6-2-变量与函数预解析"><a href="#9-6-2-变量与函数预解析" class="headerlink" title="9.6.2 变量与函数预解析"></a>9.6.2 <strong>变量与函数预解析</strong></h3><p>JavaScript解析过程分为两个阶段，先是编译阶段，然后执行阶段，在编译阶段会将function定义的函数提前，并且将var定义的变量声明提前，将它赋值为undefined。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;    </span><br><span class="line">    fnAlert();       <span class="comment">// 弹出 hello！</span></span><br><span class="line">    alert(iNum);  <span class="comment">// 弹出 undefined</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fnAlert</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="string">'hello!'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> iNum = <span class="number">123</span>;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="9-6-3-提取行间事件"><a href="#9-6-3-提取行间事件" class="headerlink" title="9.6.3 提取行间事件"></a>9.6.3 <strong>提取行间事件</strong></h3><p>在html行间调用的事件可以提取到javascript中调用，从而做到结构与行为分离。</p><p>说白了就是在html的标签中不含有任何关于js的代码，如下例，通过html标签中的id跟js关联起来，从而使用js。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--行间事件调用函数   --&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;        </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fnAlert</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="string">'ok!'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">......</span></span><br><span class="line"><span class="regexp">&lt;input type="button" name="" value="弹出" onclick="fnAlert()"&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;!-- 提取行间事件 --&gt;</span></span><br><span class="line"><span class="regexp">&lt;script type="text/</span>javascript<span class="string">"&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">window.onload = function()&#123;</span></span><br><span class="line"><span class="string">    var oBtn = document.getElementById('btn1');</span></span><br><span class="line"><span class="string">    oBtn.onclick = fnAlert;</span></span><br><span class="line"><span class="string">    function fnAlert()&#123;</span></span><br><span class="line"><span class="string">        alert('ok!');</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;    </span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br><span class="line"><span class="string">......</span></span><br><span class="line"><span class="string">&lt;input type="</span>button<span class="string">" name="</span><span class="string">" value="</span>弹出<span class="string">" id="</span>btn1<span class="string">"&gt;</span></span><br></pre></td></tr></table></figure><h3 id="9-6-4-匿名函数"><a href="#9-6-4-匿名函数" class="headerlink" title="9.6.4 匿名函数"></a>9.6.4 <strong>匿名函数</strong></h3><p>定义的函数可以不给名称，这个叫做匿名函数，可以将匿名函数直接赋值给元素绑定的事件来完成匿名函数的调用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> oBtn = <span class="built_in">document</span>.getElementById(<span class="string">'btn1'</span>);</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    oBtn.onclick = myalert;</span></span><br><span class="line"><span class="comment">    function myalert()&#123;</span></span><br><span class="line"><span class="comment">        alert('ok!');</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 直接将匿名函数赋值给绑定的事件</span></span><br><span class="line">    oBtn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="string">'ok!'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="9-6-5-综合练习"><a href="#9-6-5-综合练习" class="headerlink" title="9.6.5 综合练习"></a>9.6.5 <strong>综合练习</strong></h3><p>网页换肤<br></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"css/004_01.css"</span> <span class="attr">id</span>=<span class="string">"link01"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> oBtn01 = <span class="built_in">document</span>.getElementById(<span class="string">"btn01"</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> oBtn02 = <span class="built_in">document</span>.getElementById(<span class="string">"btn01"</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> oLink = <span class="built_in">document</span>.getElementById(<span class="string">"link01"</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            oBtn01.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                oLink.href = <span class="string">"css/004_01.css"</span>;</span></span><br><span class="line"><span class="undefined">            &#125;;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            oBtn02.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                oLink.href = <span class="string">"css/004_02.css"</span>;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"皮肤1"</span> <span class="attr">id</span>=<span class="string">"btn01"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"皮肤2"</span> <span class="attr">id</span>=<span class="string">"btn02"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* css/004_01.css */</span></span><br><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: gold;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: aqua;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* css/004_02.css */</span></span><br><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: pink;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">input</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: aqua;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-6-6-函数传参"><a href="#9-6-6-函数传参" class="headerlink" title="9.6.6 函数传参"></a>9.6.6 <strong>函数传参</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fnAlert</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">        alert(a);</span><br><span class="line">    &#125;</span><br><span class="line">    fnAlert(<span class="number">12345</span>);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="9-6-7-函数’return’关键字"><a href="#9-6-7-函数’return’关键字" class="headerlink" title="9.6.7 函数’return’关键字"></a>9.6.7 <strong>函数’return’关键字</strong></h3><p>函数中’return’关键字的作用：<br>1、返回函数执行的结果<br>2、结束函数的运行<br>3、阻止默认行为</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数返回值+结束函数运行</span></span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fnAdd</span>(<span class="params">a,b</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> c = a + b;</span><br><span class="line">        alert(<span class="string">'hello-1'</span>); <span class="comment">// hello-1</span></span><br><span class="line">        <span class="comment">// 返回c的值，结束函数的运行</span></span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">        <span class="comment">// 这一句不弹出</span></span><br><span class="line">        alert(<span class="string">'hello-2'</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> result = fnAdd(<span class="number">3</span>,<span class="number">4</span>);</span><br><span class="line">    alert(result); <span class="comment">// 弹出7</span></span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 函数传参</span></span><br><span class="line"><span class="regexp">&lt;script type="text/</span>javascript<span class="string">"&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    window.onload = function () &#123;</span></span><br><span class="line"><span class="string">        function fnChangestyle(mystyle,val) &#123;</span></span><br><span class="line"><span class="string">            var oDiv = document.getElementById("</span>div1<span class="string">");</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            oDiv.style[mystyle] = val;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        fnChangestyle("</span>color<span class="string">","</span>pink<span class="string">");</span></span><br><span class="line"><span class="string">        fnChangestyle("</span>fontSize<span class="string">","</span><span class="number">30</span>px<span class="string">");</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;div id="</span>div1<span class="string">"&gt;这是一个div元素&lt;/div&gt;</span></span><br></pre></td></tr></table></figure><h2 id="9-7-条件语句"><a href="#9-7-条件语句" class="headerlink" title="9.7 条件语句"></a>9.7 条件语句</h2><p>通过条件来控制程序的走向，就需要用到条件语句。</p><h3 id="9-7-1-运算符"><a href="#9-7-1-运算符" class="headerlink" title="9.7.1 运算符"></a>9.7.1 <strong>运算符</strong></h3><p>1、算术运算符： +(加)、 -(减)、 <em>(乘)、 /(除)、 %(求余数)<br>2、赋值运算符：=、 +=、 -=、 </em>=、 /=、 %=<br>3、条件运算符：<code>==</code>、<code>===</code>、&gt;、&gt;=、&lt;、&lt;=、!=、&amp;&amp;(而且)、||(或者)、!(否)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> oInput01 = <span class="built_in">document</span>.getElementById(<span class="string">"input01"</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> oInput02 = <span class="built_in">document</span>.getElementById(<span class="string">"input02"</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> oBtn = <span class="built_in">document</span>.getElementById(<span class="string">"btn"</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        oBtn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// parseInt()函数转换成数字</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> iVal01 = <span class="built_in">parseInt</span>(oInput01.value);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> iVal02 = <span class="built_in">parseInt</span>(oInput02.value);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> iBtn = iVal01 + iVal02;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">            alert(iBtn);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"input01"</span>&gt;</span> +</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"input02"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"相加"</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="9-7-2-if-else"><a href="#9-7-2-if-else" class="headerlink" title="9.7.2 if else"></a>9.7.2 <strong>if else</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="keyword">var</span> iNum01 = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">var</span> iNum02 = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">var</span> sTr;</span><br><span class="line">    <span class="keyword">if</span> (iNum01 &gt; iNum02) &#123;</span><br><span class="line">        sTr = <span class="string">'大于'</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        sTr = <span class="string">'小于'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    alert(sTr);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="9-7-3-理解练习"><a href="#9-7-3-理解练习" class="headerlink" title="9.7.3 理解练习"></a>9.7.3 <strong>理解练习</strong></h3><p>制作单个按钮点击切换元素的显示和隐藏效果</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> oBtn = <span class="built_in">document</span>.getElementById(<span class="string">"btn01"</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> oDiv = <span class="built_in">document</span>.getElementById(<span class="string">"box01"</span>);</span></span><br><span class="line"><span class="javascript">        oBtn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (oDiv.style.display == <span class="string">"none"</span>) &#123;</span></span><br><span class="line"><span class="javascript">                oDiv.style.display = <span class="string">'block'</span>;</span></span><br><span class="line"><span class="javascript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                oDiv.style.display = <span class="string">"none"</span>;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="undefined">        width: 200px;</span></span><br><span class="line"><span class="undefined">        height: 400px;</span></span><br><span class="line"><span class="undefined">        background-color: gold;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"切换"</span> <span class="attr">id</span>=<span class="string">"btn01"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span> <span class="attr">id</span>=<span class="string">"box01"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="9-7-4-多重if-else语句"><a href="#9-7-4-多重if-else语句" class="headerlink" title="9.7.4 多重if else语句"></a>9.7.4 <strong>多重if else语句</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> iNow = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(iNow==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">    ... ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(iNow==<span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">    ... ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    ... ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-7-5-switch语句"><a href="#9-7-5-switch语句" class="headerlink" title="9.7.5 switch语句"></a>9.7.5 <strong>switch语句</strong></h3><p>多重if else语句可以换成性能更高的switch语句</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> iNow = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (iNow)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        ...;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        ...;</span><br><span class="line">        <span class="keyword">break</span>;    </span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        ...;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-7-6-理解练习"><a href="#9-7-6-理解练习" class="headerlink" title="9.7.6 理解练习"></a>9.7.6 <strong>理解练习</strong></h3><p>制作随着星期换背景的页面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    </span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> iWeek = <span class="number">5</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> oBody = <span class="built_in">document</span>.getElementById(<span class="string">"body01"</span>);</span></span><br><span class="line"><span class="undefined">    </span></span><br><span class="line"><span class="javascript">            <span class="keyword">switch</span> (iWeek) &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">case</span> <span class="number">1</span>:</span></span><br><span class="line"><span class="javascript">                    oBody.style.backgroundColor = <span class="string">"gold"</span>;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">case</span> <span class="number">2</span>:</span></span><br><span class="line"><span class="javascript">                    oBody.style.backgroundColor = <span class="string">"pink"</span>;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">case</span> <span class="number">3</span>:</span></span><br><span class="line"><span class="javascript">                    oBody.style.backgroundColor = <span class="string">"red"</span>;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">case</span> <span class="number">4</span>:</span></span><br><span class="line"><span class="javascript">                    oBody.style.backgroundColor = <span class="string">"green"</span>;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">case</span> <span class="number">5</span>:</span></span><br><span class="line"><span class="javascript">                    oBody.style.backgroundColor = <span class="string">"yellow"</span>;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">default</span> :</span></span><br><span class="line"><span class="javascript">                    oBody.style.backgroundColor = <span class="string">"blue"</span>;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">break</span>;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">id</span>=<span class="string">"body01"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="9-8-数组及操作方法"><a href="#9-8-数组及操作方法" class="headerlink" title="9.8 数组及操作方法"></a>9.8 数组及操作方法</h2><p>数组就是一组数据的集合，javascript中，数组里面的数据可以是不同类型的。</p><h3 id="9-8-1-定义数组的方法"><a href="#9-8-1-定义数组的方法" class="headerlink" title="9.8.1 定义数组的方法"></a>9.8.1 <strong>定义数组的方法</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对象的实例创建</span></span><br><span class="line"><span class="keyword">var</span> aList = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//直接量创建</span></span><br><span class="line"><span class="keyword">var</span> aList2 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="string">'asd'</span>];</span><br></pre></td></tr></table></figure><h3 id="9-8-2-操作数组中数据的方法"><a href="#9-8-2-操作数组中数据的方法" class="headerlink" title="9.8.2 操作数组中数据的方法"></a>9.8.2 <strong>操作数组中数据的方法</strong></h3><p>1、获取数组的长度：aList.length;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> aList = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line">alert(aList.length); <span class="comment">// 弹出4</span></span><br></pre></td></tr></table></figure><p>2、用下标操作数组的某个数据：aList[0];</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> aList = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line">alert(aList[<span class="number">0</span>]); <span class="comment">// 弹出1</span></span><br></pre></td></tr></table></figure><p>3、join() 将数组成员通过一个分隔符合并成字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> aList = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line">alert(aList.join(<span class="string">'-'</span>)); <span class="comment">// 弹出 1-2-3-4</span></span><br></pre></td></tr></table></figure><p>4、push() 和 pop() 从数组最后增加成员或删除成员</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> aList = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line">aList.push(<span class="number">5</span>);</span><br><span class="line">alert(aList); <span class="comment">//弹出1,2,3,4,5</span></span><br><span class="line">aList.pop();</span><br><span class="line">alert(aList); <span class="comment">// 弹出1,2,3,4</span></span><br></pre></td></tr></table></figure><p>5、unshift()和 shift() 从数组前面增加成员或删除成员</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> aList = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line">aList.unshift(<span class="number">5</span>);</span><br><span class="line">alert(aList); <span class="comment">//弹出5,1,2,3,4</span></span><br><span class="line">aList.shift();</span><br><span class="line">alert(aList); <span class="comment">// 弹出1,2,3,4</span></span><br></pre></td></tr></table></figure><p>6、reverse() 将数组反转</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> aList = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line">aList.reverse();</span><br><span class="line">alert(aList);  <span class="comment">// 弹出4,3,2,1</span></span><br></pre></td></tr></table></figure><p>7、indexOf() 返回数组中元素第一次出现的索引值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> aList = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line">alert(aList.indexOf(<span class="number">1</span>));</span><br></pre></td></tr></table></figure><p>8、splice() 在数组中增加或删除成员</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> aList = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line">aList.splice(<span class="number">2</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>); <span class="comment">//从第2个元素开始，删除1个元素，然后在此位置增加'7,8,9'三个元素</span></span><br><span class="line">alert(aList); <span class="comment">//弹出 1,2,7,8,9,4</span></span><br></pre></td></tr></table></figure><h3 id="9-8-3-多维数组"><a href="#9-8-3-多维数组" class="headerlink" title="9.8.3 多维数组"></a>9.8.3 <strong>多维数组</strong></h3><p>多维数组指的是数组的成员也是数组的数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> aList = [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>]];</span><br><span class="line"></span><br><span class="line">alert(aList[<span class="number">0</span>][<span class="number">1</span>]); <span class="comment">//弹出2;</span></span><br></pre></td></tr></table></figure><p>批量操作数组中的数据，需要用到循环语句</p><h2 id="9-9-循环语句"><a href="#9-9-循环语句" class="headerlink" title="9.9 循环语句"></a>9.9 循环语句</h2><p>程序中进行有规律的重复性操作，需要用到循环语句。</p><h3 id="9-9-1-for循环"><a href="#9-9-1-for循环" class="headerlink" title="9.9.1 for循环"></a>9.9.1 <strong>for循环</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">&#123;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-9-2-课堂练习"><a href="#9-9-2-课堂练习" class="headerlink" title="9.9.2 课堂练习"></a>9.9.2 <strong>课堂练习</strong></h3><p>1、将数组中的数据分别用弹框弹出</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        alert(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> aList = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>];</span><br><span class="line">    <span class="keyword">var</span> iLen = aList.length;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; iLen; i++) &#123;</span><br><span class="line">        alert(aList[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>2、将数组中的数据放入到页面中的列表中</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type="text/javascript"&gt;</span><br><span class="line">    window.onload = function () &#123;</span><br><span class="line">        var oLl = document.getElementsByTagName("li");</span><br><span class="line">        var aList = ['apple', 'banana', 'orange', 'xigua', 'boluo'];</span><br><span class="line">        var aLen = aList.length;</span><br><span class="line">        for (var i = 0; i &lt; aLen; i++) &#123;</span><br><span class="line">            var name = aList[i];</span><br><span class="line">            // 获取标签内的值</span><br><span class="line">            oLl[i].innerHTML = name;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="selector-tag">ul</span>&gt;</span><br><span class="line">    &lt;li&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">// 另一种方法</span><br><span class="line">&lt;script type="text/javascript"&gt;</span><br><span class="line">    window.onload = function () &#123;</span><br><span class="line">        var oUl = document.getElementById('list');</span><br><span class="line">        var aList = ['apple', 'banana', 'orange', 'xigua', 'boluo'];</span><br><span class="line">        var aLen = aList.length;</span><br><span class="line">        var sTr = '';</span><br><span class="line">        for (var i = 0; i &lt; aLen; i++) &#123;</span><br><span class="line">            sTr += '&lt;li&gt;' + aList[i] + '&lt;/li&gt;';</span><br><span class="line">            oUl.innerHTML = sTr;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style type="text/css"&gt;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.list</span> &#123;</span><br><span class="line">        <span class="attribute">list-style</span>: none;</span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">50px</span> auto <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">305px</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.list</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">60px</span>;</span><br><span class="line">        <span class="attribute">border-bottom</span>: <span class="number">1px</span> dotted <span class="number">#000</span>;</span><br><span class="line">        <span class="attribute">line-height</span>: <span class="number">60px</span>;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;ul class="list" id="list"&gt;</span><br><span class="line"></span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><h3 id="9-9-3-while循环"><a href="#9-9-3-while循环" class="headerlink" title="9.9.3 while循环"></a>9.9.3 <strong>while循环</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(i&lt;<span class="number">8</span>)&#123;</span><br><span class="line">    ......</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-9-4-数组去重"><a href="#9-9-4-数组去重" class="headerlink" title="9.9.4 数组去重"></a>9.9.4 <strong>数组去重</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> aList = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> aList2 = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;aList.length;i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(aList.indexOf(aList[i])==i)</span><br><span class="line">    &#123;</span><br><span class="line">        aList2.push(aList[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">alert(aList2);</span><br></pre></td></tr></table></figure><h2 id="9-10-获取元素方法二"><a href="#9-10-获取元素方法二" class="headerlink" title="9.10 获取元素方法二"></a>9.10 获取元素方法二</h2><p>可以使用内置对象document上的getElementsByTagName方法来获取页面上的某一种标签，获取的是一个选择集，不是数组，但是可以用下标的方式操作选择集里面的标签元素。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> aLi = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'li'</span>);</span><br><span class="line">        <span class="comment">// aLi.style.backgroundColor = 'gold'; // 出错！不能同时设置多个li</span></span><br><span class="line">        alert(aLi.length);</span><br><span class="line">        aLi[<span class="number">0</span>].style.backgroundColor = <span class="string">'gold'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">....</span></span><br><span class="line"><span class="regexp">&lt;ul&gt;</span></span><br><span class="line"><span class="regexp">    &lt;li&gt;1&lt;/</span>li&gt;</span><br><span class="line">    &lt;li&gt;<span class="number">2</span>&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">    &lt;li&gt;3&lt;/</span>li&gt;</span><br><span class="line">    &lt;li&gt;<span class="number">4</span>&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">    &lt;li&gt;5&lt;/</span>li&gt;</span><br><span class="line">    &lt;li&gt;<span class="number">6</span>&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">&lt;/u</span>l&gt;</span><br></pre></td></tr></table></figure><p><strong>课堂练习</strong><br>使用循环操作列表中的每个元素</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 通过标签名称获取li元素，生成一个选择集，赋值给aLi</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> aLi = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'li'</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 读取选择集内元素的个数</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//alert(aLi.length);  // 弹出13</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> iLen = aLi.length;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="comment">//给一个li设置背景色</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//aLi[0].style.backgroundColor = 'gold';</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 不能给选择集设置样式属性</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//aLi.style.backgroundColor = 'gold';</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        /*</span></span><br><span class="line"><span class="undefined">        同时给所有的li加背景色</span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;iLen;i++)</span></span><br><span class="line"><span class="undefined">        &#123;</span></span><br><span class="line"><span class="javascript">            aLi[i].style.backgroundColor = <span class="string">'gold'</span>;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        */</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> oUl = <span class="built_in">document</span>.getElementById(<span class="string">'list1'</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> aLi2 = oUl.getElementsByTagName(<span class="string">'li'</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> iLen2 = aLi2.length;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; iLen2; i++) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="javascript">                aLi2[i].style.backgroundColor = <span class="string">'gold'</span>;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"list1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>6<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>7<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>8<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"list2"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="9-11-Javascript组成"><a href="#9-11-Javascript组成" class="headerlink" title="9.11 Javascript组成"></a>9.11 Javascript组成</h2><p>1、ECMAscript javascript的语法（变量、函数、循环语句等语法）<br>2、DOM 文档对象模型 操作html和css的方法<br>3、BOM 浏览器对象模型 操作浏览器的一些方法</p><h2 id="9-12-字符串处理方法"><a href="#9-12-字符串处理方法" class="headerlink" title="9.12 字符串处理方法"></a>9.12 字符串处理方法</h2><p>1、字符串合并操作：“ + ”</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> iNum01 = <span class="number">12</span>;</span><br><span class="line"><span class="keyword">var</span> iNum02 = <span class="number">24</span>;</span><br><span class="line"><span class="keyword">var</span> sNum03 = <span class="string">'12'</span>;</span><br><span class="line"><span class="keyword">var</span> sTr = <span class="string">'abc'</span>;</span><br><span class="line">alert(iNum01+iNum02);  <span class="comment">//弹出36</span></span><br><span class="line">alert(iNum01+sNum03);  <span class="comment">//弹出1212 数字和字符串相加等同于字符串相加</span></span><br><span class="line">alert(sNum03+sTr);     <span class="comment">// 弹出12abc</span></span><br></pre></td></tr></table></figure><p>2、parseInt() 将数字字符串转化为整数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sNum01 = <span class="string">'12'</span>;</span><br><span class="line"><span class="keyword">var</span> sNum02 = <span class="string">'24'</span>;</span><br><span class="line"><span class="keyword">var</span> sNum03 = <span class="string">'12.32'</span>;</span><br><span class="line">alert(sNum01+sNum02);  <span class="comment">//弹出1224</span></span><br><span class="line">alert(<span class="built_in">parseInt</span>(sNum01)+<span class="built_in">parseInt</span>(sNum02))  <span class="comment">//弹出36</span></span><br><span class="line">alert(sNum03)   <span class="comment">//弹出数字12 将字符串小数转化为数字整数</span></span><br></pre></td></tr></table></figure><p>3、parseFloat() 将数字字符串转化为小数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sNum03 = <span class="string">'12.32'</span></span><br><span class="line">alert(<span class="built_in">parseFloat</span>(sNum03));  <span class="comment">//弹出 12.32 将字符串小数转化为数字小数</span></span><br></pre></td></tr></table></figure><p>4、split() 把一个字符串分隔成字符串组成的数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sTr = <span class="string">'2017-4-22'</span>;</span><br><span class="line"><span class="keyword">var</span> aRr = sTr.split(<span class="string">"-"</span>);</span><br><span class="line"><span class="keyword">var</span> aRr2= sTr.split(<span class="string">""</span>);</span><br><span class="line"></span><br><span class="line">alert(aRr);  <span class="comment">//弹出['2017','4','2']</span></span><br><span class="line">alert(aRr2);  <span class="comment">//弹出['2','0','1','7','-','4','-','2','2']</span></span><br></pre></td></tr></table></figure><p>5、charAt() 获取字符串中的某一个字符</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sId = <span class="string">"#div1"</span>;</span><br><span class="line"><span class="keyword">var</span> sTr = sId.charAt(<span class="number">0</span>);</span><br><span class="line">alert(sTr); <span class="comment">//弹出 #</span></span><br></pre></td></tr></table></figure><p>6、indexOf() 查找字符串是否含有某字符</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sTr = <span class="string">"abcdefgh"</span>;</span><br><span class="line"><span class="keyword">var</span> iNum = sTr.indexOf(<span class="string">"c"</span>);</span><br><span class="line">alert(iNum); <span class="comment">//弹出2</span></span><br></pre></td></tr></table></figure><p>7、substring() 截取字符串 用法： substring(start,end)（不包括end）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sTr = <span class="string">"abcdefghijkl"</span>;</span><br><span class="line"><span class="keyword">var</span> sTr2 = sTr.substring(<span class="number">3</span>,<span class="number">5</span>);</span><br><span class="line"><span class="keyword">var</span> sTr3 = sTr.substring(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">alert(sTr2); <span class="comment">//弹出 de</span></span><br><span class="line">alert(sTr3); <span class="comment">//弹出 bcdefghijkl</span></span><br></pre></td></tr></table></figure><p>8、toUpperCase() 字符串转大写</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sTr = <span class="string">"abcdef"</span>;</span><br><span class="line"><span class="keyword">var</span> sTr2 = sTr.toUpperCase();</span><br><span class="line">alert(sTr2); <span class="comment">//弹出ABCDEF</span></span><br></pre></td></tr></table></figure><p>9、toLowerCase() 字符串转小写</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sTr = <span class="string">"ABCDEF"</span>;</span><br><span class="line"><span class="keyword">var</span> sTr2 = sTr.toLowerCase();</span><br><span class="line">alert(sTr2); <span class="comment">//弹出abcdef</span></span><br></pre></td></tr></table></figure><p><strong>字符串反转</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'asdfj12jlsdkf098'</span>;</span><br><span class="line"><span class="keyword">var</span> str2 = str.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>);</span><br><span class="line"></span><br><span class="line">alert(str2);</span><br></pre></td></tr></table></figure><h2 id="9-13-类型转换"><a href="#9-13-类型转换" class="headerlink" title="9.13 类型转换"></a>9.13 类型转换</h2><p>1、直接转换 parseInt() 与 parseFloat()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">alert(<span class="string">'12'</span>+<span class="number">7</span>); <span class="comment">//弹出127</span></span><br><span class="line">alert( <span class="built_in">parseInt</span>(<span class="string">'12'</span>) + <span class="number">7</span> );  <span class="comment">//弹出19 </span></span><br><span class="line">alert( <span class="built_in">parseInt</span>(<span class="number">5.6</span>));  <span class="comment">// 弹出5</span></span><br><span class="line">alert(<span class="string">'5.6'</span>+<span class="number">2.3</span>);  <span class="comment">// 弹出5.62.3</span></span><br><span class="line">alert(<span class="built_in">parseFloat</span>(<span class="string">'5.6'</span>)+<span class="number">2.3</span>);  <span class="comment">// 弹出7.8999999999999995</span></span><br><span class="line">alert(<span class="number">0.1</span>+<span class="number">0.2</span>); <span class="comment">//弹出 0.3000000000000004</span></span><br><span class="line">alert((<span class="number">0.1</span>*<span class="number">100</span>+<span class="number">0.2</span>*<span class="number">100</span>)/<span class="number">100</span>); <span class="comment">//弹出0.3</span></span><br><span class="line">alert((<span class="built_in">parseFloat</span>(<span class="string">'5.6'</span>)*<span class="number">100</span>+<span class="number">2.3</span>*<span class="number">100</span>)/<span class="number">100</span>); <span class="comment">//弹出7.9</span></span><br></pre></td></tr></table></figure><p>2、隐式转换 “==” 和 “-”</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="string">'3'</span>==<span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line">    alert(<span class="string">'相等'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 弹出'相等'</span></span><br><span class="line">alert(<span class="string">'10'</span><span class="number">-3</span>);  <span class="comment">// 弹出7</span></span><br></pre></td></tr></table></figure><p>3、NaN 和 isNaN</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alert( <span class="built_in">parseInt</span>(<span class="string">'123abc'</span>) );  <span class="comment">// 弹出123</span></span><br><span class="line">alert( <span class="built_in">parseInt</span>(<span class="string">'abc123'</span>) );  <span class="comment">// 弹出NaN</span></span><br></pre></td></tr></table></figure><h2 id="9-14-调试程序的方法"><a href="#9-14-调试程序的方法" class="headerlink" title="9.14 调试程序的方法"></a>9.14 调试程序的方法</h2><p>1、alert</p><p>弹出的时候程序会卡住，也就是会阻止程序的运行</p><p>2、console.log</p><p>3、document.title</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 改变的是标签&lt;title&gt;的值</span></span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> iNum01 = <span class="number">20</span>;</span><br><span class="line">    setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        iNum01++;</span><br><span class="line">        <span class="built_in">document</span>.title = iNum01;</span><br><span class="line">    &#125;,<span class="number">100</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9-15-定时器"><a href="#9-15-定时器" class="headerlink" title="9.15 定时器"></a>9.15 定时器</h2><h3 id="9-15-1-定时器在javascript中的作用"><a href="#9-15-1-定时器在javascript中的作用" class="headerlink" title="9.15.1 定时器在javascript中的作用"></a>9.15.1 <strong>定时器在javascript中的作用</strong></h3><p>1、制作动画<br>2、异步操作<br>3、函数缓冲与节流</p><p>定时器类型及语法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    定时器：</span></span><br><span class="line"><span class="comment">    setTimeout  只执行一次的定时器 </span></span><br><span class="line"><span class="comment">    clearTimeout 关闭只执行一次的定时器</span></span><br><span class="line"><span class="comment">    setInterval  反复执行的定时器</span></span><br><span class="line"><span class="comment">    clearInterval 关闭反复执行的定时器</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> time1 = setTimeout(myalert,<span class="number">2000</span>);</span><br><span class="line"><span class="keyword">var</span> time2 = setInterval(myalert,<span class="number">2000</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">clearTimeout(time1);</span></span><br><span class="line"><span class="comment">clearInterval(time2);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myalert</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">'ok!'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-15-2-课堂练习"><a href="#9-15-2-课堂练习" class="headerlink" title="9.15.2 课堂练习"></a>9.15.2 <strong>课堂练习</strong></h3><p>1、定时器制作移动动画</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> oDiv = <span class="built_in">document</span>.getElementById(<span class="string">'div1'</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> iLeft = <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> iSpeed = <span class="number">3</span>;</span></span><br><span class="line"><span class="undefined">        /*</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> timer = setInterval(moving,<span class="number">30</span>);</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">moving</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="undefined">            iLeft += 3;</span></span><br><span class="line"><span class="javascript">            oDiv.style.left = iLeft + <span class="string">'px'</span>;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        */</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> timer = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="undefined">            iLeft += iSpeed;</span></span><br><span class="line"><span class="javascript">            oDiv.style.left = iLeft + <span class="string">'px'</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (iLeft &gt; <span class="number">700</span>) &#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">// clearInterval(timer); // 定时器停止执行</span></span></span><br><span class="line"><span class="javascript">                iSpeed = <span class="number">-3</span>; <span class="comment">// 动画返回</span></span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (iLeft &lt; <span class="number">0</span>) &#123; <span class="comment">// 动画返回之后再次折返过去</span></span></span><br><span class="line"><span class="undefined">                iSpeed = 3;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        &#125;, 30);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="undefined">        width: 200px;</span></span><br><span class="line"><span class="undefined">        height: 200px;</span></span><br><span class="line"><span class="undefined">        background-color: gold;</span></span><br><span class="line"><span class="undefined">        position: absolute;</span></span><br><span class="line"><span class="undefined">        left: 0;</span></span><br><span class="line"><span class="undefined">        top: 100px;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、定时器制作无缝滚动</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>无缝滚动<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        *&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">margin</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">padding</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.list_con</span>&#123;</span></span><br><span class="line"><span class="undefined">            </span></span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:1000px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">border</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-id">#000</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">margin</span><span class="selector-pseudo">:10px</span> <span class="selector-tag">auto</span> 0;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>:<span class="selector-id">#f0f0f0</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">position</span><span class="selector-pseudo">:relative</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">overflow</span><span class="selector-pseudo">:hidden</span>;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.list_con</span> <span class="selector-tag">ul</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">list-style</span><span class="selector-pseudo">:none</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:2000px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">position</span><span class="selector-pseudo">:absolute</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">left</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">top</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.list_con</span> <span class="selector-tag">li</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:180px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:180px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">float</span><span class="selector-pseudo">:left</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">margin</span><span class="selector-pseudo">:10px</span>;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.btns_con</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:1000px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:30px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">margin</span><span class="selector-pseudo">:50px</span> <span class="selector-tag">auto</span> 0;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">position</span><span class="selector-pseudo">:relative</span>;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.left</span>,<span class="selector-class">.right</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:30px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:30px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span><span class="selector-pseudo">:gold</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">position</span><span class="selector-pseudo">:absolute</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">left</span><span class="selector-pseudo">:-40px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">top</span><span class="selector-pseudo">:124px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">font-size</span><span class="selector-pseudo">:30px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">line-height</span><span class="selector-pseudo">:30px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">color</span>:<span class="selector-id">#000</span>;</span></span><br><span class="line"><span class="undefined">            font-family: 'Arial';</span></span><br><span class="line"><span class="css">            <span class="selector-tag">text-align</span><span class="selector-pseudo">:center</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">cursor</span><span class="selector-pseudo">:pointer</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">border-radius</span><span class="selector-pseudo">:15px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">opacity</span><span class="selector-pseudo">:0.5</span>;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.right</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">left</span><span class="selector-pseudo">:1010px</span>;            </span></span><br><span class="line"><span class="css">            <span class="selector-tag">top</span><span class="selector-pseudo">:124px</span>;          </span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> oDiv = <span class="built_in">document</span>.getElementById(<span class="string">'slide'</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> oBtn01 = <span class="built_in">document</span>.getElementById(<span class="string">'btn01'</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> oBtn02 = <span class="built_in">document</span>.getElementById(<span class="string">'btn02'</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="comment">//通过标签获取元素，获取的是选择集，加上下标才能获取到元素          </span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> oUl = oDiv.getElementsByTagName(<span class="string">'ul'</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> iLeft = <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> iSpeed = <span class="number">-2</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> iNowspeed = <span class="number">0</span>;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="comment">//将ul里面的内容复制一份，整个ul里面就包含了10个li</span></span></span><br><span class="line"><span class="undefined">            oUl.innerHTML = oUl.innerHTML + oUl.innerHTML;  </span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">moving</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="undefined">                iLeft += iSpeed;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">                <span class="comment">// 当ul向左滚动到第5个li时，瞬间将整个ul拉回到初始位置</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span>(iLeft&lt;<span class="number">-1000</span>)</span></span><br><span class="line"><span class="undefined">                &#123;</span></span><br><span class="line"><span class="undefined">                    iLeft=0;</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//当ul在起始位置往右滚动时候，瞬间将整个ul拉回到往左的第5个li的位置</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span>(iLeft&gt;<span class="number">0</span>)</span></span><br><span class="line"><span class="undefined">                &#123;</span></span><br><span class="line"><span class="undefined">                    iLeft = -1000;</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">                oUl.style.left = iLeft + <span class="string">'px'</span>;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> timer = setInterval(moving,<span class="number">30</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            oBtn01.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="undefined">                iSpeed = -2;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            oBtn02.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="undefined">                iSpeed = 2;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 当鼠标移入的时候</span></span></span><br><span class="line"><span class="javascript">            oDiv.onmouseover = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="undefined">                iNowspeed = iSpeed;</span></span><br><span class="line"><span class="undefined">                iSpeed = 0;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 当鼠标移出的时候</span></span></span><br><span class="line"><span class="javascript">            oDiv.onmouseout = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="undefined">                iSpeed = iNowspeed;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btns_con"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span> <span class="attr">id</span>=<span class="string">"btn01"</span>&gt;</span>&amp;lt;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span> <span class="attr">id</span>=<span class="string">"btn02"</span>&gt;</span>&amp;gt;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list_con"</span> <span class="attr">id</span>=<span class="string">"slide"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/goods001.jpg"</span> <span class="attr">alt</span>=<span class="string">"商品图片"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/goods002.jpg"</span> <span class="attr">alt</span>=<span class="string">"商品图片"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/goods003.jpg"</span> <span class="attr">alt</span>=<span class="string">"商品图片"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/goods004.jpg"</span> <span class="attr">alt</span>=<span class="string">"商品图片"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/goods005.jpg"</span> <span class="attr">alt</span>=<span class="string">"商品图片"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span>       </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3、定时器制作时钟</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;    </span><br><span class="line">        <span class="keyword">var</span> oDiv = <span class="built_in">document</span>.getElementById(<span class="string">'div1'</span>);</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">timego</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">            <span class="keyword">var</span> year = now.getFullYear();</span><br><span class="line">            <span class="keyword">var</span> month = now.getMonth()+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">var</span> date = now.getDate();</span><br><span class="line">            <span class="keyword">var</span> week = now.getDay();</span><br><span class="line">            <span class="keyword">var</span> hour = now.getHours();</span><br><span class="line">            <span class="keyword">var</span> minute = now.getMinutes();</span><br><span class="line">            <span class="keyword">var</span> second = now.getSeconds();</span><br><span class="line">            <span class="keyword">var</span> str = <span class="string">'当前时间是：'</span>+ year + <span class="string">'年'</span>+month+<span class="string">'月'</span>+date+<span class="string">'日 '</span>+toweek(week)+<span class="string">' '</span>+todou(hour)+<span class="string">':'</span>+todou(minute)+<span class="string">':'</span>+todou(second);</span><br><span class="line">            oDiv.innerHTML = str;</span><br><span class="line">        &#125;</span><br><span class="line">        timego();</span><br><span class="line">        setInterval(timego,<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">toweek</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'星期日'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(n==<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'星期一'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(n==<span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'星期二'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(n==<span class="number">3</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'星期三'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(n==<span class="number">4</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'星期四'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(n==<span class="number">5</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'星期五'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'星期六'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">todou</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n&lt;<span class="number">10</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'0'</span>+n;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> n;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">......</span></span><br><span class="line"><span class="regexp">&lt;div id="div1"&gt;&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure><p>4、定时器制作倒计时</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> oDiv = <span class="built_in">document</span>.getElementById(<span class="string">'div1'</span>);</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">timeleft</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">            <span class="keyword">var</span> future = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2016</span>,<span class="number">8</span>,<span class="number">12</span>,<span class="number">24</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">var</span> lefts = <span class="built_in">parseInt</span>((future-now)/<span class="number">1000</span>);</span><br><span class="line">            <span class="keyword">var</span> day = <span class="built_in">parseInt</span>(lefts/<span class="number">86400</span>);</span><br><span class="line">            <span class="keyword">var</span> hour = <span class="built_in">parseInt</span>(lefts%<span class="number">86400</span>/<span class="number">3600</span>);</span><br><span class="line">            <span class="keyword">var</span> min = <span class="built_in">parseInt</span>(lefts%<span class="number">86400</span>%<span class="number">3600</span>/<span class="number">60</span>);</span><br><span class="line">            <span class="keyword">var</span> sec = lefts%<span class="number">60</span>;</span><br><span class="line">            str = <span class="string">'距离2016年9月12日晚24点还剩下'</span>+day+<span class="string">'天'</span>+hour+<span class="string">'时'</span>+min+<span class="string">'分'</span>+sec+<span class="string">'秒'</span>;</span><br><span class="line">            oDiv.innerHTML = str; </span><br><span class="line">        &#125;</span><br><span class="line">        timeleft();</span><br><span class="line">        setInterval(timeleft,<span class="number">1000</span>);        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">......</span></span><br><span class="line"><span class="regexp">&lt;div id="div1"&gt;&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure><h2 id="9-16-变量作用域"><a href="#9-16-变量作用域" class="headerlink" title="9.16 变量作用域"></a>9.16 变量作用域</h2><p>变量作用域指的是变量的作用范围，javascript中的变量分为全局变量和局部变量。</p><p>1、全局变量：在函数之外定义的变量，为整个页面公用，函数内部外部都可以访问。<br>2、局部变量：在函数内部定义的变量，只能在定义该变量的函数内部访问，外部无法访问。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="comment">//全局变量</span></span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">12</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">myalert</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//局部变量</span></span><br><span class="line">        <span class="keyword">var</span> b = <span class="number">23</span>;</span><br><span class="line">        alert(a);</span><br><span class="line">        alert(b);</span><br><span class="line">    &#125;</span><br><span class="line">    myalert(); <span class="comment">//弹出12和23</span></span><br><span class="line">    alert(a);  <span class="comment">//弹出12    </span></span><br><span class="line">    alert(b);  <span class="comment">//出错</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h2 id="9-17-封闭函数"><a href="#9-17-封闭函数" class="headerlink" title="9.17 封闭函数"></a>9.17 封闭函数</h2><p>封闭函数是javascript中匿名函数的另外一种写法，创建一个一开始就执行而不用命名的函数。</p><p>一般定义的函数和执行函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myalert</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">'hello!'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">myalert();</span><br></pre></td></tr></table></figure><p>封闭函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> <span class="title">myalert</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">'hello!'</span>);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>还可以在函数定义前加上“~”和“!”等符号来定义匿名函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">!<span class="function"><span class="keyword">function</span> <span class="title">myalert</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">'hello!'</span>);</span><br><span class="line">&#125;()</span><br></pre></td></tr></table></figure><h3 id="9-17-1-封闭函数的好处"><a href="#9-17-1-封闭函数的好处" class="headerlink" title="9.17.1 封闭函数的好处"></a>9.17.1 <strong>封闭函数的好处</strong></h3><p>封闭函数可以创造一个独立的空间，在封闭函数内定义的变量和函数不会影响外部同名的函数和变量，可以避免命名冲突，在页面上引入多个js文件时，用这种方式添加js文件比较安全，比如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> iNum01 = <span class="number">12</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myalert</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">'hello!'</span>);</span><br><span class="line">&#125;</span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> iNum01 = <span class="number">24</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">myalert</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="string">'hello!world'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    alert(iNum01);</span><br><span class="line">    myalert()</span><br><span class="line">&#125;)()</span><br><span class="line">alert(iNum01);</span><br><span class="line">myalert();</span><br></pre></td></tr></table></figure><h2 id="9-18-常用内置对象"><a href="#9-18-常用内置对象" class="headerlink" title="9.18 常用内置对象"></a>9.18 常用内置对象</h2><p>1、document</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById <span class="comment">//通过id获取元素</span></span><br><span class="line"><span class="built_in">document</span>.getElementsByTagName <span class="comment">//通过标签名获取元素</span></span><br><span class="line"><span class="built_in">document</span>.referrer  <span class="comment">//获取上一个跳转页面的地址(需要服务器环境)</span></span><br></pre></td></tr></table></figure><p>2、location<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.location.href  <span class="comment">//获取或者重定url地址</span></span><br><span class="line"><span class="built_in">window</span>.location.search <span class="comment">//获取地址参数部分</span></span><br><span class="line"><span class="built_in">window</span>.location.hash <span class="comment">//获取页面锚点或者叫哈希值</span></span><br></pre></td></tr></table></figure><p></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 存储上一个页面的地址</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> sUrl = <span class="built_in">document</span>.referrer;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> oBtn = <span class="built_in">document</span>.getElementById(<span class="string">"btn01"</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        oBtn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">window</span>.location.href = <span class="string">"http://www.baidu.com"</span>;</span></span><br><span class="line"><span class="undefined">        &#125;;</span></span><br><span class="line"><span class="javascript">        alert(<span class="built_in">window</span>.location.search);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"btn01"</span> <span class="attr">value</span>=<span class="string">"跳转"</span> <span class="attr">name</span>=<span class="string">""</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>课堂练习</strong><br>通过地址栏的参数改变页面状态，如下的示例是通过地址栏中的参数改变页面背景色</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> oBody01 = <span class="built_in">document</span>.getElementById(<span class="string">"body01"</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> sData = <span class="built_in">window</span>.location.search;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (sData != <span class="string">''</span>) &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> iNum = sData.split(<span class="string">"="</span>)[<span class="number">1</span>];</span></span><br><span class="line"><span class="javascript">                 <span class="comment">// console.log(iNum);</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span> (iNum == <span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="javascript">                    oBody01.style.backgroundColor = <span class="string">"red"</span>;</span></span><br><span class="line"><span class="javascript">                &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                    oBody01.style.backgroundColor = <span class="string">"pink"</span>;</span></span><br><span class="line"><span class="undefined">                &#125;;</span></span><br><span class="line"><span class="undefined">            &#125;;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">id</span>=<span class="string">"body01"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"btn01"</span> <span class="attr">value</span>=<span class="string">"跳转"</span> <span class="attr">name</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3、Math</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Math</span>.random 获取<span class="number">0</span><span class="number">-1</span>的随机数</span><br><span class="line"><span class="built_in">Math</span>.floor 向下取整</span><br><span class="line"><span class="built_in">Math</span>.ceil 向上取整</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="comment">// var iPi = Math.PI;</span></span><br><span class="line">    <span class="comment">// alert(iPi);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> sList = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">        <span class="comment">// Math.random 返回0到1之间的随机数,不包括1</span></span><br><span class="line">        <span class="keyword">var</span> iNum = <span class="built_in">Math</span>.random();</span><br><span class="line">        sList.push(iNum);</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="built_in">console</span>.log(sList);</span><br><span class="line"></span><br><span class="line">    alert(<span class="built_in">Math</span>.floor(<span class="number">5.6</span>)); <span class="comment">// 向下取整，结果是5</span></span><br><span class="line">    alert(<span class="built_in">Math</span>.ceil(<span class="number">5.2</span>));  <span class="comment">// 向上取整，结果是6</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p><strong>课堂练习</strong><br>制作一定范围内的随机整数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取10到20之间的随机整数</span></span><br><span class="line"><span class="keyword">var</span> iN01 = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> iN02 = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">var</span> result = <span class="built_in">Math</span>.floor((iN02 - iN01+<span class="number">1</span>)*<span class="built_in">Math</span>.random()) + iN01;</span><br><span class="line">alert(result)</span><br></pre></td></tr></table></figure><h1 id="10-JQuery"><a href="#10-JQuery" class="headerlink" title="10.JQuery"></a>10.JQuery</h1><h2 id="10-1-jquery介绍"><a href="#10-1-jquery介绍" class="headerlink" title="10.1 jquery介绍"></a>10.1 jquery介绍</h2><p>jQuery是目前使用最广泛的javascript函数库。据统计，全世界排名前100万的网站，有46%使用jQuery，远远超过其他库。微软公司甚至把jQuery作为他们的官方库。</p><p>jQuery的版本分为1.x系列和2.x、3.x系列，1.x系列兼容低版本的浏览器，2.x、3.x系列放弃支持低版本浏览器，目前使用最多的是1.x系列的。</p><p>jquery是一个函数库，一个js文件，页面用script标签引入这个js文件就可以使用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;js/jquery-1.12.2.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>jquery的口号和愿望 Write Less, Do More（写得少，做得多）</p><p>1、<a href="http://jquery.com/" target="_blank" rel="noopener">http://jquery.com/</a> 官方网站<br>2、<a href="https://code.jquery.com/" target="_blank" rel="noopener">https://code.jquery.com/</a> 版本下载</p><h2 id="10-2-jquery加载"><a href="#10-2-jquery加载" class="headerlink" title="10.2 jquery加载"></a>10.2 jquery加载</h2><p>将获取元素的语句写到页面头部，会因为元素还没有加载而出错，jquery提供了ready方法解决这个问题，它的速度比原生的 window.onload 更快。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"></span><br><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">     ......</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>可以简写为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"></span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">     ......</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--不能直接在jquery的引入标签里写js代码，需要另写一个script标签，在这个里面那些js代码--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/jquery-3.4.1.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 原生js写法,onload是整个页面加载完后，再渲染完之后才运行</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> oDiv = <span class="built_in">document</span>.getElementById(<span class="string">"div1"</span>);</span></span><br><span class="line"><span class="javascript">            alert(<span class="string">'这是原生js弹出的div'</span> + oDiv);</span></span><br><span class="line"><span class="undefined">        &#125;;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 完整写法，ready是标签加载完就执行，速度比原生js的快</span></span></span><br><span class="line"><span class="javascript">        $(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> $div = $(<span class="string">"#div1"</span>);</span></span><br><span class="line"><span class="javascript">            alert(<span class="string">'这是jquery弹出的div-1'</span> + $div);</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 简单写法</span></span></span><br><span class="line"><span class="javascript">        $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> $div = $(<span class="string">"#div1"</span>);</span></span><br><span class="line"><span class="javascript">            alert(<span class="string">'这是jquery弹出的div-2'</span> + $div);</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span>&gt;</span></span><br><span class="line">    这是一个div元素</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="10-3-jquery选择器"><a href="#10-3-jquery选择器" class="headerlink" title="10.3 jquery选择器"></a>10.3 jquery选择器</h2><h3 id="10-3-1-jquery用法思想一"><a href="#10-3-1-jquery用法思想一" class="headerlink" title="10.3.1 jquery用法思想一"></a>10.3.1 <strong>jquery用法思想一</strong></h3><p>选择某个网页元素，然后对它进行某种操作</p><h3 id="10-3-2-jquery选择器"><a href="#10-3-2-jquery选择器" class="headerlink" title="10.3.2 jquery选择器"></a>10.3.2 <strong>jquery选择器</strong></h3><p>jquery选择器可以快速地选择元素，选择规则和css样式相同，使用length属性判断是否选择成功。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#myId'</span>) <span class="comment">//选择id为myId的网页元素</span></span><br><span class="line">$(<span class="string">'.myClass'</span>) <span class="comment">// 选择class为myClass的元素</span></span><br><span class="line">$(<span class="string">'li'</span>) <span class="comment">//选择所有的li元素</span></span><br><span class="line">$(<span class="string">'#ul1 li span'</span>) <span class="comment">//选择id为ul1元素下的所有li下的span元素</span></span><br><span class="line">$(<span class="string">'input[name=first]'</span>) <span class="comment">// 选择name属性等于first的input元素</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--不能直接在jquery的引入标签里写js代码，需要另写一个script标签，在这个里面那些js代码--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/jquery-3.4.1.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> $div = $(<span class="string">"#div1"</span>);</span></span><br><span class="line"><span class="javascript">            $div.css(&#123;<span class="string">"color"</span>:<span class="string">"red"</span>&#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> $div2 = $(<span class="string">".box"</span>);</span></span><br><span class="line"><span class="javascript">            $div2.css(&#123;<span class="string">"color"</span>:<span class="string">"green"</span>&#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> $li = $(<span class="string">".list li"</span>);</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 带'-'的样式属性可以写成驼峰式，也可以写成原始的，容错</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// $li.css(&#123;"backgroundColor":"pink"&#125;);</span></span></span><br><span class="line"><span class="javascript">            $li.css(&#123;<span class="string">"background-color"</span>:<span class="string">"pink"</span>&#125;);</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;style type="text/css"&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--#div1&#123;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--color: gold;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&#125;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--.box&#123;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--color: green;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&#125;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--.list li&#123;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--background-color: pink;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&#125;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;/style&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span>&gt;</span>这是一个div元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span>这是第二个div元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span>这是第三个div元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--ul.list&gt;li&#123;$&#125;*8--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>6<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>7<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>8<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="10-3-3对选择集进行过滤"><a href="#10-3-3对选择集进行过滤" class="headerlink" title="10.3.3对选择集进行过滤"></a>10.3.3<strong>对选择集进行过滤</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'div'</span>).has(<span class="string">'p'</span>); <span class="comment">// 选择包含p元素的div元素</span></span><br><span class="line">$(<span class="string">'div'</span>).not(<span class="string">'.myClass'</span>); <span class="comment">//选择class不等于myClass的div元素</span></span><br><span class="line">$(<span class="string">'div'</span>).filter(<span class="string">'.myClass'</span>); <span class="comment">//选择class等于myClass的div元素</span></span><br><span class="line">$(<span class="string">'div'</span>).eq(<span class="number">5</span>); <span class="comment">//选择第6个div元素</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--不能直接在jquery的引入标签里写js代码，需要另写一个script标签，在这个里面那些js代码--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/jquery-3.4.1.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// var $div = $("div");</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// $div.css(&#123;"background-color":"red"&#125;);</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            $(<span class="string">"div"</span>).css(&#123;<span class="string">"background-color"</span>:<span class="string">"gold"</span>&#125;);</span></span><br><span class="line"><span class="javascript">            $(<span class="string">"div"</span>).has(<span class="string">'p'</span>).css(&#123;<span class="string">"background-color"</span>:<span class="string">"red"</span>&#125;);</span></span><br><span class="line"><span class="javascript">            $(<span class="string">"div"</span>).eq(<span class="number">4</span>).css(&#123;<span class="string">"text-indent"</span>:<span class="string">"30px"</span>&#125;);</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>2<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>7<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>8<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="10-3-4-选择集转移"><a href="#10-3-4-选择集转移" class="headerlink" title="10.3.4 选择集转移"></a>10.3.4 <strong>选择集转移</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'div'</span>).prev(); <span class="comment">//选择div元素前面紧挨的同辈元素</span></span><br><span class="line">$(<span class="string">'div'</span>).prevAll(); <span class="comment">//选择div元素之前所有的同辈元素</span></span><br><span class="line">$(<span class="string">'div'</span>).next(); <span class="comment">//选择div元素后面紧挨的同辈元素</span></span><br><span class="line">$(<span class="string">'div'</span>).nextAll(); <span class="comment">//选择div元素后面所有的同辈元素</span></span><br><span class="line">$(<span class="string">'div'</span>).parent(); <span class="comment">//选择div的父元素</span></span><br><span class="line">$(<span class="string">'div'</span>).children(); <span class="comment">//选择div的所有子元素</span></span><br><span class="line">$(<span class="string">'div'</span>).siblings(); <span class="comment">//选择div的同级元素</span></span><br><span class="line">$(<span class="string">'div'</span>).find(<span class="string">'.myClass'</span>); <span class="comment">//选择div内的class等于myClass的元素</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--不能直接在jquery的引入标签里写js代码，需要另写一个script标签，在这个里面那些js代码--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/jquery-3.4.1.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">"div"</span>).eq(<span class="number">4</span>).prev().css(&#123;<span class="string">"color"</span>:<span class="string">"green"</span>&#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            $(<span class="string">"div"</span>).find(<span class="string">".tip"</span>).css(&#123;<span class="string">"color"</span>:<span class="string">"red"</span>&#125;);</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>2<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>7<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>8<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"tip"</span>&gt;</span>9<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="10-3-5-判断是否选择到了元素"><a href="#10-3-5-判断是否选择到了元素" class="headerlink" title="10.3.5 判断是否选择到了元素"></a>10.3.5 <strong>判断是否选择到了元素</strong></h3><p>jquery有容错机制，即使没有找到元素，也不会出错，可以用length属性来判断是否找到了元素,length等于0，就是没选择到元素，length大于0，就是选择到了元素。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--不能直接在jquery的引入标签里写js代码，需要另写一个script标签，在这个里面那些js代码--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/jquery-3.4.1.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> $div1 = $(<span class="string">'#div1'</span>);</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 没有选中元素，也不会报错，程序正常运行</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> $div2 = $(<span class="string">'#div2'</span>);</span></span><br><span class="line"><span class="javascript">            alert($div1.length); <span class="comment">// 弹出1</span></span></span><br><span class="line"><span class="javascript">            alert($div2.length); <span class="comment">// 弹出0</span></span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span>&gt;</span>div元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="10-4-jquery样式操作"><a href="#10-4-jquery样式操作" class="headerlink" title="10.4 jquery样式操作"></a>10.4 jquery样式操作</h2><h3 id="10-4-1-jquery用法思想二"><a href="#10-4-1-jquery用法思想二" class="headerlink" title="10.4.1 jquery用法思想二"></a>10.4.1 <strong>jquery用法思想二</strong></h3><p>同一个函数完成取值和赋值</p><h3 id="10-4-2-操作行间样式"><a href="#10-4-2-操作行间样式" class="headerlink" title="10.4.2 操作行间样式"></a>10.4.2 <strong>操作行间样式</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取div的样式</span></span><br><span class="line">$(<span class="string">"div"</span>).css(<span class="string">"width"</span>);</span><br><span class="line">$(<span class="string">"div"</span>).css(<span class="string">"color"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置div的样式</span></span><br><span class="line">$(<span class="string">"div"</span>).css(<span class="string">"width"</span>,<span class="string">"30px"</span>);</span><br><span class="line">$(<span class="string">"div"</span>).css(<span class="string">"height"</span>,<span class="string">"30px"</span>);</span><br><span class="line">$(<span class="string">"div"</span>).css(&#123;<span class="attr">fontSize</span>:<span class="string">"30px"</span>,<span class="attr">color</span>:<span class="string">"red"</span>&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--不能直接在jquery的引入标签里写js代码，需要另写一个script标签，在这个里面那些js代码--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/jquery-3.4.1.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> $div1 = $(<span class="string">'#div1'</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            $div1.css(<span class="string">"width"</span>, <span class="string">"30px"</span>);</span></span><br><span class="line"><span class="javascript">            $div1.css(<span class="string">"height"</span>, <span class="string">"30px"</span>);</span></span><br><span class="line"><span class="javascript">            $div1.css(&#123;<span class="attr">fontSize</span>: <span class="string">"30px"</span>, <span class="attr">color</span>: <span class="string">"red"</span>&#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            alert($div1.css(<span class="string">'width'</span>));</span></span><br><span class="line"><span class="javascript">            alert($div1.css(<span class="string">'color'</span>));</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 原生js无法读取行间没有定义的css属性值,但是可以读取行间已定义的css属性值</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> oDiv = <span class="built_in">document</span>.getElementById(<span class="string">"box"</span>);</span></span><br><span class="line"><span class="javascript">            alert(oDiv.style.height);   <span class="comment">// 空</span></span></span><br><span class="line"><span class="javascript">            alert(oDiv.style.fontSize); <span class="comment">// 20px</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span>&gt;</span>div元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span> <span class="attr">style</span>=<span class="string">"font-size: 20px;"</span>&gt;</span>div元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>特别注意</strong><br>选择器获取的多个元素，获取信息获取的是第一个，比如：$(“div”).css(“width”)，获取的是第一个div的width。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--不能直接在jquery的引入标签里写js代码，需要另写一个script标签，在这个里面那些js代码--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/jquery-3.4.1.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> $div = $(<span class="string">'div'</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            alert($div.css(<span class="string">"color"</span>)); <span class="comment">// rgb(0,128,0) =&gt; green</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"color: green"</span>&gt;</span>1.div元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"color: red"</span>&gt;</span>2.div元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="10-4-3-操作样式类名"><a href="#10-4-3-操作样式类名" class="headerlink" title="10.4.3 操作样式类名"></a>10.4.3 <strong>操作样式类名</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#div1"</span>).addClass(<span class="string">"divClass2"</span>) <span class="comment">//为id为div1的对象追加样式divClass2,不是替换成divClass2</span></span><br><span class="line">$(<span class="string">"#div1"</span>).removeClass(<span class="string">"divClass"</span>)  <span class="comment">//移除id为div1的对象的class名为divClass的样式</span></span><br><span class="line">$(<span class="string">"#div1"</span>).removeClass(<span class="string">"divClass divClass2"</span>) <span class="comment">//移除多个样式</span></span><br><span class="line">$(<span class="string">"#div1"</span>).toggleClass(<span class="string">"anotherClass"</span>) <span class="comment">//重复切换anotherClass样式，比如点击增加，再点击移除等操作</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--不能直接在jquery的引入标签里写js代码，需要另写一个script标签，在这个里面那些js代码--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/jquery-3.4.1.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> $div = $(<span class="string">'.box'</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            $div.addClass(<span class="string">"big"</span>);</span></span><br><span class="line"><span class="javascript">            $div.removeClass(<span class="string">"box"</span>);</span></span><br><span class="line"><span class="javascript">            $div.toggleClass(<span class="string">"box"</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box</span>&#123;</span></span><br><span class="line"><span class="undefined">            width: 100px;</span></span><br><span class="line"><span class="undefined">            height: 100px;</span></span><br><span class="line"><span class="undefined">            background-color: gold;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.big</span>&#123;</span></span><br><span class="line"><span class="undefined">            font-size: 30px;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span>div元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="10-5-绑定click事件"><a href="#10-5-绑定click事件" class="headerlink" title="10.5 绑定click事件"></a>10.5 绑定click事件</h2><p>给元素绑定click事件，可以用如下方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#btn1'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 内部的this指的是原生对象</span></span><br><span class="line">    <span class="comment">// 使用jquery对象用 $(this)</span></span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--不能直接在jquery的引入标签里写js代码，需要另写一个script标签，在这个里面那些js代码--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/jquery-3.4.1.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 绑定click事件</span></span></span><br><span class="line"><span class="javascript">            $(<span class="string">"#btn"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">                <span class="comment">// if ($(".box").hasClass("col01")) &#123;</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">//     $(".box").removeClass("col01");</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// &#125; else &#123;</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">//     $(".box").addClass("col01");</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">                <span class="comment">// 简化写法</span></span></span><br><span class="line"><span class="javascript">                $(<span class="string">".box"</span>).toggleClass(<span class="string">"col01"</span>);</span></span><br><span class="line"><span class="undefined">            &#125;);</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="undefined">            width: 100px;</span></span><br><span class="line"><span class="undefined">            height: 100px;</span></span><br><span class="line"><span class="undefined">            background-color: gold;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.col01</span> &#123;</span></span><br><span class="line"><span class="undefined">            background-color: green;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"切换样式"</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span>div元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="10-5-1-获取元素的索引值"><a href="#10-5-1-获取元素的索引值" class="headerlink" title="10.5.1 获取元素的索引值"></a>10.5.1 <strong>获取元素的索引值</strong></h3><p>有时候需要获得匹配元素相对于其同胞元素的索引位置，此时可以用index()方法获取</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> $li = $(<span class="string">'.list li'</span>).eq(<span class="number">1</span>);</span><br><span class="line">alert($li.index()); <span class="comment">// 弹出1</span></span><br><span class="line">......</span><br><span class="line">&lt;ul <span class="class"><span class="keyword">class</span></span>=<span class="string">"list"</span>&gt;</span><br><span class="line">    &lt;li&gt;<span class="number">1</span>&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">    &lt;li&gt;2&lt;/</span>li&gt;</span><br><span class="line">    &lt;li&gt;<span class="number">4</span>&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">    &lt;li&gt;5&lt;/</span>li&gt;</span><br><span class="line">    &lt;li&gt;<span class="number">6</span>&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">&lt;/u</span>l&gt;</span><br></pre></td></tr></table></figure><p><strong>课堂练习</strong></p><p>选项卡<br></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--不能直接在jquery的引入标签里写js代码，需要另写一个script标签，在这个里面那些js代码--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/jquery-3.4.1.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> $btn = $(<span class="string">".btns input"</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> $div = $(<span class="string">".cons div"</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            $btn.click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">// this指的是原生this,它表示当前点击的对象</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">                <span class="comment">// 当前点击的按钮加上current样式后，除了当前，其他的按钮去掉current样式</span></span></span><br><span class="line"><span class="javascript">                $(<span class="keyword">this</span>).addClass(<span class="string">"current"</span>).siblings().removeClass(<span class="string">"current"</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">                <span class="comment">// alert($(this).index()); // 查看当前点击对象的索引值</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">                <span class="comment">// 当前点击的按钮对应索引值的div加上active样式，其他的去掉active样式</span></span></span><br><span class="line"><span class="javascript">                $div.eq($(<span class="keyword">this</span>).index()).addClass(<span class="string">"active"</span>).siblings().removeClass(<span class="string">"active"</span>);</span></span><br><span class="line"><span class="undefined">            &#125;)</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.btns</span> <span class="selector-tag">input</span> &#123;</span></span><br><span class="line"><span class="undefined">            width: 100px;</span></span><br><span class="line"><span class="undefined">            height: 40px;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#dddddd</span>;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.btns</span> <span class="selector-class">.current</span> &#123;</span></span><br><span class="line"><span class="undefined">            background-color: gold;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.cons</span> <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="undefined">            width: 500px;</span></span><br><span class="line"><span class="undefined">            height: 300px;</span></span><br><span class="line"><span class="undefined">            background-color: gold;</span></span><br><span class="line"><span class="undefined">            display: none;</span></span><br><span class="line"><span class="undefined">            text-align: center;</span></span><br><span class="line"><span class="undefined">            line-height: 300px;</span></span><br><span class="line"><span class="undefined">            font-size: 30px;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.cons</span> <span class="selector-class">.active</span> &#123;</span></span><br><span class="line"><span class="undefined">            display: block;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btns"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"01"</span> <span class="attr">class</span>=<span class="string">"current"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"02"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"03"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"cons"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span>选项卡一的内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>选项卡二的内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>选项卡三的内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><h2 id="10-6-jquery特殊效果"><a href="#10-6-jquery特殊效果" class="headerlink" title="10.6 jquery特殊效果"></a>10.6 jquery特殊效果</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">fadeIn() 淡入</span><br><span class="line"></span><br><span class="line">    $btn.click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        $(<span class="string">'#div1'</span>).fadeIn(<span class="number">1000</span>,<span class="string">'swing'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            alert(<span class="string">'done!'</span>);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">fadeOut() 淡出</span><br><span class="line">fadeToggle() 切换淡入淡出</span><br><span class="line">hide() 隐藏元素</span><br><span class="line">show() 显示元素</span><br><span class="line">toggle() 切换元素的可见状态</span><br><span class="line">slideDown() 向下展开</span><br><span class="line">slideUp() 向上卷起</span><br><span class="line">slideToggle() 依次展开或卷起某个元素</span><br></pre></td></tr></table></figure><h2 id="10-7-jquery链式调用"><a href="#10-7-jquery链式调用" class="headerlink" title="10.7 jquery链式调用"></a>10.7 jquery链式调用</h2><p>jquery对象的方法会在执行完后返回这个jquery对象，所有jquery对象的方法可以连起来写：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#div1'</span>) <span class="comment">// id为div1的元素</span></span><br><span class="line">.children(<span class="string">'ul'</span>) <span class="comment">//该元素下面的ul子元素</span></span><br><span class="line">.slideDown(<span class="string">'fast'</span>) <span class="comment">//高度从零变到实际高度来显示ul元素</span></span><br><span class="line">.parent()  <span class="comment">//跳到ul的父元素，也就是id为div1的元素</span></span><br><span class="line">.siblings()  <span class="comment">//跳到div1元素平级的所有兄弟元素</span></span><br><span class="line">.children(<span class="string">'ul'</span>) <span class="comment">//这些兄弟元素中的ul子元素</span></span><br><span class="line">.slideUp(<span class="string">'fast'</span>);  <span class="comment">//高度实际高度变换到零来隐藏ul元素</span></span><br></pre></td></tr></table></figure><p>课堂练习 - 层级菜单</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--不能直接在jquery的引入标签里写js代码，需要另写一个script标签，在这个里面那些js代码--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/jquery-3.4.1.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            $(<span class="string">'.level1'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">                <span class="comment">//当前点击的元素紧挨的同辈元素向下展开，再跳到此元素的父级(li),再跳到此父级的其他的同辈元素(li),选择其他同辈元素(li)的子元素ul，然后将它向上收起。</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">                <span class="comment">// 通过stop() 可以修正反复点击导致的持续动画的问题</span></span></span><br><span class="line"><span class="javascript">                $(<span class="keyword">this</span>).next().stop().slideToggle().parent().siblings().children(<span class="string">'ul'</span>).slideUp();</span></span><br><span class="line"><span class="undefined">            &#125;)</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        &#125;)</span></span><br><span class="line"><span class="undefined">        </span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        body &#123;</span></span><br><span class="line"><span class="undefined">            font-family: 'Microsoft Yahei';</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        body, ul &#123;</span></span><br><span class="line"><span class="undefined">            margin: 0px;</span></span><br><span class="line"><span class="undefined">            padding: 0px;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        ul &#123;</span></span><br><span class="line"><span class="undefined">            list-style: none;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.menu</span> &#123;</span></span><br><span class="line"><span class="undefined">            width: 200px;</span></span><br><span class="line"><span class="undefined">            margin: 20px auto 0;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.menu</span> <span class="selector-class">.level1</span>, <span class="selector-class">.menu</span> <span class="selector-tag">li</span> <span class="selector-tag">ul</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="undefined">            display: block;</span></span><br><span class="line"><span class="undefined">            width: 200px;</span></span><br><span class="line"><span class="undefined">            height: 30px;</span></span><br><span class="line"><span class="undefined">            line-height: 30px;</span></span><br><span class="line"><span class="undefined">            text-decoration: none;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#3366cc</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line"><span class="undefined">            font-size: 16px;</span></span><br><span class="line"><span class="undefined">            text-indent: 10px;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.menu</span> <span class="selector-class">.level1</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">border-bottom</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#afc6f6</span>;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.menu</span> <span class="selector-tag">li</span> <span class="selector-tag">ul</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="undefined">            font-size: 14px;</span></span><br><span class="line"><span class="undefined">            text-indent: 20px;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#7aa1ef</span>;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.menu</span> <span class="selector-tag">li</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">border-bottom</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#afc6f6</span>;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.menu</span> <span class="selector-tag">li</span> <span class="selector-tag">ul</span> &#123;</span></span><br><span class="line"><span class="undefined">            display: none;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.menu</span> <span class="selector-tag">li</span> <span class="selector-tag">ul</span><span class="selector-class">.current</span> &#123;</span></span><br><span class="line"><span class="undefined">            display: block;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.menu</span> <span class="selector-tag">li</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#f6b544</span>;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"menu"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"level1"</span>&gt;</span>水果<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"current"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>苹果<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>梨子<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>葡萄<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>火龙果<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"level1"</span>&gt;</span>海鲜<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>蛏子<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>扇贝<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>龙虾<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>象拔蚌<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"level1"</span>&gt;</span>肉类<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>内蒙古羊肉<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>进口牛肉<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>野猪肉<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"level1"</span>&gt;</span>蔬菜<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>娃娃菜<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>西红柿<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>西芹<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>胡萝卜<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"level1"</span>&gt;</span>速冻<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>冰淇淋<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>湾仔码头<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>海参<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>牛肉丸<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="10-8-jquery动画"><a href="#10-8-jquery动画" class="headerlink" title="10.8 jquery动画"></a>10.8 jquery动画</h2><p>通过animate方法可以设置元素某属性值上的动画，可以设置一个或多个属性值，动画执行完成后会执行一个函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#div1'</span>).animate(&#123;</span><br><span class="line">    width:<span class="number">300</span>,</span><br><span class="line">    height:<span class="number">300</span></span><br><span class="line">&#125;,<span class="number">1000</span>,<span class="string">'swing'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">'done!'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>参数可以写成数字表达式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#div1'</span>).animate(&#123;</span><br><span class="line">    width:<span class="string">'+=100'</span>,</span><br><span class="line">    height:<span class="number">300</span></span><br><span class="line">&#125;,<span class="number">1000</span>,<span class="string">'swing'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">'done!'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="10-9-尺寸相关、滚动事件"><a href="#10-9-尺寸相关、滚动事件" class="headerlink" title="10.9 尺寸相关、滚动事件"></a>10.9 尺寸相关、滚动事件</h2><p>1、获取和设置元素的尺寸</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">width()、height()    获取元素width和height  </span><br><span class="line">innerWidth()、innerHeight()  包括padding的width和height  </span><br><span class="line">outerWidth()、outerHeight()  包括padding和border的width和height  </span><br><span class="line">outerWidth(<span class="literal">true</span>)、outerHeight(<span class="literal">true</span>)   包括padding和border以及margin的width和height</span><br></pre></td></tr></table></figure><p>2、获取元素相对页面的绝对位置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">offset()</span><br></pre></td></tr></table></figure><p>3、获取浏览器可视区宽度高度</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">window</span>).width();</span><br><span class="line">$(<span class="built_in">window</span>).height();</span><br></pre></td></tr></table></figure><p>4、获取页面文档的宽度高度</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).width();</span><br><span class="line">$(<span class="built_in">document</span>).height();</span><br></pre></td></tr></table></figure><p>5、获取页面滚动距离</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).scrollTop();  </span><br><span class="line">$(<span class="built_in">document</span>).scrollLeft();</span><br></pre></td></tr></table></figure><p>6、页面滚动事件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">window</span>).scroll(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line">    ......  </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="10-10-jquery属性操作"><a href="#10-10-jquery属性操作" class="headerlink" title="10.10 jquery属性操作"></a>10.10 jquery属性操作</h2><p>1、html() 取出或设置html内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 取出html内容</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> $htm = $(<span class="string">'#div1'</span>).html();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置html内容</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">'#div1'</span>).html(<span class="string">'&lt;span&gt;添加文字&lt;/span&gt;'</span>);</span><br></pre></td></tr></table></figure><p>2、prop() 取出或设置某个属性的值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 取出图片的地址</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> $src = $(<span class="string">'#img1'</span>).prop(<span class="string">'src'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置图片的地址和alt属性</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">'#img1'</span>).prop(&#123;<span class="attr">src</span>: <span class="string">"test.jpg"</span>, <span class="attr">alt</span>: <span class="string">"Test Image"</span> &#125;);</span><br></pre></td></tr></table></figure><h2 id="10-11-jquery循环"><a href="#10-11-jquery循环" class="headerlink" title="10.11 jquery循环"></a>10.11 jquery循环</h2><p>对jquery选择的对象集合分别进行操作，需要用到jquery循环操作，此时可以用对象上的each方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">'.list li'</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>&#123;</span><br><span class="line">        $(<span class="keyword">this</span>).html(i);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">......</span><br><span class="line">&lt;ul <span class="class"><span class="keyword">class</span></span>=<span class="string">"list"</span>&gt;</span><br><span class="line">    &lt;li&gt;<span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    &lt;li&gt;<span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    &lt;li&gt;<span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    &lt;li&gt;<span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    &lt;li&gt;<span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    &lt;li&gt;<span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/ul&gt;</span></span><br></pre></td></tr></table></figure><h2 id="10-12-jquery事件"><a href="#10-12-jquery事件" class="headerlink" title="10.12 jquery事件"></a>10.12 jquery事件</h2><h3 id="10-12-1-事件函数列表："><a href="#10-12-1-事件函数列表：" class="headerlink" title="10.12.1 事件函数列表："></a>10.12.1 <strong>事件函数列表：</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">blur() 元素失去焦点</span><br><span class="line">focus() 元素获得焦点</span><br><span class="line">click() 鼠标单击</span><br><span class="line">mouseover() 鼠标进入（进入子元素也触发）</span><br><span class="line">mouseout() 鼠标离开（离开子元素也触发）</span><br><span class="line">mouseenter() 鼠标进入（进入子元素不触发）</span><br><span class="line">mouseleave() 鼠标离开（离开子元素不触发）</span><br><span class="line">hover() 同时为mouseenter和mouseleave事件指定处理函数</span><br><span class="line">ready() DOM加载完成</span><br><span class="line">resize() 浏览器窗口的大小发生改变</span><br><span class="line">scroll() 滚动条的位置发生变化</span><br><span class="line">submit() 用户递交表单</span><br></pre></td></tr></table></figure><h3 id="10-12-2-绑定事件的其他方式"><a href="#10-12-2-绑定事件的其他方式" class="headerlink" title="10.12.2 绑定事件的其他方式"></a>10.12.2 <strong>绑定事件的其他方式</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">'#div1'</span>).bind(<span class="string">'mouseover click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">        alert($(<span class="keyword">this</span>).html());</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="10-12-3-取消绑定事件"><a href="#10-12-3-取消绑定事件" class="headerlink" title="10.12.3 取消绑定事件"></a>10.12.3 <strong>取消绑定事件</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">'#div1'</span>).bind(<span class="string">'mouseover click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">        alert($(<span class="keyword">this</span>).html());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// $(this).unbind();</span></span><br><span class="line">        $(<span class="keyword">this</span>).unbind(<span class="string">'mouseover'</span>);</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="10-13-事件冒泡"><a href="#10-13-事件冒泡" class="headerlink" title="10.13 事件冒泡"></a>10.13 事件冒泡</h2><h3 id="10-13-1-什么是事件冒泡"><a href="#10-13-1-什么是事件冒泡" class="headerlink" title="10.13.1 什么是事件冒泡"></a>10.13.1 <strong>什么是事件冒泡</strong></h3><p>在一个对象上触发某类事件（比如单击onclick事件），如果此对象定义了此事件的处理程序，那么此事件就会调用这个处理程序，如果没有定义此事件处理程序或者事件返回true，那么这个事件会向这个对象的父级对象传播，从里到外，直至它被处理（父级对象所有同类事件都将被激活），或者它到达了对象层次的最顶层，即document对象（有些浏览器是window）。</p><h3 id="10-13-2-事件冒泡的作用"><a href="#10-13-2-事件冒泡的作用" class="headerlink" title="10.13.2 事件冒泡的作用"></a>10.13.2 <strong>事件冒泡的作用</strong></h3><p>事件冒泡允许多个操作被集中处理（把事件处理器添加到一个父级元素上，避免把事件处理器添加到多个子级元素上），它还可以让你在对象层的不同级别捕获事件。</p><h3 id="10-13-3-阻止事件冒泡"><a href="#10-13-3-阻止事件冒泡" class="headerlink" title="10.13.3 阻止事件冒泡"></a>10.13.3 <strong>阻止事件冒泡</strong></h3><p>事件冒泡机制有时候是不需要的，需要阻止掉，通过 event.stopPropagation() 来阻止</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> $box1 = $(<span class="string">'.father'</span>);</span><br><span class="line">    <span class="keyword">var</span> $box2 = $(<span class="string">'.son'</span>);</span><br><span class="line">    <span class="keyword">var</span> $box3 = $(<span class="string">'.grandson'</span>);</span><br><span class="line">    $box1.click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="string">'father'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    $box2.click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="string">'son'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    $box3.click(<span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">        alert(<span class="string">'grandson'</span>);</span><br><span class="line">        event.stopPropagation();</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line">    $(<span class="built_in">document</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">        alert(<span class="string">'grandfather'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"father"</span>&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"son"</span>&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"grandson"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure><h3 id="10-13-4-阻止默认行为"><a href="#10-13-4-阻止默认行为" class="headerlink" title="10.13.4 阻止默认行为"></a>10.13.4 <strong>阻止默认行为</strong></h3><p>阻止表单提交</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#form1'</span>).submit(<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">    event.preventDefault();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="10-14-5-合并阻止操作"><a href="#10-14-5-合并阻止操作" class="headerlink" title="10.14.5 合并阻止操作"></a>10.14.5 <strong>合并阻止操作</strong></h3><p>实际开发中，一般把阻止冒泡和阻止默认行为合并起来写，合并写法可以用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// event.stopPropagation();</span></span><br><span class="line"><span class="comment">// event.preventDefault();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 合并写法：</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br></pre></td></tr></table></figure><h2 id="10-14-事件委托"><a href="#10-14-事件委托" class="headerlink" title="10.14 事件委托"></a>10.14 事件委托</h2><p>事件委托就是利用冒泡的原理，把事件加到父级上，通过判断事件来源的子集，执行相应的操作，事件委托首先可以极大减少事件绑定次数，提高性能；其次可以让新加入的子元素也可以拥有相同的操作。</p><h3 id="10-14-1-一般绑定事件的写法"><a href="#10-14-1-一般绑定事件的写法" class="headerlink" title="10.14.1 一般绑定事件的写法"></a>10.14.1 <strong>一般绑定事件的写法</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $ali = $(<span class="string">'#list li'</span>);</span><br><span class="line">    $ali.click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="keyword">this</span>).css(&#123;<span class="attr">background</span>:<span class="string">'red'</span>&#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)</span><br><span class="line">...</span><br><span class="line">&lt;ul id=<span class="string">"list"</span>&gt;</span><br><span class="line">    &lt;li&gt;<span class="number">1</span>&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">    &lt;li&gt;2&lt;/</span>li&gt;</span><br><span class="line">    &lt;li&gt;<span class="number">3</span>&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">    &lt;li&gt;4&lt;/</span>li&gt;</span><br><span class="line">    &lt;li&gt;<span class="number">5</span>&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">&lt;/u</span>l&gt;</span><br></pre></td></tr></table></figure><h3 id="10-14-2-事件委托的写法"><a href="#10-14-2-事件委托的写法" class="headerlink" title="10.14.2 事件委托的写法"></a>10.14.2 <strong>事件委托的写法</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $list = $(<span class="string">'#list'</span>);</span><br><span class="line">    $list.delegate(<span class="string">'li'</span>, <span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="keyword">this</span>).css(&#123;<span class="attr">background</span>:<span class="string">'red'</span>&#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)</span><br><span class="line">...</span><br><span class="line">&lt;ul id=<span class="string">"list"</span>&gt;</span><br><span class="line">    &lt;li&gt;<span class="number">1</span>&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">    &lt;li&gt;2&lt;/</span>li&gt;</span><br><span class="line">    &lt;li&gt;<span class="number">3</span>&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">    &lt;li&gt;4&lt;/</span>li&gt;</span><br><span class="line">    &lt;li&gt;<span class="number">5</span>&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">&lt;/u</span>l&gt;</span><br></pre></td></tr></table></figure><h2 id="10-15-jquery元素节点操作"><a href="#10-15-jquery元素节点操作" class="headerlink" title="10.15 jquery元素节点操作"></a>10.15 jquery元素节点操作</h2><h3 id="10-15-1-创建节点"><a href="#10-15-1-创建节点" class="headerlink" title="10.15.1 创建节点"></a>10.15.1 <strong>创建节点</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> $div = $(<span class="string">'&lt;div&gt;'</span>);</span><br><span class="line"><span class="keyword">var</span> $div2 = $(<span class="string">'&lt;div&gt;这是一个div元素&lt;/div&gt;'</span>);</span><br></pre></td></tr></table></figure><h3 id="10-15-2-插入节点"><a href="#10-15-2-插入节点" class="headerlink" title="10.15.2 插入节点"></a>10.15.2 <strong>插入节点</strong></h3><p>1、append()和appendTo()：在现存元素的内部，从后面插入元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> $span = $(<span class="string">'&lt;span&gt;这是一个span元素&lt;/span&gt;'</span>);</span><br><span class="line">$(<span class="string">'#div1'</span>).append($span);</span><br><span class="line">......</span><br><span class="line">&lt;div id=<span class="string">"div1"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>2、prepend()和prependTo()：在现存元素的内部，从前面插入元素</p><p>3、after()和insertAfter()：在现存元素的外部，从后面插入元素</p><p>4、before()和insertBefore()：在现存元素的外部，从前面插入元素</p><h3 id="10-15-3-删除节点"><a href="#10-15-3-删除节点" class="headerlink" title="10.15.3 删除节点"></a>10.15.3 <strong>删除节点</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#div1'</span>).remove();</span><br></pre></td></tr></table></figure><h2 id="10-16-滚轮事件与函数节流"><a href="#10-16-滚轮事件与函数节流" class="headerlink" title="10.16 滚轮事件与函数节流"></a>10.16 滚轮事件与函数节流</h2><h3 id="10-16-1-jquery-mousewheel插件使用"><a href="#10-16-1-jquery-mousewheel插件使用" class="headerlink" title="10.16.1 jquery.mousewheel插件使用"></a>10.16.1 <strong>jquery.mousewheel插件使用</strong></h3><p>jquery中没有鼠标滚轮事件，原生js中的鼠标滚轮事件不兼容，可以使用jquery的滚轮事件插件jquery.mousewheel.js。</p><h3 id="10-16-2-函数节流"><a href="#10-16-2-函数节流" class="headerlink" title="10.16.2 函数节流"></a>10.16.2 <strong>函数节流</strong></h3><p>javascript中有些事件的触发频率非常高，比如onresize事件(jq中是resize)，onmousemove事件(jq中是mousemove)以及上面说的鼠标滚轮事件，在短事件内多处触发执行绑定的函数，可以巧妙地使用定时器来减少触发的次数，实现函数节流。</p><h2 id="10-17-json"><a href="#10-17-json" class="headerlink" title="10.17 json"></a>10.17 json</h2><p>json是 JavaScript Object Notation 的首字母缩写，单词的意思是javascript对象表示法，这里说的json指的是类似于javascript对象的一种数据格式，目前这种数据格式比较流行，逐渐替换掉了传统的xml数据格式。</p><p>javascript自定义对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> oMan = &#123;</span><br><span class="line">    name:<span class="string">'tom'</span>,</span><br><span class="line">    age:<span class="number">16</span>,</span><br><span class="line">    talk:<span class="function"><span class="keyword">function</span>(<span class="params">s</span>)</span>&#123;</span><br><span class="line">        alert(<span class="string">'我会说'</span>+s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>json格式的数据：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"name"</span>:<span class="string">"tom"</span>,</span><br><span class="line">    <span class="string">"age"</span>:<span class="number">18</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>与json对象不同的是，json数据格式的属性名称和字符串值需要用双引号引起来，用单引号或者不用引号会导致读取数据错误。</p><p>json的另外一个数据格式是数组，和javascript中的数组字面量相同。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">"tom"</span>,<span class="number">18</span>,<span class="string">"programmer"</span>]</span><br></pre></td></tr></table></figure><h2 id="10-18-ajax与jsonp"><a href="#10-18-ajax与jsonp" class="headerlink" title="10.18 ajax与jsonp"></a>10.18 ajax与jsonp</h2><p>ajax技术的目的是让javascript发送http请求，与后台通信，获取数据和信息。ajax技术的原理是实例化xmlhttp对象，使用此对象与后台通信。ajax通信的过程不会影响后续javascript的执行，从而实现异步。</p><h3 id="10-18-1-同步和异步"><a href="#10-18-1-同步和异步" class="headerlink" title="10.18.1 同步和异步"></a>10.18.1 <strong>同步和异步</strong></h3><p>现实生活中，同步指的是同时做几件事情，异步指的是做完一件事后再做另外一件事，程序中的同步和异步是把现实生活中的概念对调，也就是程序中的异步指的是现实生活中的同步，程序中的同步指的是现实生活中的异步。</p><h3 id="10-18-2-局部刷新和无刷新"><a href="#10-18-2-局部刷新和无刷新" class="headerlink" title="10.18.2 局部刷新和无刷新"></a>10.18.2 <strong>局部刷新和无刷新</strong></h3><p>ajax可以实现局部刷新，也叫做无刷新，无刷新指的是整个页面不刷新，只是局部刷新，ajax可以自己发送http请求，不用通过浏览器的地址栏，所以页面整体不会刷新，ajax获取到后台数据，更新页面显示数据的部分，就做到了页面局部刷新。</p><h3 id="10-18-3-同源策略"><a href="#10-18-3-同源策略" class="headerlink" title="10.18.3 同源策略"></a>10.18.3 <strong>同源策略</strong></h3><p>ajax请求的页面或资源只能是同一个域下面的资源，不能是其他域的资源，这是在设计ajax时基于安全的考虑。特征报错提示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">XMLHttpRequest cannot load https://www.baidu.com/. No  </span><br><span class="line">&apos;Access-Control-Allow-Origin&apos; header is present on the requested resource.  </span><br><span class="line">Origin &apos;null&apos; is therefore not allowed access.</span><br></pre></td></tr></table></figure><h3 id="10-18-4-ajax使用方法"><a href="#10-18-4-ajax使用方法" class="headerlink" title="10.18.4 $.ajax使用方法"></a>10.18.4 <strong>$.ajax使用方法</strong></h3><p>常用参数：<br>1、url 请求地址<br>2、type 请求方式，默认是’GET’，常用的还有’POST’<br>3、dataType 设置返回的数据格式，常用的是’json’格式，也可以设置为’html’<br>4、data 设置发送给服务器的数据<br>5、success 设置请求成功后的回调函数<br>6、error 设置请求失败后的回调函数<br>7、async 设置是否异步，默认值是’true’，表示异步</p><p>以前的写法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    url: <span class="string">'js/data.json'</span>,</span><br><span class="line">    type: <span class="string">'GET'</span>,</span><br><span class="line">    dataType: <span class="string">'json'</span>,</span><br><span class="line">    data:&#123;<span class="string">'aa'</span>:<span class="number">1</span>&#125;</span><br><span class="line">    success:<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">        alert(data.name);</span><br><span class="line">    &#125;,</span><br><span class="line">    error:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="string">'服务器超时，请重试！'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>新的写法(推荐)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    url: &apos;js/data.json&apos;,</span><br><span class="line">    type: &apos;GET&apos;,</span><br><span class="line">    dataType: &apos;json&apos;,</span><br><span class="line">    data:&#123;&apos;aa&apos;:1&#125;</span><br><span class="line">&#125;)</span><br><span class="line">.done(function(data) &#123;</span><br><span class="line">    alert(data.name);</span><br><span class="line">&#125;)</span><br><span class="line">.fail(function() &#123;</span><br><span class="line">    alert(&apos;服务器超时，请重试！&apos;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// data.json里面的数据： &#123;&quot;name&quot;:&quot;tom&quot;,&quot;age&quot;:18&#125;</span><br></pre></td></tr></table></figure><h3 id="10-18-5-jsonp"><a href="#10-18-5-jsonp" class="headerlink" title="10.18.5 jsonp"></a>10.18.5 <strong>jsonp</strong></h3><p>ajax只能请求同一个域下的数据或资源，有时候需要跨域请求数据，就需要用到jsonp技术，jsonp可以跨域请求数据，它的原理主要是利用了<script>标签可以跨域链接资源的特性。jsonp和ajax原理完全不一样，不过jquery将它们封装成同一个函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    url:<span class="string">'js/data.js'</span>,</span><br><span class="line">    type:<span class="string">'get'</span>,</span><br><span class="line">    dataType:<span class="string">'jsonp'</span>,</span><br><span class="line">    jsonpCallback:<span class="string">'fnBack'</span></span><br><span class="line">&#125;)</span><br><span class="line">.done(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    alert(data.name);</span><br><span class="line">&#125;)</span><br><span class="line">.fail(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">'服务器超时，请重试！'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// data.js里面的数据： fnBack(&#123;"name":"tom","age":18&#125;);</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">'#txt01'</span>).keyup(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> sVal = $(<span class="keyword">this</span>).val();</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            url:<span class="string">'https://sug.so.360.cn/suggest?'</span>,</span><br><span class="line">            type:<span class="string">'get'</span>,</span><br><span class="line">            dataType:<span class="string">'jsonp'</span>,</span><br><span class="line">            data: &#123;<span class="attr">word</span>: sVal&#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .done(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> aData = data.s;</span><br><span class="line">            $(<span class="string">'.list'</span>).empty();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;aData.length;i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> $li = $(<span class="string">'&lt;li&gt;'</span>+ aData[i] +<span class="string">'&lt;/li&gt;'</span>);</span><br><span class="line">                $li.appendTo($(<span class="string">'.list'</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)        </span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//......</span></span><br><span class="line"></span><br><span class="line">&lt;input type=<span class="string">"text"</span> name=<span class="string">""</span> id=<span class="string">"txt01"</span>&gt;</span><br><span class="line">&lt;ul <span class="class"><span class="keyword">class</span></span>=<span class="string">"list"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="10-19-本地存储"><a href="#10-19-本地存储" class="headerlink" title="10.19 本地存储"></a>10.19 本地存储</h2><p>本地存储分为cookie，以及新增的localStorage和sessionStorage</p><p>1、cookie 存储在本地，容量最大4k，在同源的http请求时携带传递，损耗带宽，可设置访问路径，只有此路径及此路径的子路径才能访问此cookie，在设置的过期时间之前有效。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jquery 设置cookie</span><br><span class="line">$.cookie(<span class="string">'mycookie'</span>,<span class="string">'123'</span>,&#123;<span class="attr">expires</span>:<span class="number">7</span>,<span class="attr">path</span>:<span class="string">'/'</span>&#125;);</span><br><span class="line">jquery 获取cookie</span><br><span class="line">$.cookie(<span class="string">'mycookie'</span>);</span><br></pre></td></tr></table></figure><p>2、localStorage 存储在本地，容量为5M或者更大，不会在请求时候携带传递，在所有同源窗口中共享，数据一直有效，除非人为删除，可作为长期数据。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置：</span></span><br><span class="line">localStorage.setItem(<span class="string">"dat"</span>, <span class="string">"456"</span>);</span><br><span class="line">localStorage.dat = <span class="string">'456'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取：</span></span><br><span class="line">localStorage.getItem(<span class="string">"dat"</span>);</span><br><span class="line">localStorage.dat</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除</span></span><br><span class="line">localStorage.removeItem(<span class="string">"dat"</span>);</span><br></pre></td></tr></table></figure><p>3、sessionStorage 存储在本地，容量为5M或者更大，不会在请求时候携带传递，在同源的当前窗口关闭前有效。</p><p>localStorage 和 sessionStorage 合称为Web Storage , Web Storage支持事件通知机制，可以将数据更新的通知监听者，Web Storage的api接口使用更方便。</p><p>iPhone的无痕浏览不支持Web Storage，只能用cookie。</p><h2 id="10-20-jqueryUI"><a href="#10-20-jqueryUI" class="headerlink" title="10.20 jqueryUI"></a>10.20 jqueryUI</h2><p>jQuery UI是以 jQuery 为基础的代码库。包含底层用户交互、动画、特效和可更换主题的可视控件。我们可以直接用它来构建具有很好交互性的web应用程序。</p><p> <strong>jqueryUI 网址</strong><br><a href="http://jqueryui.com/">http://jqueryui.com/</a></p><h1 id="11-移动端库和框架"><a href="#11-移动端库和框架" class="headerlink" title="11.移动端库和框架"></a>11.移动端库和框架</h1><h2 id="11-1-移动端js事件"><a href="#11-1-移动端js事件" class="headerlink" title="11.1 移动端js事件"></a>11.1 移动端js事件</h2><p>移动端的操作方式和PC端是不同的，移动端主要用手指操作，所以有特殊的touch事件，touch事件包括如下几个事件：</p><p>1、touchstart:     //手指放到屏幕上时触发<br>2、touchmove:      //手指在屏幕上滑动式触发<br>3、touchend:    //手指离开屏幕时触发<br>4、touchcancel:     //系统取消touch事件的时候触发，比较少用  </p><p>移动端一般有三种操作，点击、滑动、拖动，这三种操作一般是组合使用上面的几个事件来完成的，所有上面的4个事件一般很少单独使用，一般是封装使用来实现这三种操作，可以使用封装成熟的js库。</p><h2 id="11-2-zeptojs"><a href="#11-2-zeptojs" class="headerlink" title="11.2 zeptojs"></a>11.2 zeptojs</h2><p>Zepto是一个轻量级的针对现代高级浏览器的JavaScript库， 它与jquery有着类似的api。  如果你会用jquery，那么你也会用zepto。Zepto的一些可选功能是专门针对移动端浏览器的；它的最初目标是在移动端提供一个精简的类似jquery的js库。</p><p>zepto官网：<a href="http://zeptojs.com/">http://zeptojs.com/</a><br>zepto中文api：<a href="http://www.css88.com/doc/zeptojs_api/">http://www.css88.com/doc/zeptojs_api/</a><br>zepto包含很多模块，默认下载版本包含的模块有Core, Ajax, Event, Form, IE模块，如果还需要其他的模块，可以自定义构建。<br>zepto自定义构建地址：<a href="http://github.e-sites.nl/zeptobuilder/">http://github.e-sites.nl/zeptobuilder/</a>  </p><h2 id="11-3-swiper"><a href="#11-3-swiper" class="headerlink" title="11.3 swiper"></a>11.3 swiper</h2><p>swiper.js是一款成熟稳定的应用于PC端和移动端的滑动效果插件，一般用来触屏焦点图、触屏整屏滚动等效果。 swiper分为2.x版本和3.x版本，2.x版本支持低版本浏览器(IE7)，3.x放弃支持低版本浏览器，适合应用在移动端。</p><p>2.x版本中文网址：<a href="http://2.swiper.com.cn/">http://2.swiper.com.cn/</a><br>3.x版本中文网地址：<a href="http://www.swiper.com.cn/">http://www.swiper.com.cn/</a></p><h3 id="11-3-1-swiper使用方法："><a href="#11-3-1-swiper使用方法：" class="headerlink" title="11.3.1  swiper使用方法："></a>11.3.1  swiper使用方法：</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"js/swiper.min.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;!--</span><br><span class="line">  如果页面引用了jquery或者zepto，就引用 swiper.jquery.min.js,它的容量比swiper.min.js</span><br><span class="line"></span><br><span class="line">  &lt;script src=<span class="string">"path/to/swiper.jquery.min.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">--&gt;</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">&lt;link rel=<span class="string">"stylesheet"</span> type=<span class="string">"text/css"</span> href=<span class="string">"css/swiper.min.css"</span>&gt;</span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"swiper-container"</span>&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"swiper-wrapper"</span>&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"swiper-slide"</span>&gt;slider1&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div class="swiper-slide"&gt;slider2&lt;/</span>div&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"swiper-slide"</span>&gt;slider3&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"swiper-pagination"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"swiper-button-prev"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"swiper-button-next"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt; </span></span><br><span class="line"><span class="regexp">var swiper = new Swiper('.swiper-container', &#123;</span></span><br><span class="line"><span class="regexp">    pagination: '.swiper-pagination',</span></span><br><span class="line"><span class="regexp">  prevButton: '.swiper-button-prev',</span></span><br><span class="line"><span class="regexp">  nextButton: '.swiper-button-next',</span></span><br><span class="line"><span class="regexp">    initialSlide :1,</span></span><br><span class="line"><span class="regexp">  paginationClickable: true,</span></span><br><span class="line"><span class="regexp">  loop: true,</span></span><br><span class="line"><span class="regexp">  autoplay:3000,</span></span><br><span class="line"><span class="regexp">  autoplayDisableOnInteraction:false</span></span><br><span class="line"><span class="regexp">&#125;);</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><h3 id="11-13-2-swiper使用参数："><a href="#11-13-2-swiper使用参数：" class="headerlink" title="11.13.2 swiper使用参数："></a>11.13.2 swiper使用参数：</h3><p>1、initialSlide：初始索引值，从0开始<br>2、direction：滑动方向 horizontal | vertical<br>3、speed：滑动速度，单位ms<br>4、autoplay：设置自动播放及播放时间<br>5、autoplayDisableOnInteraction：用户操作swipe后是否还自动播放，默认是true，不再自动播放<br>6、pagination：分页圆点<br>7、paginationClickable：分页圆点是否点击<br>8、prevButton：上一页箭头<br>9、nextButton：下一页箭头<br>10、loop：是否首尾衔接 </p><h2 id="11-4-bootstrap"><a href="#11-4-bootstrap" class="headerlink" title="11.4 bootstrap"></a>11.4 bootstrap</h2><p>简单、直观、强悍的前端开发框架，让web开发更迅速、简单。 来自Twitter，是目前很受欢迎的前端框架之一。 Bootrstrap是基于HTML、CSS、JavaScript的，让书写代码更容易。 移动优先，响应式布局开发。</p><p>bootstrap中文网址：<a href="http://www.bootcss.com/">http://www.bootcss.com/</a></p><h3 id="11-4-1-bootstrap-容器"><a href="#11-4-1-bootstrap-容器" class="headerlink" title="11.4.1 bootstrap 容器"></a>11.4.1 bootstrap 容器</h3><ul><li>container-fluid 流体</li><li>container <ul><li>1170</li><li>970</li><li>750</li><li>100%</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;container-fluid&quot;&gt;流体容器&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;container&quot;&gt;响应式固定容器&lt;/div&gt;</span><br></pre></td></tr></table></figure><h3 id="11-4-2-bootstrap响应式查询区间"><a href="#11-4-2-bootstrap响应式查询区间" class="headerlink" title="11.4.2 bootstrap响应式查询区间"></a>11.4.2 bootstrap响应式查询区间</h3><p>1、大于等于768<br>2、大于等于992<br>3、大于等于1200</p><h3 id="11-4-3-bootstrap-栅格系统"><a href="#11-4-3-bootstrap-栅格系统" class="headerlink" title="11.4.3 bootstrap 栅格系统"></a>11.4.3 bootstrap 栅格系统</h3><p>bootstrap将页面横向分为12等分，按照12等分定义了适应不同宽度等分的样式类，这些样式类组成了一套响应式、移动设备优先的流式栅格系统：</p><p>1、col-lg-  <em>大于1200排成一行，小于1200分别占一行2、col-md-</em>  大于992排成一行，小于992分别占一行<br>3、col-sm-  <em>大于768排成一行，小于768分别占一行4、col-xs-</em>  始终排列成一行  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&lt;style type=<span class="string">"text/css"</span>&gt;</span><br><span class="line">    div[<span class="class"><span class="keyword">class</span>*</span>=<span class="string">'col-'</span>]&#123;</span><br><span class="line"></span><br><span class="line">        background-color:cyan;</span><br><span class="line">        border:1px solid #ddd;</span><br><span class="line">        height:<span class="number">50</span>px;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/style&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">......</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;div class="container"&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div class="row"&gt;</span></span><br><span class="line"><span class="regexp">        &lt;div class="col-lg-3"&gt;col-lg-3&lt;/</span>div&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"col-lg-3"</span>&gt;col-lg<span class="number">-3</span>&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;div class="col-lg-5"&gt;col-lg-5&lt;/</span>div&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"col-lg-1"</span>&gt;col-lg<span class="number">-1</span>&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">    &lt;br&gt;</span><br><span class="line">    &lt;br&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"row"</span>&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"col-md-3"</span>&gt;col-md<span class="number">-3</span>&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;div class="col-md-3"&gt;col-md-3&lt;/</span>div&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"col-md-3"</span>&gt;col-md<span class="number">-3</span>&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;div class="col-md-3"&gt;col-md-3&lt;/</span>div&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;br&gt;</span></span><br><span class="line"><span class="regexp">    &lt;br&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div class="row"&gt;</span></span><br><span class="line"><span class="regexp">        &lt;div class="col-sm-3"&gt;col-sm-3&lt;/</span>div&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"col-sm-3"</span>&gt;col-sm<span class="number">-3</span>&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;div class="col-sm-3"&gt;col-sm-3&lt;/</span>div&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"col-sm-3"</span>&gt;col-sm<span class="number">-3</span>&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">    &lt;br&gt;</span><br><span class="line">    &lt;br&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"row"</span>&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"col-xs-3"</span>&gt;col-xs<span class="number">-3</span>&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;div class="col-xs-3"&gt;col-xs-3&lt;/</span>div&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"col-xs-3"</span>&gt;col-xs<span class="number">-3</span>&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;div class="col-xs-3"&gt;col-xs-3&lt;/</span>div&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure><h3 id="11-4-4-列偏移"><a href="#11-4-4-列偏移" class="headerlink" title="11.4.4 列偏移"></a>11.4.4 列偏移</h3><p>1、col-lg-offset-<em>2、col-md-offset-</em><br>3、col-sm-offset-<em>4、col-xs-offset-</em>  </p><h3 id="11-4-5-bootstrap-按钮"><a href="#11-4-5-bootstrap-按钮" class="headerlink" title="11.4.5 bootstrap 按钮"></a>11.4.5 bootstrap 按钮</h3><p>1、btn  声明按钮<br>2、btn-default 默认按钮样式<br>3、btn-primay<br>4、btn-success<br>5、btn-info<br>6、btn-warning<br>7、btn-danger<br>8、btn-link<br>9、btn-lg<br>10、btn-md<br>11、btn-xs<br>12、btn-block  宽度是父级宽100%的按钮<br>13、active<br>14、disabled<br>15、btn-group  定义按钮组 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 一般按钮组 --&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"btn-group"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"button"</span> name=<span class="string">""</span> value=<span class="string">"按钮一"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"btn btn-primary"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"button"</span> name=<span class="string">""</span> value=<span class="string">"按钮二"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"btn btn-warning"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"button"</span> name=<span class="string">""</span> value=<span class="string">"按钮三"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"btn btn-danger"</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;!-- 通栏按钮组 </span></span><br><span class="line"><span class="regexp">     如果用input标签做按钮，需要将它用 btn-group的容器包起来</span></span><br><span class="line"><span class="regexp">--&gt;</span></span><br><span class="line"><span class="regexp">&lt;div class="btn-group btn-group-justified"&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div class="btn-group"&gt;</span></span><br><span class="line"><span class="regexp">        &lt;input type="button" name="" value="按钮一" class="btn btn-primary"&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"btn-group"</span>&gt;</span><br><span class="line">        &lt;input type=<span class="string">"button"</span> name=<span class="string">""</span> value=<span class="string">"按钮二"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"btn btn-warning"</span>&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div class="btn-group"&gt;</span></span><br><span class="line"><span class="regexp">        &lt;input type="button" name="" value="按钮三" class="btn btn-danger"&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;!-- 通栏按钮组，如果用a标签做按钮，就不用上面的结构，直接写</span></span><br><span class="line"><span class="regexp">--&gt;</span></span><br><span class="line"><span class="regexp">&lt;div class="btn-group btn-group-justified"&gt;</span></span><br><span class="line"><span class="regexp">    &lt;a href="#" class="btn btn-primary"&gt;按钮一&lt;/</span>a&gt;</span><br><span class="line">    &lt;a href=<span class="string">"#"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"btn btn-default"</span>&gt;按钮二&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">    &lt;a href="#" class="btn btn-default"&gt;按钮三&lt;/</span>a&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure><h3 id="11-4-6-bootstrap-表单"><a href="#11-4-6-bootstrap-表单" class="headerlink" title="11.4.6 bootstrap 表单"></a>11.4.6 bootstrap 表单</h3><p>1、form 声明一个表单域<br>2、form-inline 内联表单域<br>3、form-horizontal 水平排列表单域<br>4、form-group 表单组、包括表单文字和表单控件<br>5、form-control 文本输入框、下拉列表控件样式<br>6、checkbox checkbox-inline 多选框样式<br>7、radio radio-inline 单选框样式<br>8、input-group 表单控件组<br>9、input-group-addon 表单控件组物件样式<br>10、input-group-btn 表单控件组物件为按钮的样式<br>11、form-group-lg  大尺寸表单<br>12、form-group-sm  小尺寸表单</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--  表单  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">role</span>=<span class="string">"form"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group form-group-lg"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"exampleInputEmail1"</span>&gt;</span>Email address<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"exampleInputEmail1"</span> <span class="attr">placeholder</span>=<span class="string">"Enter email"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"exampleInputPassword1"</span>&gt;</span>Password<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"exampleInputPassword1"</span> <span class="attr">placeholder</span>=<span class="string">"Password"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"exampleInputFile"</span>&gt;</span>File input<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">id</span>=<span class="string">"exampleInputFile"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"help-block"</span>&gt;</span>Example block-level help text here.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"checkbox"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span>&gt;</span> Check me out</span><br><span class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--  表单控件组  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input-group"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"input-group-addon"</span>&gt;</span>@<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--  表单控件组  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input-group"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"input-group-btn"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span> <span class="attr">type</span>=<span class="string">"button"</span>&gt;</span>Go!<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="11-4-7-bootstrap-图片"><a href="#11-4-7-bootstrap-图片" class="headerlink" title="11.4.7 bootstrap 图片"></a>11.4.7 bootstrap 图片</h3><p>img-responsive  声明响应式图片</p><h3 id="11-4-8-bootstrap-字体图标"><a href="#11-4-8-bootstrap-字体图标" class="headerlink" title="11.4.8 bootstrap 字体图标"></a>11.4.8 bootstrap 字体图标</h3><p>通过字体代替图标，font文件夹需要和css文件夹在同一目录 </p><h3 id="11-4-9-bootstrap-导航条"><a href="#11-4-9-bootstrap-导航条" class="headerlink" title="11.4.9 bootstrap 导航条"></a>11.4.9 bootstrap 导航条</h3><p>1、navbar  声明导航条<br>2、navbar-default  声明默认的导航条样式<br>3、navbar-inverse  声明反白的导航条样式<br>4、navbar-static-top  去掉导航条的圆角<br>5、navbar-fixed-top  固定到顶部的导航条<br>6、navbar-fixed-bottom  固定到底部的导航条<br>7、navbar-header  申明logo的容器<br>8、navbar-brand  针对logo等固定内容的样式<br>11、nav navbar-nav 定义导航条中的菜单<br>12、navbar-form 定义导航条中的表单<br>13、navbar-btn 定义导航条中的按钮<br>14、navbar-text 定义导航条中的文本<br>15、navbar-left  菜单靠左<br>16、navbar-right  菜单靠右</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 可伸缩菜单 data-target="#.." 需要加#  --&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"navbar navbar-inverse navbar-static-top "</span>&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"container"</span>&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"navbar-header"</span>&gt;</span><br><span class="line">        &lt;button <span class="class"><span class="keyword">class</span></span>=<span class="string">"navbar-toggle"</span> data-toggle=<span class="string">"collapse"</span> data-target=<span class="string">"#mymenu"</span>&gt;</span><br><span class="line">            &lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">"icon-bar"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">            &lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">"icon-bar"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">            &lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">"icon-bar"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">         &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">         &lt;a href="#" class="navbar-brand"&gt;LOGO&lt;/</span>a&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div class="collapse navbar-collapse" id="mymenu"&gt;</span></span><br><span class="line"><span class="regexp">        &lt;ul class="nav navbar-nav"&gt;</span></span><br><span class="line"><span class="regexp">            &lt;li class="active"&gt;&lt;a href="#"&gt;首页&lt;/</span>a&gt;<span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">            &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>公司新闻<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">            &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>行业动态<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">        &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">        &lt;form class="navbar-form navbar-right"&gt;</span></span><br><span class="line"><span class="regexp">            &lt;div class="form-group"&gt;</span></span><br><span class="line"><span class="regexp">                &lt;div class="input-group"&gt;</span></span><br><span class="line"><span class="regexp">                  &lt;input type="text" class="form-control"&gt;</span></span><br><span class="line"><span class="regexp">                  &lt;span class="input-group-btn"&gt;</span></span><br><span class="line"><span class="regexp">                    &lt;button class="btn btn-default" type="button"&gt;Go!&lt;/</span>button&gt;</span><br><span class="line">                  &lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">                &lt;/</span>div&gt;    </span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>form&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure><h3 id="11-4-10-路径导航"><a href="#11-4-10-路径导航" class="headerlink" title="11.4.10 路径导航"></a>11.4.10 路径导航</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;ol <span class="class"><span class="keyword">class</span></span>=<span class="string">"breadcrumb"</span>&gt;</span><br><span class="line">  &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">  &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Library<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">  &lt;li <span class="class"><span class="keyword">class</span></span>=<span class="string">"active"</span>&gt;Data&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>ol&gt;</span><br></pre></td></tr></table></figure><h3 id="11-4-11-巨幕"><a href="#11-4-11-巨幕" class="headerlink" title="11.4.11 巨幕"></a>11.4.11 巨幕</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"jumbotron"</span>&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"container"</span>&gt;</span><br><span class="line">    ...</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure><h3 id="11-4-12-bootstrap-模态框"><a href="#11-4-12-bootstrap-模态框" class="headerlink" title="11.4.12 bootstrap 模态框"></a>11.4.12 bootstrap 模态框</h3><p>1、modal  声明一个模态框<br>2、modal-dialog  定义模态框尺寸<br>3、modal-lg  定义大尺寸模态框<br>4、modal-sm  定义小尺寸模态框<br>5、modal-header<br>6、modal-body<br>7、modal-footer </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;button <span class="class"><span class="keyword">class</span></span>=<span class="string">"btn btn-primary"</span> data-toggle=<span class="string">"modal"</span> data-target=<span class="string">"#mymodal"</span>&gt;大弹出框按钮&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;div class="modal fade" id="mymodal"&gt;</span></span><br><span class="line"><span class="regexp">        &lt;div class="modal-dialog modal-lg"&gt;</span></span><br><span class="line"><span class="regexp">            &lt;div class="modal-content"&gt;</span></span><br><span class="line"><span class="regexp">                &lt;div class="modal-header"&gt;</span></span><br><span class="line"><span class="regexp">                    大尺寸弹出框</span></span><br><span class="line"><span class="regexp">                &lt;/</span>div&gt;</span><br><span class="line">                &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"modal-body"</span>&gt;</span><br><span class="line">                    模态框主体</span><br><span class="line">                  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">                  &lt;div class="modal-footer"&gt;</span></span><br><span class="line"><span class="regexp">                    &lt;button type="button" class="btn btn-default"  data-dismiss="modal"&gt;Close&lt;/</span>button&gt;</span><br><span class="line">                    &lt;button type=<span class="string">"button"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"btn btn-primary"</span>&gt;Save changes&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">                  &lt;/</span>div&gt;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure><h3 id="11-4-13-bootstrap-下拉菜单"><a href="#11-4-13-bootstrap-下拉菜单" class="headerlink" title="11.4.13 bootstrap 下拉菜单"></a>11.4.13 bootstrap 下拉菜单</h3><p>1、dropdown-toggle<br>2、dropdown-menu </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"row"</span>&gt;            </span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"dropdown"</span>&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"btn btn-primary  dropdown-toggle"</span> data-toggle=<span class="string">"dropdown"</span>&gt;</span><br><span class="line">            下拉菜单</span><br><span class="line">            &lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">"caret"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;ul class="dropdown-menu"&gt;</span></span><br><span class="line"><span class="regexp">            &lt;li&gt;&lt;a href="#"&gt;菜单一&lt;/</span>a&gt;<span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">            &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>菜单二<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">            &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>菜单三<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">        &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure><h3 id="11-4-14-bootstrap-隐藏类"><a href="#11-4-14-bootstrap-隐藏类" class="headerlink" title="11.4.14 bootstrap 隐藏类"></a>11.4.14 bootstrap 隐藏类</h3><p>1、hidden-xs<br>2、hidden-sm<br>3、hidden-md<br>4、hidden-lg </p><h1 id="12-正则表达式"><a href="#12-正则表达式" class="headerlink" title="12. 正则表达式"></a>12. 正则表达式</h1><h2 id="12-1-什么是正则表达式"><a href="#12-1-什么是正则表达式" class="headerlink" title="12.1 什么是正则表达式"></a>12.1 什么是正则表达式</h2><p>能让计算机读懂的字符串匹配规则。 </p><h2 id="12-2-正则表达式的写法"><a href="#12-2-正则表达式的写法" class="headerlink" title="12.2 正则表达式的写法"></a>12.2 正则表达式的写法</h2><p>var re=new RegExp(‘规则’, ‘可选参数’);<br>var re=/规则/参数; </p><h2 id="12-3-规则中的字符"><a href="#12-3-规则中的字符" class="headerlink" title="12.3 规则中的字符"></a>12.3 规则中的字符</h2><p>1）普通字符匹配：<br>如：/a/  匹配字符 ‘a’，/a,b/  匹配字符 ‘a,b’ </p><p>2）转义字符匹配：<br>\d   匹配一个数字，即0-9<br>\D   匹配一个非数字，即除了0-9<br>\w   匹配一个单词字符（字母、数字、下划线）<br>\W   匹配任何非单词字符。等价于[^A-Za-z0-9_]<br>\s   匹配一个空白符<br>\S   匹配一个非空白符<br>\b   匹配单词边界<br>\B   匹配非单词边界<br>.    匹配一个任意字符</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sTr01 = <span class="string">'123456asdf'</span>;</span><br><span class="line"><span class="keyword">var</span> re01 = <span class="regexp">/\d+/</span>;</span><br><span class="line"><span class="comment">//匹配纯数字字符串</span></span><br><span class="line"><span class="keyword">var</span> re02 = <span class="regexp">/^\d+$/</span>;</span><br><span class="line">alert(re01.test(sTr01)); <span class="comment">//弹出true</span></span><br><span class="line">alert(re02.test(sTr01)); <span class="comment">//弹出false</span></span><br></pre></td></tr></table></figure><h2 id="12-4-量词：对左边的匹配字符定义个数"><a href="#12-4-量词：对左边的匹配字符定义个数" class="headerlink" title="12.4 量词：对左边的匹配字符定义个数"></a>12.4 量词：对左边的匹配字符定义个数</h2><p>? 出现零次或一次（最多出现一次）<br>+ 出现一次或多次（至少出现一次）<br>* 出现零次或多次（任意次）<br>{n} 出现n次<br>{n,m} 出现n到m次<br>{n,} 至少出现n次  </p><h2 id="12-5-任意一个或者范围"><a href="#12-5-任意一个或者范围" class="headerlink" title="12.5 任意一个或者范围"></a>12.5 任意一个或者范围</h2><p>[abc123] : 匹配‘abc123’中的任意一个字符<br>[a-z0-9] : 匹配a到z或者0到9中的任意一个字符 </p><h2 id="12-6-限制开头结尾"><a href="#12-6-限制开头结尾" class="headerlink" title="12.6 限制开头结尾"></a>12.6 限制开头结尾</h2><p>^  以紧挨的元素开头<br>$  以紧挨的元素结尾 </p><h2 id="12-7-修饰参数"><a href="#12-7-修饰参数" class="headerlink" title="12.7 修饰参数"></a>12.7 修饰参数</h2><p>g： global，全文搜索，默认搜索到第一个结果接停止<br>i： ingore case，忽略大小写，默认大小写敏感</p><h2 id="12-8-常用函数"><a href="#12-8-常用函数" class="headerlink" title="12.8 常用函数"></a>12.8 常用函数</h2><p>1、test<br>用法：正则.test(字符串)  匹配成功，就返回真，否则就返回假  </p><p>2、replace<br>用法：字符串.replace(正则，新的字符串) 匹配成功的字符去替换新的字符 </p><h2 id="12-9-正则默认规则"><a href="#12-9-正则默认规则" class="headerlink" title="12.9 正则默认规则"></a>12.9 正则默认规则</h2><p>匹配成功就结束，不会继续匹配，区分大小写</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sTr01 = <span class="string">'abcdefedcbaCef'</span>;</span><br><span class="line"><span class="keyword">var</span> re01 = <span class="regexp">/c/</span>;</span><br><span class="line"><span class="keyword">var</span> re02 = <span class="regexp">/c/g</span>;</span><br><span class="line"><span class="keyword">var</span> re03 = <span class="regexp">/c/gi</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sTr02 = sTr01.replace(re01,<span class="string">'*'</span>);</span><br><span class="line"><span class="keyword">var</span> sTr03 = sTr01.replace(re02,<span class="string">'*'</span>);</span><br><span class="line"><span class="keyword">var</span> sTr04 = sTr01.replace(re03,<span class="string">'*'</span>);</span><br><span class="line">alert(sTr02); <span class="comment">// 弹出 ab*defedcbaCef</span></span><br><span class="line">alert(sTr03); <span class="comment">// 弹出 ab*defed*baCef</span></span><br><span class="line">alert(sTr04); <span class="comment">// 弹出 ab*defed*ba*ef</span></span><br></pre></td></tr></table></figure><h2 id="12-10-常用正则规则"><a href="#12-10-常用正则规则" class="headerlink" title="12.10 常用正则规则"></a>12.10 常用正则规则</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用户名验证：(数字字母或下划线6到20位)</span></span><br><span class="line"><span class="keyword">var</span> reUser = <span class="regexp">/^\w&#123;6,20&#125;$/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//邮箱验证：        </span></span><br><span class="line"><span class="keyword">var</span> reMail = <span class="regexp">/^[a-z0-9][\w\.\-]*@[a-z0-9\-]+(\.[a-z]&#123;2,5&#125;)&#123;1,2&#125;$/i</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//密码验证：</span></span><br><span class="line"><span class="keyword">var</span> rePass = <span class="regexp">/^[\w!@#$%^&amp;*]&#123;6,20&#125;$/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//手机号码验证：</span></span><br><span class="line"><span class="keyword">var</span> rePhone = <span class="regexp">/^1[3458]\d&#123;9&#125;$/</span>;</span><br></pre></td></tr></table></figure><h1 id="13-前端性能优化"><a href="#13-前端性能优化" class="headerlink" title="13. 前端性能优化"></a>13. 前端性能优化</h1><p>从用户访问资源到资源完整的展现在用户面前的过程中，通过技术手段和优化策略，缩短每个步骤的处理时间从而提升整个资源的访问和呈现速度。网站的性能直接会影响到用户的数量，所有前端性能优化很重要。</p><p>前端性能优化分为如下几个方面：</p><h2 id="13-1代码部署"><a href="#13-1代码部署" class="headerlink" title="13.1代码部署"></a>13.1代码部署</h2><p>1、代码的压缩与合并<br>2、图片、js、css等静态资源使用和主站不同域名地址存储，从而使得在传输资源时不会带上不必要的cookie信息。<br>3、使用内容分发网络 CDN<br>4、为文件设置Last-Modified、Expires和Etag<br>5、使用GZIP压缩传送<br>6、权衡DNS查找次数(使用不同域名会增加DNS查找)<br>7、避免不必要的重定向(加”/“)  </p><h2 id="13-2-编码"><a href="#13-2-编码" class="headerlink" title="13.2 编码"></a>13.2 编码</h2><h3 id="13-2-1-html"><a href="#13-2-1-html" class="headerlink" title="13.2.1 html"></a>13.2.1 html</h3><p>1、使用结构清晰，简单，语义化标签<br>2、避免空的src和href<br>3、不要在HTML中缩放图片 </p><h3 id="13-2-2-css"><a href="#13-2-2-css" class="headerlink" title="13.2.2 css"></a>13.2.2 css</h3><p>1、精简css选择器<br>2、把CSS放到顶部<br>3、避免@import方式引入样式<br>4、css中使用base64图片数据取代图片文件，减少请求数，在线转base64网站：<a href="http://tool.css-js.com/base64.html">http://tool.css-js.com/base64.html</a><br>5、使用css动画来取代javascript动画<br>6、使用字体图标<br>7、使用css sprite(雪碧图)<br>8、使用svg图形<br>9、避免使用CSS表达式  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">body&#123;</span><br><span class="line"> background-color: expression( (<span class="keyword">new</span> <span class="built_in">Date</span>()).getSeconds()%<span class="number">2</span> ? <span class="string">"#B8D4FF"</span> : <span class="string">"#F08A00"</span> );  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>10、避免使用css滤镜 </p><h3 id="13-2-3-javascript"><a href="#13-2-3-javascript" class="headerlink" title="13.2.3 javascript"></a>13.2.3 javascript</h3><p>1、减少引用库的个数<br>2、使用requirejs或seajs异步加载js<br>3、JS放到页面底部引入<br>4、避免全局查找<br>5、使用原生方法<br>6、用switch语句代替复杂的if else语句<br>7、减少语句数，比如说多个变量声明可以写成一句<br>8、使用字面量表达式来初始化数组或者对象<br>9、使用innerHTML取代复杂的元素注入<br>10、使用事件代理(事件委托)<br>11、避免多次访问dom选择集<br>12、高频触发事件设置使用函数节流<br>13、使用Web Storage缓存数据 </p></script></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Dec 31 2019 13:39:55 GMT+0800 (GMT+08:00) --&gt;&lt;h1 id=&quot;1-前端开发概述&quot;&gt;&lt;a href=&quot;#1-前端开发概述&quot; class=&quot;headerlink&quot; title=&quot;1. 前端开发概述&quot;&gt;&lt;/a&gt;1. 前端开发概述&lt;/h1&gt;&lt;p&gt;包括html、css、PC端及移动端布局技巧、javascript、jquery、js特效制作、ajax前后台交互等。&lt;/p&gt;&lt;h2 id=&quot;1-1-什么是前端开发？&quot;&gt;&lt;a href=&quot;#1-1-什么是前端开发？&quot; class=&quot;headerlink&quot; title=&quot;1.1 什么是前端开发？&quot;&gt;&lt;/a&gt;1.1 什么是前端开发？&lt;/h2&gt;&lt;p&gt;前端开发也叫做web前端开发，它指的是基于web的互联网产品的页面(也可叫界面)开发及功能开发。&lt;/p&gt;&lt;h2 id=&quot;1-2-什么互联网产品？&quot;&gt;&lt;a href=&quot;#1-2-什么互联网产品？&quot; class=&quot;headerlink&quot; title=&quot;1.2 什么互联网产品？&quot;&gt;&lt;/a&gt;1.2 什么互联网产品？&lt;/h2&gt;&lt;p&gt;互联网产品就是指网站为满足用户需求而创建的用于运营的功能及服务，百度搜索、淘宝、QQ、微博、网易邮箱等都是互联网产品。&lt;/p&gt;&lt;h2 id=&quot;1-3-互联网产品开发流程及前端开发岗位？&quot;&gt;&lt;a href=&quot;#1-3-互联网产品开发流程及前端开发岗位？&quot; class=&quot;headerlink&quot; title=&quot;1.3 互联网产品开发流程及前端开发岗位？&quot;&gt;&lt;/a&gt;1.3 互联网产品开发流程及前端开发岗位？&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/qianduan_images/001.jpg&quot; alt&gt;&lt;/p&gt;&lt;h2 id=&quot;1-4-前端开发需要哪些技术？&quot;&gt;&lt;a href=&quot;#1-4-前端开发需要哪些技术？&quot; class=&quot;headerlink&quot; title=&quot;1.4 前端开发需要哪些技术？&quot;&gt;&lt;/a&gt;1.4 前端开发需要哪些技术？&lt;/h2&gt;&lt;p&gt;前端工程师参照产品的效果图来开发页面(也可叫界面)，效果图是由UI设计师用Photoshop(少量设计师用firework)来设计的，为了方便与UI设计师对接工作，前端需要掌握一些Photoshop的技能，Photoshop还可以辅助页面开发。把效果图布局成页面，需要用到HTML语言和CSS语言，页面功能的开发需要用到javascript,为了快速开发和系统开发，还需要学习一些前端的javascript库和框架。&lt;/p&gt;
    
    </summary>
    
      <category term="HTML&amp;CSS&amp;JavaScript|JQuery" scheme="https://yongnights.github.io/categories/HTML-CSS-JavaScript-JQuery/"/>
    
    
      <category term="JavaScript" scheme="https://yongnights.github.io/tags/JavaScript/"/>
    
      <category term="HTML" scheme="https://yongnights.github.io/tags/HTML/"/>
    
      <category term="CSS" scheme="https://yongnights.github.io/tags/CSS/"/>
    
      <category term="JQuery" scheme="https://yongnights.github.io/tags/JQuery/"/>
    
  </entry>
  
  <entry>
    <title>使用nc传输超大文件</title>
    <link href="https://yongnights.github.io/2019/12/31/%E4%BD%BF%E7%94%A8nc%E4%BC%A0%E8%BE%93%E8%B6%85%E5%A4%A7%E6%96%87%E4%BB%B6/"/>
    <id>https://yongnights.github.io/2019/12/31/使用nc传输超大文件/</id>
    <published>2019-12-31T04:00:48.277Z</published>
    <updated>2019-12-31T04:00:48.277Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Dec 31 2019 13:39:53 GMT+0800 (GMT+08:00) --><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><pre><code>linux下的文件传输，大家首先会想到rsync、scp之类的工具，但这类工具有一个特点——慢，因为这类工具都是加密传输，发送端加密，接收端解密，当我们传输一些非敏感文件的时候，完全可以不加密，直接在网络上传输。</code></pre><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><pre><code>1. linux系统安装# yum install -y nc | nmap-ncatps.ubuntu自带的nc是netcat-openbsd版,不带-c/-e参数。2. windows系统安装(1)下载下载netcat。下载地址：https://eternallybored.org/misc/netcat/, </code></pre><p><img src="/nc/1.png" alt></p><pre><code>(2)解压文件夹(3)将文件夹所在路径添加到用户环境变量里(4)打开命令界面：Windows+R  cmd。输入nc 命令即可</code></pre><a id="more"></a><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><pre><code>想要连接到某处: nc [-options] hostname port[s] [ports] …绑定端口等待连接: nc -l port [-options] [hostname] [port]-g&lt;网关&gt;：设置路由器跃程通信网关，最多设置8个;-G&lt;指向器数目&gt;：设置来源路由指向器，其数值为4的倍数;-h：在线帮助;-i&lt;延迟秒数&gt;：设置时间间隔，以便传送信息及扫描通信端口;-l：使用监听模式，监控传入的资料;-n：直接使用ip地址，而不通过域名服务器;-o&lt;输出文件&gt;：指定文件名称，把往来传输的数据以16进制字码倾倒成该文件保存;-p&lt;通信端口&gt;：设置本地主机使用的通信端口;-r：指定源端口和目的端口都进行随机的选择;-s&lt;来源位址&gt;：设置本地主机送出数据包的IP地址;-u：使用UDP传输协议;-v：显示指令执行过程;-w&lt;超时秒数&gt;：设置等待连线的时间;-z：使用0输入/输出模式，只在扫描通信端口时使用。</code></pre><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><h4 id="连接远程主机"><a href="#连接远程主机" class="headerlink" title="连接远程主机"></a>连接远程主机</h4><pre><code>Client连接到Server的TCP 80端口: $nc -nvv 192.168.x.x 8000Server监听本机的TCP8000端口: $nc -l 8000超时控制:多数情况我们不希望连接一直保持，那么我们可以使用 -w 参数来指定连接的空闲超时时间，该参数紧接一个数值，代表秒数，如果连接超过指定时间则连接会被终止。Server: $nc -l 2389Client: $nc -w 10 localhost 2389该连接将在 10 秒后中断。注意: 不要在服务器端同时使用 -w 和 -l 参数，因为 -w 参数将在服务器端无效果。</code></pre><h4 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h4><pre><code>端口扫描经常被系统管理员和黑客用来发现在一些机器上开放的端口，帮助他们识别系统中的漏洞。$nc -z -v -n 192.168.1.1 21-25可以运行在TCP或者UDP模式，默认是TCP，-u参数调整为udp.z 参数告诉netcat使用0 IO,连接成功后立即关闭连接， 不进行数据交换.v 参数指详细输出.n 参数告诉netcat 不要使用DNS反向查询IP地址的域名.以上命令会打印21到25 所有开放的端口。$nc -v 127.0.0.1 22localhost [127.0.0.1] 22 (ssh) openSSH-2.0-OpenSSH_5.9p1 Debian-5ubuntu1.4&quot;SSH-2.0-OpenSSH_5.9p1 Debian-5ubuntu1.4&quot;为Banner信息。Banner是一个文本，Banner是一个你连接的服务发送给你的文本信息。当你试图鉴别漏洞或者服务的类型和版本的时候，Banner信息是非常有用的。但是，并不是所有的服务都会发送banner.一旦你发现开放的端口，你可以容易的使用netcat 连接服务抓取他们的banner。</code></pre><h4 id="Chat-Server"><a href="#Chat-Server" class="headerlink" title="Chat Server"></a>Chat Server</h4><pre><code>内网聊天,netcat提供了这样一种方法，只需要创建一个Chat服务器，一个预先确定好的端口，这样子就可以在内网聊天沟通了.Server: $nc -l 20000netcat 命令在20000端口启动了一个tcp 服务器，所有的标准输出和输入会输出到该端口。输出和输入都在此shell中展示。Client:$nc 192.168.1.1 20000不管你在机器Client上键入什么都会出现在机器Server上。</code></pre><h4 id="文件传输"><a href="#文件传输" class="headerlink" title="文件传输"></a>文件传输</h4><pre><code>linux下的文件传输，大家首先会想到rsync、scp之类的工具，但这类工具有一个特点——慢，因为这类工具都是加密传输，发送端加密，接收端解密，当我们传输一些非敏感文件的时候，完全可以不加密，直接在网络上传输。Server: $ time nc -l 20000 &lt; file.txt命令最前面的time是用来检测该命令运行耗时的。Client: $nc -n 192.168.1.1 20000 &gt; file.txt我们创建了一个服务器在A上并且重定向netcat的输入为文件file.txt，那么当任何成功连接到该端口，netcat会发送file的文件内容。在客户端我们重定向输出到file.txt，当B连接到A，A发送文件内容，B保存文件内容到file.txt.没有必要创建文件源作为Server，我们也可以相反的方法使用。像下面的我们发送文件从B到A，但是服务器创建在A上，这次我们仅需要重定向netcat的输出并且重定向B的输入文件。B作为ServerServer: $nc -l 20000 &gt; file.txt   Client: $nc 192.168.1.2 20000 &lt; file.txt用nc传输有两个特点：➤速度快➤传输简单，不需要登录对方服务器，不需要验证信息。nc进度显示若你文件实在太大，想看到传输进度，用PVyum install epel-release -yyum install pv -ycat file.txt |pv -b | nc  192.168.1.1 20000</code></pre><h4 id="中转文件"><a href="#中转文件" class="headerlink" title="中转文件"></a>中转文件</h4><pre><code>A、B、C三台主机，A美国，C日本，C只能访问到B，不能直接访问A，B和AC互通。C要怎么才能拿到A上的文件呢？C上执行：nc -l 9999 &gt; google_file.txtB上执行：nc -l 9999 | nc (C的外网IP) 9999A上执行：nc (B的外网IP) 9999 &lt; google_file.txt</code></pre><h4 id="目录传输"><a href="#目录传输" class="headerlink" title="目录传输"></a>目录传输</h4><pre><code>想要发送多个文件，或者整个目录，一样很简单，只需要使用压缩工具tar，压缩后发送压缩包。如果你想要通过网络传输一个目录从A到B。Server: $tar -cvf – dir_name | nc -l 20000Client: $nc -n 192.168.1.1 20000 | tar -xvf -在A服务器上，我们创建一个tar归档包并且通过-在控制台重定向它，然后使用管道，重定向给netcat，netcat可以通过网络发送它。在客户端我们下载该压缩包通过netcat 管道然后打开文件。如果想要节省带宽传输压缩包，我们可以使用bzip2或者其他工具压缩。Server: $tar -cvf – dir_name| bzip2 -z | nc -l 20000通过bzip2压缩Client: $nc -n 192.168.1.1 20000 | bzip2 -d |tar -xvf -还可以把目录制作成iso文件进行传输$ yum install mkisofsmkisofs -r -o 路径/ISO 文件名 目录文件路径例子：mkisofs -r -o /opt/mycd.iso /home</code></pre><h4 id="加密通过网络发送的数据"><a href="#加密通过网络发送的数据" class="headerlink" title="加密通过网络发送的数据"></a>加密通过网络发送的数据</h4><pre><code>如果担心你在网络上发送数据的安全，可以在发送你的数据之前用如mcrypt的工具加密。使用mcrypt工具加密数据。Server: $nc localhost 20000 | mcrypt –flush –bare -F -q -d -m ecb &gt; file.txt使用mcrypt工具解密数据。Client: $mcrypt –flush –bare -F -q -m ecb &lt; file.txt | nc -l 20000以上两个命令会提示需要密码，确保两端使用相同的密码。这里我们是使用mcrypt用来加密，使用其它任意加密工具都可以。</code></pre><h4 id="流视频"><a href="#流视频" class="headerlink" title="流视频"></a>流视频</h4><pre><code>虽然不是生成流视频的最好方法，但如果服务器上没有特定的工具，使用netcat，我们仍然有希望做成这件事。这里我们只是从一个视频文件中读入并重定向输出到netcat客户端Server: $cat video.avi | nc -l 20000这里我们从socket中读入数据并重定向到mplayer。Client: $nc 192.168.1.1 20000 | mplayer -vo x11 -cache 3000 -</code></pre><h4 id="克隆一个设备"><a href="#克隆一个设备" class="headerlink" title="克隆一个设备"></a>克隆一个设备</h4><pre><code>如果你已经安装配置一台Linux机器并且需要重复同样的操作对其他的机器，而你不想在重复配置一遍。不在需要重复配置安装的过程，只启动另一台机器的一些引导可以随身碟和克隆你的机器。克隆Linux PC很简单，假如你的系统在磁盘/dev/sda上Server: $dd if=/dev/sda | nc -l 20000Client: $nc -n 192.168.1.1 20000 | dd of=/dev/sdadd是一个从磁盘读取原始数据的工具，我通过netcat服务器重定向它的输出流到其他机器并且写入到磁盘中，它会随着分区表拷贝所有的信息。但是如果我们已经做过分区并且只需要克隆root分区，我们可以根据我们系统root分区的位置，更改sda 为sda1，sda2.等等。</code></pre><h4 id="打开一个shell"><a href="#打开一个shell" class="headerlink" title="打开一个shell"></a>打开一个shell</h4><pre><code>假设你的netcat支持 -c -e 参数(原生 netcat)Server: $nc -l 20000 -e /bin/bash -iClient: $nc 192.168.1.1 20000这里我们已经创建了一个netcat服务器并且表示当它连接成功时执行/bin/bash假如netcat 不支持-c 或者 -e 参数（openbsd netcat）,我们仍然能够创建远程shellServer: $mkfifo /tmp/tmp_fifo$cat /tmp/tmp_fifo | /bin/sh -i 2&gt;&amp;1 | nc -l 20000 &gt; /tmp/tmp_fifo这里我们创建了一个fifo文件，然后使用管道命令把这个fifo文件内容定向到shell 2&gt;&amp;1中。2&gt;&amp;1是用来重定向标准错误输出和标准输出，然后管道到netcat 运行的端口20000上。至此，我们已经把netcat的输出重定向到fifo文件中。说明：从网络收到的输入写到fifo文件中cat 命令读取fifo文件并且其内容发送给sh命令sh命令进程受到输入并把它写回到netcat。netcat 通过网络发送输出到client至于为什么会成功是因为管道使命令平行执行，fifo文件用来替代正常文件，因为fifo使读取等待而如果是一个普通文件，cat命令会尽快结束并开始读取空文件。在客户端仅仅简单连接到服务器Client: $nc -n 192.168.1.1 20000你会得到一个shell提示符在客户端</code></pre><h4 id="反向shell"><a href="#反向shell" class="headerlink" title="反向shell"></a>反向shell</h4><pre><code>反向shell是指在客户端打开的shell。反向shell这样命名是因为不同于其他配置，这里服务器使用的是由客户提供的服务。Server: $nc -l 20000在客户端，简单地告诉netcat在连接完成后，执行shell。Client: $nc 192.168.1.1 20000 -e /bin/bash现在，什么是反向shell的特别之处呢反向shell经常被用来绕过防火墙的限制，如阻止入站连接。例如，我有一个专用IP地址为192.168.1.1，我使用代理服务器连接到外部网络。如果我想从网络外部访问 这台机器如1.2.3.4的shell，那么我会用反向外壳用于这一目的。</code></pre><p>####　指定源端口<br>假设你的防火墙过滤除25端口外其它所有端口，你需要使用-p选项指定源端口。<br>Server：$nc -l 20000<br>Client：$nc 192.168.1.1 20000 25</p><pre><code>使用1024以内的端口需要root权限。该命令将在客户端开启25端口用于通讯，否则将使用随机端口。</code></pre><h4 id="指定源地址"><a href="#指定源地址" class="headerlink" title="指定源地址"></a>指定源地址</h4><pre><code>假设你的机器有多个地址，希望明确指定使用哪个地址用于外部数据通讯。我们可以在netcat中使用-s选项指定ip地址。Server: $nc -u -l 20000 &lt; file.txtClient: $nc -u 192.168.1.1 20000 -s 172.31.100.5 &gt; file.txt该命令将绑定地址172.31.100.5。</code></pre><h4 id="静态web页面服务器"><a href="#静态web页面服务器" class="headerlink" title="静态web页面服务器"></a>静态web页面服务器</h4><pre><code>新建一个网页,命名为somepage.html;新建一个shell script:while true; do    nc -l 80 -q 1 &lt; somepage.html;done用root权限执行，然后在浏览器中输入127.0.0.1打开看看是否正确运行。nc 指令通常都是给管理者进行除错或测试等作用的，所以如果只是单纯需要临时的网页服务器，使用 Python 的 SimpleHTTPServer 组会比较方便。</code></pre><h4 id="模拟HTTP-Headers"><a href="#模拟HTTP-Headers" class="headerlink" title="模拟HTTP Headers"></a>模拟HTTP Headers</h4><pre><code>$nc www.huanxiangwu.com 80GET / HTTP/1.1Host: ispconfig.orgReferrer: mypage.comUser-Agent: my-browserHTTP/1.1 200 OKDate: Tue, 16 Dec 2008 07:23:24 GMTServer: Apache/2.2.6 (Unix) DAV/2 mod_mono/1.2.1 mod_python/3.2.8 Python/2.4.3 mod_perl/2.0.2 Perl/v5.8.8Set-Cookie: PHPSESSID=bbadorbvie1gn037iih6lrdg50; path=/Expires: 0Cache-Control: no-store, no-cache, must-revalidate, post-check=0, pre-check=0Pragma: no-cacheCache-Control: private, post-check=0, pre-check=0, max-age=0Set-Cookie: oWn_sid=xRutAY; expires=Tue, 23-Dec-2008 07:23:24 GMT; path=/Vary: Accept-EncodingTransfer-Encoding: chunkedContent-Type: text/html[......]在nc命令后，输入红色部分的内容(命令下方的4行内容)，然后按两次回车，即可从对方获得HTTP Headers内容。</code></pre><h4 id="Netcat支持IPv6"><a href="#Netcat支持IPv6" class="headerlink" title="Netcat支持IPv6"></a>Netcat支持IPv6</h4><pre><code>netcat 的 -4 和 -6 参数用来指定 IP 地址类型，分别是 IPv4 和 IPv6：Server: $ nc -4 -l 2389Client: $ nc -4 localhost 2389然后我们可以使用 netstat 命令来查看网络的情况：$ netstat | grep 2389tcp        0      0 localhost:2389          localhost:50851         ESTABLISHEDtcp        0      0 localhost:50851         localhost:2389          ESTABLISHED接下来我们看看IPv6 的情况：Server: $ nc -6 -l 2389Client: $ nc -6 localhost 2389再次运行 netstat 命令：$ netstat | grep 2389tcp6       0      0 localhost:2389          localhost:33234         ESTABLISHEDtcp6       0      0 localhost:33234         localhost:2389          ESTABLISHED前缀是 tcp6 表示使用的是 IPv6 的地址。</code></pre><h4 id="在-Netcat-中禁止从标准输入中读取数据"><a href="#在-Netcat-中禁止从标准输入中读取数据" class="headerlink" title="在 Netcat 中禁止从标准输入中读取数据"></a>在 Netcat 中禁止从标准输入中读取数据</h4><pre><code>该功能使用 -d 参数，请看下面例子：Server: $ nc -l 2389Client: $ nc -d localhost 2389Hi你输入的 Hi 文本并不会送到服务器端</code></pre><h4 id="强制-Netcat-服务器端保持启动状态"><a href="#强制-Netcat-服务器端保持启动状态" class="headerlink" title="强制 Netcat 服务器端保持启动状态"></a>强制 Netcat 服务器端保持启动状态</h4><pre><code>如果连接到服务器的客户端断开连接，那么服务器端也会跟着退出。Server: $ nc -l 2389Client: $ nc localhost 2389^CServer: $ nc -l 2389上述例子中，但客户端断开时服务器端也立即退出。我们可以通过 -k 参数来控制让服务器不会因为客户端的断开连接而退出。Server: $ nc -k -l 2389Client: $ nc localhost 2389^CServer: $ nc -k -l 2389</code></pre><h4 id="配置-Netcat-客户端不会因为-EOF-而退出"><a href="#配置-Netcat-客户端不会因为-EOF-而退出" class="headerlink" title="配置 Netcat 客户端不会因为 EOF 而退出"></a>配置 Netcat 客户端不会因为 EOF 而退出</h4><pre><code>Netcat 客户端可以通过 -q 参数来控制接收到 EOF 后隔多长时间才退出，该参数的单位是秒：Client: $nc  -q 5  localhost 2389现在如果客户端接收到 EOF ，它将等待 5 秒后退出。</code></pre><h4 id="手动使用-SMTP-协议寄信"><a href="#手动使用-SMTP-协议寄信" class="headerlink" title="手动使用 SMTP 协议寄信"></a>手动使用 SMTP 协议寄信</h4><pre><code>在测试邮件服务器是否正常时，可以使用这样的方式手动发送 Email：$nc localhost 25 &lt;&lt; EOFHELO host.example.comMAIL FROM: &lt;user@host.example.com&gt;RCPT TO: &lt;user2@host.example.com&gt;DATABody of email..QUITEOF</code></pre><h4 id="透过代理服务器（Proxy）连线"><a href="#透过代理服务器（Proxy）连线" class="headerlink" title="透过代理服务器（Proxy）连线"></a>透过代理服务器（Proxy）连线</h4><pre><code>这指令会使用 10.2.3.4:8080 这个代理服务器，连线至 host.example.com 的42端口。$nc -x10.2.3.4:8080 -Xconnect host.example.com 42</code></pre><h4 id="使用-Unix-Domain-Socket"><a href="#使用-Unix-Domain-Socket" class="headerlink" title="使用 Unix Domain Socket"></a>使用 Unix Domain Socket</h4><pre><code>这行指令会建立一个 Unix Domain Socket，并接收资料：$nc -lU /var/tmp/dsocket</code></pre><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Dec 31 2019 13:39:53 GMT+0800 (GMT+08:00) --&gt;&lt;h3 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;linux下的文件传输，大家首先会想到rsync、scp之类的工具，但这类工具有一个特点——慢，
因为这类工具都是加密传输，发送端加密，接收端解密，当我们传输一些非敏感文件的时候，完全可以不加密，直接在网络上传输。
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;1. linux系统安装
# yum install -y nc | nmap-ncat
ps.ubuntu自带的nc是netcat-openbsd版,不带-c/-e参数。

2. windows系统安装
(1)下载
下载netcat。下载地址：https://eternallybored.org/misc/netcat/, 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&quot;/nc/1.png&quot; alt&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;(2)解压文件夹
(3)将文件夹所在路径添加到用户环境变量里
(4)打开命令界面：Windows+R  cmd。输入nc 命令即可
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://yongnights.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://yongnights.github.io/tags/Linux/"/>
    
      <category term="nc" scheme="https://yongnights.github.io/tags/nc/"/>
    
      <category term="Windows" scheme="https://yongnights.github.io/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>与房屋中介公司要押金的斗智斗勇</title>
    <link href="https://yongnights.github.io/2019/12/31/%E4%B8%8E%E6%88%BF%E5%B1%8B%E4%B8%AD%E4%BB%8B%E5%85%AC%E5%8F%B8%E8%A6%81%E6%8A%BC%E9%87%91%E7%9A%84%E6%96%97%E6%99%BA%E6%96%97%E5%8B%87/"/>
    <id>https://yongnights.github.io/2019/12/31/与房屋中介公司要押金的斗智斗勇/</id>
    <published>2019-12-31T04:00:48.273Z</published>
    <updated>2019-12-31T04:00:48.273Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Dec 31 2019 13:39:53 GMT+0800 (GMT+08:00) --><p>我是在2017年3月15号开始入住到福元路玉凤路战友苑小区南区的，签了一年的合同，当时还是纸质版的合同，这一年结交了几位朋友，其余没啥说的，直接略过。</p><p>进入到2018年，租房快到期了，我又续费一年，这一年就没有纸质合同了，而是电子合同，支付宝蘑菇租房的那种，在线查看合同租约，在线缴费等。合同上写明的有每次缴费的日期和金额。费用呢，房租还是跟上一年的一样，押一付三，物业费一次性交一年，还有水电燃气押金200元。</p><p>教训第一条：<br>物业费：不同的小区物业费不一样，我这个租的物业费TTMD的贵了，一年730元。后来我换地方租，也就是我现在租的这个，一年的物业费合计396元，相差334元。租房子的时候物业费这个一定要货比三家。</p><a id="more"></a><p>因2017年的租户租期到了陆续都搬走了，新搬进来其他租户，我就自发的让新租户加入微信群，快到缴费的时候就组织大家合计缴费，但是事情发生了，部分租户对费用分摊有很大抵触，各种刁难，有时联系不上，有时联系上了故意拖延转账，耽误了缴费的时间，导致被强行断电，我租住了第一次缴费，实在厌恶这样的，索性懒得管，爱咋地咋地，以后就不管缴费这事儿了。后来由中介那边助理负责这件事儿，每次到缴费的时候就在群里大声疾呼，但是还是会出现强行断电的情况。</p><p>关于停电，有以下两种情况：</p><ol><li>因欠物业费而停电<br>租户把物业费交给中介，中介再把物业费交给小区的物业管理中心，当屋内房间没有租完时，中介有时会不交物业费给物业管理中心，等有人租房子交了物业费中介公司再把物业费给物业管理中心，这中间的时间间隔一长，就会发生物业管理中心因中介未交物业费而强行给房间断电的情况。</li><li>因欠电费而停电<br>2017年的缴费是租户在微信群里自发组织在支付宝里缴费的，大家相处的也很融洽，临走时还海底捞聚餐来着。从未发生过因欠电费、水费或燃气费而被物业管理中心强行停电的情况，2018年则恰恰相反。</li></ol><p>教训第二条：<br>水电和燃气费：现在这些费用都可以通过户号在支付宝里缴纳，水电和燃气的缴纳户号都不一样，具体可以问物业管理中心。这个缴费一定要跟其他租户提前商量好由租户负责，天知道中介助理哪天脑袋抽筋忘了这茬事儿，最主要的是助理摆不平那些刁难的租户。</p><p>我现在租的这个房子，水电和燃气各每天一块钱，合计三者每月90元，然后就随便用。注意这个电是指公用的用电，比如走廊、厨房，卫生间等用电。每个房间内有单独的一个电表，还有一个总电表。这样一来，费用这个就很好计算，也不会出现费用分摊不合理的情况。</p><p>延伸一下：之前租的房间内有一个老旧的中央空调，到夏天的时候，关于是否用这个空调的问题也产生过激烈的争斗。这空调不仅制冷效果不好，还很费电。因部分租户上夜班，这就使空调的使用颇费周折。结果导致空调白天黑夜连轴转，因制冷效果不好，温度还调的很低，导致用电量大大大大增。然后就因电费分摊这个互相扯皮。</p><p>教训第三条：<br>关于房间内的公用设施，比如空凋，洗衣机等，尤其是空调这个电老虎，或者不用，或者不租这类的房子。我现在租的这个，每个房间有一个电表，还有一个总电表，这样一来就把公用电和每个房间的用电给分隔开了。谁想用空调谁自己安装，电费自己缴纳，跟其他费用都不掺和。</p><p>说的有点多了，话题扯的有点远，接下来继续说正事儿。</p><p>房租不是快到期了么，就以上情况，都不想再续租了，提前好几天就跟中介公司联系，让他们过来验收一下房屋，给我尽快办理退房手续。连续三天放我鸽子，明明白天说好了，说是晚上几点几点过来验收办理退房手续，可到点了人没来，也没给我打电话，我直接打电话过去，对方不是说忙，就是说在开会，我当时就有点生气，来不了怎么不打电话或发微信说一声。经历过这件事儿，彻底对这个中介公司很失望，当时心里想着赶紧办完这个事儿，不想跟这样的公司员工打交道。</p><p>终于到房租到期的那一天他们来了，验收一下房屋情况，写了一个费用清单，写了三项，房间卫生，厨房卫生和床板断裂。然后又让我直接在下面写上我的银行账户，签上字。我问他们，说是房间卫生要扣多少，厨房卫生要扣多少，他们不说，只说放心吧，这费用扣的很少。我又问啥时候能把押金给退回来，他们说十五天之内。我把房间钥匙交给他们就走了。心想总算交接完了，接下来等着对方退还押金就是了。</p><p>教训第四条：<br>关于退房验收这个，凡是需要扣款的地方一定要详细的问清楚，比如房屋打扫费用要扣多少，断裂一个床板要扣多少，这个他们肯定知道，不给你的话这里面肯定有他们的阴谋。</p><p>接下来的事情坏就坏在自己想的太想当然了。</p><p>十五天的截止日期快到了，我跟中介助理联系，说是快到期了，押金啥时候退还，他说还有个水费没有结算，让再等几天。没办法，钱在别人手里，别人就是大爷，我只能耐心等了。每天催促他们去抄水表，每次我问都有不同的回复，有一次是有个车压着水表井盖了，还得等等。有一次是抄错水表了，还得再去一趟。看样子目前就卡在水费这一块儿了。</p><p>令我很不解的是都是我主动联系他们那边，问啥情况他们才说，有啥新情况从不主动跟我打电话说。公司就恁穷么，连个电话都舍不得打。。。</p><p>这个难产的水费终于计算出来了，问中介助理啥时候退押金，他说卡在他们总监那边了，他这边处理不了，得，我直接找他总监联系。此时已经进入4月份了，我是3月15号退的房，说好的15天之内退押金这都已经超好几天了。</p><p>跟他们总监联系的时候我当时正在南阳出差，让他把费用清单发过来，按他这清单的费用情况，我那押金不仅一分都要不过来，相反还要倒贴他们部分费用。是可忍孰不可忍，立马就开始跟他怼起来了。</p><p>房间打扫费用扣50，我认了；厨房打扫费用扣50，我也认了；马桶维修费是啥，当时验收的时候明明没这个的，他们竟私自加上去也不跟我说一声，当时就表明这个费用我不认；断裂了一块床板扣200，我一问才知道，他们说断裂一块床板直接给新换一个床，TMD，还得这样处理的，床板我自己都能换，用得着换新的么；重头戏还在后面，还要扣我两天的滞纳金，说是我有一次晚交几天房租，我当时就很纳闷，我这么一个诚实守信的人，做事情都是有时间计划的，绝不可能出现晚交房租的情况，他还理直气壮的说看合同，看合同，按合同办事。。。</p><blockquote><p>出现这种情况看来跟我当时退房时的那种想当然的结果有很大差距</p></blockquote><p>我当时在南阳出差，不能因为这个分心，当时就决定这件事儿先放一放，等我出差的事儿办好回郑州之后再慢慢梳理。</p><p>回郑州后我仔细查看合同，终于发现这其中的关窍所在了。</p><p>对方想的是：我是15号租的房子，按理说应该是到第三个月的15号交下三个月的房租，我有一次是在17号交的房租，其余三次都是在15号交的房租。晚交两天理应要扣滞纳金。可合同很打脸，合同中明明写的有我每次需要交房租的具体时间，都是17号，从来没有15号这一说，我那三次15号交的还是提前两天交的呢。撇开这个不说，假如就算我应该在15号交房租，可是违约责任中写的也很清楚，若超过交租日期，贰日内仍不缴纳的，才算我违约。TDYD，给我口口声声说看合同，按合同办事儿，你都没看合同还好意思这样说。</p><p>等我把合同截图给他发过去，尤其是给他注明交租日期和违约责任条款时，就不信你不认。终于这个滞纳金不扣了。</p><p>不过查看合同我才发现，合同中有一个不足之处，违约责任中只说明对租户违约责任的处罚，对他们违约责任的处罚则没有。这一点尤其要注意，就算把他们告上法庭，合同中并没有对他们的违约处罚，究竟要如何处罚他们估计仍免不了一份唇枪舌剑。这个考虑也是我后来妥协的原因，因为这件事儿我耽搁的时间太多了，他们的时间不珍惜，我得珍惜我的时间才行。</p><p>教训第五条：<br>租房子之前已经要看请合同内容，看仔细合同内容，看明白合同内容。就算后期维权也是以这个合同为准，当时的口头协议就怕到时候他们翻脸不认。</p><p>维修马桶费用不扣了，滞纳金费用不扣了，还剩一个断裂的床板儿，床板断裂一块儿，我是应该赔偿的，可是用得着直接赔一个新床么，就算要赔一个新床，最起码也得跟我打电话说一声吧，可是没给我打电话。然后问他新床是谁换的，有收据没，对方也不提供，只说你损坏了你就得赔偿，后面的用不着你管，你只管赔偿就行。我反问拖欠我恁长时间押金不退换你们咋赔偿，哑巴了吧。。懒得再跟他们扯皮了，我浪费不起这就时间， 这个费用我认了，也认栽了。</p><p>商量好应该退还的剩余费用后，说好是两天之内退还到我账户，那我就没啥可说的了，等待到账就行了。</p><p>可是我想的还是太单纯了，两天之内的第二天我快下班的时候还没到账，再次一个电话打过去，对方说这几天财务休息，没法转账。没发转账你倒是给我打电话说呀，我不主动打电话问就啥都不说。</p><p>正好那一天的明天我休息，正好到他们公司去要账去。</p><p>接待我的是另一个，问了情况之后说是他今天下午6点之前一定转账，若不转账明天再过来直接给你现金。我给他说要留一下他的手机号，他还让我联系之前那一个人，呵呵。。。</p><p>我还特意上网搜索了一下这个中介公司，一查不得了，2019年还没过几个月呢，都已经被告上多次了。<br><img src="/boxuan/boxuan_1.png" alt></p><p>百度贴吧郑州吧截图<br><img src="/boxuan/boxuan_2.png" alt></p><p>教训第六条：<br>当自己的合法权益收到侵害时，不要退缩，要勇于站出来跟他们抗争，据礼以搏，就算结果不怎么如意，最起码心里出了这口气，也不能让他们过的太安生。。。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Dec 31 2019 13:39:53 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;我是在2017年3月15号开始入住到福元路玉凤路战友苑小区南区的，签了一年的合同，当时还是纸质版的合同，这一年结交了几位朋友，其余没啥说的，直接略过。&lt;/p&gt;&lt;p&gt;进入到2018年，租房快到期了，我又续费一年，这一年就没有纸质合同了，而是电子合同，支付宝蘑菇租房的那种，在线查看合同租约，在线缴费等。合同上写明的有每次缴费的日期和金额。费用呢，房租还是跟上一年的一样，押一付三，物业费一次性交一年，还有水电燃气押金200元。&lt;/p&gt;&lt;p&gt;教训第一条：&lt;br&gt;物业费：不同的小区物业费不一样，我这个租的物业费TTMD的贵了，一年730元。后来我换地方租，也就是我现在租的这个，一年的物业费合计396元，相差334元。租房子的时候物业费这个一定要货比三家。&lt;/p&gt;
    
    </summary>
    
      <category term="生活" scheme="https://yongnights.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="生活" scheme="https://yongnights.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>scrapy学习</title>
    <link href="https://yongnights.github.io/2019/12/31/scrapy%E5%AD%A6%E4%B9%A0/"/>
    <id>https://yongnights.github.io/2019/12/31/scrapy学习/</id>
    <published>2019-12-31T04:00:48.271Z</published>
    <updated>2019-12-31T04:00:48.271Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Dec 31 2019 13:39:53 GMT+0800 (GMT+08:00) --><h3 id="scrapy是什么"><a href="#scrapy是什么" class="headerlink" title="scrapy是什么"></a>scrapy是什么</h3><pre><code>Scrapy 是用 Python 实现的一个为了爬取网站数据、提取结构性数据而编写的应用框架。常应用在包括数据挖掘，信息处理或存储历史数据等一系列的程序中。通常我们可以很简单的通过 Scrapy 框架实现一个爬虫，抓取指定网站的内容或图片。</code></pre><h3 id="scrapy架构图"><a href="#scrapy架构图" class="headerlink" title="scrapy架构图"></a>scrapy架构图</h3><pre><code>绿线是数据流向</code></pre><p><img src="https://i.imgur.com/RpWDwoz.png" alt></p><pre><code>Scrapy Engine(引擎): 负责Spider、ItemPipeline、Downloader、Scheduler中间的通讯，信号、数据传递等。Scheduler(调度器): 它负责接受引擎发送过来的Request请求，并按照一定的方式进行整理排列，入队，当引擎需要时，交还给引擎。</code></pre><a id="more"></a><pre><code>Downloader（下载器）：负责下载Scrapy Engine(引擎)发送的所有Requests请求，并将其获取到的Responses交还给Scrapy Engine(引擎)，由引擎交给Spider来处理，Spider（爬虫）：它负责处理所有Responses,从中分析提取数据，获取Item字段需要的数据，并将需要跟进的URL提交给引擎，再次进入Scheduler(调度器).Item Pipeline(管道)：它负责处理Spider中获取到的Item，并进行进行后期处理（详细分析、过滤、存储等）的地方。Downloader Middlewares（下载中间件）：你可以当作是一个可以自定义扩展下载功能的组件。Spider Middlewares（Spider中间件）：你可以理解为是一个可以自定扩展和操作引擎和Spider中间通信的功能组件（比如进入Spider的Responses;和从Spider出去的Requests）注意！只有当调度器中不存在任何request了，整个程序才会停止，（也就是说，对于下载失败的URL，Scrapy也会重新下载。）制作 Scrapy 爬虫 一共需要4步：新建项目 (scrapy startproject xxx)：新建一个新的爬虫项目明确目标 （编写items.py）：明确你想要抓取的目标制作爬虫 （spiders/xxspider.py）：制作爬虫开始爬取网页存储内容 （pipelines.py）：设计管道存储爬取内容</code></pre><h3 id="scrapy安装"><a href="#scrapy安装" class="headerlink" title="scrapy安装"></a>scrapy安装</h3><pre><code>1. 如果你用的是Anaconda或者Minconda，可以使用下面的命令：conda install -c conda-forge scrapy2. 如果你已经安装了python包管理工具PyPI，可以使用下面命令进行安装：pip install Scrapy。值得注意的是，如果你使用的是pip安装，你需要解决相应的包依赖。scrapy依赖的一些包：lxml：一种高效的XML和HTML解析器，PARSEL：一个HTML / XML数据提取库，基于上面的lxml，w3lib：一种处理URL和网页编码多功能辅助twisted,：一个异步网络框架cryptography and pyOpenSSL，处理各种网络级安全需求以上包需要的最低版本：Twisted 14.0lxml 3.4pyOpenSSL 0.14常见依赖问题:1.错误提示：ModuleNotFoundError: No module named &apos;win32api&apos;解决方法：(1)到这个网站下载跟使用的Python版本相匹配的软件：https://github.com/mhammond/pywin32/releases(2)进入使用的Python解释器里的Scripts目录，里面有一个easy_install.exe文件(3)打开命令行，使用如下命令进行安装：easy_install.exe pywin32-224.win-amd64-py3.6.exe2.错误提示：building &apos;twisted.test.raiser&apos; extension解决方法：(1)到这个网站下载跟使用的Python版本相匹配的软件：https://www.lfd.uci.edu/~gohlke/pythonlibs/#twisted(2)进入使用的Python解释器里的Scripts目录，里面有一个pip.exe文件(3)打开命令行，使用如下命令进行安装：pip.exe Twisted-18.9.0-cp36-cp36m-win_amd64.whl</code></pre><h4 id="win7安装scrapy"><a href="#win7安装scrapy" class="headerlink" title="win7安装scrapy"></a>win7安装scrapy</h4><pre><code>推荐使用Anaconda进行安装</code></pre><h4 id="CentOS-7安装scrapy"><a href="#CentOS-7安装scrapy" class="headerlink" title="CentOS 7安装scrapy"></a>CentOS 7安装scrapy</h4><pre><code>CentOS 7系统自带的python版本是2.7，若是python3.5+版本，则不用再安装pip了。(1)安装pip# yum -y install epel-release# yum install python-pip# pip install --upgrade pip(2)安装依赖包# yum install gcc libffi-devel python-devel openssl-devel -y(3)安装scrapy# pip install scrapy</code></pre><h3 id="scrapy入门"><a href="#scrapy入门" class="headerlink" title="scrapy入门"></a>scrapy入门</h3><h4 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h4><pre><code>在开始爬取之前，首先要创建一个scrapy项目，在命令行输入一下命令即可创建:# scrapy startproject mySpiderscrapy  startproject是固定写法，注意scrapy和startproject和mySpider中间是有空格的！ mySpider 为项目名称，可以看到将会创建一个 mySpider 文件夹，目录结构大致如下：mySpider/    scrapy.cfg    mySpider/        __init__.py        items.py        pipelines.py        settings.py        spiders/            __init__.py            ......这些文件分别是:    scrapy.cfg: 项目的配置文件。    mySpider/: 项目的Python模块，将会从这里引用代码。    mySpider/items.py: 项目的目标文件。    mySpider/pipelines.py: 项目的管道文件。    mySpider/settings.py: 项目的设置文件。    mySpider/spiders/: 存储爬虫代码目录。</code></pre><h4 id="明确目标"><a href="#明确目标" class="headerlink" title="明确目标"></a>明确目标</h4><pre><code>打开 mySpider 目录下的 items.py，Item 定义结构化数据字段，用来保存爬取到的数据，有点像 Python 中的 dict，但是提供了一些额外的保护减少错误。可以通过创建一个 scrapy.Item 类， 并且定义类型为 scrapy.Field 的类属性来定义一个 Item（可以理解成类似于 ORM 的映射关系）。创建一个 ItcastItem 类，和构建 item 模型（model）：import scrapyclass ItcastItem(scrapy.Item):   name = scrapy.Field()   title = scrapy.Field()   info = scrapy.Field()</code></pre><h4 id="制作爬虫"><a href="#制作爬虫" class="headerlink" title="制作爬虫"></a>制作爬虫</h4><pre><code>命令：scrapy genspider mingyan2 mingyan2.commingyan2为蜘蛛名，mingyan2.com为要爬取的网站地址</code></pre><h4 id="运行蜘蛛"><a href="#运行蜘蛛" class="headerlink" title="运行蜘蛛"></a>运行蜘蛛</h4><pre><code>命令：scrapy crawl  mingyan2要重点提醒一下，我们一定要进入：mingyan 这个目录，也就是我们创建的蜘蛛项目目录，以上命令才有效！还有 crawl 后面跟的mingyan2是你类里面定义的蜘蛛名，也就是：name，并不是项目名、也不是类名。</code></pre><h4 id="scrapy-start-url（初始链接）的两种不同写法"><a href="#scrapy-start-url（初始链接）的两种不同写法" class="headerlink" title="scrapy start_url（初始链接）的两种不同写法"></a>scrapy start_url（初始链接）的两种不同写法</h4><pre><code>第一种：start_urls = [  # 另外一种写法，无需定义start_requests方法    &apos;http://lab.scrapyd.cn/page/1/&apos;,    &apos;http://lab.scrapyd.cn/page/2/&apos;,]，必须定义一个方法为：def parse(self, response)，方法名一定是：parse第二种：自己定义一个start_requests()方法示例代码：&quot;&quot;&quot;scrapy初始Url的两种写法，一种是常量start_urls，并且需要定义一个方法parse（）另一种是直接定义一个方法：star_requests()&quot;&quot;&quot;import scrapyclass simpleUrl(scrapy.Spider):    name = &quot;simpleUrl&quot;    start_urls = [  #另外一种写法，无需定义start_requests方法        &apos;http://lab.scrapyd.cn/page/1/&apos;,        &apos;http://lab.scrapyd.cn/page/2/&apos;,    ]    # 另外一种初始链接写法    # def start_requests(self):    #     urls = [ #爬取的链接由此方法通过下面链接爬取页面    #         &apos;http://lab.scrapyd.cn/page/1/&apos;,    #         &apos;http://lab.scrapyd.cn/page/2/&apos;,    #     ]    #     for url in urls:    #         yield scrapy.Request(url=url, callback=self.parse)    # 如果是简写初始url，此方法名必须为：parse    def parse(self, response):        page = response.url.split(&quot;/&quot;)[-2]        filename = &apos;mingyan-%s.html&apos; % page        with open(filename, &apos;wb&apos;) as f:            f.write(response.body)        self.log(&apos;保存文件: %s&apos; % filename)</code></pre><h4 id="scrapy调试工具：scrapy-shell使用方法"><a href="#scrapy调试工具：scrapy-shell使用方法" class="headerlink" title="scrapy调试工具：scrapy shell使用方法"></a>scrapy调试工具：scrapy shell使用方法</h4><pre><code>进入scrapy shell调试命令：scrapy shell http://lab.scrapyd.cnscrapy shell 是固定格式，后面跟的是你要调试的页面。这段代码就是一个下载的过程，一执行这么一段代码scrapy就立马把我们相应链接的相应页面给拿到了</code></pre><h4 id="scrapy-css选择器使用"><a href="#scrapy-css选择器使用" class="headerlink" title="scrapy css选择器使用"></a>scrapy css选择器使用</h4><pre><code>进入scrapy shell调试命令：scrapy shell http://lab.scrapyd.cn在命令行输入如下命令：&gt;&gt;&gt; response.css(&apos;title&apos;) [&lt;Selector xpath=&apos;descendant-or-self::title&apos; data=&apos;&lt;title&gt;SCRAPY爬虫实验室 - SCRAPY中文网提供&lt;/title&gt;&apos;&gt;]使用这个命令提取的一个Selector的列表，并不是我们想要的数据；那我们再使用scrapy给我们准备的一些函数来进一步提取，那我们改变一下上面的写法，&gt;&gt;&gt; response.css(&apos;title&apos;).extract()[&apos;&lt;title&gt;SCRAPY爬虫实验室 - SCRAPY中文网提供&lt;/title&gt;&apos;]我们只是在后面加入了：extract() 这么一个函数你就提取到了我们标签的一个列表，更近一步了，那如果我们不要列表，只要title这个标签，要怎么处理呢，看我们的输入：&gt;&gt;&gt;  response.css(&apos;title&apos;).extract()[0]&apos;&lt;title&gt;爬虫实验室 - SCRAPY中文网提供&lt;/title&gt;&apos;这里的话，我们只需要在后面添加：[0]，那代表提取这个列表中的第一个元素，那就得到了我们的title字符串；这里的话scrapy也给我提供了另外一个函数，可以这样来写，一样的效果：&gt;&gt;&gt;  response.css(&apos;title&apos;).extract_first()&apos;&lt;title&gt;爬虫实验室 - SCRAPY中文网提供&lt;/title&gt;&apos;extract_first()就代表提取第一个元素，和我们的：[0]，一样的效果，只是更简洁些，至此我们已经成功提取到了我们的title，但是你会发现，肿么多了一个title标签，这并不是你需要的，那要肿么办呢，我们可以继续改变一下以上的输入：&gt;&gt;&gt; response.css(&apos;title::text&apos;).extract_first()&apos;爬虫实验室 - SCRAPY中文网提供&apos;在title后面加上了 ::text ,这代表提取标签里面的数据，至此，我们已经成功提取到了我们需要的数据：&apos;爬虫实验室 - SCRAPY中文网提供&apos;总结一下，其实就这么一段代码：response.css(&apos;title::text&apos;).extract_first()</code></pre><h4 id="scrapy提取一组数据"><a href="#scrapy提取一组数据" class="headerlink" title="scrapy提取一组数据"></a>scrapy提取一组数据</h4><pre><code>class选择器使用的是&quot;.&quot;,比如.text ，如果是id选择器的话：使用&quot;#&quot;,比如 #text示例代码：import scrapyclass itemSpider(scrapy.Spider):    name = &apos;itemSpider&apos;    start_urls = [&apos;http://lab.scrapyd.cn&apos;]    def parse(self, response):        mingyan = response.css(&apos;div.quote&apos;)[0]        text = mingyan.css(&apos;.text::text&apos;).extract_first()  # 提取名言        autor = mingyan.css(&apos;.author::text&apos;).extract_first()  # 提取作者        tags = mingyan.css(&apos;.tags .tag::text&apos;).extract()  # 提取标签        tags = &apos;,&apos;.join(tags)  # 数组转换为字符串        fileName = &apos;%s-语录.txt&apos; % autor  # 爬取的内容存入文件，文件名为：作者-语录.txt        f = open(fileName, &quot;a+&quot;)  # 追加写入文件        f.write(text)  # 写入名言内容        f.write(&apos;\n&apos;)  # 换行        f.write(&apos;标签：&apos;+tags)  # 写入标签        f.close()  # 关闭文件操作</code></pre><h4 id="scrapy-爬取多条数据"><a href="#scrapy-爬取多条数据" class="headerlink" title="scrapy 爬取多条数据"></a>scrapy 爬取多条数据</h4><pre><code>这次比上次唯一多了个递归调用，我们来看一下关键变化，原先我们取出一条数据，用的是如下表达式：mingyan = response.css(&apos;div.quote&apos;)[0]我们在后面添加了游标 [0]  表示只取出第一条，那我们要取出全部，那我们就不用加了，直接：mingyan = response.css(&apos;div.quote&apos;)那现在的变量就是一个数据集，里面有多条数据了，那接下来我们要做的就是循环取出数据集里面的每一条数据，那我们看一下怎么做：mingyan = response.css(&apos;div.quote&apos;)  # 提取首页所有名言，保存至变量mingyanfor v in mingyan:  # 循环获取每一条名言里面的：名言内容、作者、标签    text = v.css(&apos;.text::text&apos;).extract_first()  # 提取名言    autor = v.css(&apos;.author::text&apos;).extract_first()  # 提取作者    tags = v.css(&apos;.tags .tag::text&apos;).extract()  # 提取标签    tags = &apos;,&apos;.join(tags)  # 数组转换为字符串    # 接下来，进行保存可以看到，关键是：for v in mingyan:表示把 mingyan 这个数据集里面的数据，循环赋值给：v ，第一次循环的话 v 就代表第一条数据，那text = v.css(&apos;.text::text&apos;).extract_first() 就代表第一条数据的名言内容，以此类推，把所有数据都取了出来，最终进行保存，我们看一下完整的代码：import scrapyclass itemSpider(scrapy.Spider):    name = &apos;listSpider&apos;    start_urls = [&apos;http://lab.scrapyd.cn&apos;]    def parse(self, response):        mingyan = response.css(&apos;div.quote&apos;)  # 提取首页所有名言，保存至变量mingyan        for v in mingyan:  # 循环获取每一条名言里面的：名言内容、作者、标签            text = v.css(&apos;.text::text&apos;).extract_first()  # 提取名言            autor = v.css(&apos;.author::text&apos;).extract_first()  # 提取作者            tags = v.css(&apos;.tags .tag::text&apos;).extract()  # 提取标签            tags = &apos;,&apos;.join(tags)  # 数组转换为字符串            &quot;&quot;&quot;            接下来进行写文件操作，每个名人的名言储存在一个txt文档里面            &quot;&quot;&quot;            fileName = &apos;%s-语录.txt&apos; % autor  # 定义文件名,如：木心-语录.txt            with open(fileName, &quot;a+&quot;) as f:  # 不同人的名言保存在不同的txt文档，“a+”以追加的形式                f.write(text)                f.write(&apos;\n&apos;)  # ‘\n’ 表示换行                f.write(&apos;标签：&apos; + tags)                f.write(&apos;\n-------\n&apos;)                f.close()</code></pre><h4 id="scrapy-爬取下一页"><a href="#scrapy-爬取下一页" class="headerlink" title="scrapy 爬取下一页"></a>scrapy 爬取下一页</h4><pre><code>要爬取下一页，那我们首先要分析链接格式，找到下一页的链接，那爬取就简单了。下一页的链接如下：&lt;li class=&quot;next&quot;&gt;    &lt;a href=&quot;http://lab.scrapyd.cn/page/2/&quot;&gt;下一页 »&lt;/a&gt;&lt;/li&gt;每爬一页就用css选择器来查询，是否存在下一页链接，存在：则爬取下一页链接：http://lab.scrapyd.cn/page/*/，然后把下一页链接提交给当前爬取的函数，继续爬取，继续查找下一页，知道找不到下一页，说明所有页面已经爬完，那结束爬虫。</code></pre><p><img src="https://i.imgur.com/y1pDfXA.png" alt></p><pre><code>爬取内容的代码和上一文档（listSpider）一模一样，唯一区别的是这么一个地方，我们在：listSpider 蜘蛛下面添加了这么几段代码：next_page = response.css(&apos;li.next a::attr(href)&apos;).extract_first()          if next_page is not None:             next_page = response.urljoin(next_page)            yield scrapy.Request(next_page, callback=self.parse)首先：我们使用：response.css(&apos;li.next a::attr(href)&apos;).extract_first()查看有木有存在下一页链接，如果存在的话，我们使用：urljoin(next_page)把相对路径，如：page/1转换为绝对路径，其实也就是加上网站域名，如：http://lab.scrapyd.cn/page/1；接下来就是爬取下一页或是内容页的秘诀所在，scrapy给我们提供了这么一个方法：scrapy.Request()这个方法还有许多参数，后面我们慢慢说，这里我们只使用了两个参数，一个是：我们继续爬取的链接（next_page），这里是下一页链接，当然也可以是内容页；另一个是：我们要把链接提交给哪一个函数爬取，这里是parse函数，也就是本函数；当然，我们也可以在下面另写一个函数，比如：内容页，专门处理内容页的数据。经过这么一个函数，下一页链接又提交给了parse，那就可以不断的爬取了，直到不存在下一页；</code></pre><h4 id="scrapy-arguments：指定蜘蛛参数爬取"><a href="#scrapy-arguments：指定蜘蛛参数爬取" class="headerlink" title="scrapy arguments：指定蜘蛛参数爬取"></a>scrapy arguments：指定蜘蛛参数爬取</h4><pre><code>scrapy提供了可传参的爬虫，首先按scrapy 参数格式定义好参数，如下：def start_requests(self):    url = &apos;http://lab.scrapyd.cn/&apos;    tag = getattr(self, &apos;tag&apos;, None)  # 获取tag值，也就是爬取时传过来的参数    if tag is not None:  # 判断是否存在tag，若存在，重新构造url        url = url + &apos;tag/&apos; + tag  # 构造url若tag=爱情，url= &quot;http://lab.scrapyd.cn/tag/爱情&quot;    yield scrapy.Request(url, self.parse)  # 发送请求爬取参数内容可以看到   tag = getattr(self, &apos;tag&apos;, None)  就是获取传过来的参数，然后根据不同的参数，构造不同的url，然后进行不同的爬取，经过这么一个处理，我们的蜘蛛就灰常的灵活了，我们来看一下完整代码：# -*- coding: utf-8 -*-import scrapyclass ArgsspiderSpider(scrapy.Spider):        name = &quot;argsSpider&quot;        def start_requests(self):            url = &apos;http://lab.scrapyd.cn/&apos;            tag = getattr(self, &apos;tag&apos;, None)  # 获取tag值，也就是爬取时传过来的参数            if tag is not None:  # 判断是否存在tag，若存在，重新构造url                url = url + &apos;tag/&apos; + tag  # 构造url若tag=爱情，url= &quot;http://lab.scrapyd.cn/tag/爱情&quot;            yield scrapy.Request(url, self.parse)  # 发送请求爬取参数内容        &quot;&quot;&quot;        以下内容为上一讲知识，若不清楚具体细节，请查看上一讲！        &quot;&quot;&quot;        def parse(self, response):            mingyan = response.css(&apos;div.quote&apos;)            for v in mingyan:                text = v.css(&apos;.text::text&apos;).extract_first()                tags = v.css(&apos;.tags .tag::text&apos;).extract()                tags = &apos;,&apos;.join(tags)                fileName = &apos;%s-语录.txt&apos; % tags                with open(fileName, &quot;a+&quot;) as f:                    f.write(text)                    f.write(&apos;\n&apos;)                    f.write(&apos;标签：&apos; + tags)                    f.write(&apos;\n-------\n&apos;)                    f.close()            next_page = response.css(&apos;li.next a::attr(href)&apos;).extract_first()            if next_page is not None:                next_page = response.urljoin(next_page)                yield scrapy.Request(next_page, callback=self.parse)要如何传参,可以这样：scrapy crawl argsSpider -a tag=爱情</code></pre><h3 id="详解scrapy"><a href="#详解scrapy" class="headerlink" title="详解scrapy"></a>详解scrapy</h3><h4 id="scrapy如何打开页面"><a href="#scrapy如何打开页面" class="headerlink" title="scrapy如何打开页面"></a>scrapy如何打开页面</h4><pre><code>那蜘蛛要发送请求，那总得要有请求链接，如果木有，蜘蛛肯定得不到返回，那页面也就打不开了，因此引出了scrapy spiders的第一个必须的常量：start_urlsURL有两种写法，一种作为类的常量、一种作为start_requests(self)方法的常量，无论哪一种写法，URL都是必须的！有了URL那就可以发送请求了，如果URL是定义在start_request(self)这个方法里面，那我们就要使用： yield scrapy.Request 方法发送请求：如下：import scrapyclass simpleUrl(scrapy.Spider):    name = &quot;simpleUrl&quot;    # 另外一种初始链接写法    def start_requests(self):         urls = [ #爬取的链接由此方法通过下面链接爬取页面             &apos;http://lab.scrapyd.cn/page/1/&apos;,             &apos;http://lab.scrapyd.cn/page/2/&apos;,         ]         for url in urls:            #发送请求             yield scrapy.Request(url=url, callback=self.parse)这样写的一个麻烦之处就是我们需要处理我们的返回，也就是我们还需要写一个callback方法来处理response；因此大多数我们都是把URL作为类的常量，然后再加上另外一个方法： parse(response)使用这个方法来发送请求，可以看到里面有个参数已经是：response（返回），也就是说这个方法自动化的完成了：request（请求页面）-response（返回页面）的过程，我们就不必要再写函数接受返回import scrapyclass simpleUrl(scrapy.Spider):    name = &quot;simpleUrl&quot;    start_urls = [  #另外一种写法，无需定义start_requests方法        &apos;http://lab.scrapyd.cn/page/1/&apos;,        &apos;http://lab.scrapyd.cn/page/2/&apos;,    ]    def parse(self, response):        page = response.url.split(&quot;/&quot;)[-2]        filename = &apos;mingyan-%s.html&apos; % page        with open(filename, &apos;wb&apos;) as f:            f.write(response.body)        self.log(&apos;保存文件: %s&apos; % filename)</code></pre><h4 id="scrapy-css选择器"><a href="#scrapy-css选择器" class="headerlink" title="scrapy css选择器"></a>scrapy css选择器</h4><pre><code>和scrapy相关的函数就这么三个而已：response.css(&quot;css表达式&quot;)、extract()、extract_first()。有变化的就是：css表达式的写法,按照HTML标签的结构可以分为：标签属性值提取、标签内容提取1. 标签属性值的提取 提取属性是用：“标签名::attr(属性名)”，首先找到要提取的标签最近的class或id，缩小范围！比如我们要提取url表达式就是：a::attr(href)，要提取图片地址的表达式就是：img::attr(src)限定一下提取的范围，最好的方法就是找到要提取目标最近的class或是id，可以看到这段代码中有个class=&quot;page-navigator&quot;，那我们就可以这样来写：response.css(&quot;.page-navigator a::attr(href)&quot;).extract()说明：.page-navigator，其中点代表class选择器，如果代码中是：id=“page-navigator”，那我们这里就要写成：“#page-navigator”2. 标签内容的提取提取标签内容是用：“::text”含有嵌套标签文字的提取：response.css(&quot;.post-content *::text&quot;).extract()可以看到，“::tex“t前面有个“*”号，表示当前class或id下所有标签3. CSS 高级用法CSS选择器用于选择你想要的元素的样式的模式。&quot;CSS&quot;列表示在CSS版本的属性定义（CSS1，CSS2，或对CSS3）</code></pre><p><img src="https://i.imgur.com/og423tA.png" alt></p><h4 id="scrapy-xpath选择器"><a href="#scrapy-xpath选择器" class="headerlink" title="scrapy xpath选择器"></a>scrapy xpath选择器</h4><pre><code>从几个方面说：一、属性提取；二、内容提取；三、标签内包含标签又包含标签的最外层标签里的所有内容提取；1. scrapy xpath 属性提取XPath 使用路径表达式在 XML 文档中选取节点。节点是通过沿着路径或者 step 来选取的。 下面列出了最有用的路径表达式：</code></pre><p><img src="https://i.imgur.com/lBSiyp1.png" alt></p><pre><code>调试的话我们还是在命令行使用下面命令：scrapy shell lab.scrapyd.cn函数：response.xpath(&quot;表达式&quot;)，提取属性的话既然使用：@，那我们要提取href就是：@href，试一下：response.xpath(&quot;//@href&quot;)限定我们的属性，使用的是：标签[@属性名=&apos;属性值&apos;]；表达式就是：//@属性名，缩小标签范围、限定属性的方式2. scrapy xpath 标签内容提取表达式为：//text() 3. 包含HTML标签的所有文字内容提取这种用法主要是提取一些内容页，标签里夹杂着文字，但我们只要文字！比如下面的这段代码：&lt;div class=&quot;post-content&quot; itemprop=&quot;articleBody&quot;&gt;   &lt;p&gt;如果你因失去了太阳而流泪，那么你也将失去群星了。    &lt;br&gt;If you shed tears when you miss the sun, you also miss the stars.    &lt;/p&gt;   &lt;p&gt;&lt;a href=&quot;http://www.scrapyd.cn&quot;&gt;scrapy中文网（&lt;/a&gt;&lt;a href=&quot;http://www.scrapyd.cn&quot;&gt;http://www.scrapyd.cn&lt;/a&gt;）整理&lt;/p&gt;        &lt;/div&gt;如果我们用表达式：//div[@class=&apos;post-content&apos;]//text()，你会发现虽然能提取但是一个列表，不是整段文字。那就用到一个xpath函数：string()，可以把表达式这样写：response.xpath(&quot;string(//div[@class=&apos;post-content&apos;])&quot;).extract()，可看到我们没有使用：text()，而是用：string(要提取内容的标签)，这样的话就能把数据都提取出来了，而且都合成为一条，并非一个列表。这一种用法在我们提取商品详情、小说内容的时候经常用到4. xpath实例</code></pre><p><img src="https://i.imgur.com/x5llaYF.png" alt></p><h3 id="scrapy命令行工具"><a href="#scrapy命令行工具" class="headerlink" title="scrapy命令行工具"></a>scrapy命令行工具</h3><pre><code>1. scrapy全局命令scrapy startproject project_namescrapy genspider example example.com (cd project_name)scrapy crawl XX（运行XX蜘蛛）scrapy shell www.example.com(1)startproject创建项目的，如，创建一个名为：scrapyChina的项目：scrapy strartproject scrapychina(2)genspider根据蜘蛛模板创建蜘蛛的命令(3)settingsscray设置参数,比如我们想得到蜘蛛的下载延迟，我们可以使用：scrapy settings --get DOWNLOAD_DELAY;比如我们想得到蜘蛛的名字：scrapy settings --get BOT_NAME(4)runspider运行蜘蛛除了使用：scrapy crawl XX之外，我们还能用：runspider，前者是基于项目运行，后者是基于文件运行，也就是说你按照scrapy的蜘蛛格式编写了一个py文件，那你不想创建项目，那你就可以使用runspider，比如你编写了一个：scrapyd_cn.py的蜘蛛，你要直接运行就是：scrapy runspider scrapy_cn.py(5)shell主要是调试用(6)fetch模拟蜘蛛下载页面，也就是说用这个命令下载的页面就是蜘蛛运行时下载的页面，好处是能准确诊断出，得到的html结构到底是不是我们所看到的，然后能及时调整我们编写爬虫的策略。演示window下如下如何把下载的页面保存：scrapy fetch http://www.scrapyd.cn &gt;d:/3.html(7)view和fetch类似都是查看蜘蛛看到的是否和你看到的一致，便于排错，用法：scrapy view http://www.scrapyd.cn(8)version查看scrapy版本，用法：scrapy version2. scrapy项目命令需要在项目文件夹下面打开CMD命令，然后再执行下面的这些命令(1)crawl运行蜘蛛(2)check检查蜘蛛(3)list显示有多少个蜘蛛,这里的蜘蛛就是指spider文件夹下面xx.py文件中定义的name，你有10个py文件但是只有一个定义了蜘蛛的name，那只算一个蜘蛛</code></pre><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Dec 31 2019 13:39:53 GMT+0800 (GMT+08:00) --&gt;&lt;h3 id=&quot;scrapy是什么&quot;&gt;&lt;a href=&quot;#scrapy是什么&quot; class=&quot;headerlink&quot; title=&quot;scrapy是什么&quot;&gt;&lt;/a&gt;scrapy是什么&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;Scrapy 是用 Python 实现的一个为了爬取网站数据、提取结构性数据而编写的应用框架。常应用在包括数据挖掘，信息处理或存储历史数据等一系列的程序中。通常我们可以很简单的通过 Scrapy 框架实现一个爬虫，抓取指定网站的内容或图片。
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;scrapy架构图&quot;&gt;&lt;a href=&quot;#scrapy架构图&quot; class=&quot;headerlink&quot; title=&quot;scrapy架构图&quot;&gt;&lt;/a&gt;scrapy架构图&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;绿线是数据流向
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/RpWDwoz.png&quot; alt&gt;&lt;/p&gt;&lt;pre&gt;&lt;code&gt;Scrapy Engine(引擎): 负责Spider、ItemPipeline、Downloader、Scheduler中间的通讯，信号、数据传递等。
Scheduler(调度器): 它负责接受引擎发送过来的Request请求，并按照一定的方式进行整理排列，入队，当引擎需要时，交还给引擎。
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="Python" scheme="https://yongnights.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://yongnights.github.io/tags/Python/"/>
    
      <category term="Scrapy" scheme="https://yongnights.github.io/tags/Scrapy/"/>
    
  </entry>
  
  <entry>
    <title>python_面向对象</title>
    <link href="https://yongnights.github.io/2019/12/31/python_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <id>https://yongnights.github.io/2019/12/31/python_面向对象/</id>
    <published>2019-12-31T04:00:48.270Z</published>
    <updated>2019-12-31T04:00:48.270Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Dec 31 2019 13:39:53 GMT+0800 (GMT+08:00) --><h1 id="面向对象-OOP-基本概念"><a href="#面向对象-OOP-基本概念" class="headerlink" title="面向对象(OOP)基本概念"></a>面向对象(OOP)基本概念</h1><p>面向对象编程 —— Object Oriented Programming 简写 OOP</p><h2 id="01-面向对象基本概念"><a href="#01-面向对象基本概念" class="headerlink" title="01. 面向对象基本概念"></a>01. 面向对象基本概念</h2><ul><li>我们之前学习的编程方式就是 面向过程 的</li><li>面相过程 和 面相对象，是两种不同的 编程方式</li><li>对比 面向过程 的特点，可以更好地了解什么是 面向对象</li></ul><h3 id="1-1-过程和函数（科普）"><a href="#1-1-过程和函数（科普）" class="headerlink" title="1.1 过程和函数（科普）"></a>1.1 过程和函数（科普）</h3><ul><li>过程 是早期的一个编程概念</li><li>过程 类似于函数，只能执行，但是没有返回值</li><li>函数 不仅能执行，还可以返回结果</li></ul><a id="more"></a><h3 id="1-2-面相过程-和-面相对象-基本概念"><a href="#1-2-面相过程-和-面相对象-基本概念" class="headerlink" title="1.2 面相过程 和 面相对象 基本概念"></a>1.2 面相过程 和 面相对象 基本概念</h3><p>1) 面相过程 —— 怎么做？</p><pre><code>1. 把完成某一个需求的 所有步骤 从头到尾 逐步实现2. 根据开发需求，将某些 功能独立 的代码 封装 成一个又一个 函数3. 最后完成的代码，就是顺序地调用 不同的函数</code></pre><p>特点</p><pre><code>1. 注重 步骤与过程，不注重职责分工2. 如果需求复杂，代码会变得很复杂3. 开发复杂项目，没有固定的套路，开发难度很大！</code></pre><p>2) 面向对象 —— 谁来做？</p><blockquote><p>相比较函数，面向对象 是 更大 的 封装，根据 职责 在 一个对象中 封装 多个方法</p></blockquote><ol><li>在完成某一个需求前，首先确定 职责 —— 要做的事情（方法）</li><li>根据 职责 确定不同的 对象，在 对象 内部封装不同的 方法（多个）</li><li>最后完成的代码，就是顺序地让 不同的对象 调用 不同的方法</li></ol><p>特点</p><pre><code>1. 注重 对象和职责，不同的对象承担不同的职责2. 更加适合应对复杂的需求变化，是专门应对复杂项目开发，提供的固定套路3. 需要在面向过程基础上，再学习一些面向对象的语法</code></pre><h1 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h1><h2 id="01-类和对象的概念"><a href="#01-类和对象的概念" class="headerlink" title="01. 类和对象的概念"></a>01. 类和对象的概念</h2><p>类 和 对象 是 面向对象编程的 两个 核心概念</p><h3 id="1-1-类"><a href="#1-1-类" class="headerlink" title="1.1 类"></a>1.1 类</h3><ul><li>类 是对一群具有 相同 特征 或者 行为 的事物的一个统称，是抽象的，不能直接使用<ul><li>特征 被称为 属性</li><li>行为 被称为 方法</li></ul></li><li>类 就相当于制造飞机时的图纸，是一个 模板，是 负责创建对象的</li></ul><p>1.2 对象</p><ul><li>对象 是 由类创建出来的一个具体存在，可以直接使用</li><li>由 哪一个类 创建出来的 对象，就拥有在 哪一个类 中定义的：<ul><li>属性</li><li>方法</li></ul></li><li>对象 就相当于用 图纸 制造 的飞机<blockquote><p>在程序开发中，应该 先有类，再有对象</p></blockquote></li></ul><h2 id="02-类和对象的关系"><a href="#02-类和对象的关系" class="headerlink" title="02. 类和对象的关系"></a>02. 类和对象的关系</h2><ul><li>类是模板，对象 是根据 类 这个模板创建出来的，应该 先有类，再有对象</li><li>类 只有一个，而 对象 可以有很多个<ul><li>不同的对象 之间 属性 可能会各不相同</li></ul></li><li>类 中定义了什么 属性和方法，对象 中就有什么属性和方法，不可能多，也不可能少</li></ul><h2 id="03-类的设计"><a href="#03-类的设计" class="headerlink" title="03. 类的设计"></a>03. 类的设计</h2><p>在使用面相对象开发前，应该首先分析需求，确定一下，程序中需要包含哪些类！<br>在程序开发中，要设计一个类，通常需要满足一下三个要素：</p><pre><code>1. 类名 这类事物的名字，满足大驼峰命名法2. 属性 这类事物具有什么样的特征3. 方法 这类事物具有什么样的行为</code></pre><blockquote><p>大驼峰命名法</p><ol><li>每一个单词的首字母大写</li><li>单词与单词之间没有下划线</li></ol></blockquote><h3 id="3-1-类名的确定"><a href="#3-1-类名的确定" class="headerlink" title="3.1 类名的确定"></a>3.1 类名的确定</h3><p>名词提炼法 分析 整个业务流程，出现的 名词，通常就是找到的类</p><p>3.2 属性和方法的确定</p><ul><li>对 对象的特征描述，通常可以定义成 属性</li><li>对象具有的行为（动词），通常可以定义成 方法<blockquote><p>提示：需求中没有涉及的属性或者方法在设计类时，不需要考虑</p></blockquote></li></ul><h1 id="面相对象基础语法"><a href="#面相对象基础语法" class="headerlink" title="面相对象基础语法"></a>面相对象基础语法</h1><h2 id="01-dir-内置函数（知道）"><a href="#01-dir-内置函数（知道）" class="headerlink" title="01. dir 内置函数（知道）"></a>01. dir 内置函数（知道）</h2><ul><li><p>在 Python 中 对象几乎是无所不在的，我们之前学习的 变量、数据、函数 都是对象<br>在 Python 中可以使用以下两个方法验证：</p><pre><code>1. 在 标识符 / 数据 后输入一个 .，然后按下 TAB 键，iPython 会提示该对象能够调用的 方法列表2. 使用内置函数 dir 传入 标识符 / 数据，可以查看对象内的 所有属性及方法3. 提示 `__方法名__` 格式的方法是 Python 提供的 内置方法 / 属性，稍后会给大家介绍一些常用的 内置方法 / 属性</code></pre><p>| 序号 | 方法名 | 类型 | 作用 |<br>| —- | ———- | —- | ——————————————– |<br>| 01 | <code>__new__</code> | 方法 | <strong>创建对象</strong>时，会被 <strong>自动</strong> 调用 |<br>| 02 | <code>__init__</code> | 方法 | <strong>对象被初始化</strong>时，会被 <strong>自动</strong> 调用 |<br>| 03 | <code>__del__</code> | 方法 | <strong>对象被从内存中销毁</strong>前，会被 <strong>自动</strong> 调用 |<br>| 04 | <code>__str__</code> | 方法 | 返回<strong>对象的描述信息</strong>，<code>print</code> 函数输出使用 |</p></li></ul><h2 id="02-定义简单的类（只包含方法）"><a href="#02-定义简单的类（只包含方法）" class="headerlink" title="02.定义简单的类（只包含方法）"></a>02.定义简单的类（只包含方法）</h2><blockquote><p>面向对象 是 更大 的 封装，在 一个类中 封装 多个方法，这样 通过这个类创建出来的对象，就可以直接调用这些方法了！</p></blockquote><h3 id="2-1-定义只包含方法的类"><a href="#2-1-定义只包含方法的类" class="headerlink" title="2.1 定义只包含方法的类"></a>2.1 定义只包含方法的类</h3><ul><li><p>在 Python 中要定义一个只包含方法的类，语法格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 类名:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> 方法1<span class="params">(self, 参数列表)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> 方法2<span class="params">(self, 参数列表)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></li><li><p>方法 的定义格式和之前学习过的函数 几乎一样</p></li><li>区别在于第一个参数必须是 self，大家暂时先记住，稍后介绍 self</li></ul><blockquote><p>注意：类名 的 命名规则 要符合 大驼峰命名法</p></blockquote><h3 id="2-2-创建对象"><a href="#2-2-创建对象" class="headerlink" title="2.2 创建对象"></a>2.2 创建对象</h3><ul><li>当一个类定义完成之后，要使用这个类来创建对象，语法格式如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对象变量 = 类名()</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-3-第一个面向对象程序"><a href="#2-3-第一个面向对象程序" class="headerlink" title="2.3 第一个面向对象程序"></a>2.3 第一个面向对象程序</h3><p>需求</p><ul><li>小猫 爱 吃 鱼，小猫 要 喝 水<br>分析<ol><li>定义一个猫类 Cat</li><li>定义两个方法 eat 和 drink</li><li>按照需求 —— 不需要定义属性<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""这是一个猫类"""</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"小猫爱吃鱼"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">drink</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"小猫在喝水"</span>)</span><br><span class="line"></span><br><span class="line">tom = Cat()</span><br><span class="line">tom.drink()</span><br><span class="line">tom.eat()</span><br></pre></td></tr></table></figure></li></ol></li></ul><p>引用概念的强调</p><blockquote><p>在面向对象开发中，引用的概念是同样适用的！</p></blockquote><ul><li>在 Python 中使用类 创建对象之后，tom 变量中 仍然记录的是 对象在内存中的地址</li><li>也就是 tom 变量 引用 了 新建的猫对象</li><li>使用 print 输出 对象变量，默认情况下，是能够输出这个变量 引用的对象 是 由哪一个类创建的对象，以及 在内存中的地址（十六进制表示）</li></ul><blockquote><p>提示：在计算机中，通常使用 十六进制 表示 内存地址</p><ul><li>十进制 和 十六进制 都是用来表达数字的，只是表示的方式不一样</li><li>十进制 和 十六进制 的数字之间可以来回转换</li></ul></blockquote><ul><li>%d 可以以 10 进制 输出数字</li><li>%x 可以以 16 进制 输出数字</li></ul><h2 id="03-方法中的-self-参数"><a href="#03-方法中的-self-参数" class="headerlink" title="03.方法中的 self 参数"></a>03.方法中的 self 参数</h2><h3 id="3-1-案例改造-——-给对象增加属性"><a href="#3-1-案例改造-——-给对象增加属性" class="headerlink" title="3.1 案例改造 —— 给对象增加属性"></a>3.1 案例改造 —— 给对象增加属性</h3><ul><li>在 Python 中，要 给对象设置属性，非常的容易，但是不推荐使用<ul><li>因为：对象属性的封装应该封装在类的内部</li></ul></li><li>只需要在 类的外部的代码 中直接通过 . 设置一个属性即可<blockquote><p>注意：这种方式虽然简单，但是不推荐使用！</p></blockquote></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tom.name = <span class="string">"Tom"</span></span><br><span class="line">...</span><br><span class="line">lazy_cat.name = <span class="string">"大懒猫"</span></span><br></pre></td></tr></table></figure><h3 id="3-2-使用-self-在方法内部输出每一只猫的名字"><a href="#3-2-使用-self-在方法内部输出每一只猫的名字" class="headerlink" title="3.2 使用 self 在方法内部输出每一只猫的名字"></a>3.2 使用 self 在方法内部输出每一只猫的名字</h3><blockquote><p>由 哪一个对象 调用的方法，方法内的 self 就是 哪一个对象的引用</p><ul><li>在类封装的方法内部，self 就表示 当前调用方法的对象自己</li><li>调用方法时，程序员不需要传递 self 参数</li><li>在方法内部<ul><li>可以通过 self. 访问对象的属性</li><li>也可以通过 self. 调用其他的对象方法</li></ul></li></ul></blockquote><ul><li><p>改造代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"%s 爱吃鱼"</span> % self.name)</span><br><span class="line"></span><br><span class="line">tom = Cat()</span><br><span class="line">tom.name = <span class="string">"Tom"</span></span><br><span class="line">tom.eat()</span><br><span class="line"></span><br><span class="line">lazy_cat = Cat()</span><br><span class="line">lazy_cat.name = <span class="string">"大懒猫"</span></span><br><span class="line">lazy_cat.eat()</span><br></pre></td></tr></table></figure></li><li><p>在 类的外部，通过 变量名. 访问对象的 属性和方法(tom.name)</p></li><li>在 类封装的方法中，通过 self. 访问对象的 属性和方法(self.name)</li></ul><h2 id="04-初始化方法"><a href="#04-初始化方法" class="headerlink" title="04. 初始化方法"></a>04. 初始化方法</h2><h3 id="4-1-之前代码存在的问题-——-在类的外部给对象增加属性"><a href="#4-1-之前代码存在的问题-——-在类的外部给对象增加属性" class="headerlink" title="4.1 之前代码存在的问题 —— 在类的外部给对象增加属性"></a>4.1 之前代码存在的问题 —— 在类的外部给对象增加属性</h3><ul><li><p>将案例代码进行调整，先调用方法 再设置属性，观察一下执行效果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tom = Cat()</span><br><span class="line">tom.drink()</span><br><span class="line">tom.eat()</span><br><span class="line">tom.name = <span class="string">"Tom"</span></span><br><span class="line">print(tom)</span><br></pre></td></tr></table></figure></li><li><p>程序执行报错如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">AttributeError: <span class="string">'Cat'</span> object has no attribute <span class="string">'name'</span></span><br><span class="line">属性错误：<span class="string">'Cat'</span> 对象没有 <span class="string">'name'</span> 属性</span><br></pre></td></tr></table></figure></li></ul><p>提示</p><ul><li>在日常开发中，不推荐在 类的外部 给对象增加属性<ul><li>如果在运行时，没有找到属性，程序会报错</li></ul></li><li>对象应该包含有哪些属性，应该 封装在类的内部</li></ul><h3 id="4-2-初始化方法"><a href="#4-2-初始化方法" class="headerlink" title="4.2 初始化方法"></a>4.2 初始化方法</h3><ul><li>当使用 类名() 创建对象时，会 自动 执行以下操作：<ol><li>为对象在内存中 分配空间 —— 创建对象</li><li>为对象的属性 设置初始值 —— 初始化方法(init)</li></ol></li><li>这个 初始化方法 就是 <strong>init</strong> 方法，<strong>init</strong> 是对象的内置方法<blockquote><p><strong>init</strong> 方法是 专门 用来定义一个类 具有哪些属性的方法！</p></blockquote></li></ul><p>在 Cat 中增加 <strong>init</strong> 方法，验证该方法在创建对象时会被自动调用<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span>:</span></span><br><span class="line">    <span class="string">"""这是一个猫类"""</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"初始化方法"</span>)</span><br></pre></td></tr></table></figure><p></p><h3 id="4-3-在初始化方法内部定义属性"><a href="#4-3-在初始化方法内部定义属性" class="headerlink" title="4.3 在初始化方法内部定义属性"></a>4.3 在初始化方法内部定义属性</h3><ul><li>在 <strong>init</strong> 方法内部使用 self.属性名 = 属性的初始值 就可以 定义属性</li><li>定义属性之后，再使用 Cat 类创建的对象，都会拥有该属性<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"这是一个初始化方法"</span>)</span><br><span class="line">        <span class="comment"># 定义用 Cat 类创建的猫对象都有一个 name 的属性</span></span><br><span class="line">        self.name = <span class="string">"Tom"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"%s 爱吃鱼"</span> % self.name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用类名()创建对象的时候，会自动调用初始化方法 __init__</span></span><br><span class="line">tom = Cat()</span><br><span class="line">tom.eat()</span><br></pre></td></tr></table></figure></li></ul><h3 id="4-4-改造初始化方法-——-初始化的同时设置初始值"><a href="#4-4-改造初始化方法-——-初始化的同时设置初始值" class="headerlink" title="4.4 改造初始化方法 —— 初始化的同时设置初始值"></a>4.4 改造初始化方法 —— 初始化的同时设置初始值</h3><ul><li>在开发中，如果希望在 创建对象的同时，就设置对象的属性，可以对 <strong>init</strong> 方法进行 改造<ol><li>把希望设置的属性值，定义成 <strong>init</strong> 方法的参数</li><li>在方法内部使用 self.属性 = 形参 接收外部传递的参数</li><li>在创建对象时，使用 类名(属性1, 属性2…) 调用<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        print(<span class="string">"初始化方法 %s"</span> % name)</span><br><span class="line">        self.name = name</span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">tom = Cat(<span class="string">"Tom"</span>)</span><br><span class="line">...</span><br><span class="line">lazy_cat = Cat(<span class="string">"大懒猫"</span>)</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li></ol></li></ul><h2 id="05-内置方法和属性"><a href="#05-内置方法和属性" class="headerlink" title="05. 内置方法和属性"></a>05. 内置方法和属性</h2><table><thead><tr><th>序号</th><th>方法名</th><th>类型</th><th>作用</th></tr></thead><tbody><tr><td>01</td><td><code>__del__</code></td><td>方法</td><td><strong>对象被从内存中销毁</strong>前，会被 <strong>自动</strong> 调用</td></tr><tr><td>02</td><td><code>__str__</code></td><td>方法</td><td>返回<strong>对象的描述信息</strong>，<code>print</code> 函数输出使用</td></tr></tbody></table><h3 id="5-1-del-方法（知道）"><a href="#5-1-del-方法（知道）" class="headerlink" title="5.1 del 方法（知道）"></a>5.1 <strong>del</strong> 方法（知道）</h3><ul><li>在 Python 中<ul><li>当使用 类名() 创建对象时，为对象 分配完空间后，自动 调用 <strong>init</strong> 方法</li><li>当一个 对象被从内存中销毁 前，会 自动 调用 <strong>del</strong> 方法</li></ul></li><li>应用场景<ul><li><strong>init</strong> 改造初始化方法，可以让创建对象更加灵活</li><li><strong>del</strong> 如果希望在对象被销毁前，再做一些事情，可以考虑一下 <strong>del</strong> 方法</li></ul></li><li>生命周期<ul><li>一个对象从调用 类名() 创建，生命周期开始</li><li>一个对象的 <strong>del</strong> 方法一旦被调用，生命周期结束</li><li>在对象的生命周期内，可以访问对象属性，或者让对象调用方法<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, new_name)</span>:</span></span><br><span class="line">        self.name = new_name</span><br><span class="line">        print(<span class="string">"%s 来了"</span> % self.name)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"%s 去了"</span> % self.name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># tom 是一个全局变量</span></span><br><span class="line">tom = Cat(<span class="string">"Tom"</span>)</span><br><span class="line">print(tom.name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># del 关键字可以删除一个对象</span></span><br><span class="line"><span class="keyword">del</span> tom</span><br><span class="line"></span><br><span class="line">print(<span class="string">"-"</span> * <span class="number">50</span>)</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="5-2-str-方法"><a href="#5-2-str-方法" class="headerlink" title="5.2 str 方法"></a>5.2 <strong>str</strong> 方法</h3><ul><li>在 Python 中，使用 print 输出 对象变量，默认情况下，会输出这个变量 引用的对象 是 由哪一个类创建的对象，以及 在内存中的地址（十六进制表示）</li><li>如果在开发中，希望使用 print 输出 对象变量 时，能够打印 自定义的内容，就可以利用 <strong>str</strong> 这个内置方法了<blockquote><p>注意：<strong>str</strong> 方法必须返回一个字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, new_name)</span>:</span></span><br><span class="line">        self.name = new_name</span><br><span class="line">        print(<span class="string">"%s 来了"</span> % self.name)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"%s 去了"</span> % self.name)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"我是小猫：%s"</span> % self.name</span><br><span class="line"></span><br><span class="line">tom = Cat(<span class="string">"Tom"</span>)</span><br><span class="line">print(tom)</span><br></pre></td></tr></table></figure></blockquote></li></ul><p>返回结果：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Tom 来了</span><br><span class="line">我是小猫：Tom</span><br><span class="line">Tom 去了</span><br></pre></td></tr></table></figure><p></p><p>解释：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">__del__用于当对象的引用计数为0时自动调用。</span><br><span class="line">__del__一般出现在两个地方：1、手工使用del减少对象引用计数至0，被垃圾回收处理时调用。2、程序结束时调用。</span><br><span class="line">__del__一般用于需要声明在对象被删除前需要处理的资源回收操作</span><br></pre></td></tr></table></figure><p></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 手工调用del 可以将对象引用计数减一，如果减到0，将会触发垃圾回收</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'调用对象的del方法，此方法将会回收此对象内存地址'</span>)</span><br><span class="line"></span><br><span class="line">stu = Student()  <span class="comment"># 调用对象的__del__方法回收此对象内存地址</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> stu</span><br><span class="line">print(<span class="string">'下面还有程序其他代码'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'调用对象的del方法，此方法将会回收此对象内存地址'</span>)</span><br><span class="line"></span><br><span class="line">stu = Student()  <span class="comment"># 程序直接结束，也会调用对象的__del__方法回收地址</span></span><br></pre></td></tr></table></figure><h1 id="面向对象封装案例"><a href="#面向对象封装案例" class="headerlink" title="面向对象封装案例"></a>面向对象封装案例</h1><h2 id="01-封装"><a href="#01-封装" class="headerlink" title="01. 封装"></a>01. 封装</h2><ol><li>封装 是面向对象编程的一大特点</li><li>面向对象编程的 第一步 —— 将 属性 和 方法 封装 到一个抽象的 类 中</li><li>外界 使用 类 创建 对象，然后 让对象调用方法</li><li>对象方法的细节 都被 封装 在 类的内部</li></ol><h2 id="02-小明爱跑步"><a href="#02-小明爱跑步" class="headerlink" title="02. 小明爱跑步"></a>02. 小明爱跑步</h2><p>需求</p><ol><li>小明 体重 75.0 公斤</li><li>小明每次 跑步 会减肥 0.5 公斤</li><li>小明每次 吃东西 体重增加 1 公斤</li></ol><table><thead><tr><th>Person</th></tr></thead><tbody><tr><td>name<br>weight</td></tr><tr><td><code>__init__(self,name,weight)</code>:<br><code>__str__(self)</code>:<br>run(self):<br>eat(self):</td></tr></tbody></table><blockquote><p>提示：在 对象的方法内部，是可以 直接访问对象的属性 的！</p></blockquote><p>代码实现：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    <span class="string">"""人类"""</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, weight)</span>:</span></span><br><span class="line"></span><br><span class="line">        self.name = name</span><br><span class="line">        self.weight = weight</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"我的名字叫 %s 体重 %.2f 公斤"</span> % (self.name, self.weight)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""跑步"""</span></span><br><span class="line"></span><br><span class="line">        print(<span class="string">"%s 爱跑步，跑步锻炼身体"</span> % self.name)</span><br><span class="line">        self.weight -= <span class="number">0.5</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""吃东西"""</span></span><br><span class="line"></span><br><span class="line">        print(<span class="string">"%s 是吃货，吃完这顿再减肥"</span> % self.name)</span><br><span class="line">        self.weight += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">xiaoming = Person(<span class="string">"小明"</span>, <span class="number">75</span>)</span><br><span class="line"></span><br><span class="line">xiaoming.run()</span><br><span class="line">xiaoming.eat()</span><br><span class="line">xiaoming.eat()</span><br><span class="line"></span><br><span class="line">print(xiaoming)</span><br></pre></td></tr></table></figure><p></p><h3 id="2-1-小明爱跑步扩展-——-小美也爱跑步"><a href="#2-1-小明爱跑步扩展-——-小美也爱跑步" class="headerlink" title="2.1 小明爱跑步扩展 —— 小美也爱跑步"></a>2.1 小明爱跑步扩展 —— 小美也爱跑步</h3><p>需求</p><ol><li>小明 和 小美 都爱跑步</li><li>小明 体重 75.0 公斤</li><li>小美 体重 45.0 公斤</li><li>每次 跑步 都会减少 0.5 公斤</li><li>每次 吃东西 都会增加 1 公斤</li></ol><table><thead><tr><th>Person</th></tr></thead><tbody><tr><td>name<br>weight</td></tr><tr><td><code>__init__(self,name,weight)</code>:<br><code>__str__(self)</code>:<br>run(self):<br>eat(self):</td></tr></tbody></table><p>提示</p><pre><code>1. 在 对象的方法内部，是可以 直接访问对象的属性 的2. 同一个类 创建的 多个对象 之间，属性 互不干扰！</code></pre><h2 id="03-摆放家具"><a href="#03-摆放家具" class="headerlink" title="03. 摆放家具"></a>03. 摆放家具</h2><p>需求</p><ol><li>房子(House) 有 户型、总面积 和 家具名称列表<ul><li>新房子没有任何的家具</li></ul></li><li>家具(HouseItem) 有 名字 和 占地面积，其中<ul><li>席梦思(bed) 占地 4 平米</li><li>衣柜(chest) 占地 2 平米</li><li>餐桌(table) 占地 1.5 平米</li></ul></li><li>将以上三件 家具 添加 到 房子 中</li><li>打印房子时，要求输出：户型、总面积、剩余面积、家具名称列表</li></ol><table><thead><tr><th>HouseItem</th></tr></thead><tbody><tr><td>name<br>area</td></tr><tr><td><code>__init__(self,name,area)</code>:<br><code>__str__(self)</code>:</td></tr></tbody></table><table><thead><tr><th>House</th></tr></thead><tbody><tr><td>house_type<br>area<br>free_area<br>item_list</td></tr><tr><td><code>__init__(self,house_type,area)</code>:<br><code>__str__(self)</code>:<br>add_item(self):</td></tr></tbody></table><p>剩余面积</p><ol><li>在创建房子对象时，定义一个 剩余面积的属性，初始值和总面积相等</li><li>当调用 add_item 方法，向房间 添加家具 时，让 剩余面积 -= 家具面积</li></ol><p>思考：应该先开发哪一个类？<br>答案 —— 家具类</p><ol><li>家具简单</li><li>房子要使用到家具，被使用的类，通常应该先开发</li></ol><h3 id="3-1-创建家具"><a href="#3-1-创建家具" class="headerlink" title="3.1 创建家具"></a>3.1 创建家具</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HouseItem</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, area)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :param name: 家具名称</span></span><br><span class="line"><span class="string">        :param area: 占地面积</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.area = area</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"[%s] 占地面积 %.2f"</span> % (self.name, self.area)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 创建家具</span></span><br><span class="line">bed = HouseItem(<span class="string">"席梦思"</span>, <span class="number">4</span>)</span><br><span class="line">chest = HouseItem(<span class="string">"衣柜"</span>, <span class="number">2</span>)</span><br><span class="line">table = HouseItem(<span class="string">"餐桌"</span>, <span class="number">1.5</span>)</span><br><span class="line"></span><br><span class="line">print(bed)</span><br><span class="line">print(chest)</span><br><span class="line">print(table)</span><br></pre></td></tr></table></figure><p>小结</p><ol><li>创建了一个 家具类，使用到 <strong>init</strong> 和 <strong>str</strong> 两个内置方法</li><li>使用 家具类 创建了 三个家具对象，并且 输出家具信息</li></ol><h3 id="3-2-创建房间"><a href="#3-2-创建房间" class="headerlink" title="3.2 创建房间"></a>3.2 创建房间</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">House</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, house_type, area)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :param house_type: 户型</span></span><br><span class="line"><span class="string">        :param area: 总面积</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.house_type = house_type</span><br><span class="line">        self.area = area</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 剩余面积默认和总面积一致</span></span><br><span class="line">        self.free_area = area</span><br><span class="line">        <span class="comment"># 默认没有任何的家具</span></span><br><span class="line">        self.item_list = []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># Python 能够自动的将一对括号内部的代码连接在一起</span></span><br><span class="line">        <span class="keyword">return</span> (<span class="string">"户型：%s\n总面积：%.2f[剩余：%.2f]\n家具：%s"</span></span><br><span class="line">                % (self.house_type, self.area,</span><br><span class="line">                   self.free_area, self.item_list))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_item</span><span class="params">(self, item)</span>:</span></span><br><span class="line">        print(<span class="string">"要添加 %s"</span> % item)</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 创建房子对象</span></span><br><span class="line">my_home = House(<span class="string">"两室一厅"</span>, <span class="number">60</span>)</span><br><span class="line"></span><br><span class="line">my_home.add_item(bed)</span><br><span class="line">my_home.add_item(chest)</span><br><span class="line">my_home.add_item(table)</span><br><span class="line"></span><br><span class="line">print(my_home)</span><br></pre></td></tr></table></figure><p>小结</p><ol><li>创建了一个 房子类，使用到 <strong>init</strong> 和 <strong>str</strong> 两个内置方法</li><li>准备了一个 add_item 方法 准备添加家具</li><li>使用 房子类 创建了 一个房子对象</li><li>让 房子对象 调用了三次 add_item 方法，将 三件家具 以实参传递到 add_item 内部</li></ol><h3 id="3-3-添加家具"><a href="#3-3-添加家具" class="headerlink" title="3.3 添加家具"></a>3.3 添加家具</h3><p>需求</p><ul><li>1&gt; 判断 家具的面积 是否 超过剩余面积，如果超过，提示不能添加这件家具</li><li>2&gt; 将 家具的名称 追加到 家具名称列表 中</li><li>3&gt; 用 房子的剩余面积 - 家具面积</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_item</span><span class="params">(self, item)</span>:</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">"要添加 %s"</span> % item)</span><br><span class="line">    <span class="comment"># 1. 判断家具面积是否大于剩余面积</span></span><br><span class="line">    <span class="keyword">if</span> item.area &gt; self.free_area:</span><br><span class="line">        print(<span class="string">"%s 的面积太大，不能添加到房子中"</span> % item.name)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2. 将家具的名称追加到名称列表中</span></span><br><span class="line">    self.item_list.append(item.name)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3. 计算剩余面积</span></span><br><span class="line">    self.free_area -= item.area</span><br></pre></td></tr></table></figure><h3 id="3-4-小结"><a href="#3-4-小结" class="headerlink" title="3.4 小结"></a>3.4 小结</h3><ul><li>主程序只负责创建 房子 对象和 家具 对象</li><li>让 房子 对象调用 add_item 方法 将家具添加到房子中</li><li>面积计算、剩余面积、家具列表 等处理都被 封装 到 房子类的内部</li></ul><h1 id="面向对象封装案例-II"><a href="#面向对象封装案例-II" class="headerlink" title="面向对象封装案例 II"></a>面向对象封装案例 II</h1><p>封装</p><ol><li>封装 是面向对象编程的一大特点</li><li>面向对象编程的 第一步 —— 将 属性 和 方法 封装 到一个抽象的 类 中</li><li>外界 使用 类 创建 对象，然后 让对象调用方法</li><li>细节 都被 封装 在 类的内部</li></ol><blockquote><p>一个对象的 属性 可以是 另外一个类创建的对象</p></blockquote><h2 id="01-士兵突击"><a href="#01-士兵突击" class="headerlink" title="01. 士兵突击"></a>01. 士兵突击</h2><p>需求</p><ol><li>许三多 有一把 AK47</li><li>可以 开火</li><li>够 发射 子弹</li><li>填 装填子弹 —— 增加子弹数量</li></ol><table><thead><tr><th>Soldier</th></tr></thead><tbody><tr><td>name<br>gun</td></tr><tr><td><code>__init__(self)</code>:<br>fire(self):</td></tr></tbody></table><table><thead><tr><th>Gun</th></tr></thead><tbody><tr><td>model<br>bullet_count</td></tr><tr><td><code>__init__(self,model)</code>:<br>add_bullet(self,count):<br>shoot(self):</td></tr></tbody></table><h3 id="1-1-开发枪类"><a href="#1-1-开发枪类" class="headerlink" title="1.1 开发枪类"></a>1.1 开发枪类</h3><p>shoot 方法需求</p><ul><li>1&gt; 判断是否有子弹，没有子弹无法射击</li><li>2&gt; 使用 print 提示射击，并且输出子弹数量<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Gun</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, model)</span>:</span></span><br><span class="line">        <span class="comment"># 枪的型号</span></span><br><span class="line">        self.model = model</span><br><span class="line">        <span class="comment"># 子弹数量</span></span><br><span class="line">        self.bullet_count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_bullet</span><span class="params">(self, count)</span>:</span></span><br><span class="line">        self.bullet_count += count</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">shoot</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 判断是否还有子弹</span></span><br><span class="line">        <span class="keyword">if</span> self.bullet_count &lt;= <span class="number">0</span>:</span><br><span class="line">            print(<span class="string">"没有子弹了..."</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="comment"># 发射一颗子弹</span></span><br><span class="line">        self.bullet_count -= <span class="number">1</span></span><br><span class="line">        print(<span class="string">"%s 发射子弹[%d]..."</span> % (self.model, self.bullet_count))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建枪对象</span></span><br><span class="line">ak47 = Gun(<span class="string">"ak47"</span>)</span><br><span class="line">ak47.add_bullet(<span class="number">50</span>)</span><br><span class="line">ak47.shoot()</span><br></pre></td></tr></table></figure></li></ul><h3 id="1-2-开发士兵类"><a href="#1-2-开发士兵类" class="headerlink" title="1.2 开发士兵类"></a>1.2 开发士兵类</h3><blockquote><p>假设：每一个新兵 都 没有枪</p></blockquote><p>定义没有初始值的属性<br>在定义属性时，如果 不知道设置什么初始值，可以设置为 None</p><ul><li>None 关键字 表示 什么都没有</li><li>表示一个 空对象，没有方法和属性，是一个特殊的常量</li><li>可以将 None 赋值给任何一个变量</li></ul><p>fire 方法需求</p><ul><li>1&gt; 判断是否有枪，没有枪没法冲锋</li><li>2&gt; 喊一声口号</li><li>3&gt; 装填子弹</li><li>4&gt; 射击</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Soldier</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        <span class="comment"># 姓名</span></span><br><span class="line">        self.name = name</span><br><span class="line">        <span class="comment"># 枪，士兵初始没有枪 None 关键字表示什么都没有</span></span><br><span class="line">        self.gun = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fire</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 1. 判断士兵是否有枪</span></span><br><span class="line">        <span class="keyword">if</span> self.gun <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            print(<span class="string">"[%s] 还没有枪..."</span> % self.name)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="comment"># 2. 高喊口号</span></span><br><span class="line">        print(<span class="string">"冲啊...[%s]"</span> % self.name)</span><br><span class="line">        <span class="comment"># 3. 让枪装填子弹</span></span><br><span class="line">        self.gun.add_bullet(<span class="number">50</span>)</span><br><span class="line">        <span class="comment"># 4. 让枪发射子弹</span></span><br><span class="line">        self.gun.shoot()</span><br></pre></td></tr></table></figure><p>小结</p><ol><li>创建了一个 士兵类，使用到 <strong>init</strong> 内置方法</li><li>在定义属性时，如果 不知道设置什么初始值，可以设置为 None</li><li>在 封装的 方法内部，还可以让 自己的 使用其他类创建的对象属性 调用已经 封装好的方法</li></ol><h2 id="02-身份运算符"><a href="#02-身份运算符" class="headerlink" title="02. 身份运算符"></a>02. 身份运算符</h2><p>身份运算符用于 比较 两个对象的 内存地址 是否一致 —— 是否是对同一个对象的引用</p><ul><li>在 Python 中针对 None 比较时，建议使用 is 判断</li></ul><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>is</td><td>is 是判断两个标识符是不是引用同一个对象</td><td>x is y，类似 id(x) == id(y)</td></tr><tr><td>is not</td><td>is not 是判断两个标识符是不是引用不同对象</td><td>x is not y，类似 id(a) != id(b)</td></tr></tbody></table><p>is 与 == 区别：</p><ul><li>is 用于判断 两个变量 引用对象是否为同一个</li><li>== 用于判断 引用变量的值 是否相等<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a = [1, 2, 3]</span><br><span class="line">&gt;&gt;&gt; b = [1, 2, 3]</span><br><span class="line">&gt;&gt;&gt; b is a </span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; b == a</span><br><span class="line">True</span><br></pre></td></tr></table></figure></li></ul><h1 id="私有属性和私有方法"><a href="#私有属性和私有方法" class="headerlink" title="私有属性和私有方法"></a>私有属性和私有方法</h1><h2 id="01-应用场景及定义方式"><a href="#01-应用场景及定义方式" class="headerlink" title="01. 应用场景及定义方式"></a>01. 应用场景及定义方式</h2><p>应用场景</p><ul><li>在实际开发中，对象 的 某些属性或方法 可能只希望 在对象的内部被使用，而 不希望在外部被访问到</li><li>私有属性 就是 对象 不希望公开的 属性</li><li>私有方法 就是 对象 不希望公开的 方法</li></ul><p>定义方式</p><ul><li>在 定义属性或方法时，在 属性名或者方法名前 增加 两个下划线，定义的就是 私有 属性或方法<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Women</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        <span class="comment"># 不要问女生的年龄</span></span><br><span class="line">        self.__age = <span class="number">18</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__secret</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"我的年龄是 %d"</span> % self.__age)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">xiaofang = Women(<span class="string">"小芳"</span>)</span><br><span class="line"><span class="comment"># 私有属性，外部不能直接访问</span></span><br><span class="line"><span class="comment"># print(xiaofang.__age)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 私有方法，外部不能直接调用</span></span><br><span class="line"><span class="comment"># xiaofang.__secret()</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="02-伪私有属性和私有方法（知识点）"><a href="#02-伪私有属性和私有方法（知识点）" class="headerlink" title="02. 伪私有属性和私有方法（知识点）"></a>02. 伪私有属性和私有方法（知识点）</h2><blockquote><p>提示：在日常开发中，不要使用这种方式，访问对象的 私有属性 或 私有方法</p></blockquote><p>Python 中，并没有 真正意义 的 私有</p><ul><li>在给 属性、方法 命名时，实际是对 名称 做了一些特殊处理，使得外界无法访问到</li><li>处理方式：在 名称 前面加上 _类名 =&gt; _类名__名称<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 私有属性，外部不能直接访问到</span></span><br><span class="line">print(xiaofang._Women__age)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 私有方法，外部不能直接调用</span></span><br><span class="line">xiaofang._Women__secret()</span><br></pre></td></tr></table></figure></li></ul><h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><p>面向对象三大特性</p><ol><li>封装 根据 职责 将 属性 和 方法 封装 到一个抽象的 类 中</li><li>继承 实现代码的重用，相同的代码不需要重复的编写</li><li>多态 不同的对象调用相同的方法，产生不同的执行结果，增加代码的灵活度</li></ol><h2 id="01-单继承"><a href="#01-单继承" class="headerlink" title="01. 单继承"></a>01. 单继承</h2><h3 id="1-1-继承的概念、语法和特点"><a href="#1-1-继承的概念、语法和特点" class="headerlink" title="1.1 继承的概念、语法和特点"></a>1.1 继承的概念、语法和特点</h3><p>继承的概念：子类 拥有 父类 的所有 方法 和 属性</p><p>1) 继承的语法<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">class 类名(父类名):</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure><p></p><ul><li>子类 继承自 父类，可以直接 享受 父类中已经封装好的方法，不需要再次开发</li><li>子类 中应该根据 职责，封装 子类特有的 属性和方法</li></ul><p>2) 专业术语</p><ul><li>Dog 类是 Animal 类的子类，Animal 类是 Dog 类的父类，Dog 类从 Animal 类继承</li><li>Dog 类是 Animal 类的派生类，Animal 类是 Dog 类的基类，Dog 类从 Animal 类派生</li></ul><p>3) 继承的传递性</p><ul><li>C 类从 B 类继承，B 类又从 A 类继承</li><li>那么 C 类就具有 B 类和 A 类的所有属性和方法</li></ul><p>子类 拥有 父类 以及 父类的父类 中封装的所有 属性 和 方法</p><h3 id="1-2-方法的重写"><a href="#1-2-方法的重写" class="headerlink" title="1.2 方法的重写"></a>1.2 方法的重写</h3><ul><li>子类 拥有 父类 的所有 方法 和 属性</li><li>子类 继承自 父类，可以直接 享受 父类中已经封装好的方法，不需要再次开发</li></ul><p>应用场景</p><ul><li>当 父类 的方法实现不能满足子类需求时，可以对方法进行 重写(override)</li></ul><p>重写 父类方法有两种情况：</p><ol><li>覆盖 父类的方法</li><li>对父类方法进行 扩展</li></ol><p>1) 覆盖父类的方法</p><ul><li>如果在开发中，父类的方法实现 和 子类的方法实现，完全不同</li><li>就可以使用 覆盖 的方式，在子类中 重新编写 父类的方法实现<blockquote><p>具体的实现方式，就相当于在 子类中 定义了一个 和父类同名的方法并且实现</p></blockquote></li></ul><p>重写之后，在运行时，只会调用 子类中重写的方法，而不再会调用 父类封装的方法</p><p>2) 对父类方法进行 扩展</p><ul><li>如果在开发中，子类的方法实现 中 包含 父类的方法实现<ul><li>父类原本封装的方法实现 是 子类方法的一部分</li></ul></li><li>就可以使用 扩展 的方式<ol><li>在子类中 重写 父类的方法</li><li>在需要的位置使用 super().父类方法 来调用父类方法的执行</li><li>代码其他的位置针对子类的需求，编写 子类特有的代码实现</li></ol></li></ul><p>关于 super</p><ul><li>在 Python 中 super 是一个 特殊的类</li><li>super() 就是使用 super 类创建出来的对象</li><li>最常 使用的场景就是在 重写父类方法时，调用 在父类中封装的方法实现</li></ul><p>调用父类方法的另外一种方式（知道）</p><blockquote><p>在 Python 2.x 时，如果需要调用父类的方法，还可以使用以下方式：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">父类名.方法(self)</span><br></pre></td></tr></table></figure><p></p></blockquote><ul><li>这种方式，目前在 Python 3.x 还支持这种方式</li><li>这种方法 不推荐使用，因为一旦 父类发生变化，方法调用位置的 类名 同样需要修改</li></ul><p>提示</p><ul><li>在开发时，父类名 和 super() 两种方式不要混用</li><li>如果使用 当前子类名 调用方法，会形成递归调用，出现死循环</li></ul><h3 id="1-3-父类的-私有属性-和-私有方法"><a href="#1-3-父类的-私有属性-和-私有方法" class="headerlink" title="1.3 父类的 私有属性 和 私有方法"></a>1.3 父类的 私有属性 和 私有方法</h3><ol><li>子类对象 不能 在自己的方法内部，直接 访问 父类的 私有属性 或 私有方法</li><li>子类对象 可以通过 父类 的 公有方法 间接 访问到 私有属性 或 私有方法</li></ol><blockquote><ul><li>私有属性、方法 是对象的隐私，不对外公开，外界 以及 子类 都不能直接访问</li><li>私有属性、方法 通常用于做一些内部的事情</li></ul></blockquote><h2 id="02-多继承"><a href="#02-多继承" class="headerlink" title="02. 多继承"></a>02. 多继承</h2><p>概念</p><ul><li>子类 可以拥有 多个父类，并且具有 所有父类 的 属性 和 方法</li><li>例如：孩子 会继承自己 父亲 和 母亲 的 特性<br>语法<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">class 子类名(父类名1, 父类名2...)</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-1-多继承的使用注意事项"><a href="#2-1-多继承的使用注意事项" class="headerlink" title="2.1 多继承的使用注意事项"></a>2.1 多继承的使用注意事项</h3><p>如果 不同的父类 中存在 同名的方法，子类对象 在调用方法时，会调用 哪一个父类中的方法呢？</p><blockquote><p>开发时，应该尽量避免这种容易产生混淆的情况！ —— 如果 父类之间 存在 同名的属性或者方法，应该 尽量避免 使用多继承</p></blockquote><p>Python 中的 MRO —— 方法搜索顺序（知道）</p><ul><li>Python 中针对 类 提供了一个 内置属性 <strong>mro</strong> 可以查看 方法 搜索顺序</li><li><p>MRO 是 method resolution order，主要用于 在多继承时判断 方法、属性 的调用 路径</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(类名.__mro__)</span><br></pre></td></tr></table></figure></li><li><p>在搜索方法时，是按照 <strong>mro</strong> 的输出结果 从左至右 的顺序查找的</p></li><li>如果在当前类中 找到方法，就直接执行，不再搜索</li><li>如果 没有找到，就查找下一个类 中是否有对应的方法，如果找到，就直接执行，不再搜索</li><li>如果找到最后一个类，还没有找到方法，程序报错</li></ul><h2 id="2-2-新式类与旧式（经典）类"><a href="#2-2-新式类与旧式（经典）类" class="headerlink" title="2.2 新式类与旧式（经典）类"></a>2.2 新式类与旧式（经典）类</h2><blockquote><p>object 是 Python 为所有对象提供的 基类，提供有一些内置的属性和方法，可以使用 dir 函数查看</p></blockquote><ul><li>新式类：以 object 为基类的类，推荐使用</li><li>经典类：不以 object 为基类的类，不推荐使用</li><li>在 Python 3.x 中定义类时，如果没有指定父类，会 默认使用 object 作为该类的 基类 —— Python 3.x 中定义的类都是 新式类</li><li>在 Python 2.x 中定义类时，如果没有指定父类，则不会以 object 作为 基类<blockquote><p>新式类 和 经典类 在多继承时 —— 会影响到方法的搜索顺序</p></blockquote></li></ul><p>为了保证编写的代码能够同时在 Python 2.x 和 Python 3.x 运行！<br>今后在定义类时，如果没有父类，建议统一继承自 object<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 类名<span class="params">(object)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p></p><h1 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h1><p>面向对象三大特性</p><ol><li>封装 根据 职责 将 属性 和 方法 封装 到一个抽象的 类 中<ul><li>定义类的准则</li></ul></li><li>继承 实现代码的重用，相同的代码不需要重复的编写<ul><li>设计类的技巧</li><li>子类针对自己特有的需求，编写特定的代码</li></ul></li><li>多态 不同的 子类对象 调用相同的 父类方法，产生不同的执行结果<ul><li>多态 可以 增加代码的灵活度</li><li>以 继承 和 重写父类方法 为前提</li><li>是调用方法的技巧，不会影响到类的内部设计</li></ul></li></ol><h2 id="多态案例演练"><a href="#多态案例演练" class="headerlink" title="多态案例演练"></a>多态案例演练</h2><p>需求</p><ol><li>在 Dog 类中封装方法 game<ul><li>普通狗只是简单的玩耍</li></ul></li><li>定义 XiaoTianDog 继承自 Dog，并且重写 game 方法<ul><li>哮天犬需要在天上玩耍</li></ul></li><li>定义 Person 类，并且封装一个 和狗玩 的方法<ul><li>在方法内部，直接让 狗对象 调用 game 方法</li></ul></li></ol><p>案例小结</p><ul><li>Person 类中只需要让 狗对象 调用 game 方法，而不关心具体是 什么狗<ul><li>game 方法是在 Dog 父类中定义的</li></ul></li><li>在程序执行时，传入不同的 狗对象 实参，就会产生不同的执行效果<blockquote><p>多态 更容易编写出出通用的代码，做出通用的编程，以适应需求的不断变化！</p></blockquote></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">game</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"%s 蹦蹦跳跳的玩耍..."</span> % self.name)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">XiaoTianDog</span><span class="params">(Dog)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">game</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"%s 飞到天上去玩耍..."</span> % self.name)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">game_with_dog</span><span class="params">(self, dog)</span>:</span></span><br><span class="line">        print(<span class="string">"%s 和 %s 快乐的玩耍..."</span> % (self.name, dog.name))</span><br><span class="line">        <span class="comment"># 让狗玩耍</span></span><br><span class="line">        dog.game()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 创建一个狗对象</span></span><br><span class="line"><span class="comment"># wangcai = Dog("旺财")</span></span><br><span class="line">wangcai = XiaoTianDog(<span class="string">"飞天旺财"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 创建一个小明对象</span></span><br><span class="line">xiaoming = Person(<span class="string">"小明"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 让小明调用和狗玩的方法</span></span><br><span class="line">xiaoming.game_with_dog(wangcai)</span><br></pre></td></tr></table></figure><h1 id="类属性和类方法"><a href="#类属性和类方法" class="headerlink" title="类属性和类方法"></a>类属性和类方法</h1><h2 id="01-类的结构"><a href="#01-类的结构" class="headerlink" title="01. 类的结构"></a>01. 类的结构</h2><h3 id="1-1-术语-——-实例"><a href="#1-1-术语-——-实例" class="headerlink" title="1.1 术语 —— 实例"></a>1.1 术语 —— 实例</h3><ol><li>使用面相对象开发，第 1 步 是设计 类</li><li>使用 类名() 创建对象，创建对象 的动作有两步：</li></ol><ul><li>1) 在内存中为对象 分配空间</li><li>2) 调用初始化方法 <strong>init</strong> 为 对象初始化</li></ul><ol start="3"><li>对象创建后，内存 中就有了一个对象的 实实在在 的存在 —— 实例</li></ol><p>因此，通常也会把：</p><ol><li>创建出来的 对象 叫做 类 的 实例</li><li>创建对象的 动作 叫做 实例化</li><li>对象的属性 叫做 实例属性</li><li>对象调用的方法 叫做 实例方法</li></ol><p>在程序执行时：</p><ol><li>对象各自拥有自己的 实例属性</li><li>调用对象方法，可以通过 self.<ul><li>访问自己的属性</li><li>调用自己的方法</li></ul></li></ol><p>结论</p><ul><li>每一个对象 都有自己 独立的内存空间，保存各自不同的属性</li><li>多个对象的方法，在内存中只有一份，在调用方法时，需要把对象的引用 传递到方法内部</li></ul><h3 id="1-2-类是一个特殊的对象"><a href="#1-2-类是一个特殊的对象" class="headerlink" title="1.2 类是一个特殊的对象"></a>1.2 类是一个特殊的对象</h3><blockquote><p>Python 中 一切皆对象：</p><ul><li>class AAA: 定义的类属于 类对象</li><li>obj1 = AAA() 属于 实例对象</li></ul></blockquote><ul><li>在程序运行时，类 同样 会被加载到内存</li><li>在 Python 中，类 是一个特殊的对象 —— 类对象</li><li>在程序运行时，类对象 在内存中 只有一份，使用 一个类 可以创建出 很多个对象实例</li><li><p>除了封装 实例 的 属性 和 方法外，类对象 还可以拥有自己的 属性 和 方法</p><ol><li>类属性</li><li>类方法</li></ol></li><li><p>通过 类名. 的方式可以 访问类的属性 或者 调用类的方法</p></li></ul><h2 id="02-类属性和实例属性"><a href="#02-类属性和实例属性" class="headerlink" title="02. 类属性和实例属性"></a>02. 类属性和实例属性</h2><h3 id="2-1-概念和使用"><a href="#2-1-概念和使用" class="headerlink" title="2.1 概念和使用"></a>2.1 概念和使用</h3><ul><li>类属性 就是给 类对象 中定义的 属性</li><li>通常用来记录 与这个类相关 的特征</li><li>类属性 不会用于记录 具体对象的特征</li></ul><p>示例需求</p><ul><li>定义一个 工具类</li><li>每件工具都有自己的 name</li><li>需求 —— 知道使用这个类，创建了多少个工具对象？<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tool</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="comment"># 使用赋值语句，定义类属性，记录创建工具对象的总数</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        <span class="comment"># 针对类属性做一个计数+1</span></span><br><span class="line">        Tool.count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建工具对象</span></span><br><span class="line">tool1 = Tool(<span class="string">"斧头"</span>)</span><br><span class="line">tool2 = Tool(<span class="string">"榔头"</span>)</span><br><span class="line">tool3 = Tool(<span class="string">"铁锹"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 知道使用 Tool 类到底创建了多少个对象?</span></span><br><span class="line">print(<span class="string">"现在创建了 %d 个工具"</span> % Tool.count)</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-2-属性的获取机制（科普）"><a href="#2-2-属性的获取机制（科普）" class="headerlink" title="2.2 属性的获取机制（科普）"></a>2.2 属性的获取机制（科普）</h3><ul><li>在 Python 中 属性的获取 存在一个 向上查找机制</li><li>因此，要访问类属性有两种方式：<ol><li>类名.类属性</li><li>对象.类属性 （不推荐）<br>注意</li></ol></li><li>如果使用 对象.类属性 = 值 赋值语句，只会 给对象添加一个属性，而不会影响到 类属性的值</li></ul><h2 id="03-类方法和静态方法"><a href="#03-类方法和静态方法" class="headerlink" title="03. 类方法和静态方法"></a>03. 类方法和静态方法</h2><h3 id="3-1-类方法"><a href="#3-1-类方法" class="headerlink" title="3.1 类方法"></a>3.1 类方法</h3><ul><li>类属性 就是针对 类对象 定义的属性<ul><li>使用 赋值语句 在 class 关键字下方可以定义 类属性</li><li>类属性 用于记录 与这个类相关 的特征</li></ul></li><li><p>类方法 就是针对 类对象 定义的方法</p><ul><li>在 类方法 内部可以直接访问 类属性 或者调用其他的 类方法<br>语法如下<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@classmethod</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> 类方法名<span class="params">(cls)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>类方法需要用 修饰器 @classmethod 来标识，告诉解释器这是一个类方法</p></li><li>类方法的 第一个参数 应该是 cls<ul><li>由 哪一个类 调用的方法，方法内的 cls 就是 哪一个类的引用</li><li>这个参数和 实例方法 的第一个参数是 self 类似</li><li>提示 使用其他名称也可以，不过习惯使用 cls</li></ul></li><li>通过 类名. 调用 类方法，调用方法时，不需要传递 cls 参数</li><li>在方法内部<ul><li>可以通过 cls. 访问类的属性</li><li>也可以通过 cls. 调用其他的类方法</li></ul></li></ul><p>示例需求</p><ul><li>定义一个 工具类</li><li>每件工具都有自己的 name</li><li>需求 —— 在 类 封装一个 show_tool_count 的类方法，输出使用当前这个类，创建的对象个数<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@classmethod</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_tool_count</span><span class="params">(cls)</span>:</span></span><br><span class="line">    <span class="string">"""显示工具对象的总数"""</span></span><br><span class="line">    print(<span class="string">"工具对象的总数 %d"</span> % cls.count)</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>在类方法内部，可以直接使用 cls 访问 类属性 或者 调用类方法</p></blockquote><h3 id="3-2-静态方法"><a href="#3-2-静态方法" class="headerlink" title="3.2 静态方法"></a>3.2 静态方法</h3><ul><li>在开发时，如果需要在 类 中封装一个方法，这个方法：<ul><li>既 不需要 访问 实例属性 或者调用 实例方法</li><li>也 不需要 访问 类属性 或者调用 类方法</li></ul></li><li><p>这个时候，可以把这个方法封装成一个 静态方法<br>语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@staticmethod</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> 静态方法名<span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></li><li><p>静态方法 需要用 修饰器 @staticmethod 来标识，告诉解释器这是一个静态方法</p></li><li>通过 类名. 调用 静态方法<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">(object)</span>:</span> </span><br><span class="line">    <span class="comment"># 狗对象计数</span></span><br><span class="line">    dog_count = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">()</span>:</span> </span><br><span class="line">        <span class="comment"># 不需要访问实例属性也不需要访问类属性的方法</span></span><br><span class="line">        print(<span class="string">"狗在跑..."</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.name = name</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-3-方法综合案例"><a href="#3-3-方法综合案例" class="headerlink" title="3.3 方法综合案例"></a>3.3 方法综合案例</h3><p>需求</p><ol><li>设计一个 Game 类</li><li>属性：<ul><li>定义一个 类属性 top_score 记录游戏的 历史最高分</li><li>定义一个 实例属性 player_name 记录 当前游戏的玩家姓名</li></ul></li><li>方法：<ul><li>静态方法 show_help 显示游戏帮助信息</li><li>类方法 show_top_score 显示历史最高分</li><li>实例方法 start_game 开始当前玩家的游戏</li></ul></li><li>主程序步骤<ul><li>1) 查看帮助信息</li><li>2) 查看历史最高分</li><li>3) 创建游戏对象，开始游戏</li></ul></li></ol><p>案例小结</p><ol><li>实例方法 —— 方法内部需要访问 实例属性<ul><li>实例方法 内部可以使用 类名. 访问类属性</li></ul></li><li>类方法 —— 方法内部 只 需要访问 类属性</li><li>静态方法 —— 方法内部，不需要访问 实例属性 和 类属性<br>提问<br>如果方法内部 即需要访问 实例属性，又需要访问 类属性，应该定义成什么方法？<br>答案</li></ol><ul><li>应该定义 实例方法</li><li>因为，类只有一个，在 实例方法 内部可以使用 类名. 访问类属性<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Game</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="comment"># 游戏最高分，类属性</span></span><br><span class="line">    top_score = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show_help</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">"帮助信息：让僵尸走进房间"</span>)</span><br><span class="line">        </span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show_top_score</span><span class="params">(cls)</span>:</span></span><br><span class="line">        print(<span class="string">"游戏最高分是 %d"</span> % cls.top_score)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, player_name)</span>:</span></span><br><span class="line">        self.player_name = player_name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start_game</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"[%s] 开始游戏..."</span> % self.player_name)  </span><br><span class="line">        <span class="comment"># 使用类名.修改历史最高分</span></span><br><span class="line">        Game.top_score = <span class="number">999</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 查看游戏帮助</span></span><br><span class="line">Game.show_help()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 查看游戏最高分</span></span><br><span class="line">Game.show_top_score()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 创建游戏对象，开始游戏</span></span><br><span class="line">game = Game(<span class="string">"小明"</span>)</span><br><span class="line"></span><br><span class="line">game.start_game()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 游戏结束，查看游戏最高分</span></span><br><span class="line">Game.show_top_score()</span><br></pre></td></tr></table></figure></li></ul><h1 id="单例"><a href="#单例" class="headerlink" title="单例"></a>单例</h1><h2 id="01-单例设计模式"><a href="#01-单例设计模式" class="headerlink" title="01. 单例设计模式"></a>01. 单例设计模式</h2><ul><li>设计模式<ul><li>设计模式 是 前人工作的总结和提炼，通常，被人们广泛流传的设计模式都是针对 某一特定问题 的成熟的解决方案</li><li>使用 设计模式 是为了可重用代码、让代码更容易被他人理解、保证代码可靠性</li></ul></li><li>单例设计模式<ul><li>目的 —— 让 类 创建的对象，在系统中 只有 唯一的一个实例</li><li>每一次执行 类名() 返回的对象，内存地址是相同的<br>单例设计模式的应用场景</li></ul></li><li>音乐播放 对象</li><li>回收站 对象</li><li>打印机 对象</li><li>……</li></ul><h2 id="02-new-方法"><a href="#02-new-方法" class="headerlink" title="02. new 方法"></a>02. <strong>new</strong> 方法</h2><ul><li>使用 类名() 创建对象时，Python 的解释器 首先 会 调用 <strong>new</strong> 方法为对象 分配空间</li><li><code>__new__</code> 是一个 由 object 基类提供的 内置的静态方法，主要作用有两个：<ul><li>1) 在内存中为对象 分配空间</li><li>2)返回 对象的引用</li></ul></li><li><p>Python 的解释器获得对象的 引用 后，将引用作为 第一个参数，传递给 <strong>init</strong> 方法</p><blockquote><p>重写 <strong>new</strong> 方法 的代码非常固定！</p></blockquote></li><li><p>重写 <strong>new</strong> 方法 一定要 return super().<strong>new</strong>(cls)</p></li><li>否则 Python 的解释器 得不到 分配了空间的 对象引用，就不会调用对象的初始化方法</li><li>注意：<strong>new</strong> 是一个静态方法，在调用时需要 主动传递 cls 参数<br>示例代码:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MusicPlayer</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="comment"># 如果不返回任何结果，</span></span><br><span class="line">        <span class="keyword">return</span> super().__new__(cls)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"初始化音乐播放对象"</span>)</span><br><span class="line"></span><br><span class="line">player = MusicPlayer()</span><br><span class="line">print(player)</span><br></pre></td></tr></table></figure></li></ul><h2 id="03-Python-中的单例"><a href="#03-Python-中的单例" class="headerlink" title="03. Python 中的单例"></a>03. Python 中的单例</h2><ul><li>单例 —— 让 类 创建的对象，在系统中 只有 唯一的一个实例<ol><li>定义一个 类属性，初始值是 None，用于记录 单例对象的引用</li><li>重写 <strong>new</strong> 方法</li><li>如果 类属性 is None，调用父类方法分配空间，并在类属性中记录结果</li><li>返回 类属性 中记录的 对象引用<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MusicPlayer</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="comment"># 定义类属性记录单例对象引用</span></span><br><span class="line">    instance = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="comment"># 1. 判断类属性是否已经被赋值</span></span><br><span class="line">        <span class="keyword">if</span> cls.instance <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            cls.instance = super().__new__(cls)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 2. 返回类属性的单例引用</span></span><br><span class="line">        <span class="keyword">return</span> cls.instance</span><br></pre></td></tr></table></figure></li></ol></li></ul><h3 id="3-1只执行一次初始化工作"><a href="#3-1只执行一次初始化工作" class="headerlink" title="3.1只执行一次初始化工作"></a>3.1只执行一次初始化工作</h3><ul><li>在每次使用 类名() 创建对象时，Python 的解释器都会自动调用两个方法：<ul><li><strong>new</strong> 分配空间</li><li><strong>init</strong> 对象初始化</li></ul></li><li>在上一小节对 <strong>new</strong> 方法改造之后，每次都会得到 第一次被创建对象的引用</li><li>但是：初始化方法还会被再次调用</li></ul><p>需求</p><ul><li>让 初始化动作 只被 执行一次</li></ul><p>解决办法</p><ul><li>定义一个类属性 init_flag 标记是否 执行过初始化动作，初始值为 False</li><li>在 <strong>init</strong> 方法中，判断 init_flag，如果为 False 就执行初始化动作</li><li>然后将 init_flag 设置为 True</li><li>这样，再次 自动 调用 <strong>init</strong> 方法时，初始化动作就不会被再次执行 了<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MusicPlayer</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="comment"># 记录第一个被创建对象的引用</span></span><br><span class="line">    instance = <span class="literal">None</span></span><br><span class="line">    <span class="comment"># 记录是否执行过初始化动作</span></span><br><span class="line">    init_flag = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="comment"># 1. 判断类属性是否是空对象</span></span><br><span class="line">        <span class="keyword">if</span> cls.instance <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="comment"># 2. 调用父类的方法，为第一个对象分配空间</span></span><br><span class="line">            cls.instance = super().__new__(cls)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 3. 返回类属性保存的对象引用</span></span><br><span class="line">        <span class="keyword">return</span> cls.instance</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> MusicPlayer.init_flag:</span><br><span class="line">            print(<span class="string">"初始化音乐播放器"</span>)</span><br><span class="line"></span><br><span class="line">            MusicPlayer.init_flag = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建多个对象</span></span><br><span class="line">player1 = MusicPlayer()</span><br><span class="line">print(player1)</span><br><span class="line"></span><br><span class="line">player2 = MusicPlayer()</span><br><span class="line">print(player2)</span><br></pre></td></tr></table></figure></li></ul><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Dec 31 2019 13:39:53 GMT+0800 (GMT+08:00) --&gt;&lt;h1 id=&quot;面向对象-OOP-基本概念&quot;&gt;&lt;a href=&quot;#面向对象-OOP-基本概念&quot; class=&quot;headerlink&quot; title=&quot;面向对象(OOP)基本概念&quot;&gt;&lt;/a&gt;面向对象(OOP)基本概念&lt;/h1&gt;&lt;p&gt;面向对象编程 —— Object Oriented Programming 简写 OOP&lt;/p&gt;&lt;h2 id=&quot;01-面向对象基本概念&quot;&gt;&lt;a href=&quot;#01-面向对象基本概念&quot; class=&quot;headerlink&quot; title=&quot;01. 面向对象基本概念&quot;&gt;&lt;/a&gt;01. 面向对象基本概念&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;我们之前学习的编程方式就是 面向过程 的&lt;/li&gt;&lt;li&gt;面相过程 和 面相对象，是两种不同的 编程方式&lt;/li&gt;&lt;li&gt;对比 面向过程 的特点，可以更好地了解什么是 面向对象&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&quot;1-1-过程和函数（科普）&quot;&gt;&lt;a href=&quot;#1-1-过程和函数（科普）&quot; class=&quot;headerlink&quot; title=&quot;1.1 过程和函数（科普）&quot;&gt;&lt;/a&gt;1.1 过程和函数（科普）&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;过程 是早期的一个编程概念&lt;/li&gt;&lt;li&gt;过程 类似于函数，只能执行，但是没有返回值&lt;/li&gt;&lt;li&gt;函数 不仅能执行，还可以返回结果&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
      <category term="Python" scheme="https://yongnights.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://yongnights.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>python_闭包和装饰器</title>
    <link href="https://yongnights.github.io/2019/12/31/python_%E9%97%AD%E5%8C%85%E5%92%8C%E8%A3%85%E9%A5%B0%E5%99%A8/"/>
    <id>https://yongnights.github.io/2019/12/31/python_闭包和装饰器/</id>
    <published>2019-12-31T04:00:48.269Z</published>
    <updated>2019-12-31T04:00:48.269Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Dec 31 2019 13:39:53 GMT+0800 (GMT+08:00) --><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><h3 id="1-函数引用"><a href="#1-函数引用" class="headerlink" title="1. 函数引用"></a>1. 函数引用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"--- in test1 func----"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用函数</span></span><br><span class="line">test1()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 引用函数</span></span><br><span class="line">ret = test1</span><br><span class="line"></span><br><span class="line">print(id(ret))</span><br><span class="line">print(id(test1))</span><br><span class="line"></span><br><span class="line"><span class="comment">#通过引用调用函数</span></span><br><span class="line">ret()</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">--- <span class="keyword">in</span> test1 func----</span><br><span class="line"><span class="number">140212571149040</span></span><br><span class="line"><span class="number">140212571149040</span></span><br><span class="line">--- <span class="keyword">in</span> test1 func----</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="2-什么是闭包"><a href="#2-什么是闭包" class="headerlink" title="2. 什么是闭包"></a>2. 什么是闭包</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义一个函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(number)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 在函数内部再定义一个函数，并且这个函数用到了外边函数的变量，那么将这个函数以及用到的一些变量称之为闭包</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_in</span><span class="params">(number_in)</span>:</span></span><br><span class="line">        print(<span class="string">"in test_in 函数, number_in is %d"</span> % number_in)</span><br><span class="line">        <span class="keyword">return</span> number+number_in</span><br><span class="line">    <span class="comment"># 其实这里返回的就是闭包的结果</span></span><br><span class="line">    <span class="keyword">return</span> test_in</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 给test函数赋值，这个20就是给参数number</span></span><br><span class="line">ret = test(<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意这里的100其实给参数number_in</span></span><br><span class="line">print(ret(<span class="number">100</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#注 意这里的200其实给参数number_in</span></span><br><span class="line">print(ret(<span class="number">200</span>))</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">in</span> test_in 函数, number_in <span class="keyword">is</span> <span class="number">100</span></span><br><span class="line"><span class="number">120</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">in</span> test_in 函数, number_in <span class="keyword">is</span> <span class="number">200</span></span><br><span class="line"><span class="number">220</span></span><br></pre></td></tr></table></figure><h3 id="3-看一个闭包的实际例子："><a href="#3-看一个闭包的实际例子：" class="headerlink" title="3. 看一个闭包的实际例子："></a>3. 看一个闭包的实际例子：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">line_conf</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">line</span><span class="params">(x)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> a*x + b</span><br><span class="line">    <span class="keyword">return</span> line</span><br><span class="line"></span><br><span class="line">line1 = line_conf(<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">line2 = line_conf(<span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">print(line1(<span class="number">5</span>))</span><br><span class="line">print(line2(<span class="number">5</span>))</span><br></pre></td></tr></table></figure><p>这个例子中，函数line与变量a,b构成闭包。在创建闭包的时候，我们通过line_conf的参数a,b说明了这两个变量的取值，这样，我们就确定了函数的最终形式(y = x + 1和y = 4x + 5)。我们只需要变换参数a,b，就可以获得不同的直线表达函数。由此，我们可以看到，闭包也具有提高代码可复用性的作用。</p><p>如果没有闭包，我们需要每次创建直线函数的时候同时说明a,b,x。这样，我们就需要更多的参数传递，也减少了代码的可移植性。</p><p>注意点:</p><p>由于闭包引用了外部函数的局部变量，则外部函数的局部变量没有及时释放，消耗内存</p><h3 id="4-修改外部函数中的变量"><a href="#4-修改外部函数中的变量" class="headerlink" title="4. 修改外部函数中的变量"></a>4. 修改外部函数中的变量</h3><h4 id="python3的方法"><a href="#python3的方法" class="headerlink" title="python3的方法"></a>python3的方法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">counter</span><span class="params">(start=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">incr</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">nonlocal</span> start</span><br><span class="line">        start += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> start</span><br><span class="line">    <span class="keyword">return</span> incr</span><br><span class="line"></span><br><span class="line">c1 = counter(<span class="number">5</span>)</span><br><span class="line">print(c1())</span><br><span class="line">print(c1())</span><br><span class="line"></span><br><span class="line">c2 = counter(<span class="number">50</span>)</span><br><span class="line">print(c2())</span><br><span class="line">print(c2())</span><br><span class="line"></span><br><span class="line">print(c1())</span><br><span class="line">print(c1())</span><br><span class="line"></span><br><span class="line">print(c2())</span><br><span class="line">print(c2())</span><br></pre></td></tr></table></figure><h4 id="python2的方法"><a href="#python2的方法" class="headerlink" title="python2的方法"></a>python2的方法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">counter</span><span class="params">(start=<span class="number">0</span>)</span>:</span></span><br><span class="line">    count=[start]</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">incr</span><span class="params">()</span>:</span></span><br><span class="line">        count[<span class="number">0</span>] += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> count[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">return</span> incr</span><br><span class="line"></span><br><span class="line">c1 = closeure.counter(<span class="number">5</span>)</span><br><span class="line">print(c1())  <span class="comment"># 6</span></span><br><span class="line">print(c1())  <span class="comment"># 7</span></span><br><span class="line">c2 = closeure.counter(<span class="number">100</span>)</span><br><span class="line">print(c2())  <span class="comment"># 101</span></span><br><span class="line">print(c2())  <span class="comment"># 102</span></span><br></pre></td></tr></table></figure><h2 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h2><p>装饰器是程序开发中经常会用到的一个功能，用好了装饰器，开发效率如虎添翼，所以这也是Python面试中必问的问题，但对于好多初次接触这个知识的人来讲，这个功能有点绕，自学时直接绕过去了，然后面试问到了就挂了，因为装饰器是程序开发的基础知识，这个都不会，别跟人家说你会Python, 看了下面的文章，保证你学会装饰器。</p><h3 id="1、先明白这段代码"><a href="#1、先明白这段代码" class="headerlink" title="1、先明白这段代码"></a>1、先明白这段代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#### 第一波 ####</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'foo'</span>)</span><br><span class="line"></span><br><span class="line">foo  <span class="comment"># 表示是函数</span></span><br><span class="line">foo()  <span class="comment"># 表示执行foo函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#### 第二波 ####</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'foo'</span>)</span><br><span class="line"></span><br><span class="line">foo = <span class="keyword">lambda</span> x: x + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">foo()  <span class="comment"># 执行lambda表达式，而不再是原来的foo函数，因为foo这个名字被重新指向了另外一个匿名函数</span></span><br></pre></td></tr></table></figure><p>函数名仅仅是个变量，只不过指向了定义的函数而已，所以才能通过 函数名()调用，如果 函数名=xxx被修改了，那么当在执行 函数名()时，调用的就不知之前的那个函数了</p><h3 id="2、需求来了"><a href="#2、需求来了" class="headerlink" title="2、需求来了"></a>2、需求来了</h3><p>初创公司有N个业务部门，基础平台部门负责提供底层的功能，如：数据库操作、redis调用、监控API等功能。业务部门使用基础功能时，只需调用基础平台提供的功能即可。如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">############### 基础平台提供的功能如下 ###############</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'f1'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'f2'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f3</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'f3'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f4</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'f4'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">############### 业务部门A 调用基础平台提供的功能 ###############</span></span><br><span class="line"></span><br><span class="line">f1()</span><br><span class="line">f2()</span><br><span class="line">f3()</span><br><span class="line">f4()</span><br><span class="line"></span><br><span class="line"><span class="comment">############### 业务部门B 调用基础平台提供的功能 ###############</span></span><br><span class="line"></span><br><span class="line">f1()</span><br><span class="line">f2()</span><br><span class="line">f3()</span><br><span class="line">f4()</span><br></pre></td></tr></table></figure><p>目前公司有条不紊的进行着，但是，以前基础平台的开发人员在写代码时候没有关注验证相关的问题，即：基础平台的提供的功能可以被任何人使用。现在需要对基础平台的所有功能进行重构，为平台提供的所有功能添加验证机制，即：执行功能前，先进行验证。</p><h4 id="老大把工作交给-Low-B，他是这么做的："><a href="#老大把工作交给-Low-B，他是这么做的：" class="headerlink" title="老大把工作交给 Low B，他是这么做的："></a>老大把工作交给 Low B，他是这么做的：</h4><blockquote><p>跟每个业务部门交涉，每个业务部门自己写代码，调用基础平台的功能之前先验证。诶，这样一来基础平台就不需要做任何修改了。太棒了，有充足的时间泡妹子…</p></blockquote><p>当天Low B 被开除了…</p><h4 id="老大把工作交给-Low-BB，他是这么做的："><a href="#老大把工作交给-Low-BB，他是这么做的：" class="headerlink" title="老大把工作交给 Low BB，他是这么做的："></a>老大把工作交给 Low BB，他是这么做的：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">############### 基础平台提供的功能如下 ############### </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 验证1</span></span><br><span class="line">    <span class="comment"># 验证2</span></span><br><span class="line">    <span class="comment"># 验证3</span></span><br><span class="line">    print(<span class="string">'f1'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 验证1</span></span><br><span class="line">    <span class="comment"># 验证2</span></span><br><span class="line">    <span class="comment"># 验证3</span></span><br><span class="line">    print(<span class="string">'f2'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f3</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 验证1</span></span><br><span class="line">    <span class="comment"># 验证2</span></span><br><span class="line">    <span class="comment"># 验证3</span></span><br><span class="line">    print(<span class="string">'f3'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f4</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 验证1</span></span><br><span class="line">    <span class="comment"># 验证2</span></span><br><span class="line">    <span class="comment"># 验证3</span></span><br><span class="line">    print(<span class="string">'f4'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">############### 业务部门不变 ############### </span></span><br><span class="line"><span class="comment">### 业务部门A 调用基础平台提供的功能### </span></span><br><span class="line"></span><br><span class="line">f1()</span><br><span class="line">f2()</span><br><span class="line">f3()</span><br><span class="line">f4()</span><br><span class="line"></span><br><span class="line"><span class="comment">### 业务部门B 调用基础平台提供的功能 ### </span></span><br><span class="line"></span><br><span class="line">f1()</span><br><span class="line">f2()</span><br><span class="line">f3()</span><br><span class="line">f4()</span><br></pre></td></tr></table></figure><p>过了一周 Low BB 被开除了…</p><h4 id="老大把工作交给-Low-BBB，他是这么做的："><a href="#老大把工作交给-Low-BBB，他是这么做的：" class="headerlink" title="老大把工作交给 Low BBB，他是这么做的："></a>老大把工作交给 Low BBB，他是这么做的：</h4><blockquote><p>只对基础平台的代码进行重构，其他业务部门无需做任何修改</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">############### 基础平台提供的功能如下 ############### </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_login</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 验证1</span></span><br><span class="line">    <span class="comment"># 验证2</span></span><br><span class="line">    <span class="comment"># 验证3</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    check_login()</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'f1'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    check_login()</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'f2'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f3</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    check_login()</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'f3'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f4</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    check_login()</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'f4'</span>)</span><br></pre></td></tr></table></figure><p>老大看了下Low BBB 的实现，嘴角漏出了一丝的欣慰的笑，语重心长的跟Low BBB聊了个天：</p><h5 id="老大说："><a href="#老大说：" class="headerlink" title="老大说："></a>老大说：</h5><p>写代码要遵循<code>开放封闭</code>原则，虽然在这个原则是用的面向对象开发，但是也适用于函数式编程，简单来说，它规定已经实现的功能代码不允许被修改，但可以被扩展，即：</p><ul><li>封闭：已实现的功能代码块</li><li>开放：对扩展开发</li></ul><p>如果将开放封闭原则应用在上述需求中，那么就不允许在函数 f1 、f2、f3、f4的内部进行修改代码，老板就给了Low BBB一个实现方案：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">w1</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="comment"># 验证1</span></span><br><span class="line">        <span class="comment"># 验证2</span></span><br><span class="line">        <span class="comment"># 验证3</span></span><br><span class="line">        func()</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="meta">@w1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'f1'</span>)</span><br><span class="line"><span class="meta">@w1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'f2'</span>)</span><br><span class="line"><span class="meta">@w1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f3</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'f3'</span>)</span><br><span class="line"><span class="meta">@w1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f4</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'f4'</span>)</span><br></pre></td></tr></table></figure><p>对于上述代码，也是仅仅对基础平台的代码进行修改，就可以实现在其他人调用函数 f1 f2 f3 f4 之前都进行【验证】操作，并且其他业务部门无需做任何操作。</p><p>Low BBB心惊胆战的问了下，这段代码的内部执行原理是什么呢？</p><p>老大正要生气，突然Low BBB的手机掉到地上，恰巧屏保就是Low BBB的女友照片，老大一看一紧一抖，喜笑颜开，决定和Low BBB交个好朋友。</p><p>详细的开始讲解了：</p><p>单独以f1为例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">w1</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="comment"># 验证1</span></span><br><span class="line">        <span class="comment"># 验证2</span></span><br><span class="line">        <span class="comment"># 验证3</span></span><br><span class="line">        func()</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="meta">@w1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'f1'</span>)</span><br></pre></td></tr></table></figure><p>python解释器就会从上到下解释代码，步骤如下：</p><ol><li>def w1(func): ==&gt;将w1函数加载到内存</li><li>@w1</li></ol><p>没错， 从表面上看解释器仅仅会解释这两句代码，因为函数在 没有被调用之前其内部代码不会被执行。</p><p>从表面上看解释器着实会执行这两句，但是 @w1 这一句代码里却有大文章， @函数名 是python的一种语法糖。</p><h3 id="上例-w1内部会执行一下操作："><a href="#上例-w1内部会执行一下操作：" class="headerlink" title="上例@w1内部会执行一下操作："></a>上例@w1内部会执行一下操作：</h3><h4 id="执行w1函数"><a href="#执行w1函数" class="headerlink" title="执行w1函数"></a>执行w1函数</h4><blockquote><p>执行w1函数 ，并将 @w1 下面的函数作为w1函数的参数，即：<strong>@w1 等价于 w1(f1)</strong> 所以，内部就会去执行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;   <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span> </span><br><span class="line">&gt;       <span class="comment">#验证 1</span></span><br><span class="line">&gt;       <span class="comment">#验证 2</span></span><br><span class="line">&gt;       <span class="comment">#验证 3</span></span><br><span class="line">&gt;       f1()    <span class="comment"># func是参数，此时 func 等于 f1 </span></span><br><span class="line">&gt;   <span class="keyword">return</span> inner<span class="comment"># 返回的 inner，inner代表的是函数，非执行函数 ,其实就是将原来的 f1 函数塞进另外一个函数中</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h4 id="w1的返回值"><a href="#w1的返回值" class="headerlink" title="w1的返回值"></a>w1的返回值</h4><blockquote><p>将执行完的w1函数返回值 赋值 给@w1下面的函数的函数名f1 即将w1的返回值再重新赋值给 f1，即：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;   新f1 = <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span> </span><br><span class="line">&gt;               <span class="comment">#验证 1</span></span><br><span class="line">&gt;               <span class="comment">#验证 2</span></span><br><span class="line">&gt;               <span class="comment">#验证 3</span></span><br><span class="line">&gt;               原来f1()</span><br><span class="line">&gt;           <span class="keyword">return</span> inner</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>所以，以后业务部门想要执行 f1 函数时，就会执行 新f1 函数，在新f1 函数内部先执行验证，再执行原来的f1函数，然后将原来f1 函数的返回值返回给了业务调用者。</p></blockquote><p>如此一来， 即执行了验证的功能，又执行了原来f1函数的内容，并将原f1函数返回值 返回给业务调用着</p><p>Low BBB 你明白了吗？要是没明白的话，我晚上去你家帮你解决吧！！！</p><h3 id="3-再议装饰器"><a href="#3-再议装饰器" class="headerlink" title="3. 再议装饰器"></a>3. 再议装饰器</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义函数：完成包裹数据</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">makeBold</span><span class="params">(fn)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapped</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"&lt;b&gt;"</span> + fn() + <span class="string">"&lt;/b&gt;"</span></span><br><span class="line">    <span class="keyword">return</span> wrapped</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义函数：完成包裹数据</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">makeItalic</span><span class="params">(fn)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapped</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"&lt;i&gt;"</span> + fn() + <span class="string">"&lt;/i&gt;"</span></span><br><span class="line">    <span class="keyword">return</span> wrapped</span><br><span class="line"></span><br><span class="line"><span class="meta">@makeBold</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"hello world-1"</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@makeItalic</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test2</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"hello world-2"</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@makeBold</span></span><br><span class="line"><span class="meta">@makeItalic</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test3</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"hello world-3"</span></span><br><span class="line"></span><br><span class="line">print(test1())</span><br><span class="line">print(test2())</span><br><span class="line">print(test3())</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span>hello world-1<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span>&gt;</span>hello world-2<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span><span class="tag">&lt;<span class="name">i</span>&gt;</span>hello world-3<span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-装饰器-decorator-功能"><a href="#4-装饰器-decorator-功能" class="headerlink" title="4. 装饰器(decorator)功能"></a>4. 装饰器(decorator)功能</h3><ol><li>引入日志</li><li>函数执行时间统计</li><li>执行函数前预备处理</li><li>执行函数后清理功能</li><li>权限校验等场景</li><li>缓存</li></ol><h3 id="5-装饰器示例"><a href="#5-装饰器示例" class="headerlink" title="5. 装饰器示例"></a>5. 装饰器示例</h3><h3 id="例1-无参数的函数"><a href="#例1-无参数的函数" class="headerlink" title="例1:无参数的函数"></a>例1:无参数的函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> ctime, sleep</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timefun</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapped_func</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">"%s called at %s"</span> % (func.__name__, ctime()))</span><br><span class="line">        func()</span><br><span class="line">    <span class="keyword">return</span> wrapped_func</span><br><span class="line"></span><br><span class="line"><span class="meta">@timefun</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"I am foo"</span>)</span><br><span class="line"></span><br><span class="line">foo()</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line">foo()</span><br></pre></td></tr></table></figure><p>上面代码理解装饰器执行行为可理解成</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">foo = timefun(foo)</span><br><span class="line"># foo先作为参数赋值给func后,foo接收指向timefun返回的wrapped_func</span><br><span class="line">foo()</span><br><span class="line"># 调用foo(),即等价调用wrapped_func()</span><br><span class="line"># 内部函数wrapped_func被引用，所以外部函数的func变量(自由变量)并没有释放</span><br><span class="line"># func里保存的是原foo函数对象</span><br></pre></td></tr></table></figure><h3 id="例2-被装饰的函数有参数"><a href="#例2-被装饰的函数有参数" class="headerlink" title="例2:被装饰的函数有参数"></a>例2:被装饰的函数有参数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> ctime, sleep</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timefun</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapped_func</span><span class="params">(a, b)</span>:</span></span><br><span class="line">        print(<span class="string">"%s called at %s"</span> % (func.__name__, ctime()))</span><br><span class="line">        print(a, b)</span><br><span class="line">        func(a, b)</span><br><span class="line">    <span class="keyword">return</span> wrapped_func</span><br><span class="line"></span><br><span class="line"><span class="meta">@timefun</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    print(a+b)</span><br><span class="line"></span><br><span class="line">foo(<span class="number">3</span>,<span class="number">5</span>)</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line">foo(<span class="number">2</span>,<span class="number">4</span>)</span><br></pre></td></tr></table></figure><h3 id="例3-被装饰的函数有不定长参数"><a href="#例3-被装饰的函数有不定长参数" class="headerlink" title="例3:被装饰的函数有不定长参数"></a>例3:被装饰的函数有不定长参数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> ctime, sleep</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timefun</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapped_func</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        print(<span class="string">"%s called at %s"</span>%(func.__name__, ctime()))</span><br><span class="line">        func(*args, **kwargs)</span><br><span class="line">    <span class="keyword">return</span> wrapped_func</span><br><span class="line"></span><br><span class="line"><span class="meta">@timefun</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(a, b, c)</span>:</span></span><br><span class="line">    print(a+b+c)</span><br><span class="line"></span><br><span class="line">foo(<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>)</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line">foo(<span class="number">2</span>,<span class="number">4</span>,<span class="number">9</span>)</span><br></pre></td></tr></table></figure><h3 id="例4-装饰器中的return"><a href="#例4-装饰器中的return" class="headerlink" title="例4:装饰器中的return"></a>例4:装饰器中的return</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> ctime, sleep</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timefun</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapped_func</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">"%s called at %s"</span> % (func.__name__, ctime()))</span><br><span class="line">        func()</span><br><span class="line">    <span class="keyword">return</span> wrapped_func</span><br><span class="line"></span><br><span class="line"><span class="meta">@timefun</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"I am foo"</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@timefun</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getInfo</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'----hahah---'</span></span><br><span class="line"></span><br><span class="line">foo()</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line">foo()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(getInfo())</span><br></pre></td></tr></table></figure><p>执行结果:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">foo called at Fri Nov  <span class="number">4</span> <span class="number">21</span>:<span class="number">55</span>:<span class="number">35</span> <span class="number">2016</span></span><br><span class="line">I am foo</span><br><span class="line">foo called at Fri Nov  <span class="number">4</span> <span class="number">21</span>:<span class="number">55</span>:<span class="number">37</span> <span class="number">2016</span></span><br><span class="line">I am foo</span><br><span class="line">getInfo called at Fri Nov  <span class="number">4</span> <span class="number">21</span>:<span class="number">55</span>:<span class="number">37</span> <span class="number">2016</span></span><br><span class="line"><span class="literal">None</span></span><br></pre></td></tr></table></figure><p>如果修改装饰器为<code>return func()</code>，则运行结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">foo called at Fri Nov  <span class="number">4</span> <span class="number">21</span>:<span class="number">55</span>:<span class="number">57</span> <span class="number">2016</span></span><br><span class="line">I am foo</span><br><span class="line">foo called at Fri Nov  <span class="number">4</span> <span class="number">21</span>:<span class="number">55</span>:<span class="number">59</span> <span class="number">2016</span></span><br><span class="line">I am foo</span><br><span class="line">getInfo called at Fri Nov  <span class="number">4</span> <span class="number">21</span>:<span class="number">55</span>:<span class="number">59</span> <span class="number">2016</span></span><br><span class="line">----hahah---</span><br></pre></td></tr></table></figure><h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><ul><li>一般情况下为了让装饰器更通用，可以有return</li></ul><h3 id="例5-装饰器带参数-在原有装饰器的基础上，设置外部变量"><a href="#例5-装饰器带参数-在原有装饰器的基础上，设置外部变量" class="headerlink" title="例5:装饰器带参数,在原有装饰器的基础上，设置外部变量"></a>例5:装饰器带参数,在原有装饰器的基础上，设置外部变量</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#decorator2.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> ctime, sleep</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timefun_arg</span><span class="params">(pre=<span class="string">"hello"</span>)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">timefun</span><span class="params">(func)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapped_func</span><span class="params">()</span>:</span></span><br><span class="line">            print(<span class="string">"%s called at %s %s"</span> % (func.__name__, ctime(), pre))</span><br><span class="line">            <span class="keyword">return</span> func()</span><br><span class="line">        <span class="keyword">return</span> wrapped_func</span><br><span class="line">    <span class="keyword">return</span> timefun</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下面的装饰过程</span></span><br><span class="line"><span class="comment"># 1. 调用timefun_arg("itcast")</span></span><br><span class="line"><span class="comment"># 2. 将步骤1得到的返回值，即time_fun返回， 然后time_fun(foo)</span></span><br><span class="line"><span class="comment"># 3. 将time_fun(foo)的结果返回，即wrapped_func</span></span><br><span class="line"><span class="comment"># 4. 让foo = wrapped_fun，即foo现在指向wrapped_func</span></span><br><span class="line"><span class="meta">@timefun_arg("itcast")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"I am foo"</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@timefun_arg("python")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">too</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"I am too"</span>)</span><br><span class="line"></span><br><span class="line">foo()</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line">foo()</span><br><span class="line"></span><br><span class="line">too()</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line">too()</span><br></pre></td></tr></table></figure><p>可以理解为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">foo()==timefun_arg(&quot;itcast&quot;)(foo)()</span><br></pre></td></tr></table></figure><h3 id="例6：类装饰器（扩展，非重点）"><a href="#例6：类装饰器（扩展，非重点）" class="headerlink" title="例6：类装饰器（扩展，非重点）"></a>例6：类装饰器（扩展，非重点）</h3><p>装饰器函数其实是这样一个接口约束，它必须接受一个callable对象作为参数，然后返回一个callable对象。在Python中一般callable对象都是函数，但也有例外。只要某个对象重写了 <code>__call__()</code> 方法，那么这个对象就是callable的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'call me!'</span>)</span><br><span class="line"></span><br><span class="line">t = Test()</span><br><span class="line">t()  <span class="comment"># call me</span></span><br></pre></td></tr></table></figure><p>类装饰器demo</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, func)</span>:</span></span><br><span class="line">        print(<span class="string">"---初始化---"</span>)</span><br><span class="line">        print(<span class="string">"func name is %s"</span>%func.__name__)</span><br><span class="line">        self.__func = func</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"---装饰器中的功能---"</span>)</span><br><span class="line">        self.__func()</span><br><span class="line"><span class="comment">#说明：</span></span><br><span class="line"><span class="comment">#1. 当用Test来装作装饰器对test函数进行装饰的时候，首先会创建Test的实例对象</span></span><br><span class="line"><span class="comment">#   并且会把test这个函数名当做参数传递到__init__方法中</span></span><br><span class="line"><span class="comment">#   即在__init__方法中的属性__func指向了test指向的函数</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#2. test指向了用Test创建出来的实例对象</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#3. 当在使用test()进行调用时，就相当于让这个对象()，因此会调用这个对象的__call__方法</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#4. 为了能够在__call__方法中调用原来test指向的函数体，所以在__init__方法中就需要一个实例属性来保存这个函数体的引用</span></span><br><span class="line"><span class="comment">#   所以才有了self.__func = func这句代码，从而在调用__call__方法中能够调用到test之前的函数体</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"----test---"</span>)</span><br><span class="line">test()</span><br><span class="line">showpy()<span class="comment">#如果把这句话注释，重新运行程序，依然会看到"--初始化--"</span></span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">---初始化---</span><br><span class="line">func name <span class="keyword">is</span> test</span><br><span class="line">---装饰器中的功能---</span><br><span class="line">----test---</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Dec 31 2019 13:39:53 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;闭包&quot;&gt;&lt;a href=&quot;#闭包&quot; class=&quot;headerlink&quot; title=&quot;闭包&quot;&gt;&lt;/a&gt;闭包&lt;/h2&gt;&lt;h3 id=&quot;1-函数引用&quot;&gt;&lt;a href=&quot;#1-函数引用&quot; class=&quot;headerlink&quot; title=&quot;1. 函数引用&quot;&gt;&lt;/a&gt;1. 函数引用&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;test1&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(&lt;span class=&quot;string&quot;&gt;&quot;--- in test1 func----&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 调用函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;test1()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 引用函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ret = test1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(id(ret))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(id(test1))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#通过引用调用函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ret()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;运行结果:&lt;/p&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;--- &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; test1 func----&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;140212571149040&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;140212571149040&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--- &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; test1 func----&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Python" scheme="https://yongnights.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://yongnights.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>python_正则表达式</title>
    <link href="https://yongnights.github.io/2019/12/31/python_%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>https://yongnights.github.io/2019/12/31/python_正则表达式/</id>
    <published>2019-12-31T04:00:48.268Z</published>
    <updated>2019-12-31T04:00:48.268Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Dec 31 2019 13:39:53 GMT+0800 (GMT+08:00) --><h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><h2 id="re模块操作"><a href="#re模块操作" class="headerlink" title="re模块操作"></a>re模块操作</h2><p>在Python中需要通过正则表达式对字符串进行匹配的时候，可以使用一个模块，名字为re</p><h3 id="1-re模块的使用过程"><a href="#1-re模块的使用过程" class="headerlink" title="1. re模块的使用过程"></a>1. re模块的使用过程</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入re模块</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用match方法进行匹配操作</span></span><br><span class="line">result = re.match(正则表达式,要匹配的字符串)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果上一步匹配到数据的话，可以使用group方法来提取数据</span></span><br><span class="line">result.group()</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="2-re模块示例-匹配以itcast开头的语句"><a href="#2-re模块示例-匹配以itcast开头的语句" class="headerlink" title="2. re模块示例(匹配以itcast开头的语句)"></a>2. re模块示例(匹配以itcast开头的语句)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">result = re.match(<span class="string">"itcast"</span>,<span class="string">"itcast.cn"</span>)</span><br><span class="line"></span><br><span class="line">result.group()</span><br></pre></td></tr></table></figure><p>运行结果为：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">itcast</span><br></pre></td></tr></table></figure><p></p><h3 id="3-说明"><a href="#3-说明" class="headerlink" title="3. 说明"></a>3. 说明</h3><ul><li>re.match() 能够匹配出以xxx开头的字符串</li></ul><h2 id="匹配单个字符"><a href="#匹配单个字符" class="headerlink" title="匹配单个字符"></a>匹配单个字符</h2><table><thead><tr><th>字符</th><th>功能</th></tr></thead><tbody><tr><td>.</td><td>匹配任意1个字符（除了\n）</td></tr><tr><td>[ ]</td><td>匹配[ ]中列举的字符</td></tr><tr><td>\d</td><td>匹配数字，即0-9</td></tr><tr><td>\D</td><td>匹配非数字，即不是数字</td></tr><tr><td>\s</td><td>匹配空白，即 空格，tab键</td></tr><tr><td>\S</td><td>匹配非空白</td></tr><tr><td>\w</td><td>匹配单词字符，即a-z、A-Z、0-9、_</td></tr><tr><td>\W</td><td>匹配非单词字符</td></tr></tbody></table><p>示例1： .<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">ret = re.match(<span class="string">"."</span>,<span class="string">"M"</span>)</span><br><span class="line">print(ret.group())</span><br><span class="line"></span><br><span class="line">ret = re.match(<span class="string">"t.o"</span>,<span class="string">"too"</span>)</span><br><span class="line">print(ret.group())</span><br><span class="line"></span><br><span class="line">ret = re.match(<span class="string">"t.o"</span>,<span class="string">"two"</span>)</span><br><span class="line">print(ret.group())</span><br></pre></td></tr></table></figure><p></p><p>运行结果为：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">M</span><br><span class="line">too</span><br><span class="line">two</span><br></pre></td></tr></table></figure><p></p><p>示例2：[ ]<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果hello的首字符小写，那么正则表达式需要小写的h</span></span><br><span class="line">ret = re.match(<span class="string">"h"</span>,<span class="string">"hello Python"</span>) </span><br><span class="line">print(ret.group())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果hello的首字符大写，那么正则表达式需要大写的H</span></span><br><span class="line">ret = re.match(<span class="string">"H"</span>,<span class="string">"Hello Python"</span>) </span><br><span class="line">print(ret.group())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 大小写h都可以的情况</span></span><br><span class="line">ret = re.match(<span class="string">"[hH]"</span>,<span class="string">"hello Python"</span>)</span><br><span class="line">print(ret.group())</span><br><span class="line">ret = re.match(<span class="string">"[hH]"</span>,<span class="string">"Hello Python"</span>)</span><br><span class="line">print(ret.group())</span><br><span class="line">ret = re.match(<span class="string">"[hH]ello Python"</span>,<span class="string">"Hello Python"</span>)</span><br><span class="line">print(ret.group())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配0到9第一种写法</span></span><br><span class="line">ret = re.match(<span class="string">"[0123456789]Hello Python"</span>,<span class="string">"7Hello Python"</span>)</span><br><span class="line">print(ret.group())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配0到9第二种写法</span></span><br><span class="line">ret = re.match(<span class="string">"[0-9]Hello Python"</span>,<span class="string">"7Hello Python"</span>)</span><br><span class="line">print(ret.group())</span><br><span class="line"></span><br><span class="line">ret = re.match(<span class="string">"[0-35-9]Hello Python"</span>,<span class="string">"7Hello Python"</span>)</span><br><span class="line">print(ret.group())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下面这个正则不能够匹配到数字4，因此ret为None</span></span><br><span class="line">ret = re.match(<span class="string">"[0-35-9]Hello Python"</span>,<span class="string">"4Hello Python"</span>)</span><br><span class="line"><span class="comment"># print(ret.group())</span></span><br></pre></td></tr></table></figure><p></p><p>运行结果为：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">h</span><br><span class="line">H</span><br><span class="line">h</span><br><span class="line">H</span><br><span class="line">Hello Python</span><br><span class="line">7Hello Python</span><br><span class="line">7Hello Python</span><br><span class="line">7Hello Python</span><br></pre></td></tr></table></figure><p></p><p>示例3：\d<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># 普通的匹配方式</span></span><br><span class="line">ret = re.match(<span class="string">"嫦娥1号"</span>,<span class="string">"嫦娥1号发射成功"</span>) </span><br><span class="line">print(ret.group())</span><br><span class="line"></span><br><span class="line">ret = re.match(<span class="string">"嫦娥2号"</span>,<span class="string">"嫦娥2号发射成功"</span>) </span><br><span class="line">print(ret.group())</span><br><span class="line"></span><br><span class="line">ret = re.match(<span class="string">"嫦娥3号"</span>,<span class="string">"嫦娥3号发射成功"</span>) </span><br><span class="line">print(ret.group())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用\d进行匹配</span></span><br><span class="line">ret = re.match(<span class="string">"嫦娥\d号"</span>,<span class="string">"嫦娥1号发射成功"</span>) </span><br><span class="line">print(ret.group())</span><br><span class="line"></span><br><span class="line">ret = re.match(<span class="string">"嫦娥\d号"</span>,<span class="string">"嫦娥2号发射成功"</span>) </span><br><span class="line">print(ret.group())</span><br><span class="line"></span><br><span class="line">ret = re.match(<span class="string">"嫦娥\d号"</span>,<span class="string">"嫦娥3号发射成功"</span>) </span><br><span class="line">print(ret.group())</span><br></pre></td></tr></table></figure><p></p><p>运行结果为：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">嫦娥1号</span><br><span class="line">嫦娥2号</span><br><span class="line">嫦娥3号</span><br><span class="line">嫦娥1号</span><br><span class="line">嫦娥2号</span><br><span class="line">嫦娥3号n</span><br></pre></td></tr></table></figure><p></p><h2 id="匹配多个字符"><a href="#匹配多个字符" class="headerlink" title="匹配多个字符"></a>匹配多个字符</h2><table><thead><tr><th>字符</th><th>功能</th></tr></thead><tbody><tr><td>*</td><td>匹配前一个字符出现0次或者无限次，即可有可无</td></tr><tr><td>+</td><td>匹配前一个字符出现1次或者无限次，即至少有1次</td></tr><tr><td>?</td><td>匹配前一个字符出现1次或者0次，即要么有1次，要么没有</td></tr><tr><td>{m}</td><td>匹配前一个字符出现m次</td></tr><tr><td>{m,n}</td><td>匹配前一个字符出现从m到n次</td></tr></tbody></table><h3 id="示例1："><a href="#示例1：" class="headerlink" title="示例1：*"></a>示例1：*</h3><p>需求：匹配出，一个字符串第一个字母为大小字符，后面都是小写字母并且这些小写字母可有可无</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">ret = re.match(<span class="string">"[A-Z][a-z]*"</span>,<span class="string">"M"</span>)</span><br><span class="line">print(ret.group())</span><br><span class="line"></span><br><span class="line">ret = re.match(<span class="string">"[A-Z][a-z]*"</span>,<span class="string">"MnnM"</span>)</span><br><span class="line">print(ret.group())</span><br><span class="line"></span><br><span class="line">ret = re.match(<span class="string">"[A-Z][a-z]*"</span>,<span class="string">"Aabcdef"</span>)</span><br><span class="line">print(ret.group())</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">M</span><br><span class="line">Mnn</span><br><span class="line">Aabcdef</span><br></pre></td></tr></table></figure><h3 id="示例2："><a href="#示例2：" class="headerlink" title="示例2：+"></a>示例2：+</h3><p>需求：匹配出，变量名是否有效</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">names = [<span class="string">"name1"</span>, <span class="string">"_name"</span>, <span class="string">"2_name"</span>, <span class="string">"__name__"</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> names:</span><br><span class="line">    ret = re.match(<span class="string">"[a-zA-Z_]+[\w]*"</span>,name)</span><br><span class="line">    <span class="keyword">if</span> ret:</span><br><span class="line">        print(<span class="string">"变量名 %s 符合要求"</span> % ret.group())</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"变量名 %s 非法"</span> % name)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">变量名 name1 符合要求</span><br><span class="line">变量名 _name 符合要求</span><br><span class="line">变量名 <span class="number">2</span>_name 非法</span><br><span class="line">变量名 __name__ 符合要求</span><br></pre></td></tr></table></figure><h3 id="示例3："><a href="#示例3：" class="headerlink" title="示例3：?"></a>示例3：?</h3><p>需求：匹配出，0到99之间的数字</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">ret = re.match(<span class="string">"[1-9]?[0-9]"</span>,<span class="string">"7"</span>)</span><br><span class="line">print(ret.group())</span><br><span class="line"></span><br><span class="line">ret = re.match(<span class="string">"[1-9]?\d"</span>,<span class="string">"33"</span>)</span><br><span class="line">print(ret.group())</span><br><span class="line"></span><br><span class="line">ret = re.match(<span class="string">"[1-9]?\d"</span>,<span class="string">"09"</span>)</span><br><span class="line">print(ret.group())</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">33</span></span><br><span class="line"><span class="number">0</span> <span class="comment"># 这个结果并不是想要的，利用$才能解决</span></span><br></pre></td></tr></table></figure><h3 id="示例4：-m"><a href="#示例4：-m" class="headerlink" title="示例4：{m}"></a>示例4：{m}</h3><p>需求：匹配出，8到20位的密码，可以是大小写英文字母、数字、下划线</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">ret = re.match(<span class="string">"[a-zA-Z0-9_]&#123;6&#125;"</span>,<span class="string">"12a3g45678"</span>)</span><br><span class="line">print(ret.group())</span><br><span class="line"></span><br><span class="line">ret = re.match(<span class="string">"[a-zA-Z0-9_]&#123;8,20&#125;"</span>,<span class="string">"1ad12f23s34455ff66"</span>)</span><br><span class="line">print(ret.group())</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">12</span>a3g4</span><br><span class="line"><span class="number">1</span>ad12f23s34455ff66</span><br></pre></td></tr></table></figure><h2 id="匹配开头结尾"><a href="#匹配开头结尾" class="headerlink" title="匹配开头结尾"></a>匹配开头结尾</h2><table><thead><tr><th>字符</th><th>功能</th></tr></thead><tbody><tr><td>^</td><td>匹配字符串开头</td></tr><tr><td>$</td><td>匹配字符串结尾</td></tr></tbody></table><h3 id="示例1：-1"><a href="#示例1：-1" class="headerlink" title="示例1：$"></a>示例1：$</h3><p>需求：匹配163.com的邮箱地址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">email_list = [<span class="string">"xiaoWang@163.com"</span>, <span class="string">"xiaoWang@163.comheihei"</span>, <span class="string">".com.xiaowang@qq.com"</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> email <span class="keyword">in</span> email_list:</span><br><span class="line">    ret = re.match(<span class="string">"[\w]&#123;4,20&#125;@163\.com"</span>, email)</span><br><span class="line">    <span class="keyword">if</span> ret:</span><br><span class="line">        print(<span class="string">"%s 是符合规定的邮件地址,匹配后的结果是:%s"</span> % (email, ret.group()))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"%s 不符合要求"</span> % email)</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">xiaoWang@<span class="number">163.</span>com 是符合规定的邮件地址,匹配后的结果是:xiaoWang@<span class="number">163.</span>com</span><br><span class="line">xiaoWang@<span class="number">163.</span>comheihei 是符合规定的邮件地址,匹配后的结果是:xiaoWang@<span class="number">163.</span>com</span><br><span class="line">.com.xiaowang@qq.com 不符合要求</span><br></pre></td></tr></table></figure><h4 id="完善后"><a href="#完善后" class="headerlink" title="完善后"></a>完善后</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">email_list = [<span class="string">"xiaoWang@163.com"</span>, <span class="string">"xiaoWang@163.comheihei"</span>, <span class="string">".com.xiaowang@qq.com"</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> email <span class="keyword">in</span> email_list:</span><br><span class="line">    ret = re.match(<span class="string">"[\w]&#123;4,20&#125;@163\.com$"</span>, email)</span><br><span class="line">    <span class="keyword">if</span> ret:</span><br><span class="line">        print(<span class="string">"%s 是符合规定的邮件地址,匹配后的结果是:%s"</span> % (email, ret.group()))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"%s 不符合要求"</span> % email)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">xiaoWang@<span class="number">163.</span>com 是符合规定的邮件地址,匹配后的结果是:xiaoWang@<span class="number">163.</span>com</span><br><span class="line">xiaoWang@<span class="number">163.</span>comheihei 不符合要求</span><br><span class="line">.com.xiaowang@qq.com 不符合要求</span><br></pre></td></tr></table></figure><h2 id="匹配分组"><a href="#匹配分组" class="headerlink" title="匹配分组"></a>匹配分组</h2><table><thead><tr><th>字符</th><th>功能</th></tr></thead><tbody><tr><td>\</td><td></td><td>匹配左右任意一个表达式</td></tr><tr><td>(ab)</td><td>将括号中字符作为一个分组</td></tr><tr><td><code>\num</code></td><td>引用分组num匹配到的字符串</td></tr><tr><td><code>(?P&lt;name&gt;)</code></td><td>分组起别名</td></tr><tr><td>(?P=name)</td><td>引用别名为name分组匹配到的字符串</td></tr></tbody></table><h3 id="示例1：-2"><a href="#示例1：-2" class="headerlink" title="示例1：|"></a>示例1：|</h3><p>需求：匹配出0-100之间的数字</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">ret = re.match(<span class="string">"[1-9]?\d"</span>,<span class="string">"8"</span>)</span><br><span class="line">print(ret.group())  <span class="comment"># 8</span></span><br><span class="line"></span><br><span class="line">ret = re.match(<span class="string">"[1-9]?\d"</span>,<span class="string">"78"</span>)</span><br><span class="line">print(ret.group())  <span class="comment"># 78</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 不正确的情况</span></span><br><span class="line">ret = re.match(<span class="string">"[1-9]?\d"</span>,<span class="string">"08"</span>)</span><br><span class="line">print(ret.group())  <span class="comment"># 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修正之后的</span></span><br><span class="line">ret = re.match(<span class="string">"[1-9]?\d$"</span>,<span class="string">"08"</span>)</span><br><span class="line"><span class="keyword">if</span> ret:</span><br><span class="line">    print(ret.group())</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"不在0-100之间"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加|</span></span><br><span class="line">ret = re.match(<span class="string">"[1-9]?\d$|100"</span>,<span class="string">"8"</span>)</span><br><span class="line">print(ret.group())  <span class="comment"># 8</span></span><br><span class="line"></span><br><span class="line">ret = re.match(<span class="string">"[1-9]?\d$|100"</span>,<span class="string">"78"</span>)</span><br><span class="line">print(ret.group())  <span class="comment"># 78</span></span><br><span class="line"></span><br><span class="line">ret = re.match(<span class="string">"[1-9]?\d$|100"</span>,<span class="string">"08"</span>)</span><br><span class="line"><span class="comment"># print(ret.group())  # 不是0-100之间</span></span><br><span class="line"></span><br><span class="line">ret = re.match(<span class="string">"[1-9]?\d$|100"</span>,<span class="string">"100"</span>)</span><br><span class="line">print(ret.group())  <span class="comment"># 100</span></span><br></pre></td></tr></table></figure><h3 id="示例2：-1"><a href="#示例2：-1" class="headerlink" title="示例2：( )"></a>示例2：( )</h3><p>需求：匹配出163、126、qq邮箱</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">ret = re.match(<span class="string">"\w&#123;4,20&#125;@163\.com"</span>, <span class="string">"test@163.com"</span>)</span><br><span class="line">print(ret.group())  <span class="comment"># test@163.com</span></span><br><span class="line"></span><br><span class="line">ret = re.match(<span class="string">"\w&#123;4,20&#125;@(163|126|qq)\.com"</span>, <span class="string">"test@126.com"</span>)</span><br><span class="line">print(ret.group())  <span class="comment"># test@126.com</span></span><br><span class="line"></span><br><span class="line">ret = re.match(<span class="string">"\w&#123;4,20&#125;@(163|126|qq)\.com"</span>, <span class="string">"test@qq.com"</span>)</span><br><span class="line">print(ret.group())  <span class="comment"># test@qq.com</span></span><br><span class="line"></span><br><span class="line">ret = re.match(<span class="string">"\w&#123;4,20&#125;@(163|126|qq)\.com"</span>, <span class="string">"test@gmail.com"</span>)</span><br><span class="line"><span class="keyword">if</span> ret:</span><br><span class="line">    print(ret.group())</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"不是163、126、qq邮箱"</span>)  <span class="comment"># 不是163、126、qq邮箱</span></span><br></pre></td></tr></table></figure><h4 id="不是以4、7结尾的手机号码-11位"><a href="#不是以4、7结尾的手机号码-11位" class="headerlink" title="不是以4、7结尾的手机号码(11位)"></a>不是以4、7结尾的手机号码(11位)</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">tels = [<span class="string">"13100001234"</span>, <span class="string">"18912344321"</span>, <span class="string">"10086"</span>, <span class="string">"18800007777"</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> tel <span class="keyword">in</span> tels:</span><br><span class="line">    ret = re.match(<span class="string">"1\d&#123;9&#125;[0-35-68-9]"</span>, tel)</span><br><span class="line">    <span class="keyword">if</span> ret:</span><br><span class="line">        print(ret.group())</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"%s 不是想要的手机号"</span> % tel)</span><br></pre></td></tr></table></figure><h4 id="提取区号和电话号码"><a href="#提取区号和电话号码" class="headerlink" title="提取区号和电话号码"></a>提取区号和电话号码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>ret = re.match(<span class="string">"([^-]*)-(\d+)"</span>,<span class="string">"010-12345678"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ret.group()</span><br><span class="line"><span class="string">'010-12345678'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ret.group(<span class="number">1</span>)</span><br><span class="line"><span class="string">'010'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ret.group(<span class="number">2</span>)</span><br><span class="line"><span class="string">'12345678'</span></span><br></pre></td></tr></table></figure><h3 id="示例3：-1"><a href="#示例3：-1" class="headerlink" title="示例3：\"></a>示例3：\</h3><p>需求：匹配出<code>&lt;html&gt;hh&lt;/html&gt;</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># 能够完成对正确的字符串的匹配</span></span><br><span class="line">ret = re.match(<span class="string">"&lt;[a-zA-Z]*&gt;\w*&lt;/[a-zA-Z]*&gt;"</span>, <span class="string">"&lt;html&gt;hh&lt;/html&gt;"</span>)</span><br><span class="line">print(ret.group())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果遇到非正常的html格式字符串，匹配出错</span></span><br><span class="line">ret = re.match(<span class="string">"&lt;[a-zA-Z]*&gt;\w*&lt;/[a-zA-Z]*&gt;"</span>, <span class="string">"&lt;html&gt;hh&lt;/htmlbalabala&gt;"</span>)</span><br><span class="line">print(ret.group())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 正确的理解思路：如果在第一对&lt;&gt;中是什么，按理说在后面的那对&lt;&gt;中就应该是什么</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过引用分组中匹配到的数据即可，但是要注意是元字符串，即类似 r""这种格式</span></span><br><span class="line">ret = re.match(<span class="string">r"&lt;([a-zA-Z]*)&gt;\w*&lt;/\1&gt;"</span>, <span class="string">"&lt;html&gt;hh&lt;/html&gt;"</span>)</span><br><span class="line">print(ret.group())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 因为2对&lt;&gt;中的数据不一致，所以没有匹配出来</span></span><br><span class="line">test_label = <span class="string">"&lt;html&gt;hh&lt;/htmlbalabala&gt;"</span></span><br><span class="line">ret = re.match(<span class="string">r"&lt;([a-zA-Z]*)&gt;\w*&lt;/\1&gt;"</span>, test_label)</span><br><span class="line"><span class="keyword">if</span> ret:</span><br><span class="line">    print(ret.group())</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"%s 这是一对不正确的标签"</span> % test_label)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span>hh<span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span>hh<span class="tag">&lt;/<span class="name">htmlbalabala</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span>hh<span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span>hh<span class="tag">&lt;/<span class="name">htmlbalabala</span>&gt;</span> 这是一对不正确的标签</span><br></pre></td></tr></table></figure><h3 id="示例4：-number"><a href="#示例4：-number" class="headerlink" title="示例4：\number"></a>示例4：\number</h3><p>需求：匹配出<code>&lt;html&gt;&lt;h1&gt;www.itcast.cn&lt;/h1&gt;&lt;/html&gt;</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">labels = [<span class="string">"&lt;html&gt;&lt;h1&gt;www.itcast.cn&lt;/h1&gt;&lt;/html&gt;"</span>, <span class="string">"&lt;html&gt;&lt;h1&gt;www.itcast.cn&lt;/h2&gt;&lt;/html&gt;"</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> label <span class="keyword">in</span> labels:</span><br><span class="line">    ret = re.match(<span class="string">r"&lt;(\w*)&gt;&lt;(\w*)&gt;.*&lt;/\2&gt;&lt;/\1&gt;"</span>, label)</span><br><span class="line">    <span class="keyword">if</span> ret:</span><br><span class="line">        print(<span class="string">"%s 是符合要求的标签"</span> % ret.group())</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"%s 不符合要求"</span> % label)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span>www.itcast.cn<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span> 是符合要求的标签</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span>www.itcast.cn<span class="tag">&lt;/<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span> 不符合要求</span><br></pre></td></tr></table></figure><h3 id="示例5：-P-lt-name-gt-P-name"><a href="#示例5：-P-lt-name-gt-P-name" class="headerlink" title="示例5：(?P&lt;name&gt;)   (?P=name)"></a>示例5：<code>(?P&lt;name&gt;)</code> <code>(?P=name)</code></h3><p>需求：匹配出<code>&lt;html&gt;&lt;h1&gt;www.itcast.cn&lt;/h1&gt;&lt;/html&gt;</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">ret = re.match(<span class="string">r"&lt;(?P&lt;name1&gt;\w*)&gt;&lt;(?P&lt;name2&gt;\w*)&gt;.*&lt;/(?P=name2)&gt;&lt;/(?P=name1)&gt;"</span>, <span class="string">"&lt;html&gt;&lt;h1&gt;www.itcast.cn&lt;/h1&gt;&lt;/html&gt;"</span>)</span><br><span class="line">ret.group()</span><br><span class="line"></span><br><span class="line">ret = re.match(<span class="string">r"&lt;(?P&lt;name1&gt;\w*)&gt;&lt;(?P&lt;name2&gt;\w*)&gt;.*&lt;/(?P=name2)&gt;&lt;/(?P=name1)&gt;"</span>, <span class="string">"&lt;html&gt;&lt;h1&gt;www.itcast.cn&lt;/h2&gt;&lt;/html&gt;"</span>)</span><br><span class="line">ret.group()</span><br></pre></td></tr></table></figure><p>注意：<code>(?P&lt;name&gt;)</code>和<code>(?P=name)</code>中的字母p大写</p><h2 id="re模块的高级用法"><a href="#re模块的高级用法" class="headerlink" title="re模块的高级用法"></a>re模块的高级用法</h2><h3 id="search"><a href="#search" class="headerlink" title="search"></a>search</h3><p>需求：匹配出文章阅读的次数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">ret = re.search(<span class="string">r"\d+"</span>, <span class="string">"阅读次数为 9999"</span>)</span><br><span class="line">ret.group()</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'9999'</span></span><br></pre></td></tr></table></figure><h3 id="findall"><a href="#findall" class="headerlink" title="findall"></a>findall</h3><p>需求：统计出python、c、c++相应文章阅读的次数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">ret = re.findall(<span class="string">r"\d+"</span>, <span class="string">"python = 9999, c = 7890, c++ = 12345"</span>)</span><br><span class="line">print(ret)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'9999'</span>, <span class="string">'7890'</span>, <span class="string">'12345'</span>]</span><br></pre></td></tr></table></figure><h3 id="sub-将匹配到的数据进行替换"><a href="#sub-将匹配到的数据进行替换" class="headerlink" title="sub 将匹配到的数据进行替换"></a>sub 将匹配到的数据进行替换</h3><p>需求：将匹配到的阅读次数加1</p><p>方法1：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">ret = re.sub(<span class="string">r"\d+"</span>, <span class="string">'998'</span>, <span class="string">"python = 997"</span>)</span><br><span class="line">print(ret)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python = <span class="number">998</span></span><br></pre></td></tr></table></figure><p>方法2：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(temp)</span>:</span></span><br><span class="line">    strNum = temp.group()</span><br><span class="line">    num = int(strNum) + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> str(num)</span><br><span class="line"></span><br><span class="line">ret = re.sub(<span class="string">r"\d+"</span>, add, <span class="string">"python = 997"</span>)</span><br><span class="line">print(ret)</span><br><span class="line"></span><br><span class="line">ret = re.sub(<span class="string">r"\d+"</span>, add, <span class="string">"python = 99"</span>)</span><br><span class="line">print(ret)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python = <span class="number">998</span></span><br><span class="line">python = <span class="number">100</span></span><br></pre></td></tr></table></figure><p>从下面的字符串中取出文本</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>岗位职责：<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>完成推荐算法、数据统计、接口、后台等服务器端相关工作<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>必备要求：<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>良好的自我驱动力和职业素养，工作积极主动、结果导向<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&amp;nbsp;<span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>技术要求：<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>1、一年以上 Python 开发经验，掌握面向对象分析和设计，了解设计模式<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>2、掌握HTTP协议，熟悉MVC、MVVM等概念以及相关WEB开发框架<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>3、掌握关系数据库开发设计，掌握 SQL，熟练使用 MySQL/PostgreSQL 中的一种<span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>4、掌握NoSQL、MQ，熟练使用对应技术解决方案<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>5、熟悉 Javascript/CSS/HTML5，JQuery、React、Vue.js<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&amp;nbsp;<span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>加分项：<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>大数据，数理统计，机器学习，sklearn，高性能，大并发。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>参考答案:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">re.sub(<span class="string">r"&lt;[^&gt;]*&gt;|&amp;nbsp;|\n"</span>, <span class="string">""</span>, test_str)</span><br></pre></td></tr></table></figure><h3 id="split-根据匹配进行切割字符串，并返回一个列表"><a href="#split-根据匹配进行切割字符串，并返回一个列表" class="headerlink" title="split 根据匹配进行切割字符串，并返回一个列表"></a>split 根据匹配进行切割字符串，并返回一个列表</h3><p>需求：切割字符串“info:xiaoZhang 33 shandong”</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">ret = re.split(<span class="string">r":| "</span>,<span class="string">"info:xiaoZhang 33 shandong"</span>)</span><br><span class="line">print(ret)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'info'</span>, <span class="string">'xiaoZhang'</span>, <span class="string">'33'</span>, <span class="string">'shandong'</span>]</span><br></pre></td></tr></table></figure><h2 id="python贪婪和非贪婪"><a href="#python贪婪和非贪婪" class="headerlink" title="python贪婪和非贪婪"></a>python贪婪和非贪婪</h2><p>Python里数量词默认是贪婪的（在少数语言里也可能是默认非贪婪），总是尝试匹配尽可能多的字符；</p><p>非贪婪则相反，总是尝试匹配尽可能少的字符。</p><p>在”*”,”?”,”+”,”{m,n}”后面加上？，使贪婪变成非贪婪。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s=<span class="string">"This is a number 234-235-22-423"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r=re.match(<span class="string">".+(\d+-\d+-\d+-\d+)"</span>,s)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.group(<span class="number">1</span>)</span><br><span class="line"><span class="string">'4-235-22-423'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r=re.match(<span class="string">".+?(\d+-\d+-\d+-\d+)"</span>,s)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.group(<span class="number">1</span>)</span><br><span class="line"><span class="string">'234-235-22-423'</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>正则表达式模式中使用到通配字，那它在从左到右的顺序求值时，会尽量“抓取”满足匹配最长字符串，在我们上面的例子里面，“.+”会从字符串的启始处抓取满足模式的最长字符，其中包括我们想得到的第一个整型字段的中的大部分，“\d+”只需一位字符就可以匹配，所以它匹配了数字“4”，而“.+”则匹配了从字符串起始到这个第一位数字4之前的所有字符。</p><p>解决方式：非贪婪操作符“？”，这个操作符可以用在”*”,”+”,”?”的后面，要求正则匹配的越少越好。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.match(<span class="string">r"aa(\d+)"</span>,<span class="string">"aa2343ddd"</span>).group(<span class="number">1</span>)</span><br><span class="line"><span class="string">'2343'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.match(<span class="string">r"aa(\d+?)"</span>,<span class="string">"aa2343ddd"</span>).group(<span class="number">1</span>)</span><br><span class="line"><span class="string">'2'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.match(<span class="string">r"aa(\d+)ddd"</span>,<span class="string">"aa2343ddd"</span>).group(<span class="number">1</span>) </span><br><span class="line"><span class="string">'2343'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.match(<span class="string">r"aa(\d+?)ddd"</span>,<span class="string">"aa2343ddd"</span>).group(<span class="number">1</span>)</span><br><span class="line"><span class="string">'2343'</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h2 id="r的作用"><a href="#r的作用" class="headerlink" title="r的作用"></a>r的作用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>mm = <span class="string">"c:\\a\\b\\c"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mm</span><br><span class="line"><span class="string">'c:\\a\\b\\c'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(mm)</span><br><span class="line">c:\a\b\c</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.match(<span class="string">"c:\\\\"</span>,mm).group()</span><br><span class="line"><span class="string">'c:\\'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ret = re.match(<span class="string">"c:\\\\"</span>,mm).group()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(ret)</span><br><span class="line">c:\</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ret = re.match(<span class="string">"c:\\\\a"</span>,mm).group()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(ret)</span><br><span class="line">c:\a</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ret = re.match(<span class="string">r"c:\\a"</span>,mm).group()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(ret)</span><br><span class="line">c:\a</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ret = re.match(<span class="string">r"c:\a"</span>,mm).group()</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">AttributeError: <span class="string">'NoneType'</span> object has no attribute <span class="string">'group'</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>说明</p><p><code>Python中字符串前面加上 r 表示原生字符串</code>，</p><p>与大多数编程语言相同，<code>正则表达式里使用&quot;\&quot;作为转义字符</code>，这就可能造成反斜杠困扰。假如你需要匹配文本中的字符”\”，那么使用编程语言表示的正则表达式里将需要4个反斜杠”\“：前两个和后两个分别用于在编程语言里转义成反斜杠，转换成两个反斜杠后再在正则表达式里转义成一个反斜杠。</p><p>Python里的原生字符串很好地解决了这个问题，有了原生字符串，你再也不用担心是不是漏写了反斜杠，写出来的表达式也更直观。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>ret = re.match(<span class="string">r"c:\\a"</span>,mm).group()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(ret)</span><br><span class="line">c:\a</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Dec 31 2019 13:39:53 GMT+0800 (GMT+08:00) --&gt;&lt;h1 id=&quot;正则表达式&quot;&gt;&lt;a href=&quot;#正则表达式&quot; class=&quot;headerlink&quot; title=&quot;正则表达式&quot;&gt;&lt;/a&gt;正则表达式&lt;/h1&gt;&lt;h2 id=&quot;re模块操作&quot;&gt;&lt;a href=&quot;#re模块操作&quot; class=&quot;headerlink&quot; title=&quot;re模块操作&quot;&gt;&lt;/a&gt;re模块操作&lt;/h2&gt;&lt;p&gt;在Python中需要通过正则表达式对字符串进行匹配的时候，可以使用一个模块，名字为re&lt;/p&gt;&lt;h3 id=&quot;1-re模块的使用过程&quot;&gt;&lt;a href=&quot;#1-re模块的使用过程&quot; class=&quot;headerlink&quot; title=&quot;1. re模块的使用过程&quot;&gt;&lt;/a&gt;1. re模块的使用过程&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#coding=utf-8&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 导入re模块&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; re&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 使用match方法进行匹配操作&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;result = re.match(正则表达式,要匹配的字符串)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 如果上一步匹配到数据的话，可以使用group方法来提取数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;result.group()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Python" scheme="https://yongnights.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://yongnights.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>python_模块和包</title>
    <link href="https://yongnights.github.io/2019/12/31/python_%E6%A8%A1%E5%9D%97%E5%92%8C%E5%8C%85/"/>
    <id>https://yongnights.github.io/2019/12/31/python_模块和包/</id>
    <published>2019-12-31T04:00:48.267Z</published>
    <updated>2019-12-31T04:00:48.267Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Dec 31 2019 13:39:53 GMT+0800 (GMT+08:00) --><h1 id="模块和包"><a href="#模块和包" class="headerlink" title="模块和包"></a>模块和包</h1><h2 id="01-模块"><a href="#01-模块" class="headerlink" title="01. 模块"></a>01. 模块</h2><h3 id="1-1-模块的概念"><a href="#1-1-模块的概念" class="headerlink" title="1.1 模块的概念"></a>1.1 模块的概念</h3><blockquote><p>模块是 Python 程序架构的一个核心概念</p></blockquote><ul><li>每一个以扩展名 py 结尾的 Python 源代码文件都是一个 模块</li><li>模块名 同样也是一个 标识符，需要符合标识符的命名规则</li><li>在模块中定义的 全局变量 、函数、类 都是提供给外界直接使用的 工具</li><li>模块 就好比是 工具包，要想使用这个工具包中的工具，就需要先 导入 这个模块</li></ul><h3 id="1-2-模块的两种导入方式"><a href="#1-2-模块的两种导入方式" class="headerlink" title="1.2 模块的两种导入方式"></a>1.2 模块的两种导入方式</h3><p>1）import 导入<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> 模块名<span class="number">1</span>, 模块名<span class="number">2</span></span><br></pre></td></tr></table></figure><p></p><blockquote><p>提示：在导入模块时，每个导入应该独占一行<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> 模块名<span class="number">1</span></span><br><span class="line"><span class="keyword">import</span> 模块名<span class="number">2</span></span><br></pre></td></tr></table></figure><p></p></blockquote><a id="more"></a><ul><li>导入之后<ul><li>通过 模块名. 使用 模块提供的工具 —— 全局变量、函数、类</li></ul></li></ul><p>使用 as 指定模块的别名</p><blockquote><p>如果模块的名字太长，可以使用 as 指定模块的名称，以方便在代码中的使用</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> 模块名<span class="number">1</span> <span class="keyword">as</span> 模块别名</span><br></pre></td></tr></table></figure><blockquote><p>注意：模块别名 应该符合 大驼峰命名法</p></blockquote><p>2）from…import 导入</p><ul><li>如果希望 从某一个模块 中，导入 部分 工具，就可以使用 from … import 的方式</li><li><p>import 模块名 是 一次性 把模块中 所有工具全部导入，并且通过 模块名/别名 访问</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从 模块 导入 某一个工具</span></span><br><span class="line"><span class="keyword">from</span> 模块名<span class="number">1</span> <span class="keyword">import</span> 工具名</span><br></pre></td></tr></table></figure></li><li><p>导入之后</p><ul><li>不需要 通过 模块名.</li><li>可以直接使用 模块提供的工具 —— 全局变量、函数、类</li></ul></li></ul><p>注意</p><blockquote><p>如果 两个模块，存在 同名的函数，那么 后导入模块的函数，会 覆盖掉先导入的函数</p></blockquote><ul><li>开发时 import 代码应该统一写在 代码的顶部，更容易及时发现冲突</li><li>一旦发现冲突，可以使用 as 关键字 给其中一个工具起一个别名</li></ul><p>from…import *（知道）<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从 模块 导入 所有工具</span></span><br><span class="line"><span class="keyword">from</span> 模块名<span class="number">1</span> <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure><p></p><p>注意</p><blockquote><p>这种方式不推荐使用，因为函数重名并没有任何的提示，出现问题不好排查</p></blockquote><h3 id="1-3-模块的搜索顺序-扩展"><a href="#1-3-模块的搜索顺序-扩展" class="headerlink" title="1.3 模块的搜索顺序[扩展]"></a>1.3 模块的搜索顺序[扩展]</h3><ul><li>Python 的解释器在 导入模块 时，会：<ul><li><ol><li>搜索 当前目录 指定模块名的文件，如果有就直接导入</li></ol></li><li><ol start="2"><li>如果没有，再搜索 系统目录<blockquote><p>在开发时，给文件起名，不要和 系统的模块文件 重名</p></blockquote></li></ol></li></ul></li></ul><p>Python 中每一个模块都有一个内置属性 <code>_file__</code>可以 查看模块 的 完整路径<br>示例<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成一个 0～10 的数字</span></span><br><span class="line">rand = random.randint(<span class="number">0</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">print(rand)</span><br></pre></td></tr></table></figure><p></p><blockquote><p>注意：如果当前目录下，存在一个 random.py 的文件，程序就无法正常执行了！</p></blockquote><ul><li>这个时候，Python 的解释器会 加载当前目录 下的 random.py 而不会加载 系统的 random 模块</li></ul><h3 id="1-4-原则-——-每一个文件都应该是可以被导入的"><a href="#1-4-原则-——-每一个文件都应该是可以被导入的" class="headerlink" title="1.4 原则 —— 每一个文件都应该是可以被导入的"></a>1.4 原则 —— 每一个文件都应该是可以被导入的</h3><ul><li>一个 独立的 Python 文件 就是一个 模块</li><li>在导入文件时，文件中 所有没有任何缩进的代码 都会被执行一遍！</li></ul><p>实际开发场景</p><ul><li>在实际开发中，每一个模块都是独立开发的，大多都有专人负责</li><li>开发人员 通常会在 模块下方 增加一些测试代码<ul><li>仅在模块内使用，而被导入到其他文件中不需要执行</li></ul></li></ul><p><code>__name__</code>属性</p><blockquote><p><strong>name</strong> 属性可以做到，测试模块的代码 只在测试情况下被运行，而在 被导入时不会被执行！</p></blockquote><ul><li><code>__name__</code>是 Python 的一个内置属性，记录着一个 字符串</li><li>如果 是被其他文件导入的，<code>__name__</code>就是 模块名</li><li>如果 是当前执行的程序 <code>__name__</code>是<code>__main__</code></li></ul><p>在很多 Python 文件中都会看到以下格式的代码：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入模块</span></span><br><span class="line"><span class="comment"># 定义全局变量</span></span><br><span class="line"><span class="comment"># 定义类</span></span><br><span class="line"><span class="comment"># 定义函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在代码的最下方</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据 __name__ 判断是否执行下方代码</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p></p><h2 id="02-包（Package）"><a href="#02-包（Package）" class="headerlink" title="02. 包（Package）"></a>02. 包（Package）</h2><p>概念</p><ul><li>包 是一个 包含多个模块 的 特殊目录</li><li>目录下有一个 特殊的文件 <code>__init__.py</code></li><li>包名的 命名方式 和变量名一致，小写字母 + _</li></ul><p>好处</p><ul><li>使用 import 包名 可以一次性导入 包 中 所有的模块</li></ul><p>案例演练</p><ol><li>新建一个 hm_message 的 包</li><li>在目录下，新建两个文件 send_message 和 receive_message</li><li>在 send_message 文件中定义一个 send 函数</li><li>在 receive_message 文件中定义一个 receive 函数</li><li>在外部直接导入 hm_message 的包</li></ol><p><code>__init__.py</code></p><ul><li>要在外界使用 包 中的模块，需要在 <strong>init</strong>.py 中指定 对外界提供的模块列表<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从 当前目录 导入 模块列表</span></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> send_message</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> receive_message</span><br></pre></td></tr></table></figure></li></ul><h2 id="03-发布模块（知道）"><a href="#03-发布模块（知道）" class="headerlink" title="03. 发布模块（知道）"></a>03. 发布模块（知道）</h2><p>如果希望自己开发的模块，分享 给其他人，可以按照以下步骤操作</p><h3 id="3-1-制作发布压缩包步骤"><a href="#3-1-制作发布压缩包步骤" class="headerlink" title="3.1 制作发布压缩包步骤"></a>3.1 制作发布压缩包步骤</h3><p>1) 创建 setup.py</p><pre><code>- setup.py 的文件</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> distutils.core <span class="keyword">import</span> setup</span><br><span class="line"></span><br><span class="line">setup(name=<span class="string">"hm_message"</span>,  <span class="comment"># 包名</span></span><br><span class="line">      version=<span class="string">"1.0"</span>,  <span class="comment"># 版本</span></span><br><span class="line">      description=<span class="string">"itheima's 发送和接收消息模块"</span>,  <span class="comment"># 描述信息</span></span><br><span class="line">      long_description=<span class="string">"完整的发送和接收消息模块"</span>,  <span class="comment"># 完整描述信息</span></span><br><span class="line">      author=<span class="string">"itheima"</span>,  <span class="comment"># 作者</span></span><br><span class="line">      author_email=<span class="string">"itheima@itheima.com"</span>,  <span class="comment"># 作者邮箱</span></span><br><span class="line">      url=<span class="string">"www.itheima.com"</span>,  <span class="comment"># 主页</span></span><br><span class="line">      py_modules=[<span class="string">"hm_message.send_message"</span>,</span><br><span class="line">                  <span class="string">"hm_message.receive_message"</span>])</span><br></pre></td></tr></table></figure><p>有关字典参数的详细信息，可以参阅官方网站：<a href="https://docs.python.org/2/distutils/apiref.html" target="_blank" rel="noopener">https://docs.python.org/2/distutils/apiref.html</a></p><p>2) 构建模块<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python3 setup.py build</span><br></pre></td></tr></table></figure><p></p><p>3) 生成发布压缩包<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python3 setup.py sdist</span><br></pre></td></tr></table></figure><p></p><blockquote><p>注意：要制作哪个版本的模块，就使用哪个版本的解释器执行！</p></blockquote><h3 id="3-2-安装模块"><a href="#3-2-安装模块" class="headerlink" title="3.2 安装模块"></a>3.2 安装模块</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ tar -zxvf hm_message-1.0.tar.gz </span><br><span class="line">$ sudo python3 setup.py install</span><br></pre></td></tr></table></figure><p>卸载模块<br>直接从安装目录下，把安装模块的 目录 删除就可以<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/lib/python3.5/dist-packages/</span><br><span class="line">$ sudo rm -r hm_message*</span><br></pre></td></tr></table></figure><p></p><h3 id="3-3-pip-安装第三方模块"><a href="#3-3-pip-安装第三方模块" class="headerlink" title="3.3 pip 安装第三方模块"></a>3.3 pip 安装第三方模块</h3><ul><li>第三方模块 通常是指由 知名的第三方团队 开发的 并且被 程序员广泛使用 的 Python 包 / 模块<ul><li>例如 pygame 就是一套非常成熟的 游戏开发模块</li></ul></li><li>pip 是一个现代的，通用的 Python 包管理工具,提供了对 Python 包的查找、下载、安装、卸载等功能</li></ul><p>安装和卸载命令如下：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将模块安装到 Python 2.x 环境</span></span><br><span class="line">$ sudo pip install pygame</span><br><span class="line">$ sudo pip uninstall pygame</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将模块安装到 Python 3.x 环境</span></span><br><span class="line">$ sudo pip3 install pygame</span><br><span class="line">$ sudo pip3 uninstall pygame</span><br></pre></td></tr></table></figure><p></p><p>在 Mac 下安装 iPython<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo pip install ipython</span><br></pre></td></tr></table></figure><p></p><p>在 Linux 下安装 iPython<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt install ipython</span><br><span class="line">$ sudo apt install ipython3</span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Dec 31 2019 13:39:53 GMT+0800 (GMT+08:00) --&gt;&lt;h1 id=&quot;模块和包&quot;&gt;&lt;a href=&quot;#模块和包&quot; class=&quot;headerlink&quot; title=&quot;模块和包&quot;&gt;&lt;/a&gt;模块和包&lt;/h1&gt;&lt;h2 id=&quot;01-模块&quot;&gt;&lt;a href=&quot;#01-模块&quot; class=&quot;headerlink&quot; title=&quot;01. 模块&quot;&gt;&lt;/a&gt;01. 模块&lt;/h2&gt;&lt;h3 id=&quot;1-1-模块的概念&quot;&gt;&lt;a href=&quot;#1-1-模块的概念&quot; class=&quot;headerlink&quot; title=&quot;1.1 模块的概念&quot;&gt;&lt;/a&gt;1.1 模块的概念&lt;/h3&gt;&lt;blockquote&gt;&lt;p&gt;模块是 Python 程序架构的一个核心概念&lt;/p&gt;&lt;/blockquote&gt;&lt;ul&gt;&lt;li&gt;每一个以扩展名 py 结尾的 Python 源代码文件都是一个 模块&lt;/li&gt;&lt;li&gt;模块名 同样也是一个 标识符，需要符合标识符的命名规则&lt;/li&gt;&lt;li&gt;在模块中定义的 全局变量 、函数、类 都是提供给外界直接使用的 工具&lt;/li&gt;&lt;li&gt;模块 就好比是 工具包，要想使用这个工具包中的工具，就需要先 导入 这个模块&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&quot;1-2-模块的两种导入方式&quot;&gt;&lt;a href=&quot;#1-2-模块的两种导入方式&quot; class=&quot;headerlink&quot; title=&quot;1.2 模块的两种导入方式&quot;&gt;&lt;/a&gt;1.2 模块的两种导入方式&lt;/h3&gt;&lt;p&gt;1）import 导入&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; 模块名&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, 模块名&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;提示：在导入模块时，每个导入应该独占一行&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; 模块名&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; 模块名&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python" scheme="https://yongnights.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://yongnights.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>python_扩展知识点</title>
    <link href="https://yongnights.github.io/2019/12/31/python_%E6%89%A9%E5%B1%95%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <id>https://yongnights.github.io/2019/12/31/python_扩展知识点/</id>
    <published>2019-12-31T04:00:48.267Z</published>
    <updated>2019-12-31T04:00:48.267Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Dec 31 2019 13:39:54 GMT+0800 (GMT+08:00) --><h1 id="GIL（全局解释器锁）"><a href="#GIL（全局解释器锁）" class="headerlink" title="GIL（全局解释器锁）"></a>GIL（全局解释器锁）</h1><h2 id="GIL面试题如下"><a href="#GIL面试题如下" class="headerlink" title="GIL面试题如下"></a>GIL面试题如下</h2><blockquote><p>描述Python GIL的概念， 以及它对python多线程的影响？编写一个多线程抓取网页的程序，并阐明多线程抓取程序是否可比单线程性能有提升，并解释原因。</p></blockquote><p>Guido的声明：<a href="http://www.artima.com/forums/flat.jsp?forum=106&amp;thread=214235" target="_blank" rel="noopener">http://www.artima.com/forums/flat.jsp?forum=106&amp;thread=214235</a><br>he language doesn’t require the GIL – it’s only the CPython virtual machine that has historically been unable to shed it.</p><h2 id="单线程死循环"><a href="#单线程死循环" class="headerlink" title="单线程死循环"></a>单线程死循环</h2><p>单独执行该文件会占满一个CPU核心数(相当于单进程单线程)，两个窗口执行该文件会占满两个CPU核心数(相当于两进程两线程)<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#-*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 主线程死循环，占满CPU</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">pass</span> <span class="comment"># 占位符，空语句，还是要执行的</span></span><br></pre></td></tr></table></figure><p></p><h2 id="两个线程死循环"><a href="#两个线程死循环" class="headerlink" title="两个线程死循环"></a>两个线程死循环</h2><p>单独执行该文件每个CPU核心会占一半(单进程两线程)<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#-*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"></span><br><span class="line"><span class="comment"># 子线程死循环</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">a</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">t = Thread(target=a)</span><br><span class="line">t.start()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主线程死循环</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p></p><h2 id="两个进程死循环"><a href="#两个进程死循环" class="headerlink" title="两个进程死循环"></a>两个进程死循环</h2><p>单独执行该文件会占满二个CPU核心数<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#-*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"></span><br><span class="line"><span class="comment"># 子进程死循环</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">a</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    t = Process(target=a)</span><br><span class="line">    t.start()</span><br><span class="line">    <span class="comment"># 主进程死循环</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p></p><p>总结：多线程并不是真正的并行，而是伪并行，也就是并发。原因就是因为线程有GIL全局解释器锁。只有进程才是真正的并行</p><h2 id="参考答案"><a href="#参考答案" class="headerlink" title="参考答案"></a>参考答案</h2><blockquote><ol><li>Python语言和GIL没有半毛钱关系。仅仅是由于历史原因在Cpython虚拟机(C语言解释器)中难以移除GIL。(其他python解释器没有GIL，比如java语言写的jpython解释器)</li><li>GIL：全局解释器锁。每个线程在执行的过程都需要先获取GIL，保证同一时刻只有一个线程可以执行代码。</li><li>线程释放GIL锁的情况： 在IO操作等可能会引起阻塞的system call之前,可以暂时释放GIL,但在执行完毕后,必须重新获取GIL Python 3.x使用计时器（执行时间达到阈值后，当前线程释放GIL）或Python 2.x，tickets计数达到100<blockquote><p>计算密集型：程序没有延时，一直在计算数据；IO密集型：输入输出，读写操作<br>线程和协程适用于IO密集型，计算密集型考虑使用进程。</p></blockquote></li><li>Python使用多进程是可以利用多核的CPU资源的。</li><li>多线程爬取比单线程性能有提升，因为遇到IO阻塞会自动释放GIL锁</li></ol></blockquote><h2 id="使用c语言来解决GIL问题"><a href="#使用c语言来解决GIL问题" class="headerlink" title="使用c语言来解决GIL问题"></a>使用c语言来解决GIL问题</h2><p>子线程使用的是c语言的函数，此时单独执行该文件，会占满两个CPU核心<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载动态库</span></span><br><span class="line"><span class="comment"># 把一个C语言编译成一个动态库文件的命令(linux平台)</span></span><br><span class="line"><span class="comment"># gcc libdead_loop.c -shared -o libdead_loop.so</span></span><br><span class="line">lib = cdll.LoadLibrary(<span class="string">"./libdead_loop.so"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个子线程，让其执行c语言编写的函数(DeadLoop)，此函数是一个死循环</span></span><br><span class="line">t = Thread(target=lib.DeadLoop)</span><br><span class="line">t.start()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主线程</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p></p><h2 id="如何解决GIL"><a href="#如何解决GIL" class="headerlink" title="如何解决GIL"></a>如何解决GIL</h2><ol><li>换python解释器，不使用Cpython解释器，使用jpython解释器等</li><li>用其他语言来替代线程中的代码，不如上例中的c语言，(胶水语言)</li></ol><a id="more"></a><h1 id="深拷贝、浅拷贝"><a href="#深拷贝、浅拷贝" class="headerlink" title="深拷贝、浅拷贝"></a>深拷贝、浅拷贝</h1><h2 id="1-浅拷贝"><a href="#1-浅拷贝" class="headerlink" title="1. 浅拷贝"></a>1. 浅拷贝</h2><ul><li>浅拷贝是对于一个对象的顶层拷贝<br>通俗的理解是：拷贝了引用，并没有拷贝内容</li></ul><p><img src="/images_copy/001.png" alt></p><p><img src="/images_copy/002.png" alt></p><h2 id="2-深拷贝"><a href="#2-深拷贝" class="headerlink" title="2. 深拷贝"></a>2. 深拷贝</h2><ul><li>深拷贝是对于一个对象所有层次的拷贝(递归)</li></ul><p><img src="/images_copy/003.png" alt></p><h3 id="进一步理解深拷贝"><a href="#进一步理解深拷贝" class="headerlink" title="进一步理解深拷贝"></a>进一步理解深拷贝</h3><p><img src="/images_copy/004.png" alt></p><p><img src="/images_copy/005.png" alt></p><h2 id="3-拷贝的其他方式"><a href="#3-拷贝的其他方式" class="headerlink" title="3. 拷贝的其他方式"></a>3. 拷贝的其他方式</h2><ul><li>分片表达式可以赋值一个序列</li></ul><p><img src="/images_copy/006.png" alt></p><ul><li>字典的copy方法可以拷贝一个字典</li></ul><p><img src="/images_copy/007.png" alt></p><h2 id="4-注意点"><a href="#4-注意点" class="headerlink" title="4. 注意点"></a>4. 注意点</h2><h3 id="浅拷贝对不可变类型和可变类型的copy不同"><a href="#浅拷贝对不可变类型和可变类型的copy不同" class="headerlink" title="浅拷贝对不可变类型和可变类型的copy不同"></a>浅拷贝对不可变类型和可变类型的copy不同</h3><ol><li>copy.copy对于可变类型，会进行浅拷贝</li><li>copy.copy对于不可变类型，不会拷贝，仅仅是指向<br>比如：如果copy.copy拷贝的是元组，那么它不会进行浅拷贝，仅仅是指向<br>原因：因为元组是不可变类型，那么意味着数据一定不能修改，因此用copy.copy的时候它会自动判断，如果是元组它就指向了它</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">88</span>]: a = [<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>]</span><br><span class="line">In [<span class="number">89</span>]: b = copy.copy(a)</span><br><span class="line">In [<span class="number">90</span>]: id(a)</span><br><span class="line">Out[<span class="number">90</span>]: <span class="number">59275144</span></span><br><span class="line">In [<span class="number">91</span>]: id(b)</span><br><span class="line">Out[<span class="number">91</span>]: <span class="number">59525600</span></span><br><span class="line">In [<span class="number">92</span>]: a.append(<span class="number">44</span>)</span><br><span class="line">In [<span class="number">93</span>]: a</span><br><span class="line">Out[<span class="number">93</span>]: [<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>]</span><br><span class="line">In [<span class="number">94</span>]: b</span><br><span class="line">Out[<span class="number">94</span>]: [<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">95</span>]: a = (<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>)</span><br><span class="line">In [<span class="number">96</span>]: b = copy.copy(a)</span><br><span class="line">In [<span class="number">97</span>]: id(a)</span><br><span class="line">Out[<span class="number">97</span>]: <span class="number">58890680</span></span><br><span class="line">In [<span class="number">98</span>]: id(b)</span><br><span class="line">Out[<span class="number">98</span>]: <span class="number">58890680</span></span><br></pre></td></tr></table></figure><p><img src="/images_copy/008.png" alt></p><p>如果用copy.copy或者copy.deepcopy对一个全部都是不可变类型的数据进行拷贝，那么他们结果相同的，都是引用指向<br>如果拷贝的是一个拥有可变类型的数据，即使元组是最顶层，copy.deepcopy依然是深拷贝，而copy.copy还是指向。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">In[<span class="number">37</span>]: a = [<span class="number">11</span>,<span class="number">22</span>]</span><br><span class="line">In[<span class="number">38</span>]: b = [<span class="number">33</span>,<span class="number">44</span>]</span><br><span class="line">In[<span class="number">39</span>]: c = (a,b)</span><br><span class="line">In[<span class="number">40</span>]: <span class="keyword">import</span> copy</span><br><span class="line">In[<span class="number">41</span>]: d = copy.copy(c)</span><br><span class="line">In[<span class="number">42</span>]: id(c)</span><br><span class="line">Out[<span class="number">42</span>]: <span class="number">86387080</span></span><br><span class="line">In[<span class="number">43</span>]: id(d)</span><br><span class="line">Out[<span class="number">43</span>]: <span class="number">86387080</span></span><br><span class="line">In[<span class="number">44</span>]: e = copy.deepcopy(c)</span><br><span class="line">In[<span class="number">45</span>]: id(e)</span><br><span class="line">Out[<span class="number">45</span>]: <span class="number">87301192</span></span><br><span class="line">In[<span class="number">46</span>]: c</span><br><span class="line">Out[<span class="number">46</span>]: ([<span class="number">11</span>, <span class="number">22</span>], [<span class="number">33</span>, <span class="number">44</span>])</span><br><span class="line">In[<span class="number">47</span>]: e</span><br><span class="line">Out[<span class="number">47</span>]: ([<span class="number">11</span>, <span class="number">22</span>], [<span class="number">33</span>, <span class="number">44</span>])</span><br><span class="line">In[<span class="number">48</span>]: a.append(<span class="number">55</span>)</span><br><span class="line">In[<span class="number">49</span>]: c</span><br><span class="line">Out[<span class="number">49</span>]: ([<span class="number">11</span>, <span class="number">22</span>, <span class="number">55</span>], [<span class="number">33</span>, <span class="number">44</span>])</span><br><span class="line">In[<span class="number">50</span>]: e</span><br><span class="line">Out[<span class="number">50</span>]: ([<span class="number">11</span>, <span class="number">22</span>], [<span class="number">33</span>, <span class="number">44</span>])</span><br></pre></td></tr></table></figure><h3 id="copy-copy和copy-deepcopy的区别"><a href="#copy-copy和copy-deepcopy的区别" class="headerlink" title="copy.copy和copy.deepcopy的区别"></a>copy.copy和copy.deepcopy的区别</h3><blockquote><p>copy.copy<br><img src="/images_copy/009.png" alt></p></blockquote><p><img src="/images_copy/010.png" alt></p><blockquote><p>copy.deepcopy<br><img src="/images_copy/011.png" alt></p></blockquote><p><img src="/images_copy/012.png" alt></p><p><img src="/images_copy/013.png" alt></p><h1 id="私有化"><a href="#私有化" class="headerlink" title="私有化"></a>私有化</h1><ul><li>xx: 公有变量</li><li><code>_x</code>: 单前置下划线,私有化属性或方法，from module import * 禁止导入,类对象和子类可以访问</li><li><code>__xx</code>：双前置下划线,避免与子类中的属性命名冲突，无法在外部直接访问(名字重整所以访问不到)</li><li><code>__xx__</code>:双前后下划线,用户名字空间的魔法对象或属性。例如:<code>__init__</code> , __ 不要自己发明这样的名字</li><li><code>xx_</code>:单后置下划线,用于避免与Python关键词的冲突</li></ul><p>通过name mangling（名字重整(目的就是以防子类意外重写基类的方法或者属性)如：_Classobject）机制就可以访问private了。(在 名称 前面加上 _类名 =&gt; _类名名称)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age, taste)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self._age = age </span><br><span class="line">        self.__taste = taste</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">showperson</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(self.name)</span><br><span class="line">        print(self._age)</span><br><span class="line">        print(self.__taste)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dowork</span><span class="params">(self)</span>:</span></span><br><span class="line">        self._work()</span><br><span class="line">        self.__away()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_work</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'my _work'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__away</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'my __away'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(Person)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">construction</span><span class="params">(self, name, age, taste)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self._age = age </span><br><span class="line">        self.__taste = taste</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">showstudent</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(self.name)</span><br><span class="line">        print(self._age)</span><br><span class="line">        print(self.__taste)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">testbug</span><span class="params">()</span>:</span></span><br><span class="line">        _Bug.showbug()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模块内可以访问，当from  cur_module import *时，不导入</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_Bug</span><span class="params">(object)</span>:</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">showbug</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">"showbug"</span>)</span><br><span class="line"></span><br><span class="line">s1 = Student(<span class="string">'jack'</span>, <span class="number">25</span>, <span class="string">'football'</span>)</span><br><span class="line">s1.showperson()</span><br><span class="line">print(<span class="string">'*'</span>*<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 无法访问__taste,导致报错</span></span><br><span class="line"><span class="comment"># s1.showstudent() </span></span><br><span class="line">s1.construction(<span class="string">'rose'</span>, <span class="number">30</span>, <span class="string">'basketball'</span>)</span><br><span class="line">s1.showperson()</span><br><span class="line">print(<span class="string">'*'</span>*<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">s1.showstudent()</span><br><span class="line">print(<span class="string">'*'</span>*<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">Student.testbug()总结</span><br></pre></td></tr></table></figure><ul><li><code>_名</code>的变量、函数、类在使用<code>from xxx import *</code>时都不会被导入，类对象和子类可以访问</li><li>父类中属性名为<code>__名字</code>的，子类不继承，子类不能访问，子类可以通过父类中的其他方法间接访问</li><li>如果在子类中向<code>__名字</code>赋值，那么会在子类中定义一个与父类相同名字的属性</li></ul><h1 id="import导入模块"><a href="#import导入模块" class="headerlink" title="import导入模块"></a>import导入模块</h1><h2 id="1-import-搜索路径"><a href="#1-import-搜索路径" class="headerlink" title="1. import 搜索路径"></a>1. import 搜索路径</h2><p><img src="images_import/001.png" alt></p><h3 id="路径搜索"><a href="#路径搜索" class="headerlink" title="路径搜索"></a>路径搜索</h3><ul><li>从上面列出的目录里依次查找要导入的模块文件</li><li>开头的第一个‘’ 表示当前路径</li><li>列表中的路径的先后顺序代表了python解释器在搜索模块时的先后顺序</li></ul><h3 id="程序执行时添加新的模块路径"><a href="#程序执行时添加新的模块路径" class="headerlink" title="程序执行时添加新的模块路径"></a>程序执行时添加新的模块路径</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">sys.path.append(<span class="string">'/home/itcast/xxx'</span>)</span><br><span class="line">sys.path.insert(<span class="number">0</span>, <span class="string">'/home/itcast/xxx'</span>)  <span class="comment"># 可以确保先搜索这个路径</span></span><br><span class="line">In [<span class="number">37</span>]: sys.path.insert(<span class="number">0</span>,<span class="string">"/home/python/xxxx"</span>)</span><br><span class="line">In [<span class="number">38</span>]: sys.path</span><br><span class="line">Out[<span class="number">38</span>]: </span><br><span class="line">[<span class="string">'/home/python/xxxx'</span>,</span><br><span class="line"> <span class="string">''</span>,</span><br><span class="line"> <span class="string">'/usr/bin'</span>,</span><br><span class="line"> <span class="string">'/usr/lib/python35.zip'</span>,</span><br><span class="line"> <span class="string">'/usr/lib/python3.5'</span>,</span><br><span class="line"> <span class="string">'/usr/lib/python3.5/plat-x86_64-linux-gnu'</span>,</span><br><span class="line"> <span class="string">'/usr/lib/python3.5/lib-dynload'</span>,</span><br><span class="line"> <span class="string">'/usr/local/lib/python3.5/dist-packages'</span>,</span><br><span class="line"> <span class="string">'/usr/lib/python3/dist-packages'</span>,</span><br><span class="line"> <span class="string">'/usr/lib/python3/dist-packages/IPython/extensions'</span>,</span><br><span class="line"> <span class="string">'/home/python/.ipython'</span>]</span><br></pre></td></tr></table></figure><h2 id="2-重新导入模块"><a href="#2-重新导入模块" class="headerlink" title="2. 重新导入模块"></a>2. 重新导入模块</h2><p>模块被导入后，<code>import module</code>不能重新导入模块，重新导入需用<code>reload</code></p><p><img src="images_import/002.png" alt></p><p><img src="images_import/003.png" alt></p><p><img src="images_import/004.png" alt></p><p><img src="images_import/005.png" alt></p><h2 id="3-多模块开发时的注意点"><a href="#3-多模块开发时的注意点" class="headerlink" title="3. 多模块开发时的注意点"></a>3. 多模块开发时的注意点</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">recv_msg.py模块</span><br><span class="line">from common import RECV_DATA_LIST</span><br><span class="line"># from common import HANDLE_FLAG</span><br><span class="line">import common</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def recv_msg():</span><br><span class="line">    &quot;&quot;&quot;模拟接收到数据，然后添加到common模块中的列表中&quot;&quot;&quot;</span><br><span class="line">    print(&quot;---&gt;recv_msg&quot;)</span><br><span class="line">    for i in range(5):</span><br><span class="line">        RECV_DATA_LIST.append(i)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def test_recv_data():</span><br><span class="line">    &quot;&quot;&quot;测试接收到的数据&quot;&quot;&quot;</span><br><span class="line">    print(&quot;---&gt;test_recv_data&quot;)</span><br><span class="line">    print(RECV_DATA_LIST)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def recv_msg_next():</span><br><span class="line">    &quot;&quot;&quot;已经处理完成后，再接收另外的其他数据&quot;&quot;&quot;</span><br><span class="line">    print(&quot;---&gt;recv_msg_next&quot;)</span><br><span class="line">    # if HANDLE_FLAG:</span><br><span class="line">    if common.HANDLE_FLAG:</span><br><span class="line">        print(&quot;------发现之前的数据已经处理完成，这里进行接收其他的数据(模拟过程...)----&quot;)</span><br><span class="line">    else:</span><br><span class="line">        print(&quot;------发现之前的数据未处理完，等待中....------&quot;)</span><br><span class="line">handle_msg.py模块</span><br><span class="line">from common import RECV_DATA_LIST</span><br><span class="line"># from common import HANDLE_FLAG</span><br><span class="line">import common</span><br><span class="line"></span><br><span class="line">def handle_data():</span><br><span class="line">    &quot;&quot;&quot;模拟处理recv_msg模块接收的数据&quot;&quot;&quot;</span><br><span class="line">    print(&quot;---&gt;handle_data&quot;)</span><br><span class="line">    for i in RECV_DATA_LIST:</span><br><span class="line">        print(i)</span><br><span class="line"></span><br><span class="line">    # 既然处理完成了，那么将变量HANDLE_FLAG设置为True，意味着处理完成</span><br><span class="line">    # global HANDLE_FLAG</span><br><span class="line">    # HANDLE_FLAG = True</span><br><span class="line">    common.HANDLE_FLAG = True</span><br><span class="line"></span><br><span class="line">def test_handle_data():</span><br><span class="line">    &quot;&quot;&quot;测试处理是否完成，变量是否设置为True&quot;&quot;&quot;</span><br><span class="line">    print(&quot;---&gt;test_handle_data&quot;)</span><br><span class="line">    # if HANDLE_FLAG:</span><br><span class="line">    if common.HANDLE_FLAG:</span><br><span class="line">        print(&quot;=====已经处理完成====&quot;)</span><br><span class="line">    else:</span><br><span class="line">        print(&quot;=====未处理完成====&quot;)</span><br><span class="line">main.py模块</span><br><span class="line">from recv_msg import *</span><br><span class="line">from handle_msg import *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    # 1. 接收数据</span><br><span class="line">    recv_msg()</span><br><span class="line">    # 2. 测试是否接收完毕</span><br><span class="line">    test_recv_data()</span><br><span class="line">    # 3. 判断如果处理完成，则接收其它数据</span><br><span class="line">    recv_msg_next()</span><br><span class="line">    # 4. 处理数据</span><br><span class="line">    handle_data()</span><br><span class="line">    # 5. 测试是否处理完毕</span><br><span class="line">    test_handle_data()</span><br><span class="line">    # 6. 判断如果处理完成，则接收其它数据</span><br><span class="line">    recv_msg_next()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p><img src="images_import/006.png" alt></p><p><img src="images_import/007.png" alt></p><h1 id="再议-封装、继承、多态"><a href="#再议-封装、继承、多态" class="headerlink" title="再议 封装、继承、多态"></a>再议 封装、继承、多态</h1><p>封装、继承、多态 是面向对象的3大特性</p><h2 id="为啥要封装"><a href="#为啥要封装" class="headerlink" title="为啥要封装"></a>为啥要封装</h2><p><img src="/images_duixiang/001.png" alt></p><p><img src="/images_duixiang/002.png" alt></p><h2 id="好处"><a href="#好处" class="headerlink" title="好处"></a>好处</h2><blockquote><ol><li>在使用面向过程编程时，当需要对数据处理时，需要考虑用哪个模板中哪个函数来进行操作，但是当用面向对象编程时，因为已经将数据存储到了这个独立的空间中，这个独立的空间（即对象）中通过一个特殊的变量（<strong>class</strong>）能够获取到类（模板），而且这个类中的方法是有一定数量的，与此类无关的将不会出现在本类中，因此需要对数据处理时，可以很快速的定位到需要的方法是谁 这样更方便</li><li>全局变量是只能有1份的，多很多个函数需要多个备份时，往往需要利用其它的变量来进行储存；而通过封装 会将用来存储数据的这个变量 变为了对象中的一个“全局”变量，只要对象不一样那么这个变量就可以再有1份，所以这样更方便</li><li>代码划分更清晰</li></ol></blockquote><p>面向过程</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">全局变量<span class="number">1</span></span><br><span class="line">全局变量<span class="number">2</span></span><br><span class="line">全局变量<span class="number">3</span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> 函数1<span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> 函数2<span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> 函数3<span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> 函数4<span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> 函数5<span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>面向对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 类<span class="params">(object)</span>:</span></span><br><span class="line">    属性<span class="number">1</span></span><br><span class="line">    属性<span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> 方法1<span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> 方法2<span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> 类2<span class="params">(object)</span>:</span></span><br><span class="line">    属性<span class="number">3</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> 方法3<span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> 方法4<span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> 方法5<span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h2 id="为啥要继承"><a href="#为啥要继承" class="headerlink" title="为啥要继承"></a>为啥要继承</h2><p><img src="/images_duixiang/003.png" alt></p><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><blockquote><ol><li>能够提升代码的重用率，即开发一个类，可以在多个子功能中直接使用</li><li>继承能够有效的进行代码的管理，当某个类有问题只要修改这个类就行，而其继承这个类的子类往往不需要就修改</li></ol></blockquote><h2 id="怎样理解多态"><a href="#怎样理解多态" class="headerlink" title="怎样理解多态"></a>怎样理解多态</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MiniOS</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""MiniOS 操作系统类 """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.apps = []  <span class="comment"># 安装的应用程序名称列表</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"%s 安装的软件列表为 %s"</span> % (self.name, str(self.apps))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">install_app</span><span class="params">(self, app)</span>:</span></span><br><span class="line">        <span class="comment"># 判断是否已经安装了软件</span></span><br><span class="line">        <span class="keyword">if</span> app.name <span class="keyword">in</span> self.apps:</span><br><span class="line">            print(<span class="string">"已经安装了 %s，无需再次安装"</span> % app.name)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            app.install()</span><br><span class="line">            self.apps.append(app.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, version, desc)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.version = version</span><br><span class="line">        self.desc = desc</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"%s 的当前版本是 %s - %s"</span> % (self.name, self.version, self.desc)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">install</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"将 %s [%s] 的执行程序复制到程序目录..."</span> % (self.name, self.version))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PyCharm</span><span class="params">(App)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Chrome</span><span class="params">(App)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">install</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"正在解压缩安装程序..."</span>)</span><br><span class="line">        super().install()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">linux = MiniOS(<span class="string">"Linux"</span>)</span><br><span class="line">print(linux)</span><br><span class="line"></span><br><span class="line">pycharm = PyCharm(<span class="string">"PyCharm"</span>, <span class="string">"1.0"</span>, <span class="string">"python 开发的 IDE 环境"</span>)</span><br><span class="line">chrome = Chrome(<span class="string">"Chrome"</span>, <span class="string">"2.0"</span>, <span class="string">"谷歌浏览器"</span>)</span><br><span class="line"></span><br><span class="line">linux.install_app(pycharm)</span><br><span class="line">linux.install_app(chrome)</span><br><span class="line">linux.install_app(chrome)</span><br><span class="line"></span><br><span class="line">print(linux)</span><br></pre></td></tr></table></figure><p>运行结果<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Linux 安装的软件列表为 []</span><br><span class="line">将 PyCharm [1.0] 的执行程序复制到程序目录...</span><br><span class="line">正在解压缩安装程序...</span><br><span class="line">将 Chrome [2.0] 的执行程序复制到程序目录...</span><br><span class="line">已经安装了 Chrome，无需再次安装</span><br><span class="line">Linux 安装的软件列表为 [&apos;PyCharm&apos;, &apos;Chrome&apos;]</span><br></pre></td></tr></table></figure><p></p><h1 id="多继承以及MRO顺序"><a href="#多继承以及MRO顺序" class="headerlink" title="多继承以及MRO顺序"></a>多继承以及MRO顺序</h1><h2 id="1-单独调用父类的方法"><a href="#1-单独调用父类的方法" class="headerlink" title="1. 单独调用父类的方法"></a>1. 单独调用父类的方法</h2><p>父类被调用多次<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">"******多继承使用类名.__init__ 发生的状态******"</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        print(<span class="string">'parent的init开始被调用'</span>)</span><br><span class="line">        self.name = name</span><br><span class="line">        print(<span class="string">'parent的init结束被调用'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son1</span><span class="params">(Parent)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age)</span>:</span></span><br><span class="line">        print(<span class="string">'Son1的init开始被调用'</span>)</span><br><span class="line">        self.age = age</span><br><span class="line">        Parent.__init__(self, name)</span><br><span class="line">        print(<span class="string">'Son1的init结束被调用'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son2</span><span class="params">(Parent)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, gender)</span>:</span></span><br><span class="line">        print(<span class="string">'Son2的init开始被调用'</span>)</span><br><span class="line">        self.gender = gender</span><br><span class="line">        Parent.__init__(self, name)</span><br><span class="line">        print(<span class="string">'Son2的init结束被调用'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Grandson</span><span class="params">(Son1, Son2)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age, gender)</span>:</span></span><br><span class="line">        print(<span class="string">'Grandson的init开始被调用'</span>)</span><br><span class="line">        Son1.__init__(self, name, age)  <span class="comment"># 单独调用父类的初始化方法</span></span><br><span class="line">        Son2.__init__(self, name, gender)</span><br><span class="line">        print(<span class="string">'Grandson的init结束被调用'</span>)</span><br><span class="line"></span><br><span class="line">gs = Grandson(<span class="string">'grandson'</span>, <span class="number">12</span>, <span class="string">'男'</span>)</span><br><span class="line">print(<span class="string">'姓名：'</span>, gs.name)</span><br><span class="line">print(<span class="string">'年龄：'</span>, gs.age)</span><br><span class="line">print(<span class="string">'性别：'</span>, gs.gender)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"******多继承使用类名.__init__ 发生的状态******\n\n"</span>)</span><br></pre></td></tr></table></figure><p></p><p>运行结果:<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">******多继承使用类名.__init__ 发生的状态******</span><br><span class="line">Grandson的init开始被调用</span><br><span class="line">Son1的init开始被调用</span><br><span class="line">parent的init开始被调用</span><br><span class="line">parent的init结束被调用</span><br><span class="line">Son1的init结束被调用</span><br><span class="line">Son2的init开始被调用</span><br><span class="line">parent的init开始被调用</span><br><span class="line">parent的init结束被调用</span><br><span class="line">Son2的init结束被调用</span><br><span class="line">Grandson的init结束被调用</span><br><span class="line">姓名： grandson</span><br><span class="line">年龄： 12</span><br><span class="line">性别： 男</span><br><span class="line">******多继承使用类名.__init__ 发生的状态******</span><br></pre></td></tr></table></figure><p></p><h2 id="2-多继承中super调用有所父类的被重写的方法"><a href="#2-多继承中super调用有所父类的被重写的方法" class="headerlink" title="2. 多继承中super调用有所父类的被重写的方法"></a>2. 多继承中super调用有所父类的被重写的方法</h2><p>使用super方法父类被调用一次<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"******多继承使用super().__init__ 发生的状态******"</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, *args, **kwargs)</span>:</span>  <span class="comment"># 为避免多继承报错，使用不定长参数，接受参数</span></span><br><span class="line">        print(<span class="string">'parent的init开始被调用'</span>)</span><br><span class="line">        self.name = name</span><br><span class="line">        print(<span class="string">'parent的init结束被调用'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son1</span><span class="params">(Parent)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age, *args, **kwargs)</span>:</span>  <span class="comment"># 为避免多继承报错，使用不定长参数，接受参数</span></span><br><span class="line">        print(<span class="string">'Son1的init开始被调用'</span>)</span><br><span class="line">        self.age = age</span><br><span class="line">        super().__init__(name, *args, **kwargs)  <span class="comment"># 为避免多继承报错，使用不定长参数，接受参数</span></span><br><span class="line">        print(<span class="string">'Son1的init结束被调用'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son2</span><span class="params">(Parent)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, gender, *args, **kwargs)</span>:</span>  <span class="comment"># 为避免多继承报错，使用不定长参数，接受参数</span></span><br><span class="line">        print(<span class="string">'Son2的init开始被调用'</span>)</span><br><span class="line">        self.gender = gender</span><br><span class="line">        super().__init__(name, *args, **kwargs)  <span class="comment"># 为避免多继承报错，使用不定长参数，接受参数</span></span><br><span class="line">        print(<span class="string">'Son2的init结束被调用'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Grandson</span><span class="params">(Son1, Son2)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age, gender)</span>:</span></span><br><span class="line">        print(<span class="string">'Grandson的init开始被调用'</span>)</span><br><span class="line">        <span class="comment"># 多继承时，相对于使用类名.__init__方法，要把每个父类全部写一遍</span></span><br><span class="line">        <span class="comment"># 而super只用一句话，执行了全部父类的方法，这也是为何多继承需要全部传参的一个原因</span></span><br><span class="line">        <span class="comment"># super(Grandson, self).__init__(name, age, gender)</span></span><br><span class="line">        super().__init__(name, age, gender)</span><br><span class="line">        print(<span class="string">'Grandson的init结束被调用'</span>)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string"># 以下两种写法结果是一样的</span></span><br><span class="line"><span class="string">super(Grandson, self).__init__(name, age, gender) # 调用指定类的下一个类</span></span><br><span class="line"><span class="string">super().__init__(name, age, gender) # 不指定类的话则默认是当前使用的类的下一个类</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 指定类的调用</span></span><br><span class="line"><span class="string">super(Son2, self).__init__(name, age, gender) # 指定Son1类的下一个类调用，也就是Son2类</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">        </span><br><span class="line">print(Grandson.__mro__) <span class="comment"># 输出一个元组，父类调用的顺序 # python解释器的C3算法计算出来的结果</span></span><br><span class="line"></span><br><span class="line">gs = Grandson(<span class="string">'grandson'</span>, <span class="number">12</span>, <span class="string">'男'</span>)</span><br><span class="line">print(<span class="string">'姓名：'</span>, gs.name)</span><br><span class="line">print(<span class="string">'年龄：'</span>, gs.age)</span><br><span class="line">print(<span class="string">'性别：'</span>, gs.gender)</span><br><span class="line">print(<span class="string">"******多继承使用super().__init__ 发生的状态******\n\n"</span>)</span><br></pre></td></tr></table></figure><p></p><p>运行结果：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">******多继承使用super().__init__ 发生的状态******</span><br><span class="line">(&lt;class '__main__.Grandson'&gt;, &lt;class '__main__.Son1'&gt;, &lt;class '__main__.Son2'&gt;, &lt;class '__main__.Parent'&gt;, &lt;class 'object'&gt;)</span><br><span class="line">Grandson的init开始被调用</span><br><span class="line">Son1的init开始被调用</span><br><span class="line">Son2的init开始被调用</span><br><span class="line">parent的init开始被调用</span><br><span class="line">parent的init结束被调用</span><br><span class="line">Son2的init结束被调用</span><br><span class="line">Son1的init结束被调用</span><br><span class="line">Grandson的init结束被调用</span><br><span class="line">姓名： grandson</span><br><span class="line">年龄： <span class="number">12</span></span><br><span class="line">性别： 男</span><br><span class="line">******多继承使用super().__init__ 发生的状态******</span><br></pre></td></tr></table></figure><p></p><p>注意：</p><blockquote><ol><li>以上2个代码执行的结果不同</li><li>如果2个子类中都继承了父类，当在子类中通过父类名调用时，parent被执行了2次</li><li>如果2个子类中都继承了父类，当在子类中通过super调用时，parent被执行了1次</li></ol></blockquote><h2 id="3-单继承中super"><a href="#3-单继承中super" class="headerlink" title="3. 单继承中super"></a>3. 单继承中super</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"******单继承使用super().__init__ 发生的状态******"</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        print(<span class="string">'parent的init开始被调用'</span>)</span><br><span class="line">        self.name = name</span><br><span class="line">        print(<span class="string">'parent的init结束被调用'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son1</span><span class="params">(Parent)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age)</span>:</span></span><br><span class="line">        print(<span class="string">'Son1的init开始被调用'</span>)</span><br><span class="line">        self.age = age</span><br><span class="line">        super().__init__(name)  <span class="comment"># 单继承不能提供全部参数</span></span><br><span class="line">        print(<span class="string">'Son1的init结束被调用'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Grandson</span><span class="params">(Son1)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age, gender)</span>:</span></span><br><span class="line">        print(<span class="string">'Grandson的init开始被调用'</span>)</span><br><span class="line">        super().__init__(name, age)  <span class="comment"># 单继承不能提供全部参数</span></span><br><span class="line">        print(<span class="string">'Grandson的init结束被调用'</span>)</span><br><span class="line"></span><br><span class="line">print(Grandson.__mro__)</span><br><span class="line"></span><br><span class="line">gs = Grandson(<span class="string">'grandson'</span>, <span class="number">12</span>, <span class="string">'男'</span>)</span><br><span class="line">print(<span class="string">'姓名：'</span>, gs.name)</span><br><span class="line">print(<span class="string">'年龄：'</span>, gs.age)</span><br><span class="line"><span class="comment">#print('性别：', gs.gender)</span></span><br><span class="line">print(<span class="string">"******单继承使用super().__init__ 发生的状态******\n\n"</span>)</span><br></pre></td></tr></table></figure><p>运行结果：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">******单继承使用super().__init__ 发生的状态******</span><br><span class="line">(&lt;class '__main__.Grandson'&gt;, &lt;class '__main__.Son1'&gt;, &lt;class '__main__.Parent'&gt;, &lt;class 'object'&gt;)</span><br><span class="line">Grandson的init开始被调用</span><br><span class="line">Son1的init开始被调用</span><br><span class="line">parent的init开始被调用</span><br><span class="line">parent的init结束被调用</span><br><span class="line">Son1的init结束被调用</span><br><span class="line">Grandson的init结束被调用</span><br><span class="line">姓名： grandson</span><br><span class="line">年龄： <span class="number">12</span></span><br><span class="line">******单继承使用super().__init__ 发生的状态******</span><br></pre></td></tr></table></figure><p></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>super().<strong>init</strong>相对于类名.<strong>init</strong>，在单继承上用法基本无差</li><li>但在多继承上有区别，super方法能保证每个父类的方法只会执行一次，而使用类名的方法会导致方法被执行多次，具体看前面的输出结果</li><li>多继承时，使用super方法，对父类的传参数，应该是由于python中super的算法导致的原因，必须把参数全部传递，否则会报错</li><li>单继承时，使用super方法，则不能全部传递，只能传父类方法所需的参数，否则会报错</li><li>多继承时，相对于使用类名.<strong>init</strong>方法，要把每个父类全部写一遍, 而使用super方法，只需写一句话便执行了全部父类的方法，这也是为何多继承需要全部传参的一个原因</li></ol><h2 id="小试牛刀-以下为面试题"><a href="#小试牛刀-以下为面试题" class="headerlink" title="小试牛刀(以下为面试题)"></a>小试牛刀(以下为面试题)</h2><blockquote><p>以下的代码的输出将是什么? 说出你的答案并解释。<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span><span class="params">(object)</span>:</span></span><br><span class="line">    x = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child1</span><span class="params">(Parent)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child2</span><span class="params">(Parent)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">print(Parent.x, Child1.x, Child2.x)</span><br><span class="line">Child1.x = <span class="number">2</span></span><br><span class="line">print(Parent.x, Child1.x, Child2.x)</span><br><span class="line">Parent.x = <span class="number">3</span></span><br><span class="line">print(Parent.x, Child1.x, Child2.x)</span><br></pre></td></tr></table></figure><p></p></blockquote><p>答案, 以上代码的输出是：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1 1 1</span><br><span class="line">1 2 1</span><br><span class="line">3 2 3</span><br></pre></td></tr></table></figure><p></p><p>使你困惑或是惊奇的是关于最后一行的输出是 3 2 3 而不是 3 2 1。为什么改变了 Parent.x 的值还会改变 Child2.x 的值，但是同时 Child1.x 值却没有改变？</p><p>这个答案的关键是，在 Python 中，类变量在内部是作为字典处理的。如果一个变量的名字没有在当前类的字典中发现，将搜索祖先类（比如父类）直到被引用的变量名被找到（如果这个被引用的变量名既没有在自己所在的类又没有在祖先类中找到，会引发一个 AttributeError 异常 ）。</p><p>因此，在父类中设置 x = 1 会使得类变量 x 在引用该类和其任何子类中的值为 1。这就是因为第一个 print 语句的输出是 1 1 1。</p><p>随后，如果任何它的子类重写了该值（例如，我们执行语句 Child1.x = 2），然后，该值仅仅在子类中被改变。这就是为什么第二个 print 语句的输出是 1 2 1。</p><p>最后，如果该值在父类中被改变（例如，我们执行语句 Parent.x = 3），这个改变会影响到任何未重写该值的子类当中的值（在这个示例中被影响的子类是 Child2）。这就是为什么第三个 print 输出是 3 2 3。</p><p>自己的想法，按顺序解析<br>print(Parent.x, Child1.x, Child2.x)，其中Parent.x是调用Parent类中的x属性，输出结果是1；Child1.x是输出Child1类中的x属性，本类没有的话则到父类中查找，父类Parent中有，则输出结果是1；Child2.x同理。<br>Child1.x = 2相当于给Child1类添加一个类属性。<br>print(Parent.x, Child1.x, Child2.x)，其中Parent.x是调用Parent类中的x属性，输出结果是1；Child1.x是输出Child1类中的x属性，本类中有这个属性则直接输出，不用到父类中查找，输出的结果是2；Child2.x还是从父类中查找，输出结果是1。<br>Parent.x = 3相当于修改父类Parent中x类属性的值。<br>print(Parent.x, Child1.x, Child2.x)，其中Parent.x是调用Parent类中的x属性，输出结果是3；Child1.x是输出Child1类中的x属性，本类中有这个属性则直接输出，不用到父类中查找，输出的结果是2；Child2.x还是从父类中查找，输出结果是3。</p><h1 id="再论静态方法和类方法"><a href="#再论静态方法和类方法" class="headerlink" title="再论静态方法和类方法"></a>再论静态方法和类方法</h1><h2 id="1-类属性、实例属性"><a href="#1-类属性、实例属性" class="headerlink" title="1. 类属性、实例属性"></a>1. 类属性、实例属性</h2><p>它们在定义和使用中有所区别，而最本质的区别是内存中保存的位置不同，</p><ul><li>实例属性属于对象</li><li>类属性属于类</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Province</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="comment"># 类属性</span></span><br><span class="line">    country = <span class="string">'中国'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        <span class="comment"># 实例属性</span></span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个实例对象</span></span><br><span class="line">obj = Province(<span class="string">'山东省'</span>)</span><br><span class="line"><span class="comment"># 直接访问实例属性</span></span><br><span class="line">print(obj.name)</span><br><span class="line"><span class="comment"># 直接访问类属性</span></span><br><span class="line">Province.country</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过实例对象访问类属性 obj.__class__.country</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Province('山东省')做如下两件事情：</span></span><br><span class="line"><span class="comment"># 1. 调用__new__方法，创建对象，通俗点说是创建一个内存空间</span></span><br><span class="line"><span class="comment"># 2. 调用__init__方法，对刚才申请的空间进行初始化</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># __class__指向类对象</span></span><br></pre></td></tr></table></figure><p>由上述代码可以看出【实例属性需要通过对象来访问】【类属性通过类访问】，在使用上可以看出实例属性和类属性的归属是不同的。</p><p>其在内容的存储方式类似如下图：<br><img src="/images_duixiang/004.png" alt></p><p>由上图看出：</p><ul><li>类属性在内存中只保存一份</li><li>实例属性在每个对象中都要保存一份</li></ul><p>应用场景：</p><ul><li>通过类创建实例对象时，如果每个对象需要具有相同名字的属性，那么就使用类属性，用一份即可</li></ul><h2 id="2-实例方法、静态方法和类方法"><a href="#2-实例方法、静态方法和类方法" class="headerlink" title="2. 实例方法、静态方法和类方法"></a>2. 实例方法、静态方法和类方法</h2><p>方法包括：实例方法、静态方法和类方法，三种方法在内存中都归属于类，区别在于调用方式不同。</p><ul><li>实例方法：由对象调用；至少一个self参数；执行实例方法时，自动将调用该方法的对象赋值给self；</li><li>类方法：由类调用； 至少一个cls参数；执行类方法时，自动将调用该方法的类赋值给cls；</li><li>静态方法：由类调用；无默认参数；</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">ord_func</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">""" 定义实例方法，至少有一个self参数，传递的是实例对象的引用 """</span></span><br><span class="line">        <span class="comment"># print(self.name)</span></span><br><span class="line">        <span class="comment"># 实例方法可以修改实例对象的属性</span></span><br><span class="line">        print(<span class="string">'实例方法'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">class_func</span><span class="params">(cls)</span>:</span></span><br><span class="line">        <span class="string">""" 定义类方法，至少有一个cls参数 ，传递的是类对象的引用"""</span></span><br><span class="line">        <span class="comment"># 类方法可以修改类对象的属性</span></span><br><span class="line">        print(<span class="string">'类方法'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">static_func</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="string">""" 定义静态方法 ，无默认参数"""</span></span><br><span class="line">        print(<span class="string">'静态方法'</span>)</span><br><span class="line"></span><br><span class="line">f = Foo(<span class="string">"中国"</span>)</span><br><span class="line"><span class="comment"># 调用实例方法</span></span><br><span class="line">f.ord_func()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用类方法</span></span><br><span class="line">Foo.class_func()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用静态方法</span></span><br><span class="line">Foo.static_func()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过实例对象调用类方法</span></span><br><span class="line">f.__class__.class_func()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过实例对象调用静态方法</span></span><br><span class="line">f.__class__.static_func()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 总结</span></span><br><span class="line"><span class="comment"># 1.实例对象可以调用类方法，实例方法和静态方法</span></span><br><span class="line"><span class="comment"># 2.类对象可以调用类方法和静态方法，不能调用实例方法</span></span><br></pre></td></tr></table></figure><p><img src="/images_duixiang/005.png" alt></p><p>对比</p><ul><li>相同点：对于所有的方法而言，均属于类，所以在内存中也只保存一份</li><li>不同点：方法调用者不同、调用方法时自动传入的参数不同</li></ul><h1 id="property属性"><a href="#property属性" class="headerlink" title="property属性"></a>property属性</h1><h2 id="1-什么是property属性"><a href="#1-什么是property属性" class="headerlink" title="1. 什么是property属性"></a>1. 什么是property属性</h2><p>一种用起来像是使用的实例属性一样的特殊属性，可以对应于某个方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ######## 定义 ########</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义property属性，把实例方法装饰成一个实例属性</span></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">prop</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""返回一个值"""</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ######## 调用 ########</span></span><br><span class="line">foo_obj = Foo()</span><br><span class="line">foo_obj.func()  <span class="comment"># 调用实例方法</span></span><br><span class="line">foo_obj.prop  <span class="comment"># 调用property属性</span></span><br></pre></td></tr></table></figure><p><img src="/images_duixiang/006.png" alt></p><p>property属性的定义和调用要注意一下几点：</p><ul><li>定义时，在实例方法的基础上添加 @property 装饰器；并且仅有一个self参数</li><li>调用时，无需括号</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">方法：foo_obj.func()</span><br><span class="line">property属性：foo_obj.prop</span><br></pre></td></tr></table></figure><h2 id="2-简单的实例"><a href="#2-简单的实例" class="headerlink" title="2. 简单的实例"></a>2. 简单的实例</h2><blockquote><p>对于京东商城中显示电脑主机的列表页面，每次请求不可能把数据库中的所有内容都显示到页面上，而是通过分页的功能局部显示，所以在向数据库中请求数据时就要显示的指定获取从第m条到第n条的所有数据 这个分页的功能包括：</p><blockquote><ul><li>根据用户请求的当前页和总数据条数计算出 m 和 n</li><li>根据m 和 n 去数据库中请求数据</li></ul></blockquote></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ######## 定义 ########</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pager</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, current_page)</span>:</span></span><br><span class="line">        <span class="comment"># 用户当前请求的页码（第一页、第二页...）</span></span><br><span class="line">        self.current_page = current_page</span><br><span class="line">        <span class="comment"># 每页默认显示10条数据</span></span><br><span class="line">        self.per_items = <span class="number">10</span> </span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start</span><span class="params">(self)</span>:</span></span><br><span class="line">        val = (self.current_page - <span class="number">1</span>) * self.per_items</span><br><span class="line">        <span class="keyword">return</span> val</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">end</span><span class="params">(self)</span>:</span></span><br><span class="line">        val = self.current_page * self.per_items</span><br><span class="line">        <span class="keyword">return</span> val</span><br><span class="line"></span><br><span class="line"><span class="comment"># ######## 调用 ########</span></span><br><span class="line">p = Pager(<span class="number">1</span>)</span><br><span class="line">p.start  <span class="comment"># 就是起始值，即：m</span></span><br><span class="line">p.end  <span class="comment"># 就是结束值，即：n</span></span><br></pre></td></tr></table></figure><p>从上述可见</p><ul><li>Python的property属性的功能是：property属性内部进行一系列的逻辑计算，最终将计算结果返回。</li></ul><h2 id="3-property属性的有两种方式"><a href="#3-property属性的有两种方式" class="headerlink" title="3. property属性的有两种方式"></a>3. property属性的有两种方式</h2><ul><li>装饰器 即：在方法上应用装饰器</li><li>类属性 即：在类中定义值为property对象的类属性</li></ul><h3 id="3-1-装饰器方式"><a href="#3-1-装饰器方式" class="headerlink" title="3.1 装饰器方式"></a>3.1 装饰器方式</h3><p>在类的实例方法上应用@property装饰器</p><p>Python中的类有<code>经典类</code>和<code>新式类</code>，<code>新式类</code>的属性比<code>经典类</code>的属性丰富。（ 如果类继object，那么该类是新式类 ）</p><h4 id="3-1-1经典类，具有一种-property装饰器"><a href="#3-1-1经典类，具有一种-property装饰器" class="headerlink" title="3.1.1经典类，具有一种@property装饰器"></a>3.1.1经典类，具有一种@property装饰器</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">########## 定义 ########    </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Goods</span>:</span></span><br><span class="line">    </span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">price</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"laowang"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">########## 调用 ########</span></span><br><span class="line">obj = Goods()</span><br><span class="line">result = obj.price  <span class="comment"># 自动执行 @property 修饰的 price 方法，并获取方法的返回值</span></span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><h4 id="3-1-2-新式类，具有三种-property装饰器"><a href="#3-1-2-新式类，具有三种-property装饰器" class="headerlink" title="3.1.2 新式类，具有三种@property装饰器"></a>3.1.2 新式类，具有三种@property装饰器</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="comment"># ######## 定义 ########</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Goods</span>:</span></span><br><span class="line">    <span class="string">"""python3中默认继承object类</span></span><br><span class="line"><span class="string">       以python2、3执行此程序的结果不同，因为只有在python3中才有@xxx.setter  @xxx.deleter</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">price</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'@property'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @price.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">price</span><span class="params">(self, value)</span>:</span></span><br><span class="line">        print(<span class="string">'@price.setter'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @price.deleter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">price</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'@price.deleter'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ######## 调用 ########</span></span><br><span class="line">obj = Goods()</span><br><span class="line">obj.price          <span class="comment"># 自动执行 @property 修饰的 price 方法，并获取方法的返回值</span></span><br><span class="line">obj.price = <span class="number">123</span>    <span class="comment"># 自动执行 @price.setter 修饰的 price 方法，并将  123 赋值给方法的参数</span></span><br><span class="line"><span class="keyword">del</span> obj.price      <span class="comment"># 自动执行 @price.deleter 修饰的 price 方法</span></span><br></pre></td></tr></table></figure><p>注意</p><ul><li>经典类中的属性只有一种访问方式，其对应被 @property 修饰的方法</li><li>新式类中的属性有三种访问方式，并分别对应了三个被@property、@方法名.setter、@方法名.deleter修饰的方法</li></ul><p>由于新式类中具有三种访问方式，我们可以根据它们几个属性的访问特点，分别将三个方法定义为对同一个属性：获取、修改、删除</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Goods</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 原价</span></span><br><span class="line">        self.original_price = <span class="number">100</span></span><br><span class="line">        <span class="comment"># 折扣</span></span><br><span class="line">        self.discount = <span class="number">0.8</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">price</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 实际价格 = 原价 * 折扣</span></span><br><span class="line">        new_price = self.original_price * self.discount</span><br><span class="line">        <span class="keyword">return</span> new_price</span><br><span class="line"></span><br><span class="line"><span class="meta">    @price.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">price</span><span class="params">(self, value)</span>:</span></span><br><span class="line">        self.original_price = value</span><br><span class="line"></span><br><span class="line"><span class="meta">    @price.deleter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">price</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">del</span> self.original_price</span><br><span class="line"></span><br><span class="line">obj = Goods()</span><br><span class="line">obj.price         <span class="comment"># 获取商品价格</span></span><br><span class="line">obj.price = <span class="number">200</span>   <span class="comment"># 修改商品原价</span></span><br><span class="line"><span class="keyword">del</span> obj.price     <span class="comment"># 删除商品原价</span></span><br></pre></td></tr></table></figure><h3 id="3-2-类属性方式"><a href="#3-2-类属性方式" class="headerlink" title="3.2 类属性方式"></a>3.2 类属性方式</h3><ul><li>当使用类属性的方式创建property属性时，<code>经典类</code>和<code>新式类</code>无区别<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_bar</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'laowang'</span></span><br><span class="line"></span><br><span class="line">    BAR = property(get_bar)</span><br><span class="line"></span><br><span class="line">obj = Foo()</span><br><span class="line">reuslt = obj.BAR  <span class="comment"># 自动调用get_bar方法，并获取方法的返回值</span></span><br><span class="line">print(reuslt)</span><br></pre></td></tr></table></figure></li></ul><p>property方法中有个四个参数</p><ul><li>第一个参数是方法名，调用 对象.属性 时自动触发执行方法</li><li>第二个参数是方法名，调用 对象.属性 ＝ XXX 时自动触发执行方法</li><li>第三个参数是方法名，调用 del 对象.属性 时自动触发执行方法</li><li>第四个参数是字符串，调用 对象.属性.<strong>doc</strong> ，此参数是该属性的描述信息</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_bar</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"getter..."</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'laowang'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_bar</span><span class="params">(self, value)</span>:</span> </span><br><span class="line">        <span class="string">"""必须两个参数"""</span></span><br><span class="line">        print(<span class="string">"setter..."</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'set value'</span> + value</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">del_bar</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"deleter..."</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'laowang'</span></span><br><span class="line"></span><br><span class="line">    BAR = property(get_bar, set_bar, del_bar, <span class="string">"description..."</span>)</span><br><span class="line"></span><br><span class="line">obj = Foo()</span><br><span class="line"></span><br><span class="line">obj.BAR  <span class="comment"># 自动调用第一个参数中定义的方法：get_bar</span></span><br><span class="line">obj.BAR = <span class="string">"alex"</span>  <span class="comment"># 自动调用第二个参数中定义的方法：set_bar方法，并将“alex”当作参数传入</span></span><br><span class="line">desc = Foo.BAR.__doc__  <span class="comment"># 自动获取第四个参数中设置的值：description...</span></span><br><span class="line">print(desc)</span><br><span class="line"><span class="keyword">del</span> obj.BAR  <span class="comment"># 自动调用第三个参数中定义的方法：del_bar方法</span></span><br></pre></td></tr></table></figure><p>由于<code>类属性方式</code>创建property属性具有3种访问方式，我们可以根据它们几个属性的访问特点，分别将三个方法定义为对同一个属性：获取、修改、删除</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Goods</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 原价</span></span><br><span class="line">        self.original_price = <span class="number">100</span></span><br><span class="line">        <span class="comment"># 折扣</span></span><br><span class="line">        self.discount = <span class="number">0.8</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_price</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 实际价格 = 原价 * 折扣</span></span><br><span class="line">        new_price = self.original_price * self.discount</span><br><span class="line">        <span class="keyword">return</span> new_price</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_price</span><span class="params">(self, value)</span>:</span></span><br><span class="line">        self.original_price = value</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">del_price</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">del</span> self.original_price</span><br><span class="line"></span><br><span class="line">    PRICE = property(get_price, set_price, del_price, <span class="string">'价格属性描述...'</span>)</span><br><span class="line"></span><br><span class="line">obj = Goods()</span><br><span class="line">obj.PRICE         <span class="comment"># 获取商品价格</span></span><br><span class="line">obj.PRICE = <span class="number">200</span>   <span class="comment"># 修改商品原价</span></span><br><span class="line"><span class="keyword">del</span> obj.PRICE     <span class="comment"># 删除商品原价</span></span><br></pre></td></tr></table></figure><h2 id="4-Django框架中应用了property属性（了解）"><a href="#4-Django框架中应用了property属性（了解）" class="headerlink" title="4. Django框架中应用了property属性（了解）"></a>4. Django框架中应用了property属性（了解）</h2><p>WEB框架 Django 的视图中 request.POST 就是使用的类属性的方式创建的属性</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WSGIRequest</span><span class="params">(http.HttpRequest)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, environ)</span>:</span></span><br><span class="line">        script_name = get_script_name(environ)</span><br><span class="line">        path_info = get_path_info(environ)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> path_info:</span><br><span class="line">            <span class="comment"># Sometimes PATH_INFO exists, but is empty (e.g. accessing</span></span><br><span class="line">            <span class="comment"># the SCRIPT_NAME URL without a trailing slash). We really need to</span></span><br><span class="line">            <span class="comment"># operate as if they'd requested '/'. Not amazingly nice to force</span></span><br><span class="line">            <span class="comment"># the path like this, but should be harmless.</span></span><br><span class="line">            path_info = <span class="string">'/'</span></span><br><span class="line">        self.environ = environ</span><br><span class="line">        self.path_info = path_info</span><br><span class="line">        self.path = <span class="string">'%s/%s'</span> % (script_name.rstrip(<span class="string">'/'</span>), path_info.lstrip(<span class="string">'/'</span>))</span><br><span class="line">        self.META = environ</span><br><span class="line">        self.META[<span class="string">'PATH_INFO'</span>] = path_info</span><br><span class="line">        self.META[<span class="string">'SCRIPT_NAME'</span>] = script_name</span><br><span class="line">        self.method = environ[<span class="string">'REQUEST_METHOD'</span>].upper()</span><br><span class="line">        _, content_params = cgi.parse_header(environ.get(<span class="string">'CONTENT_TYPE'</span>, <span class="string">''</span>))</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'charset'</span> <span class="keyword">in</span> content_params:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                codecs.lookup(content_params[<span class="string">'charset'</span>])</span><br><span class="line">            <span class="keyword">except</span> LookupError:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.encoding = content_params[<span class="string">'charset'</span>]</span><br><span class="line">        self._post_parse_error = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            content_length = int(environ.get(<span class="string">'CONTENT_LENGTH'</span>))</span><br><span class="line">        <span class="keyword">except</span> (ValueError, TypeError):</span><br><span class="line">            content_length = <span class="number">0</span></span><br><span class="line">        self._stream = LimitedStream(self.environ[<span class="string">'wsgi.input'</span>], content_length)</span><br><span class="line">        self._read_started = <span class="literal">False</span></span><br><span class="line">        self.resolver_match = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_get_scheme</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.environ.get(<span class="string">'wsgi.url_scheme'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_get_request</span><span class="params">(self)</span>:</span></span><br><span class="line">        warnings.warn(<span class="string">'`request.REQUEST` is deprecated, use `request.GET` or '</span></span><br><span class="line">                      <span class="string">'`request.POST` instead.'</span>, RemovedInDjango19Warning, <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> hasattr(self, <span class="string">'_request'</span>):</span><br><span class="line">            self._request = datastructures.MergeDict(self.POST, self.GET)</span><br><span class="line">        <span class="keyword">return</span> self._request</span><br><span class="line"></span><br><span class="line"><span class="meta">    @cached_property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">GET</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># The WSGI spec says 'QUERY_STRING' may be absent.</span></span><br><span class="line">        raw_query_string = get_bytes_from_wsgi(self.environ, <span class="string">'QUERY_STRING'</span>, <span class="string">''</span>)</span><br><span class="line">        <span class="keyword">return</span> http.QueryDict(raw_query_string, encoding=self._encoding)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># ######## 看这里看这里  ########</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_get_post</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> hasattr(self, <span class="string">'_post'</span>):</span><br><span class="line">            self._load_post_and_files()</span><br><span class="line">        <span class="keyword">return</span> self._post</span><br><span class="line"></span><br><span class="line">    <span class="comment"># ######## 看这里看这里  ########</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_set_post</span><span class="params">(self, post)</span>:</span></span><br><span class="line">        self._post = post</span><br><span class="line"></span><br><span class="line"><span class="meta">    @cached_property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">COOKIES</span><span class="params">(self)</span>:</span></span><br><span class="line">        raw_cookie = get_str_from_wsgi(self.environ, <span class="string">'HTTP_COOKIE'</span>, <span class="string">''</span>)</span><br><span class="line">        <span class="keyword">return</span> http.parse_cookie(raw_cookie)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_get_files</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> hasattr(self, <span class="string">'_files'</span>):</span><br><span class="line">            self._load_post_and_files()</span><br><span class="line">        <span class="keyword">return</span> self._files</span><br><span class="line"></span><br><span class="line">    <span class="comment"># ######## 看这里看这里  ########</span></span><br><span class="line">    POST = property(_get_post, _set_post)</span><br><span class="line"></span><br><span class="line">    FILES = property(_get_files)</span><br><span class="line">    REQUEST = property(_get_request)</span><br></pre></td></tr></table></figure><h2 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h2><ul><li>定义property属性共有两种方式，分别是【装饰器】和【类属性】，而【装饰器】方式针对经典类和新式类又有所不同。</li><li>通过使用property属性，能够简化调用者在获取数据的流程</li></ul><h1 id="property属性-应用"><a href="#property属性-应用" class="headerlink" title="property属性-应用"></a>property属性-应用</h1><h2 id="1-私有属性添加getter和setter方法"><a href="#1-私有属性添加getter和setter方法" class="headerlink" title="1. 私有属性添加getter和setter方法"></a>1. 私有属性添加getter和setter方法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Money</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.__money = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getMoney</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.__money</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setMoney</span><span class="params">(self, value)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> isinstance(value, int):</span><br><span class="line">            self.__money = value</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"error:不是整型数字"</span>)</span><br></pre></td></tr></table></figure><h2 id="2-使用property升级getter和setter方法"><a href="#2-使用property升级getter和setter方法" class="headerlink" title="2. 使用property升级getter和setter方法"></a>2. 使用property升级getter和setter方法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Money</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.__money = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getMoney</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.__money</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setMoney</span><span class="params">(self, value)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> isinstance(value, int):</span><br><span class="line">            self.__money = value</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"error:不是整型数字"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义一个属性，当对这个money设置值时调用setMoney,当获取值时调用getMoney</span></span><br><span class="line">    money = property(getMoney, setMoney)  </span><br><span class="line"></span><br><span class="line">a = Money()</span><br><span class="line">a.money = <span class="number">100</span>  <span class="comment"># 调用setMoney方法</span></span><br><span class="line">print(a.money)  <span class="comment"># 调用getMoney方法</span></span><br><span class="line"><span class="comment">#100</span></span><br></pre></td></tr></table></figure><h2 id="3-使用property取代getter和setter方法"><a href="#3-使用property取代getter和setter方法" class="headerlink" title="3. 使用property取代getter和setter方法"></a>3. 使用property取代getter和setter方法</h2><ul><li>重新实现一个属性的设置和读取方法,可做边界判定<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Money</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.__money = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使用装饰器对money进行装饰，那么会自动添加一个叫money的属性，当调用获取money的值时，调用装饰的方法</span></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">money</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.__money</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使用装饰器对money进行装饰，当对money设置值时，调用装饰的方法</span></span><br><span class="line"><span class="meta">    @money.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">money</span><span class="params">(self, value)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> isinstance(value, int):</span><br><span class="line">            self.__money = value</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"error:不是整型数字"</span>)</span><br><span class="line"></span><br><span class="line">a = Money()</span><br><span class="line">a.money = <span class="number">100</span></span><br><span class="line">print(a.money)</span><br></pre></td></tr></table></figure></li></ul><h1 id="魔法属性"><a href="#魔法属性" class="headerlink" title="魔法属性"></a>魔法属性</h1><p>无论人或事物往往都有不按套路出牌的情况，Python的类属性也是如此，存在着一些具有特殊含义的属性，详情如下：</p><h2 id="1-doc"><a href="#1-doc" class="headerlink" title="1. __doc__"></a>1. <code>__doc__</code></h2><ul><li>表示类的描述信息<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></span><br><span class="line">    <span class="string">""" 描述类信息，这是用于看片的神奇 """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">print(Foo.__doc__)</span><br><span class="line"><span class="comment">#输出：类的描述信息</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="2-module-和-class"><a href="#2-module-和-class" class="headerlink" title="2. __module__ 和  __class__"></a>2. <code>__module__</code> 和 <code>__class__</code></h2><ul><li><code>__module__</code> 表示当前操作的对象在那个模块</li><li><code>__class__</code> 表示当前操作的对象的类是什么<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">test.py</span><br><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line"></span><br><span class="line">class Person(object):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.name = &apos;laowang&apos;</span><br><span class="line">main.py</span><br><span class="line">from test import Person</span><br><span class="line"></span><br><span class="line">obj = Person()</span><br><span class="line">print(obj.__module__)  # 输出 test 即：输出模块</span><br><span class="line">print(obj.__class__)  # 输出 test.Person 即：输出类</span><br></pre></td></tr></table></figure></li></ul><h2 id="3-init"><a href="#3-init" class="headerlink" title="3. __init__"></a>3. <code>__init__</code></h2><ul><li>初始化方法，通过类创建对象时，自动触发执行<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = <span class="number">18</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">obj = Person(<span class="string">'laowang'</span>)  <span class="comment"># 自动执行类中的 __init__ 方法</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="4-del"><a href="#4-del" class="headerlink" title="4. __del__"></a>4. <code>__del__</code></h2><ul><li>当对象在内存中被释放时，自动触发执行。<br>注：此方法一般无须定义，因为Python是一门高级语言，程序员在使用时无需关心内存的分配和释放，因为此工作都是交给Python解释器来执行，所以，<strong>del</strong>的调用是由解释器在进行垃圾回收时自动触发执行的。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="5-call"><a href="#5-call" class="headerlink" title="5. __call__"></a>5. <code>__call__</code></h2><ul><li>对象后面加括号，触发执行。<br>注：<code>__init__</code>方法的执行是由创建对象触发的，即：<code>对象 = 类名()</code> ；而对于<code>__call__</code>方法的执行是由对象后加括号触发的，即：<code>对象()</code> 或者 <code>类()()</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">        print(<span class="string">'__call__'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">obj = Foo()  <span class="comment"># 执行 __init__</span></span><br><span class="line">obj()  <span class="comment"># 执行 __call__</span></span><br></pre></td></tr></table></figure><h2 id="6-dict"><a href="#6-dict" class="headerlink" title="6. __dict__"></a>6. <code>__dict__</code></h2><ul><li>类或对象中的所有属性<br>类的实例属性属于对象；类中的类属性和方法等属于类，即：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Province</span><span class="params">(object)</span>:</span></span><br><span class="line">    country = <span class="string">'China'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, count)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.count = count</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">        print(<span class="string">'func'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取类的属性，即：类属性、方法、</span></span><br><span class="line">print(Province.__dict__)</span><br><span class="line"><span class="comment"># 输出：&#123;'__dict__': &lt;attribute '__dict__' of 'Province' objects&gt;, '__module__': '__main__', 'country': 'China', '__doc__': None, '__weakref__': &lt;attribute '__weakref__' of 'Province' objects&gt;, 'func': &lt;function Province.func at 0x101897950&gt;, '__init__': &lt;function Province.__init__ at 0x1018978c8&gt;&#125;</span></span><br><span class="line"></span><br><span class="line">obj1 = Province(<span class="string">'山东'</span>, <span class="number">10000</span>)</span><br><span class="line">print(obj1.__dict__)</span><br><span class="line"><span class="comment"># 获取 对象obj1 的属性</span></span><br><span class="line"><span class="comment"># 输出：&#123;'count': 10000, 'name': '山东'&#125;</span></span><br><span class="line"></span><br><span class="line">obj2 = Province(<span class="string">'山西'</span>, <span class="number">20000</span>)</span><br><span class="line">print(obj2.__dict__)</span><br><span class="line"><span class="comment"># 获取 对象obj1 的属性</span></span><br><span class="line"><span class="comment"># 输出：&#123;'count': 20000, 'name': '山西'&#125;</span></span><br></pre></td></tr></table></figure><h2 id="7-str"><a href="#7-str" class="headerlink" title="7. __str__"></a>7. <code>__str__</code></h2><ul><li>如果一个类中定义了<code>__str__</code>方法，那么在打印 对象 时，默认输出该方法的返回值。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'laowang'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">obj = Foo()</span><br><span class="line">print(obj)</span><br><span class="line"><span class="comment"># 输出：laowang</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="8、-getitem-、-setitem-、-delitem"><a href="#8、-getitem-、-setitem-、-delitem" class="headerlink" title="8、__getitem__、__setitem__、__delitem__"></a>8、<code>__getitem__</code>、<code>__setitem__</code>、<code>__delitem__</code></h2><ul><li>用于索引操作，如字典。以上分别表示获取、设置、删除数据<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getitem__</span><span class="params">(self, key)</span>:</span></span><br><span class="line">        print(<span class="string">'__getitem__'</span>, key)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setitem__</span><span class="params">(self, key, value)</span>:</span></span><br><span class="line">        print(<span class="string">'__setitem__'</span>, key, value)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__delitem__</span><span class="params">(self, key)</span>:</span></span><br><span class="line">        print(<span class="string">'__delitem__'</span>, key)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">obj = Foo()</span><br><span class="line"></span><br><span class="line">result = obj[<span class="string">'k1'</span>]      <span class="comment"># 自动触发执行 __getitem__</span></span><br><span class="line">obj[<span class="string">'k2'</span>] = <span class="string">'laowang'</span>   <span class="comment"># 自动触发执行 __setitem__</span></span><br><span class="line"><span class="keyword">del</span> obj[<span class="string">'k1'</span>]           <span class="comment"># 自动触发执行 __delitem__</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="9、-getslice-、-setslice-、-delslice"><a href="#9、-getslice-、-setslice-、-delslice" class="headerlink" title="9、__getslice__、__setslice__、__delslice__"></a>9、<code>__getslice__</code>、<code>__setslice__</code>、<code>__delslice__</code></h2><ul><li>该三个方法用于分片操作，如：列表<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getslice__</span><span class="params">(self, i, j)</span>:</span></span><br><span class="line">        print(<span class="string">'__getslice__'</span>, i, j)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setslice__</span><span class="params">(self, i, j, sequence)</span>:</span></span><br><span class="line">        print(<span class="string">'__setslice__'</span>, i, j)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__delslice__</span><span class="params">(self, i, j)</span>:</span></span><br><span class="line">        print(<span class="string">'__delslice__'</span>, i, j)</span><br><span class="line"></span><br><span class="line">obj = Foo()</span><br><span class="line"></span><br><span class="line">obj[<span class="number">-1</span>:<span class="number">1</span>]                   <span class="comment"># 自动触发执行 __getslice__</span></span><br><span class="line">obj[<span class="number">0</span>:<span class="number">1</span>] = [<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>]    <span class="comment"># 自动触发执行 __setslice__</span></span><br><span class="line"><span class="keyword">del</span> obj[<span class="number">0</span>:<span class="number">2</span>]                <span class="comment"># 自动触发执行 __delslice__</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="面向对象设计"><a href="#面向对象设计" class="headerlink" title="面向对象设计"></a>面向对象设计</h1><ul><li>继承 - 是基于Python中的属性查找(如X.name)</li><li>多态 - 在X.method方法中，method的意义取决于X的类型</li><li>封装 - 方法和运算符实现行为，数据隐藏默认是一种惯例</li></ul><h2 id="参考实例"><a href="#参考实例" class="headerlink" title="参考实例"></a>参考实例</h2><p>腾讯即时通信模块,初级封装<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Message</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, msgarr=[], toacc=<span class="string">''</span>)</span>:</span></span><br><span class="line">        self.msgbody = msgarr <span class="comment"># 此处为MsgDict对象实例的列表或者空列表</span></span><br><span class="line">        self.toacc = toacc <span class="comment"># toacc为字符串(单发)或者列表(批量发)</span></span><br><span class="line">        self.msgrandom = random.randint(<span class="number">1</span>, <span class="number">1000000000</span>)</span><br><span class="line">        self.msgrequest = &#123;</span><br><span class="line">            <span class="string">'To_Account'</span>: toacc, <span class="comment"># 消息接收方账号</span></span><br><span class="line">            <span class="string">'MsgRandom'</span>: self.msgrandom, <span class="comment"># 消息随机数，由随机函数产生</span></span><br><span class="line">            <span class="string">'MsgBody'</span>: [t.msg <span class="keyword">for</span> t <span class="keyword">in</span> msgarr]</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">del_option</span><span class="params">(self, option)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> option <span class="keyword">in</span> (set(self.msgrequest)-set([<span class="string">'To_Account'</span>, <span class="string">'MsgRandom'</span>, <span class="string">'MsgBody'</span>])):</span><br><span class="line">            self.__dict__.pop(option)</span><br><span class="line">            self.msgrequest.pop(option)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">append_msg</span><span class="params">(self, msg)</span>:</span></span><br><span class="line">        self.msgbody.append(msg)</span><br><span class="line">        self.msgrequest[<span class="string">'MsgBody'</span>].append(msg.msg)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert_msg</span><span class="params">(self, index, msg)</span>:</span></span><br><span class="line">        self.msgbody.insert(index, msg)</span><br><span class="line">        self.msgrequest[<span class="string">'MsgBody'</span>].insert(msg.msg)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">del_msg</span><span class="params">(self, index)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> index <span class="keyword">in</span> range(len(self.msgbody)):</span><br><span class="line">            <span class="keyword">del</span> self.msgbody[index]</span><br><span class="line">            <span class="keyword">del</span> sel.msgrequest[<span class="string">'MsgBody'</span>][index]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_from</span><span class="params">(self, fromacc)</span>:</span></span><br><span class="line">        <span class="comment"># 指定消息的发送方，默认为服务器发送</span></span><br><span class="line">        self.fromacc = fromacc</span><br><span class="line">        self.msgrequest[<span class="string">'From_Account'</span>] = fromacc</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_to</span><span class="params">(self, toacc)</span>:</span></span><br><span class="line">        <span class="comment"># 指定消息的接收方，可以为String(单发),可以为List(批量发送)</span></span><br><span class="line">        self.toacc = toacc</span><br><span class="line">        self.msgrequest[<span class="string">'To_Account'</span>] = toacc</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">refresh_random</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.msgrandom = random.randint(<span class="number">1</span>, <span class="number">1000000000</span>)</span><br><span class="line">        self.msgrequest[<span class="string">'MsgRandom'</span>] = self.msgrandom, <span class="comment"># 消息随机数，由随机函数产生</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_sync</span><span class="params">(self, sync)</span>:</span></span><br><span class="line">        <span class="comment"># 同步选项：1, 把消息同步到From_Account在线终端和漫游上</span></span><br><span class="line">        <span class="comment">#           2, 消息不同步至From_Account</span></span><br><span class="line">        <span class="comment">#           若不填写，默认情况下会将消息同步</span></span><br><span class="line">        <span class="comment">#           仅在单发单聊消息中可调用</span></span><br><span class="line">        self.sync = sync</span><br><span class="line">        self.msgrequest[<span class="string">'SyncOtherMachine'</span>] = sync</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_timestamp</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 设置消息时间戳，unix时间, 仅在单发单聊消息中可以调用</span></span><br><span class="line">        self.timestamp = int(time.time())</span><br><span class="line">        self.msgrequest[<span class="string">'MsgTimeStamp'</span>] = self.timestamp</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_offlinepush</span><span class="params">(self, pushflag=<span class="number">0</span>, desc=<span class="string">''</span>, ext=<span class="string">''</span>, sound=<span class="string">''</span>)</span>:</span></span><br><span class="line">        <span class="comment"># 仅适用于APNa推送，不适用于安卓厂商推送</span></span><br><span class="line">        self.msgrequest[<span class="string">'OfflinePushInfo'</span>] = &#123;</span><br><span class="line">            <span class="string">'PushFlag'</span>: pushflag,</span><br><span class="line">            <span class="string">'Desc'</span>: desc,</span><br><span class="line">            <span class="string">'Ext'</span>: ext,</span><br><span class="line">            <span class="string">'Sound'</span>: sound</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MsgDict</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, msgtype=<span class="string">''</span>, msgcontent=&#123;&#125;)</span>:</span></span><br><span class="line">        self.msgtype = msgtype</span><br><span class="line">        self.msgcontent = msgcontent</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">msg</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="string">'MsgType'</span>: self.msgtype,</span><br><span class="line">            <span class="string">'MsgContent'</span>: self.msgcontent</span><br><span class="line">        &#125; </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_content</span><span class="params">(self, content)</span>:</span></span><br><span class="line">        self.msgcontent = content</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TextMsg</span><span class="params">(MsgDict)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, text=<span class="string">''</span>, msgtype=<span class="string">'TIMTextElem'</span>)</span>:</span> </span><br><span class="line">        self.text = text</span><br><span class="line">        content = &#123;<span class="string">'Text'</span>: text&#125;</span><br><span class="line">        super(TextMsg, self).__init__(msgtype=msgtype, msgcontent=content)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_text</span><span class="params">(self, text)</span>:</span></span><br><span class="line">        self.text = text</span><br><span class="line">        self.msgcontent[<span class="string">'Text'</span>] = text</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LocationMsg</span><span class="params">(MsgDict)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, desc=<span class="string">''</span>, latitude=<span class="number">0</span>, longitude=<span class="number">0</span>, msgtype=<span class="string">'TIMLocationElem'</span>)</span>:</span> </span><br><span class="line">        self.desc = desc</span><br><span class="line">        self.latitude = latitude</span><br><span class="line">        self.longitude = longitude</span><br><span class="line">        content = &#123;</span><br><span class="line">            <span class="string">'Desc'</span>: desc,  <span class="comment"># 地理位置描述信息, String</span></span><br><span class="line">            <span class="string">'Latitude'</span>: latitude, <span class="comment"># 纬度, Number</span></span><br><span class="line">            <span class="string">'Longitude'</span>: longitude <span class="comment"># 经度, Number</span></span><br><span class="line">        &#125;</span><br><span class="line">        super(LocationMsg, self).__init__(msgtype=msgtype, msgcontent=content)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_desc</span><span class="params">(self, desc)</span>:</span></span><br><span class="line">        self.desc = desc</span><br><span class="line">        self.msgcontent[<span class="string">'Desc'</span>] = desc</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_location</span><span class="params">(self, latitude, longitude)</span>:</span></span><br><span class="line">        self.latitude = latitude</span><br><span class="line">        self.longitude = longitude</span><br><span class="line">        self.msgcontent[<span class="string">'Latitude'</span>] = latitude</span><br><span class="line">        self.msgcontent[<span class="string">'Longitude'</span>] = longitude</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_latitude</span><span class="params">(self, latitude)</span>:</span></span><br><span class="line">        self.latitude = latitude</span><br><span class="line">        self.msgcontent[<span class="string">'Latitude'</span>] = latitude</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_longitude</span><span class="params">(self, longitude)</span>:</span></span><br><span class="line">        self.longitude = longitude</span><br><span class="line">        self.msgcontent[<span class="string">'Longitude'</span>] = longitude</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FaceMsg</span><span class="params">(MsgDict)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, index=<span class="number">1</span>, data=<span class="string">''</span>, msgtype=<span class="string">'TIMFaceElem'</span>)</span>:</span> </span><br><span class="line">        self.index = index </span><br><span class="line">        self.data = data</span><br><span class="line">        content = &#123;</span><br><span class="line">            <span class="string">'Index'</span>: index, <span class="comment"># 表情索引，用户自定义, Number</span></span><br><span class="line">            <span class="string">'Data'</span>: data <span class="comment"># 额外数据, String</span></span><br><span class="line">        &#125;</span><br><span class="line">        super(TextMsg, self).__init__(msgtype=msgtype, msgcontent=content)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_index</span><span class="params">(self, index)</span>:</span></span><br><span class="line">        self.index = index</span><br><span class="line">        self.msgcontent[<span class="string">'Index'</span>] = index</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_data</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        self.data = data</span><br><span class="line">        self.msgcontent[<span class="string">'Data'</span>] = data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomMsg</span><span class="params">(MsgDict)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, data=<span class="string">''</span>, desc=<span class="string">''</span>, ext=<span class="string">''</span>, sound=<span class="string">''</span>, msgtype=<span class="string">'TIMCustomElem'</span>)</span>:</span> </span><br><span class="line">        self.data = data</span><br><span class="line">        self.desc = desc</span><br><span class="line">        self.ext = ext</span><br><span class="line">        self.sound = sound</span><br><span class="line">        content = &#123;</span><br><span class="line">            <span class="string">'Data'</span>: data, <span class="comment"># 自定义消息数据。不作为APNS的payload中字段下发，故从payload中无法获取Data字段, String</span></span><br><span class="line">            <span class="string">'Desc'</span>: desc, <span class="comment"># 自定义消息描述，当接收方为iphone后台在线时，做ios离线Push时文本展示</span></span><br><span class="line">            <span class="string">'Ext'</span>: ext, <span class="comment"># 扩展字段，当接收方为ios系统且应用处在后台时，此字段作为APNS请求包Payloads中的ext键值下发，Ext的协议格式由业务方确定，APNS只做透传</span></span><br><span class="line">            <span class="string">'Sound'</span>: sound <span class="comment"># 自定义APNS推送铃声</span></span><br><span class="line">        &#125;</span><br><span class="line">        super(CustomMsg, self).__init__(msgtype=msgtype, msgcontent=content)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_data</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        self.data = data</span><br><span class="line">        self.msgcontent[<span class="string">'Data'</span>] = data</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_desc</span><span class="params">(self, desc)</span>:</span></span><br><span class="line">        self.desc = desc</span><br><span class="line">        self.msgcontent[<span class="string">'Desc'</span>] = desc</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_ext</span><span class="params">(self, ext)</span>:</span></span><br><span class="line">        self.ext = ext</span><br><span class="line">        self.msgcontent[<span class="string">'Ext'</span>] = ext</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_sound</span><span class="params">(self, sound)</span>:</span></span><br><span class="line">        self.sound = sound</span><br><span class="line">        self.msgcontent[<span class="string">'Sound'</span>] = sound</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SoundMsg</span><span class="params">(MsgDict)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, uuid=<span class="string">''</span>, size=<span class="number">0</span>, second=<span class="number">0</span>, msgtype=<span class="string">'TIMSoundElem'</span>)</span>:</span> </span><br><span class="line">        self.uuid = uuid </span><br><span class="line">        self.size = size </span><br><span class="line">        self.second = second</span><br><span class="line">        content = &#123;</span><br><span class="line">            <span class="string">'UUID'</span>: uuid, <span class="comment"># 语音序列号，后台用于索引语音的键值，String</span></span><br><span class="line">            <span class="string">'Size'</span>: size, <span class="comment"># 语音数据大小, Number </span></span><br><span class="line">            <span class="string">'Second'</span>: second <span class="comment"># 语音时长，单位秒 Number </span></span><br><span class="line">        &#125;</span><br><span class="line">        super(SoundMsg, self).__init__(msgtype=msgtype, msgcontent=content)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_uuid</span><span class="params">(self, uuid)</span>:</span></span><br><span class="line">        self.uuid = uuid</span><br><span class="line">        self.msgcontent[<span class="string">'UUID'</span>] = uuid</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_size</span><span class="params">(self, size)</span>:</span></span><br><span class="line">        self.size = size</span><br><span class="line">        self.msgcontent[<span class="string">'Size'</span>] = size</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_second</span><span class="params">(self, second)</span>:</span></span><br><span class="line">        self.second = second</span><br><span class="line">        self.msgcontent[<span class="string">'Second'</span>] = second</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ImageMsg</span><span class="params">(MsgDict)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, uuid=<span class="string">''</span>, imgformat=<span class="number">0</span>, imginfo=[], msgtype=<span class="string">'TIMImageElem'</span>)</span>:</span> </span><br><span class="line">        self.uuid = uuid </span><br><span class="line">        self.imgformat = imgformat </span><br><span class="line">        self.imginfo = imginfo </span><br><span class="line">        content = &#123;</span><br><span class="line">            <span class="string">'UUID'</span>: uuid, <span class="comment"># 图片序列号，后台用于索引语音的键值，String</span></span><br><span class="line">            <span class="string">'ImageFormat'</span>: imgformat, <span class="comment"># 图片格式， BMP=1, JPG=2, GIF=3, 其他=0, Number </span></span><br><span class="line">            <span class="string">'ImageInfoArray'</span>: [t.info <span class="keyword">for</span> t <span class="keyword">in</span> imginfo] <span class="comment"># 原图，缩略图或者大图下载信息, Array</span></span><br><span class="line">        &#125;</span><br><span class="line">        super(ImageMsg, self).__init__(msgtype=msgtype, msgcontent=content)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_uuid</span><span class="params">(self, uuid)</span>:</span></span><br><span class="line">        self.uuid = uuid</span><br><span class="line">        self.msgcontent[<span class="string">'UUID'</span>] = uuid</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_format</span><span class="params">(self, imgformat)</span>:</span></span><br><span class="line">        self.imgformat = imgformat</span><br><span class="line">        self.msgcontent[<span class="string">'ImageFormat'</span>] = imgformat</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">append_info</span><span class="params">(self, info)</span>:</span></span><br><span class="line">        <span class="comment"># info 为ImageInfo对象实例</span></span><br><span class="line">        self.imginfo.append(info)</span><br><span class="line">        self.msgcontnet[<span class="string">'ImageInfoArray'</span>].append(info.info)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert_info</span><span class="params">(self, index, info)</span>:</span></span><br><span class="line">        self.imginfo.insert(index, info)</span><br><span class="line">        self.msgcontent[<span class="string">'ImageInfoArray'</span>].insert(index, info.info)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">del_info</span><span class="params">(self, index)</span>:</span></span><br><span class="line">        <span class="keyword">del</span> self.imginfo[index]</span><br><span class="line">        <span class="keyword">del</span> self.msgcontent[<span class="string">'ImageInfoArray'</span>][index]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileMsg</span><span class="params">(MsgDict)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, uuid=<span class="string">''</span>, size=<span class="number">0</span>, name=<span class="string">''</span>, msgtype=<span class="string">'TIMFileElem'</span>)</span>:</span> </span><br><span class="line">        self.uuid = uuid </span><br><span class="line">        self.size = size </span><br><span class="line">        self.name = name</span><br><span class="line">        content = &#123;</span><br><span class="line">            <span class="string">'UUID'</span>: uuid, <span class="comment"># 文件序列号，后台用于索引语音的键值，String</span></span><br><span class="line">            <span class="string">'FileSize'</span>: size, <span class="comment"># 文件数据大小, Number </span></span><br><span class="line">            <span class="string">'FileName'</span>: name <span class="comment"># 文件名称/路径， String</span></span><br><span class="line">        &#125;</span><br><span class="line">        super(FileMsg, self).__init__(msgtype=msgtype, msgcontent=content)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_uuid</span><span class="params">(self, uuid)</span>:</span></span><br><span class="line">        self.uuid = uuid</span><br><span class="line">        self.msgcontent[<span class="string">'UUID'</span>] = UUID</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_size</span><span class="params">(self, size)</span>:</span></span><br><span class="line">        self.size = size</span><br><span class="line">        self.msgcontent[<span class="string">'FileSize'</span>] = size</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_name</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.msgcontent[<span class="string">'FileName'</span>] = name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ImageInfo</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, itype=<span class="number">1</span>, size=<span class="number">0</span>, width=<span class="number">0</span>, height=<span class="number">0</span>, url=<span class="string">''</span>)</span>:</span></span><br><span class="line">        <span class="comment">#图片类型， 1-原图， 2-大图， 3-缩略图, 0-其他</span></span><br><span class="line">        self.itype = itype </span><br><span class="line">        <span class="comment"># 图片数据大小,Number</span></span><br><span class="line">        self.size = size</span><br><span class="line">        <span class="comment"># 图片宽度,Number</span></span><br><span class="line">        self.width = width</span><br><span class="line">        <span class="comment"># 图片高度, Number</span></span><br><span class="line">        self.height = height</span><br><span class="line">        <span class="comment"># 图片下载地址,String</span></span><br><span class="line">        self.url = url</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="string">'Type'</span>: self.itype, </span><br><span class="line">            <span class="string">'Size'</span>: self.size,  </span><br><span class="line">            <span class="string">'Width'</span>: self.width,  </span><br><span class="line">            <span class="string">'Height'</span>: self.height, </span><br><span class="line">            <span class="string">'URL'</span>: self.url </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_type</span><span class="params">(self, itype)</span>:</span></span><br><span class="line">        self.itype = itype</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_size</span><span class="params">(self, size)</span>:</span></span><br><span class="line">        self.size = size</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_width</span><span class="params">(self, width)</span>:</span></span><br><span class="line">        self.width = width</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_height</span><span class="params">(self, height)</span>:</span></span><br><span class="line">        self.height = height</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_url</span><span class="params">(self, url)</span>:</span></span><br><span class="line">        self.url = url</span><br></pre></td></tr></table></figure><p></p><h2 id="微信开发包，python实现-wechat-sdk开发"><a href="#微信开发包，python实现-wechat-sdk开发" class="headerlink" title="微信开发包，python实现, wechat_sdk开发"></a>微信开发包，python实现, wechat_sdk开发</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://wechat-python-sdk.com/</span><br></pre></td></tr></table></figure><p>截取部分代码，学习类的设计</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> unicode_literals</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> wechat_sdk.lib.crypto <span class="keyword">import</span> BasicCrypto</span><br><span class="line"><span class="keyword">from</span> wechat_sdk.lib.request <span class="keyword">import</span> WechatRequest</span><br><span class="line"><span class="keyword">from</span> wechat_sdk.exceptions <span class="keyword">import</span> NeedParamError</span><br><span class="line"><span class="keyword">from</span> wechat_sdk.utils <span class="keyword">import</span> disable_urllib3_warning</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WechatConf</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">""" WechatConf 配置类</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    该类将会存储所有和微信开发相关的配置信息, 同时也会维护配置信息的有效性.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, **kwargs)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :param kwargs: 配置信息字典, 可用字典 key 值及对应解释如下:</span></span><br><span class="line"><span class="string">                       'token': 微信 Token</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                       'appid': App ID</span></span><br><span class="line"><span class="string">                       'appsecret': App Secret</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                       'encrypt_mode': 加解密模式 ('normal': 明文模式, 'compatible': 兼容模式, 'safe': 安全模式(默认))</span></span><br><span class="line"><span class="string">                       'encoding_aes_key': EncodingAESKey 值 (传入此值必须保证同时传入 token, appid, 否则抛出异常)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                       'access_token_getfunc': access token 获取函数 (用于单机及分布式环境下, 具体格式参见文档)</span></span><br><span class="line"><span class="string">                       'access_token_setfunc': access token 写入函数 (用于单机及分布式环境下, 具体格式参见文档)</span></span><br><span class="line"><span class="string">                       'access_token_refreshfunc': access token 刷新函数 (用于单机及分布式环境下, 具体格式参见文档)</span></span><br><span class="line"><span class="string">                       'access_token': 直接导入的 access token 值, 该值需要在上一次该类实例化之后手动进行缓存并在此处传入, 如果不</span></span><br><span class="line"><span class="string">                                       传入, 将会在需要时自动重新获取 (传入 access_token_getfunc 和 access_token_setfunc 函数</span></span><br><span class="line"><span class="string">                                       后将会自动忽略此处的传入值)</span></span><br><span class="line"><span class="string">                       'access_token_expires_at': 直接导入的 access token 的过期日期, 该值需要在上一次该类实例化之后手动进行缓存</span></span><br><span class="line"><span class="string">                                                  并在此处传入, 如果不传入, 将会在需要时自动重新获取 (传入 access_token_getfunc</span></span><br><span class="line"><span class="string">                                                  和 access_token_setfunc 函数后将会自动忽略此处的传入值)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                       'jsapi_ticket_getfunc': jsapi ticket 获取函数 (用于单机及分布式环境下, 具体格式参见文档)</span></span><br><span class="line"><span class="string">                       'jsapi_ticket_setfunc': jsapi ticket 写入函数 (用于单机及分布式环境下, 具体格式参见文档)</span></span><br><span class="line"><span class="string">                       'jsapi_ticket_refreshfunc': jsapi ticket 刷新函数 (用于单机及分布式环境下, 具体格式参见文档)</span></span><br><span class="line"><span class="string">                       'jsapi_ticket': 直接导入的 jsapi ticket 值, 该值需要在上一次该类实例化之后手动进行缓存并在此处传入, 如果不</span></span><br><span class="line"><span class="string">                                       传入, 将会在需要时自动重新获取 (传入 jsapi_ticket_getfunc 和 jsapi_ticket_setfunc 函数</span></span><br><span class="line"><span class="string">                                       后将会自动忽略此处的传入值)</span></span><br><span class="line"><span class="string">                       'jsapi_ticket_expires_at': 直接导入的 jsapi ticket 的过期日期, 该值需要在上一次该类实例化之后手动进行缓存</span></span><br><span class="line"><span class="string">                                                  并在此处传入, 如果不传入, 将会在需要时自动重新获取 (传入 jsapi_ticket_getfunc</span></span><br><span class="line"><span class="string">                                                  和 jsapi_ticket_setfunc 函数后将会自动忽略此处的传入值)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                       'partnerid': 财付通商户身份标识, 支付权限专用</span></span><br><span class="line"><span class="string">                       'partnerkey': 财付通商户权限密钥 Key, 支付权限专用</span></span><br><span class="line"><span class="string">                       'paysignkey': 商户签名密钥 Key, 支付权限专用</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                       'checkssl': 是否检查 SSL, 默认不检查 (False), 可避免 urllib3 的 InsecurePlatformWarning 警告</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line"></span><br><span class="line">        self.__request = WechatRequest()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> kwargs.get(<span class="string">'checkssl'</span>) <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">True</span>:</span><br><span class="line">            disable_urllib3_warning()  <span class="comment"># 可解决 InsecurePlatformWarning 警告</span></span><br><span class="line"></span><br><span class="line">        self.__token = kwargs.get(<span class="string">'token'</span>)</span><br><span class="line"></span><br><span class="line">        self.__appid = kwargs.get(<span class="string">'appid'</span>)</span><br><span class="line">        self.__appsecret = kwargs.get(<span class="string">'appsecret'</span>)</span><br><span class="line"></span><br><span class="line">        self.__encrypt_mode = kwargs.get(<span class="string">'encrypt_mode'</span>, <span class="string">'safe'</span>)</span><br><span class="line">        self.__encoding_aes_key = kwargs.get(<span class="string">'encoding_aes_key'</span>)</span><br><span class="line">        self.__crypto = <span class="literal">None</span></span><br><span class="line">        self._update_crypto()</span><br><span class="line"></span><br><span class="line">        self.__access_token_getfunc = kwargs.get(<span class="string">'access_token_getfunc'</span>)</span><br><span class="line">        self.__access_token_setfunc = kwargs.get(<span class="string">'access_token_setfunc'</span>)</span><br><span class="line">        self.__access_token_refreshfunc = kwargs.get(<span class="string">'access_token_refreshfunc'</span>)</span><br><span class="line">        self.__access_token = kwargs.get(<span class="string">'access_token'</span>)</span><br><span class="line">        self.__access_token_expires_at = kwargs.get(<span class="string">'access_token_expires_at'</span>)</span><br><span class="line"></span><br><span class="line">        self.__jsapi_ticket_getfunc = kwargs.get(<span class="string">'jsapi_ticket_getfunc'</span>)</span><br><span class="line">        self.__jsapi_ticket_setfunc = kwargs.get(<span class="string">'jsapi_ticket_setfunc'</span>)</span><br><span class="line">        self.__jsapi_ticket_refreshfunc = kwargs.get(<span class="string">'jsapi_ticket_refreshfunc'</span>)</span><br><span class="line">        self.__jsapi_ticket = kwargs.get(<span class="string">'jsapi_ticket'</span>)</span><br><span class="line">        self.__jsapi_ticket_expires_at = kwargs.get(<span class="string">'jsapi_ticket_expires_at'</span>)</span><br><span class="line"></span><br><span class="line">        self.__partnerid = kwargs.get(<span class="string">'partnerid'</span>)</span><br><span class="line">        self.__partnerkey = kwargs.get(<span class="string">'partnerkey'</span>)</span><br><span class="line">        self.__paysignkey = kwargs.get(<span class="string">'paysignkey'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">token</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">""" 获取当前 Token """</span></span><br><span class="line">        self._check_token()</span><br><span class="line">        <span class="keyword">return</span> self.__token</span><br><span class="line"></span><br><span class="line"><span class="meta">    @token.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">token</span><span class="params">(self, token)</span>:</span></span><br><span class="line">        <span class="string">""" 设置当前 Token """</span></span><br><span class="line">        self.__token = token</span><br><span class="line">        self._update_crypto()  <span class="comment"># 改动 Token 需要重新更新 Crypto</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">appid</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">""" 获取当前 App ID """</span></span><br><span class="line">        <span class="keyword">return</span> self.__appid</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">appsecret</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">""" 获取当前 App Secret """</span></span><br><span class="line">        <span class="keyword">return</span> self.__appsecret</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_appid_appsecret</span><span class="params">(self, appid, appsecret)</span>:</span></span><br><span class="line">        <span class="string">""" 设置当前 App ID 及 App Secret"""</span></span><br><span class="line">        self.__appid = appid</span><br><span class="line">        self.__appsecret = appsecret</span><br><span class="line">        self._update_crypto()  <span class="comment"># 改动 App ID 后需要重新更新 Crypto</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">encoding_aes_key</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">""" 获取当前 EncodingAESKey """</span></span><br><span class="line">        <span class="keyword">return</span> self.__encoding_aes_key</span><br><span class="line"></span><br><span class="line"><span class="meta">    @encoding_aes_key.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">encoding_aes_key</span><span class="params">(self, encoding_aes_key)</span>:</span></span><br><span class="line">        <span class="string">""" 设置当前 EncodingAESKey """</span></span><br><span class="line">        self.__encoding_aes_key = encoding_aes_key</span><br><span class="line">        self._update_crypto()  <span class="comment"># 改动 EncodingAESKey 需要重新更新 Crypto</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">encrypt_mode</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.__encrypt_mode</span><br><span class="line"></span><br><span class="line"><span class="meta">    @encrypt_mode.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">encrypt_mode</span><span class="params">(self, encrypt_mode)</span>:</span></span><br><span class="line">        <span class="string">""" 设置当前加密模式 """</span></span><br><span class="line">        self.__encrypt_mode = encrypt_mode</span><br><span class="line">        self._update_crypto()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">crypto</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">""" 获取当前 Crypto 实例 """</span></span><br><span class="line">        <span class="keyword">return</span> self.__crypto</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">access_token</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">""" 获取当前 access token 值, 本方法会自行维护 access token 有效性 """</span></span><br><span class="line">        self._check_appid_appsecret()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> callable(self.__access_token_getfunc):</span><br><span class="line">            self.__access_token, self.__access_token_expires_at = self.__access_token_getfunc()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.__access_token:</span><br><span class="line">            now = time.time()</span><br><span class="line">            <span class="keyword">if</span> self.__access_token_expires_at - now &gt; <span class="number">60</span>:</span><br><span class="line">                <span class="keyword">return</span> self.__access_token</span><br><span class="line"></span><br><span class="line">        self.grant_access_token()  <span class="comment"># 从腾讯服务器获取 access token 并更新</span></span><br><span class="line">        <span class="keyword">return</span> self.__access_token</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">jsapi_ticket</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">""" 获取当前 jsapi ticket 值, 本方法会自行维护 jsapi ticket 有效性 """</span></span><br><span class="line">        self._check_appid_appsecret()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> callable(self.__jsapi_ticket_getfunc):</span><br><span class="line">            self.__jsapi_ticket, self.__jsapi_ticket_expires_at = self.__jsapi_ticket_getfunc()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.__jsapi_ticket:</span><br><span class="line">            now = time.time()</span><br><span class="line">            <span class="keyword">if</span> self.__jsapi_ticket_expires_at - now &gt; <span class="number">60</span>:</span><br><span class="line">                <span class="keyword">return</span> self.__jsapi_ticket</span><br><span class="line"></span><br><span class="line">        self.grant_jsapi_ticket()  <span class="comment"># 从腾讯服务器获取 jsapi ticket 并更新</span></span><br><span class="line">        <span class="keyword">return</span> self.__jsapi_ticket</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">partnerid</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">""" 获取当前财付通商户身份标识 """</span></span><br><span class="line">        <span class="keyword">return</span> self.__partnerid</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">partnerkey</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">""" 获取当前财付通商户权限密钥 Key """</span></span><br><span class="line">        <span class="keyword">return</span> self.__partnerkey</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">paysignkey</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">""" 获取商户签名密钥 Key """</span></span><br><span class="line">        <span class="keyword">return</span> self.__paysignkey</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">grant_access_token</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        获取 access token 并更新当前配置</span></span><br><span class="line"><span class="string">        :return: 返回的 JSON 数据包 (传入 access_token_refreshfunc 参数后返回 None)</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self._check_appid_appsecret()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> callable(self.__access_token_refreshfunc):</span><br><span class="line">            self.__access_token, self.__access_token_expires_at = self.__access_token_refreshfunc()</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        response_json = self.__request.get(</span><br><span class="line">            url=<span class="string">"https://api.weixin.qq.com/cgi-bin/token"</span>,</span><br><span class="line">            params=&#123;</span><br><span class="line">                <span class="string">"grant_type"</span>: <span class="string">"client_credential"</span>,</span><br><span class="line">                <span class="string">"appid"</span>: self.__appid,</span><br><span class="line">                <span class="string">"secret"</span>: self.__appsecret,</span><br><span class="line">            &#125;,</span><br><span class="line">            access_token=self.__access_token</span><br><span class="line">        )</span><br><span class="line">        self.__access_token = response_json[<span class="string">'access_token'</span>]</span><br><span class="line">        self.__access_token_expires_at = int(time.time()) + response_json[<span class="string">'expires_in'</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> callable(self.__access_token_setfunc):</span><br><span class="line">            self.__access_token_setfunc(self.__access_token, self.__access_token_expires_at)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> response_json</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">grant_jsapi_ticket</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        获取 jsapi ticket 并更新当前配置</span></span><br><span class="line"><span class="string">        :return: 返回的 JSON 数据包 (传入 jsapi_ticket_refreshfunc 参数后返回 None)</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self._check_appid_appsecret()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> callable(self.__jsapi_ticket_refreshfunc):</span><br><span class="line">            self.__jsapi_ticket, self.__jsapi_ticket_expires_at = self.__jsapi_ticket_refreshfunc()</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        response_json = self.__request.get(</span><br><span class="line">            url=<span class="string">"https://api.weixin.qq.com/cgi-bin/ticket/getticket"</span>,</span><br><span class="line">            params=&#123;</span><br><span class="line">                <span class="string">"type"</span>: <span class="string">"jsapi"</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            access_token=self.access_token,</span><br><span class="line">        )</span><br><span class="line">        self.__jsapi_ticket = response_json[<span class="string">'ticket'</span>]</span><br><span class="line">        self.__jsapi_ticket_expires_at = int(time.time()) + response_json[<span class="string">'expires_in'</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> callable(self.__jsapi_ticket_setfunc):</span><br><span class="line">            self.__jsapi_ticket_setfunc(self.__jsapi_ticket, self.__jsapi_ticket_expires_at)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> response_json</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_access_token</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        获取 Access Token 及 Access Token 过期日期, 仅供缓存使用, 如果希望得到原生的 Access Token 请求数据请使用 :func:`grant_token`</span></span><br><span class="line"><span class="string">        **仅为兼容 v0.6.0 以前版本使用, 自行维护 access_token 请使用 access_token_setfunc 和 access_token_getfunc 进行操作**</span></span><br><span class="line"><span class="string">        :return: dict 对象, key 包括 `access_token` 及 `access_token_expires_at`</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self._check_appid_appsecret()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="string">'access_token'</span>: self.access_token,</span><br><span class="line">            <span class="string">'access_token_expires_at'</span>: self.__access_token_expires_at,</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_jsapi_ticket</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        获取 Jsapi Ticket 及 Jsapi Ticket 过期日期, 仅供缓存使用, 如果希望得到原生的 Jsapi Ticket 请求数据请使用 :func:`grant_jsapi_ticket`</span></span><br><span class="line"><span class="string">        **仅为兼容 v0.6.0 以前版本使用, 自行维护 jsapi_ticket 请使用 jsapi_ticket_setfunc 和 jsapi_ticket_getfunc 进行操作**</span></span><br><span class="line"><span class="string">        :return: dict 对象, key 包括 `jsapi_ticket` 及 `jsapi_ticket_expires_at`</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self._check_appid_appsecret()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="string">'jsapi_ticket'</span>: self.jsapi_ticket,</span><br><span class="line">            <span class="string">'jsapi_ticket_expires_at'</span>: self.__jsapi_ticket_expires_at,</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_check_token</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        检查 Token 是否存在</span></span><br><span class="line"><span class="string">        :raises NeedParamError: Token 参数没有在初始化的时候提供</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.__token:</span><br><span class="line">            <span class="keyword">raise</span> NeedParamError(<span class="string">'Please provide Token parameter in the construction of class.'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_check_appid_appsecret</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        检查 AppID 和 AppSecret 是否存在</span></span><br><span class="line"><span class="string">        :raises NeedParamError: AppID 或 AppSecret 参数没有在初始化的时候完整提供</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.__appid <span class="keyword">or</span> <span class="keyword">not</span> self.__appsecret:</span><br><span class="line">            <span class="keyword">raise</span> NeedParamError(<span class="string">'Please provide app_id and app_secret parameters in the construction of class.'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_update_crypto</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        根据当前配置内容更新 Crypto 类</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> self.__encrypt_mode <span class="keyword">in</span> [<span class="string">'compatible'</span>, <span class="string">'safe'</span>] <span class="keyword">and</span> self.__encoding_aes_key <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">if</span> self.__token <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> self.__appid <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">raise</span> NeedParamError(<span class="string">'Please provide token and appid parameters in the construction of class.'</span>)</span><br><span class="line">            self.__crypto = BasicCrypto(self.__token, self.__encoding_aes_key, self.__appid)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.__crypto = <span class="literal">None</span></span><br></pre></td></tr></table></figure><h2 id="思维锻炼"><a href="#思维锻炼" class="headerlink" title="思维锻炼"></a>思维锻炼</h2><ol><li>设计讲师和学生类，讲师有上课，备课等方法，学生有听课，做练习等方法，均有姓名、性别、年龄等基本属性</li><li>设计聊天Message类</li></ol><h1 id="with与“上下文管理器”"><a href="#with与“上下文管理器”" class="headerlink" title="with与“上下文管理器”"></a>with与“上下文管理器”</h1><p>如果你有阅读源码的习惯，可能会看到一些优秀的代码经常出现带有 “with” 关键字的语句，它通常用在什么场景呢？</p><p>对于系统资源如文件、数据库连接、socket 而言，应用程序打开这些资源并执行完业务逻辑之后，必须做的一件事就是要关闭（断开）该资源。</p><p>比如 Python 程序打开一个文件，往文件中写内容，写完之后，就要关闭该文件，否则会出现什么情况呢？极端情况下会出现 “Too many open files” 的错误，因为系统允许你打开的最大文件数量是有限的。</p><p>同样，对于数据库，如果连接数过多而没有及时关闭的话，就可能会出现 “Can not connect to MySQL server Too many connections”，因为数据库连接是一种非常昂贵的资源，不可能无限制的被创建。</p><p>来看看如何正确关闭一个文件。</p><h2 id="1-普通版"><a href="#1-普通版" class="headerlink" title="1. 普通版"></a>1. 普通版</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">m1</span><span class="params">()</span>:</span></span><br><span class="line">    f = open(<span class="string">"output.txt"</span>, <span class="string">"w"</span>)</span><br><span class="line">    f.write(<span class="string">"python之禅"</span>)</span><br><span class="line">    f.close()</span><br></pre></td></tr></table></figure><p>这样写有一个潜在的问题，如果在调用 write 的过程中，出现了异常进而导致后续代码无法继续执行，close 方法无法被正常调用，因此资源就会一直被该程序占用者释放。那么该如何改进代码呢？</p><h2 id="2-进阶版"><a href="#2-进阶版" class="headerlink" title="2. 进阶版"></a>2. 进阶版</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">m2</span><span class="params">()</span>:</span></span><br><span class="line">    f = open(<span class="string">"output.txt"</span>, <span class="string">"w"</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        f.write(<span class="string">"python之禅"</span>)</span><br><span class="line">    <span class="keyword">except</span> IOError:</span><br><span class="line">        print(<span class="string">"oops error"</span>)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        f.close()</span><br></pre></td></tr></table></figure><p>改良版本的程序是对可能发生异常的代码处进行 try 捕获，使用 try/finally 语句，该语句表示如果在 try 代码块中程序出现了异常，后续代码就不再执行，而直接跳转到 except 代码块。而无论如何，finally 块的代码最终都会被执行。因此，只要把 close 放在 finally 代码中，文件就一定会关闭。</p><h2 id="3-高级版"><a href="#3-高级版" class="headerlink" title="3. 高级版"></a>3. 高级版</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">m3</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">"output.txt"</span>, <span class="string">"r"</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(<span class="string">"Python之禅"</span>)</span><br></pre></td></tr></table></figure><p>一种更加简洁、优雅的方式就是用 with 关键字。open 方法的返回值赋值给变量 f，当离开 with 代码块的时候，系统会自动调用 f.close() 方法， with 的作用和使用 try/finally 语句是一样的。那么它的实现原理是什么？在讲 with 的原理前要涉及到另外一个概念，就是上下文管理器（Context Manager）。</p><h2 id="什么是上下文-context"><a href="#什么是上下文-context" class="headerlink" title="什么是上下文(context)"></a>什么是上下文(context)</h2><blockquote><p>上下文在不同的地方表示不同的含义，要感性理解。context其实说白了，和文章的上下文是一个意思，在通俗一点，我觉得叫环境更好。….</p><p>林冲大叫一声“啊也！”….</p><p>问:这句话林冲的“啊也”表达了林冲怎样的心里？</p><p>答:啊你妈个头啊！</p><p>看，一篇文章，给你摘录一段，没前没后，你读不懂，因为有语境，就是语言环境存在，一段话说了什么，要通过上下文(文章的上下文)来推断。</p><p>app点击一个按钮进入一个新的界面，也要保存你是在哪个屏幕跳过来的等等信息，以便你点击返回的时候能正确跳回，如果不存肯定就无法正确跳回了。</p><p>看这些都是上下文的典型例子，理解成环境就可以，(而且上下文虽然叫上下文，但是程序里面一般都只有上文而已，只是叫的好听叫上下文。。进程中断在操作系统中是有上有下的，不过不这个高深的问题就不要深究了。。。)</p></blockquote><h2 id="上下文管理器"><a href="#上下文管理器" class="headerlink" title="上下文管理器"></a>上下文管理器</h2><p>任何实现了 <code>__enter__()</code> 和 <code>__exit__()</code> 方法的对象都可称之为上下文管理器，上下文管理器对象可以使用 with 关键字。显然，文件（file）对象也实现了上下文管理器。</p><p>那么文件对象是如何实现这两个方法的呢？我们可以模拟实现一个自己的文件类，让该类实现 <code>__enter__()</code> 和 <code>__exit__()</code> 方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">File</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, filename, mode)</span>:</span></span><br><span class="line">        self.filename = filename</span><br><span class="line">        self.mode = mode</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__enter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"entering"</span>)</span><br><span class="line">        self.f = open(self.filename, self.mode)</span><br><span class="line">        <span class="keyword">return</span> self.f</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__exit__</span><span class="params">(self, *args)</span>:</span></span><br><span class="line">        print(<span class="string">"will exit"</span>)</span><br><span class="line">        self.f.close()</span><br></pre></td></tr></table></figure><p><code>__enter__()</code> 方法返回资源对象，这里就是你将要打开的那个文件对象，<code>__exit__()</code> 方法处理一些清除工作。</p><p>因为 File 类实现了上下文管理器，现在就可以使用 with 语句了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> File(<span class="string">'out.txt'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    print(<span class="string">"writing"</span>)</span><br><span class="line">    f.write(<span class="string">'hello, python'</span>)</span><br></pre></td></tr></table></figure><p>这样，你就无需显示地调用 close 方法了，由系统自动去调用，哪怕中间遇到异常 close 方法也会被调用。</p><h2 id="实现上下文管理器的另外方式"><a href="#实现上下文管理器的另外方式" class="headerlink" title="实现上下文管理器的另外方式"></a>实现上下文管理器的另外方式</h2><p>Python 还提供了一个 contextmanager 的装饰器，更进一步简化了上下文管理器的实现方式。通过 yield 将函数分割成两部分，yield 之前的语句在 <strong>enter</strong> 方法中执行，yield 之后的语句在 <strong>exit</strong> 方法中执行。紧跟在 yield 后面的值是函数的返回值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> contextlib <span class="keyword">import</span> contextmanager</span><br><span class="line"></span><br><span class="line"><span class="meta">@contextmanager</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_open</span><span class="params">(path, mode)</span>:</span></span><br><span class="line">    f = open(path, mode)</span><br><span class="line">    <span class="keyword">yield</span> f</span><br><span class="line">    f.close()</span><br></pre></td></tr></table></figure><p>调用<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> my_open(<span class="string">'out.txt'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">"hello , the simplest context manager"</span>)</span><br></pre></td></tr></table></figure><p></p><h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><p>Python 提供了 with 语法用于简化资源操作的后续清除操作，是 try/finally 的替代方法，实现原理建立在上下文管理器之上。此外，Python 还提供了一个 contextmanager 装饰器，更进一步简化上下管理器的实现方式。</p><h1 id="※args、※※kwargs的另外用处拆包"><a href="#※args、※※kwargs的另外用处拆包" class="headerlink" title="※args、※※kwargs的另外用处拆包"></a>※args、※※kwargs的另外用处拆包</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test1</span><span class="params">(a,b,*args,**kwargs)</span>:</span></span><br><span class="line">    print(a)</span><br><span class="line">    print(b)</span><br><span class="line">    print(args) <span class="comment"># 以元组形式输出结果</span></span><br><span class="line">    print(kwargs) <span class="comment"># 以字典形式输出结果</span></span><br><span class="line"></span><br><span class="line">test1(<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>,<span class="number">55</span>,name=<span class="string">'haha'</span>,age=<span class="number">34</span>)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">输出结果</span></span><br><span class="line"><span class="string">11</span></span><br><span class="line"><span class="string">22</span></span><br><span class="line"><span class="string">(33, 44, 55)</span></span><br><span class="line"><span class="string">&#123;'name': 'haha', 'age': 34&#125;</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test2</span><span class="params">(a,b,*args,**kwargs)</span>:</span></span><br><span class="line">    print(a)</span><br><span class="line">    print(b)</span><br><span class="line">    print(args) <span class="comment"># 以元组形式输出结果</span></span><br><span class="line">    print(kwargs) <span class="comment"># 以字典形式输出结果</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test1</span><span class="params">(a,b,*args,**kwargs)</span>:</span></span><br><span class="line">    print(a)</span><br><span class="line">    print(b)</span><br><span class="line">    print(args) <span class="comment"># 以元组形式输出结果</span></span><br><span class="line">    print(kwargs) <span class="comment"># 以字典形式输出结果</span></span><br><span class="line">    print(<span class="string">'---'</span> * <span class="number">10</span>)</span><br><span class="line">    test2(a,b)</span><br><span class="line"></span><br><span class="line">test1(<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>,<span class="number">55</span>,name=<span class="string">'haha'</span>,age=<span class="number">34</span>)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">11</span></span><br><span class="line"><span class="string">22</span></span><br><span class="line"><span class="string">(33, 44, 55)</span></span><br><span class="line"><span class="string">&#123;'name': 'haha', 'age': 34&#125;</span></span><br><span class="line"><span class="string">`------------------------------`</span></span><br><span class="line"><span class="string">11</span></span><br><span class="line"><span class="string">22</span></span><br><span class="line"><span class="string">()</span></span><br><span class="line"><span class="string">&#123;&#125;</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test2</span><span class="params">(a,b,*args,**kwargs)</span>:</span></span><br><span class="line">    print(a)</span><br><span class="line">    print(b)</span><br><span class="line">    print(args) <span class="comment"># 以元组形式输出结果</span></span><br><span class="line">    print(kwargs) <span class="comment"># 以字典形式输出结果</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test1</span><span class="params">(a,b,*args,**kwargs)</span>:</span></span><br><span class="line">    print(a)</span><br><span class="line">    print(b)</span><br><span class="line">    print(args) <span class="comment"># 以元组形式输出结果</span></span><br><span class="line">    print(kwargs) <span class="comment"># 以字典形式输出结果</span></span><br><span class="line">    print(<span class="string">'---'</span> * <span class="number">10</span>)</span><br><span class="line">    test2(a,b,args,kwargs) <span class="comment"># 相当于test2(11,22,(33, 44, 55),&#123;'name': 'haha', 'age': 34&#125;)</span></span><br><span class="line">    <span class="comment"># 注意这样写的结果如下：((33, 44, 55), &#123;'name': 'haha', 'age': 34&#125;)</span></span><br><span class="line">    <span class="comment"># 为什么会是这样的一个结果呢？</span></span><br><span class="line">    <span class="comment"># 是因为在函数test1中，args和kwargs已经是一个变量值了，然后传递给test2函数，被*args接收过去。</span></span><br><span class="line"></span><br><span class="line">test1(<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>,<span class="number">55</span>,name=<span class="string">'haha'</span>,age=<span class="number">34</span>)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">11</span></span><br><span class="line"><span class="string">22</span></span><br><span class="line"><span class="string">(33, 44, 55)</span></span><br><span class="line"><span class="string">&#123;'name': 'haha', 'age': 34&#125;</span></span><br><span class="line"><span class="string">`------------------------------`</span></span><br><span class="line"><span class="string">11</span></span><br><span class="line"><span class="string">22</span></span><br><span class="line"><span class="string">((33, 44, 55), &#123;'name': 'haha', 'age': 34&#125;)</span></span><br><span class="line"><span class="string">&#123;&#125;</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test2</span><span class="params">(a,b,*args,**kwargs)</span>:</span></span><br><span class="line">    print(a)</span><br><span class="line">    print(b)</span><br><span class="line">    print(args) <span class="comment"># 以元组形式输出结果</span></span><br><span class="line">    print(kwargs) <span class="comment"># 以字典形式输出结果</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test1</span><span class="params">(a,b,*args,**kwargs)</span>:</span></span><br><span class="line">    print(a)</span><br><span class="line">    print(b)</span><br><span class="line">    print(args) <span class="comment"># 以元组形式输出结果</span></span><br><span class="line">    print(kwargs) <span class="comment"># 以字典形式输出结果</span></span><br><span class="line">    print(<span class="string">'---'</span> * <span class="number">10</span>)</span><br><span class="line">    <span class="comment"># test2(a,b,args,kwargs)  # 相当于test2(11,22,(33, 44, 55),&#123;'name': 'haha', 'age': 34&#125;)</span></span><br><span class="line">    <span class="comment"># test2(a,b,*args,kwargs) # 相当于test2(11,22,33,44,55,&#123;'name': 'haha', 'age': 34&#125;)</span></span><br><span class="line">    test2(a,b,*args,**kwargs) <span class="comment"># 注意这样的写法，相当于test2(11,22,33,44,55,name='haha',age=34)</span></span><br><span class="line">    <span class="comment"># 结果是：</span></span><br><span class="line">    <span class="comment"># (33, 44, 55)</span></span><br><span class="line">    <span class="comment"># &#123;'name': 'haha', 'age': 34&#125;</span></span><br><span class="line"></span><br><span class="line">test1(<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>,<span class="number">55</span>,name=<span class="string">'haha'</span>,age=<span class="number">34</span>)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">11</span></span><br><span class="line"><span class="string">22</span></span><br><span class="line"><span class="string">(33, 44, 55)</span></span><br><span class="line"><span class="string">&#123;'name': 'haha', 'age': 34&#125;</span></span><br><span class="line"><span class="string">`------------------------------`</span></span><br><span class="line"><span class="string">11</span></span><br><span class="line"><span class="string">22</span></span><br><span class="line"><span class="string">(33, 44, 55)</span></span><br><span class="line"><span class="string">&#123;'name': 'haha', 'age': 34&#125;</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Dec 31 2019 13:39:54 GMT+0800 (GMT+08:00) --&gt;&lt;h1 id=&quot;GIL（全局解释器锁）&quot;&gt;&lt;a href=&quot;#GIL（全局解释器锁）&quot; class=&quot;headerlink&quot; title=&quot;GIL（全局解释器锁）&quot;&gt;&lt;/a&gt;GIL（全局解释器锁）&lt;/h1&gt;&lt;h2 id=&quot;GIL面试题如下&quot;&gt;&lt;a href=&quot;#GIL面试题如下&quot; class=&quot;headerlink&quot; title=&quot;GIL面试题如下&quot;&gt;&lt;/a&gt;GIL面试题如下&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;描述Python GIL的概念， 以及它对python多线程的影响？编写一个多线程抓取网页的程序，并阐明多线程抓取程序是否可比单线程性能有提升，并解释原因。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Guido的声明：&lt;a href=&quot;http://www.artima.com/forums/flat.jsp?forum=106&amp;amp;thread=214235&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.artima.com/forums/flat.jsp?forum=106&amp;amp;thread=214235&lt;/a&gt;&lt;br&gt;he language doesn’t require the GIL – it’s only the CPython virtual machine that has historically been unable to shed it.&lt;/p&gt;&lt;h2 id=&quot;单线程死循环&quot;&gt;&lt;a href=&quot;#单线程死循环&quot; class=&quot;headerlink&quot; title=&quot;单线程死循环&quot;&gt;&lt;/a&gt;单线程死循环&lt;/h2&gt;&lt;p&gt;单独执行该文件会占满一个CPU核心数(相当于单进程单线程)，两个窗口执行该文件会占满两个CPU核心数(相当于两进程两线程)&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#!/usr/bin/env python&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#-*- coding: utf-8 -*-&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 主线程死循环，占满CPU&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;True&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;pass&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# 占位符，空语句，还是要执行的&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 id=&quot;两个线程死循环&quot;&gt;&lt;a href=&quot;#两个线程死循环&quot; class=&quot;headerlink&quot; title=&quot;两个线程死循环&quot;&gt;&lt;/a&gt;两个线程死循环&lt;/h2&gt;&lt;p&gt;单独执行该文件每个CPU核心会占一半(单进程两线程)&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#!/usr/bin/env python&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#-*- coding: utf-8 -*-&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; threading &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; Thread&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 子线程死循环&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;True&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;pass&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;t = Thread(target=a)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;t.start()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 主线程死循环&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;True&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;pass&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 id=&quot;两个进程死循环&quot;&gt;&lt;a href=&quot;#两个进程死循环&quot; class=&quot;headerlink&quot; title=&quot;两个进程死循环&quot;&gt;&lt;/a&gt;两个进程死循环&lt;/h2&gt;&lt;p&gt;单独执行该文件会占满二个CPU核心数&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#!/usr/bin/env python&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#-*- coding: utf-8 -*-&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; multiprocessing &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; Process&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 子进程死循环&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;True&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;pass&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; __name__ == &lt;span class=&quot;string&quot;&gt;&#39;__main__&#39;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    t = Process(target=a)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    t.start()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# 主进程死循环&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;True&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;pass&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;总结：多线程并不是真正的并行，而是伪并行，也就是并发。原因就是因为线程有GIL全局解释器锁。只有进程才是真正的并行&lt;/p&gt;&lt;h2 id=&quot;参考答案&quot;&gt;&lt;a href=&quot;#参考答案&quot; class=&quot;headerlink&quot; title=&quot;参考答案&quot;&gt;&lt;/a&gt;参考答案&lt;/h2&gt;&lt;blockquote&gt;&lt;ol&gt;&lt;li&gt;Python语言和GIL没有半毛钱关系。仅仅是由于历史原因在Cpython虚拟机(C语言解释器)中难以移除GIL。(其他python解释器没有GIL，比如java语言写的jpython解释器)&lt;/li&gt;&lt;li&gt;GIL：全局解释器锁。每个线程在执行的过程都需要先获取GIL，保证同一时刻只有一个线程可以执行代码。&lt;/li&gt;&lt;li&gt;线程释放GIL锁的情况： 在IO操作等可能会引起阻塞的system call之前,可以暂时释放GIL,但在执行完毕后,必须重新获取GIL Python 3.x使用计时器（执行时间达到阈值后，当前线程释放GIL）或Python 2.x，tickets计数达到100&lt;blockquote&gt;&lt;p&gt;计算密集型：程序没有延时，一直在计算数据；IO密集型：输入输出，读写操作&lt;br&gt;线程和协程适用于IO密集型，计算密集型考虑使用进程。&lt;/p&gt;&lt;/blockquote&gt;&lt;/li&gt;&lt;li&gt;Python使用多进程是可以利用多核的CPU资源的。&lt;/li&gt;&lt;li&gt;多线程爬取比单线程性能有提升，因为遇到IO阻塞会自动释放GIL锁&lt;/li&gt;&lt;/ol&gt;&lt;/blockquote&gt;&lt;h2 id=&quot;使用c语言来解决GIL问题&quot;&gt;&lt;a href=&quot;#使用c语言来解决GIL问题&quot; class=&quot;headerlink&quot; title=&quot;使用c语言来解决GIL问题&quot;&gt;&lt;/a&gt;使用c语言来解决GIL问题&lt;/h2&gt;&lt;p&gt;子线程使用的是c语言的函数，此时单独执行该文件，会占满两个CPU核心&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; ctypes &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; threading &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; Thread&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 加载动态库&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 把一个C语言编译成一个动态库文件的命令(linux平台)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# gcc libdead_loop.c -shared -o libdead_loop.so&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;lib = cdll.LoadLibrary(&lt;span class=&quot;string&quot;&gt;&quot;./libdead_loop.so&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 创建一个子线程，让其执行c语言编写的函数(DeadLoop)，此函数是一个死循环&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;t = Thread(target=lib.DeadLoop)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;t.start()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 主线程&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;True&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;pass&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;h2 id=&quot;如何解决GIL&quot;&gt;&lt;a href=&quot;#如何解决GIL&quot; class=&quot;headerlink&quot; title=&quot;如何解决GIL&quot;&gt;&lt;/a&gt;如何解决GIL&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;换python解释器，不使用Cpython解释器，使用jpython解释器等&lt;/li&gt;&lt;li&gt;用其他语言来替代线程中的代码，不如上例中的c语言，(胶水语言)&lt;/li&gt;&lt;/ol&gt;
    
    </summary>
    
      <category term="Python" scheme="https://yongnights.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://yongnights.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>python_异常</title>
    <link href="https://yongnights.github.io/2019/12/31/python_%E5%BC%82%E5%B8%B8/"/>
    <id>https://yongnights.github.io/2019/12/31/python_异常/</id>
    <published>2019-12-31T04:00:48.265Z</published>
    <updated>2019-12-31T04:00:48.265Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Dec 31 2019 13:39:53 GMT+0800 (GMT+08:00) --><h1 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h1><h2 id="01-异常的概念"><a href="#01-异常的概念" class="headerlink" title="01. 异常的概念"></a>01. 异常的概念</h2><ul><li>程序在运行时，如果 Python 解释器 遇到 到一个错误，会停止程序的执行，并且提示一些错误信息，这就是 异常</li><li>程序停止执行并且提示错误信息 这个动作，我们通常称之为：抛出(raise)异常<blockquote><p>程序开发时，很难将 所有的特殊情况 都处理的面面俱到，通过 异常捕获 可以针对突发事件做集中的处理，从而保证程序的 稳定性和健壮性</p></blockquote></li></ul><h2 id="02-捕获异常"><a href="#02-捕获异常" class="headerlink" title="02. 捕获异常"></a>02. 捕获异常</h2><h3 id="2-1-简单的捕获异常语法"><a href="#2-1-简单的捕获异常语法" class="headerlink" title="2.1 简单的捕获异常语法"></a>2.1 简单的捕获异常语法</h3><ul><li>在程序开发中，如果 对某些代码的执行不能确定是否正确，可以增加 try(尝试) 来 捕获异常</li><li><p>捕获异常最简单的语法格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    尝试执行的代码</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    出现错误的处理</span><br></pre></td></tr></table></figure></li><li><p>try 尝试，下方编写要尝试代码，不确定是否能够正常执行的代码</p></li><li>except 如果不是，下方编写尝试失败的代码</li></ul><a id="more"></a><p>简单异常捕获演练 —— 要求用户输入整数<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># 提示用户输入一个数字</span></span><br><span class="line">    num = int(input(<span class="string">"请输入数字："</span>))</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    print(<span class="string">"请输入正确的数字"</span>)</span><br></pre></td></tr></table></figure><p></p><h3 id="2-2-错误类型捕获"><a href="#2-2-错误类型捕获" class="headerlink" title="2.2 错误类型捕获"></a>2.2 错误类型捕获</h3><ul><li>在程序执行时，可能会遇到 不同类型的异常，并且需要 针对不同类型的异常，做出不同的响应，这个时候，就需要捕获错误类型了</li><li><p>语法如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># 尝试执行的代码</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">except</span> 错误类型<span class="number">1</span>:</span><br><span class="line">    <span class="comment"># 针对错误类型1，对应的代码处理</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">except</span> (错误类型<span class="number">2</span>, 错误类型<span class="number">3</span>):</span><br><span class="line">    <span class="comment"># 针对错误类型2 和 3，对应的代码处理</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> result:</span><br><span class="line">    print(<span class="string">"未知错误 %s"</span> % result)</span><br></pre></td></tr></table></figure></li><li><p>当 Python 解释器 抛出异常 时，最后一行错误信息的第一个单词，就是错误类型</p></li></ul><p>异常类型捕获演练 —— 要求用户输入整数<br>需求</p><ol><li>提示用户输入一个整数</li><li>使用 8 除以用户输入的整数并且输出<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    num = int(input(<span class="string">"请输入整数："</span>))</span><br><span class="line">    result = <span class="number">8</span> / num</span><br><span class="line">    print(result)</span><br><span class="line"><span class="keyword">except</span> ValueError:</span><br><span class="line">    print(<span class="string">"请输入正确的整数"</span>)</span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">    print(<span class="string">"除 0 错误"</span>)</span><br></pre></td></tr></table></figure></li></ol><p>捕获未知错误</p><ul><li>在开发时，要预判到所有可能出现的错误，还是有一定难度的</li><li>如果希望程序 无论出现任何错误，都不会因为 Python 解释器 抛出异常而被终止，可以再增加一个 except<br>语法如下:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> result:</span><br><span class="line">    print(<span class="string">"未知错误 %s"</span> % result)</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-3-异常捕获完整语法"><a href="#2-3-异常捕获完整语法" class="headerlink" title="2.3 异常捕获完整语法"></a>2.3 异常捕获完整语法</h3><ul><li><p>在实际开发中，为了能够处理复杂的异常情况，完整的异常语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># 尝试执行的代码</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">except</span> 错误类型<span class="number">1</span>:</span><br><span class="line">    <span class="comment"># 针对错误类型1，对应的代码处理</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">except</span> 错误类型<span class="number">2</span>:</span><br><span class="line">    <span class="comment"># 针对错误类型2，对应的代码处理</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">except</span> (错误类型<span class="number">3</span>, 错误类型<span class="number">4</span>):</span><br><span class="line">    <span class="comment"># 针对错误类型3 和 4，对应的代码处理</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> result:</span><br><span class="line">    <span class="comment"># 打印错误信息</span></span><br><span class="line">    print(result)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="comment"># 没有异常才会执行的代码</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="comment"># 无论是否有异常，都会执行的代码</span></span><br><span class="line">    print(<span class="string">"无论是否有异常，都会执行的代码"</span>)</span><br></pre></td></tr></table></figure></li><li><p>else 只有在没有异常时才会执行的代码</p></li><li>finally 无论是否有异常，都会执行的代码<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    num = int(input(<span class="string">"请输入整数："</span>))</span><br><span class="line">    result = <span class="number">8</span> / num</span><br><span class="line">    print(result)</span><br><span class="line"><span class="keyword">except</span> ValueError:</span><br><span class="line">    print(<span class="string">"请输入正确的整数"</span>)</span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">    print(<span class="string">"除 0 错误"</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> result:</span><br><span class="line">    print(<span class="string">"未知错误 %s"</span> % result)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"正常执行"</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    print(<span class="string">"执行完成，但是不保证正确"</span>)</span><br></pre></td></tr></table></figure></li></ul><h2 id="03-异常的传递"><a href="#03-异常的传递" class="headerlink" title="03. 异常的传递"></a>03. 异常的传递</h2><ul><li>异常的传递 —— 当 函数/方法 执行 出现异常，会 将异常传递 给 函数/方法 的 调用一方</li><li>如果 传递到主程序，仍然 没有异常处理，程序才会被终止<blockquote><p>提示<br>在开发中，可以在主函数中增加 异常捕获<br>而在主函数中调用的其他函数，只要出现异常，都会传递到主函数的 异常捕获 中<br>这样就不需要在代码中，增加大量的 异常捕获，能够保证代码的整洁</p></blockquote></li></ul><p>需求</p><ol><li>定义函数 demo1() 提示用户输入一个整数并且返回</li><li>定义函数 demo2() 调用 demo1()</li><li>在主程序中调用 demo2()<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> int(input(<span class="string">"请输入一个整数："</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo2</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> demo1()</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(demo2())</span><br><span class="line"><span class="keyword">except</span> ValueError:</span><br><span class="line">    print(<span class="string">"请输入正确的整数"</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> result:</span><br><span class="line">    print(<span class="string">"未知错误 %s"</span> % result)</span><br></pre></td></tr></table></figure></li></ol><h2 id="04-抛出-raise-异常"><a href="#04-抛出-raise-异常" class="headerlink" title="04. 抛出 raise 异常"></a>04. 抛出 raise 异常</h2><h3 id="4-1-应用场景"><a href="#4-1-应用场景" class="headerlink" title="4.1 应用场景"></a>4.1 应用场景</h3><ul><li>在开发中，除了 代码执行出错 Python 解释器会 抛出 异常之外</li><li>还可以根据 应用程序 特有的业务需求 主动抛出异常</li></ul><p>示例</p><ul><li>提示用户 输入密码，如果 长度少于 8，抛出 异常</li></ul><h3 id="4-2-抛出异常"><a href="#4-2-抛出异常" class="headerlink" title="4.2 抛出异常"></a>4.2 抛出异常</h3><ul><li>Python 中提供了一个 Exception 异常类</li><li>在开发时，如果满足 特定业务需求时，希望 抛出异常，可以：<ol><li>创建 一个 Exception 的 对象</li><li>使用 raise 关键字 抛出 异常对象</li></ol></li></ul><p>需求</p><ul><li>定义 input_password 函数，提示用户输入密码</li><li>用户输入长度 &lt; 8，抛出异常</li><li>用户输入长度 &gt;=8，返回输入的密码<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">input_password</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 1. 提示用户输入密码</span></span><br><span class="line">    pwd = input(<span class="string">"请输入密码："</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2. 判断密码长度，如果长度 &gt;= 8，返回用户输入的密码</span></span><br><span class="line">    <span class="keyword">if</span> len(pwd) &gt;= <span class="number">8</span>:</span><br><span class="line">        <span class="keyword">return</span> pwd</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3. 密码长度不够，需要抛出异常</span></span><br><span class="line">    <span class="comment"># 1&gt; 创建异常对象 - 使用异常的错误信息字符串作为参数</span></span><br><span class="line">    ex = Exception(<span class="string">"密码长度不够"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2&gt; 抛出异常对象</span></span><br><span class="line">    <span class="keyword">raise</span> ex</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    user_pwd = input_password()</span><br><span class="line">    print(user_pwd)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> result:</span><br><span class="line">    print(<span class="string">"发现错误：%s"</span> % result)</span><br></pre></td></tr></table></figure></li></ul><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Dec 31 2019 13:39:53 GMT+0800 (GMT+08:00) --&gt;&lt;h1 id=&quot;异常&quot;&gt;&lt;a href=&quot;#异常&quot; class=&quot;headerlink&quot; title=&quot;异常&quot;&gt;&lt;/a&gt;异常&lt;/h1&gt;&lt;h2 id=&quot;01-异常的概念&quot;&gt;&lt;a href=&quot;#01-异常的概念&quot; class=&quot;headerlink&quot; title=&quot;01. 异常的概念&quot;&gt;&lt;/a&gt;01. 异常的概念&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;程序在运行时，如果 Python 解释器 遇到 到一个错误，会停止程序的执行，并且提示一些错误信息，这就是 异常&lt;/li&gt;&lt;li&gt;程序停止执行并且提示错误信息 这个动作，我们通常称之为：抛出(raise)异常&lt;blockquote&gt;&lt;p&gt;程序开发时，很难将 所有的特殊情况 都处理的面面俱到，通过 异常捕获 可以针对突发事件做集中的处理，从而保证程序的 稳定性和健壮性&lt;/p&gt;&lt;/blockquote&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;02-捕获异常&quot;&gt;&lt;a href=&quot;#02-捕获异常&quot; class=&quot;headerlink&quot; title=&quot;02. 捕获异常&quot;&gt;&lt;/a&gt;02. 捕获异常&lt;/h2&gt;&lt;h3 id=&quot;2-1-简单的捕获异常语法&quot;&gt;&lt;a href=&quot;#2-1-简单的捕获异常语法&quot; class=&quot;headerlink&quot; title=&quot;2.1 简单的捕获异常语法&quot;&gt;&lt;/a&gt;2.1 简单的捕获异常语法&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;在程序开发中，如果 对某些代码的执行不能确定是否正确，可以增加 try(尝试) 来 捕获异常&lt;/li&gt;&lt;li&gt;&lt;p&gt;捕获异常最简单的语法格式：&lt;/p&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    尝试执行的代码&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;except&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    出现错误的处理&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;try 尝试，下方编写要尝试代码，不确定是否能够正常执行的代码&lt;/p&gt;&lt;/li&gt;&lt;li&gt;except 如果不是，下方编写尝试失败的代码&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
      <category term="Python" scheme="https://yongnights.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://yongnights.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>SecureFX连接Linux后文件夹中文乱码问题解决</title>
    <link href="https://yongnights.github.io/2019/12/31/SecureFX%E8%BF%9E%E6%8E%A5Linux%E5%90%8E%E6%96%87%E4%BB%B6%E5%A4%B9%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
    <id>https://yongnights.github.io/2019/12/31/SecureFX连接Linux后文件夹中文乱码问题解决/</id>
    <published>2019-12-31T04:00:48.261Z</published>
    <updated>2019-12-31T04:00:48.262Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Dec 31 2019 13:39:53 GMT+0800 (GMT+08:00) --><h3 id="在选项中设置字符编码为UTF-8"><a href="#在选项中设置字符编码为UTF-8" class="headerlink" title="在选项中设置字符编码为UTF-8"></a>在选项中设置字符编码为UTF-8</h3><p><img src="https://i.imgur.com/4TN2GUH.png" alt></p><h3 id="在全局选项中找到Securefx的配置文件"><a href="#在全局选项中找到Securefx的配置文件" class="headerlink" title="在全局选项中找到Securefx的配置文件"></a>在全局选项中找到Securefx的配置文件</h3><p><img src="https://i.imgur.com/gBdpDaT.png" alt></p><a id="more"></a><h3 id="进入到该目录中，选择“Sessions”"><a href="#进入到该目录中，选择“Sessions”" class="headerlink" title="进入到该目录中，选择“Sessions”"></a>进入到该目录中，选择“Sessions”</h3><p><img src="https://i.imgur.com/E0jtC6k.png" alt></p><pre><code>在“Sessions”中找到当前连接linux服务器地址的ini文件，并用文本编辑器打开。在打开的ini文件中，查找：Filenames Always Use UTF8；Filenames Always Use UTF8后面的值修改为：00000001，保存退出；</code></pre><p><img src="https://i.imgur.com/C5rXjOa.png" alt></p><pre><code>再次打开SecureFX，进入到含有中文名称的文件目录中，可以看到含有中文名称的文件已经能够正常显示了。</code></pre><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Dec 31 2019 13:39:53 GMT+0800 (GMT+08:00) --&gt;&lt;h3 id=&quot;在选项中设置字符编码为UTF-8&quot;&gt;&lt;a href=&quot;#在选项中设置字符编码为UTF-8&quot; class=&quot;headerlink&quot; title=&quot;在选项中设置字符编码为UTF-8&quot;&gt;&lt;/a&gt;在选项中设置字符编码为UTF-8&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/4TN2GUH.png&quot; alt&gt;&lt;/p&gt;&lt;h3 id=&quot;在全局选项中找到Securefx的配置文件&quot;&gt;&lt;a href=&quot;#在全局选项中找到Securefx的配置文件&quot; class=&quot;headerlink&quot; title=&quot;在全局选项中找到Securefx的配置文件&quot;&gt;&lt;/a&gt;在全局选项中找到Securefx的配置文件&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/gBdpDaT.png&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://yongnights.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://yongnights.github.io/tags/Linux/"/>
    
      <category term="SecureFX" scheme="https://yongnights.github.io/tags/SecureFX/"/>
    
  </entry>
  
  <entry>
    <title>Redis</title>
    <link href="https://yongnights.github.io/2019/12/31/Redis/"/>
    <id>https://yongnights.github.io/2019/12/31/Redis/</id>
    <published>2019-12-31T04:00:48.259Z</published>
    <updated>2019-12-31T04:00:48.259Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Dec 31 2019 13:39:53 GMT+0800 (GMT+08:00) --><h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h1><h2 id="1-1-nosql介绍"><a href="#1-1-nosql介绍" class="headerlink" title="1.1 nosql介绍"></a>1.1 nosql介绍</h2><p>NoSQL：一类新出现的数据库(not only sql)，特点如下：</p><ul><li>不支持SQL语法</li><li>存储结构跟传统关系型数据库中的那种关系表完全不同，nosql中存储的数据都是KV形式</li><li>NoSQL的世界中没有一种通用的语言，每种nosql数据库都有自己的api和语法，以及擅长的业务场景</li><li>NoSQL中的产品种类相当多：<ul><li>Mongodb</li><li>Redis</li><li>Hbase hadoop</li><li>Cassandra hadoop</li></ul></li></ul><h2 id="1-2-NoSQL和SQL数据库的比较"><a href="#1-2-NoSQL和SQL数据库的比较" class="headerlink" title="1.2 NoSQL和SQL数据库的比较"></a>1.2 NoSQL和SQL数据库的比较</h2><ul><li>适用场景不同：sql数据库适合用于关系特别复杂的数据查询场景，nosql反之</li><li>“事务”特性的支持：sql对事务的支持非常完善，而nosql基本不支持事务</li><li>两者在不断地取长补短，呈现融合趋势</li></ul><a id="more"></a><h2 id="1-3-Redis简介"><a href="#1-3-Redis简介" class="headerlink" title="1.3 Redis简介"></a>1.3 Redis简介</h2><ul><li>Redis是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。从2010年3月15日起，Redis的开发工作由VMware主持。从2013年5月开始，Redis的开发由Pivotal赞助。</li><li>Redis是 NoSQL技术阵营中的一员，它通过多种键值数据类型来适应不同场景下的存储需求，借助一些高层级的接口使用其可以胜任，如缓存、队列系统的不同角色</li></ul><h2 id="1-4-Redis特性"><a href="#1-4-Redis特性" class="headerlink" title="1.4 Redis特性"></a>1.4 Redis特性</h2><ul><li>Redis 与其他 key - value 缓存产品有以下三个特点：</li><li>Redis支持数据的持久化，可以将内存中的数据保存在磁盘中，重启的时候可以再次加载进行使用。</li><li>Redis不仅仅支持简单的key-value类型的数据，同时还提供list，set，zset，hash等数据结构的存储。</li><li>Redis支持数据的备份，即master-slave模式的数据备份。</li></ul><h2 id="1-5-Redis-优势"><a href="#1-5-Redis-优势" class="headerlink" title="1.5 Redis 优势"></a>1.5 Redis 优势</h2><ul><li>性能极高 – Redis能读的速度是110000次/s,写的速度是81000次/s 。</li><li>丰富的数据类型 – Redis支持二进制案例的 Strings, Lists, Hashes, Sets 及 Ordered Sets 数据类型操作。</li><li>原子 – Redis的所有操作都是原子性的，同时Redis还支持对几个操作全并后的原子性执行。</li><li>丰富的特性 – Redis还支持 publish/subscribe, 通知, key 过期等等特性。</li></ul><h2 id="1-6-Redis-应用场景"><a href="#1-6-Redis-应用场景" class="headerlink" title="1.6 Redis 应用场景"></a>1.6 Redis 应用场景</h2><ul><li>用来做缓存(ehcache/memcached)——redis的所有数据是放在内存中的（内存数据库）</li><li>可以在某些特定应用场景下替代传统数据库——比如社交类的应用</li><li>在一些大型系统中，巧妙地实现一些特定的功能：session共享、购物车</li><li>只要你有丰富的想象力，redis可以用在可以给你无限的惊喜…….</li></ul><h2 id="1-7-推荐阅读"><a href="#1-7-推荐阅读" class="headerlink" title="1.7 推荐阅读"></a>1.7 推荐阅读</h2><ul><li>[redis官方网站] <a href="https://redis.io/" target="_blank" rel="noopener">https://redis.io/</a></li><li>[redis中文官网] <a href="http://redis.cn/" target="_blank" rel="noopener">http://redis.cn/</a></li></ul><h1 id="2-安装"><a href="#2-安装" class="headerlink" title="2. 安装"></a>2. 安装</h1><h2 id="2-1-下载"><a href="#2-1-下载" class="headerlink" title="2.1 下载"></a>2.1 下载</h2><p>Redis 版本号采用标准惯例：<strong>主版本号.副版本号.补丁级别</strong>,一个副版本号就标记为一个标准发行版本，例如 1.2，2.0，2.2，2.4，2.6，2.8，奇数的副版本号用来表示<strong>非标准</strong>版本,例如2.9.x，发行版本是Redis 3.0。最新稳定版本是5.0.4，下载链接：<a href="http://download.redis.io/releases/redis-5.0.4.tar.gz" target="_blank" rel="noopener">http://download.redis.io/releases/redis-5.0.4.tar.gz</a></p><ul><li><p>setp1：下载：wget <a href="http://download.redis.io/releases/redis-5.0.4.tar.gz" target="_blank" rel="noopener">http://download.redis.io/releases/redis-5.0.4.tar.gz</a></p></li><li><p>setp2：解压：tar -zxvf redis-5.0.4.tar.gz</p></li><li><p>setp3：进入到Redis目录： redis-5.0.4/</p></li><li><p>step4：生成：make</p></li><li><p>setp5：测试,这段运行时间会比较长：make test</p></li><li><p>step6：安装：make install</p></li><li><p>setp7：进入到默认安装目录下查看：cd /usr/local/bin &amp;&amp; ls -al</p><blockquote><ul><li>redis-server redis服务器</li><li>redis-cli redis命令行客户端</li><li>redis-benchmark redis性能测试工具</li><li>redis-check-aof AOF文件修复工具</li><li>redis-check-rdb RDB文件检索工具</li></ul></blockquote></li><li><p>setp8：配置文件，移动到/etc/目录下：cp redis-5.0.4/redis.conf /etc/redis/redis</p></li></ul><p>其他安装方式：<br>使用yum方式安装：yum -y install epel-release &amp;&amp; yum -y install redis (3.0.6版本)<br>使用yum安装最新版本，如下命令安装的是最新5.0.4版本<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install -y http://rpms.famillecollet.com/enterprise/remi-release-7.rpm</span><br><span class="line">yum --enablerepo=remi install redis</span><br></pre></td></tr></table></figure><p></p><p>yum安装的配置文件路径：/etc/redis.conf<br>安装路径：<code>ll /usr/bin/ | grep redis</code></p><h1 id="3-配置"><a href="#3-配置" class="headerlink" title="3. 配置"></a>3. 配置</h1><p>yum安装的配置文件路径：/etc/redis.conf</p><p>核心配置选项</p><ul><li><p>绑定ip：如果需要远程访问，可将此行注释，或绑定一个真实ip，默认是本机127.0.0.1</p><blockquote><p>bind 127.0.0.1</p></blockquote></li><li><p>端口：默认为6379</p><blockquote><p>port 6379</p></blockquote></li><li><p>是否以守护进程运行</p><ul><li>如果以守护进程运行，则不会在命令行阻塞，类似于服务</li><li>如果以非守护进程运行，则当前终端被阻塞</li><li>设置为yes表示守护进程，设置为no表示非守护进程</li><li>推荐设置为yes<blockquote><p>daemonize yes</p></blockquote></li></ul></li><li><p>数据文件</p><blockquote><p>dbfilename dump.rdb</p></blockquote></li><li><p>数据文件存储路径</p><blockquote><p>dir /var/lib/redis</p></blockquote></li><li><p>日志文件</p><blockquote><p>logfile /var/log/redis/redis-server.log</p></blockquote></li><li><p>数据库，默认有16个</p><blockquote><p>database 16</p></blockquote></li><li><p>主从复制，类似于双机备份。</p><blockquote><p>slaveof</p></blockquote></li></ul><h1 id="4-服务端和客户端"><a href="#4-服务端和客户端" class="headerlink" title="4. 服务端和客户端"></a>4. 服务端和客户端</h1><h2 id="4-1-服务器端"><a href="#4-1-服务器端" class="headerlink" title="4.1  服务器端"></a>4.1 服务器端</h2><ul><li>服务器端的命令为redis-server</li><li><p>可以使用help查看帮助文档</p><blockquote><p>redis-server –help</p></blockquote></li><li><p>推荐使用服务的方式管理redis服务<br><code>systemctl start|stop|restart|status redis.service</code></p></li><li><p>启动</p><blockquote><p>service redis start</p></blockquote></li><li><p>停止</p><blockquote><p>service redis stop</p></blockquote></li><li><p>重启</p><blockquote><p>service redis restart</p></blockquote></li><li><p>个人习惯</p><blockquote><p>ps -ef | grep redis 查看redis服务器进程<br>kill -9 pid 杀死redis服务器<br>redis-server /etc/redis/redis.conf 指定加载的配置文件</p></blockquote></li></ul><h2 id="4-2-客户端"><a href="#4-2-客户端" class="headerlink" title="4.2  客户端"></a>4.2 客户端</h2><ul><li>客户端的命令为redis-cli</li><li><p>可以使用help查看帮助文档</p><blockquote><p>redis-server –help</p></blockquote></li><li><p>连接redis</p><blockquote><p>redis-cli</p></blockquote></li><li><p>测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># redis-cli </span></span><br><span class="line">127.0.0.1:6379&gt; ping 123</span><br><span class="line"><span class="string">"123"</span></span><br></pre></td></tr></table></figure></li><li><p>切换数据库<br>数据库没有名称，默认有16个，通过0-15来标识，连接redis默认选择第一个数据库select n</p><blockquote><p>select n</p></blockquote></li></ul><h1 id="5-数据操作"><a href="#5-数据操作" class="headerlink" title="5. 数据操作"></a>5. 数据操作</h1><h2 id="5-1-数据结构"><a href="#5-1-数据结构" class="headerlink" title="5.1 数据结构"></a>5.1 数据结构</h2><ul><li>redis是key-value的数据结构，每条数据都是一个键值对</li><li>键的类型是字符串，且不能重复</li><li>值的类型分为五种：<ul><li>字符串string</li><li>哈希hash</li><li>列表list</li><li>集合set</li><li>有序集合zset</li></ul></li></ul><h2 id="5-2-数据操作行为"><a href="#5-2-数据操作行为" class="headerlink" title="5.2 数据操作行为"></a>5.2 数据操作行为</h2><ul><li>保存</li><li>修改</li><li>获取</li><li>删除</li></ul><p>[中文官网命令文档]：<a href="http://redis.cn/commands.html" target="_blank" rel="noopener">http://redis.cn/commands.html</a></p><h2 id="5-3-String类型"><a href="#5-3-String类型" class="headerlink" title="5.3 String类型"></a>5.3 String类型</h2><p>字符串类型是Redis中最为基础的数据存储类型，它在Redis中是二进制安全的，这便意味着该类型可以接受任何格式的数据，如JPEG图像数据或Json对象描述信息等。<br>在Redis中字符串类型的Value最多可以容纳的数据长度是512M。</p><h3 id="保存"><a href="#保存" class="headerlink" title="保存"></a>保存</h3><p>如果设置的键不存在则为添加，如果设置的键已经存在则修改</p><ul><li>设置键值：set key value</li><li>设置键值及过期时间，以秒为单位：setex key seconds value</li><li>设置多个键值：mset key1 value1 key2 value2 …</li><li>追加值：append key value</li></ul><h3 id="获取"><a href="#获取" class="headerlink" title="获取"></a>获取</h3><ul><li>获取：根据键获取值，如果不存在此键则返回nil：get key</li><li>根据多个键获取多个值 ：mget key1 key2…</li></ul><h3 id="其他常用命令"><a href="#其他常用命令" class="headerlink" title="其他常用命令"></a>其他常用命令</h3><ul><li><p>查找键，参数支持正则表达式：keys pattern<br>例如：</p><ul><li>查看所有键：<code>keys *</code></li><li>查看名称中含有a的键：<code>keys &#39;a*&#39;</code></li></ul></li><li><p>判断键是否存在，存在返回1，不存在返回0：exists key</p></li><li>查看键对应的value的类型：type key</li><li>删除键及其对应的值：del key1 key2…….</li><li>设置过期时间，以秒为单位，如果没有指定过期时间则一直存在，直到使用DEL移除：expire key seconds</li><li>查看有效时间，以秒为单位：ttl key</li></ul><h2 id="5-4-hash类型"><a href="#5-4-hash类型" class="headerlink" title="5.4 hash类型"></a>5.4 hash类型</h2><ul><li>hash用于存储对象，对象的结构为属性、值</li><li>值的类型为string</li></ul><h3 id="增加、删除"><a href="#增加、删除" class="headerlink" title="增加、删除"></a>增加、删除</h3><ul><li>设置单个属性：hset key filed value</li></ul><p>例如：设置键 user的属性name为itheima：hset user name hahah<br>错误信息：<br>MISCONF Redis is configured to save RDB snapshots, but is currently not able to persist on disk. Commands that may modify the data set are disabled. Please check Redis logs for details about the error.<br>Redis被配置为保存数据库快照，但它目前不能持久化到硬盘。用来修改集合数据的命令不能用</p><p>原因：</p><ul><li><p>强制关闭Redis快照导致不能持久化。<br>解决方案：<br>运行<code>config set stop-writes-on-bgsave-error no</code>命令后，关闭配置项stop-writes-on-bgsave-error解决该问题</p></li><li><p>设置多个属性：hmset key field1 value1 field2 value2 …</p></li></ul><p>例如： 设置键u2的属性name为haha、属性age为22：hset user name hahah age 22</p><h3 id="获取-1"><a href="#获取-1" class="headerlink" title="获取"></a>获取</h3><ul><li>获取指定键所有的属性：hkeys key</li><li>获取一个属性的值：hget key field</li><li>获取多个属性的值：hmget key field1 field2 …</li><li>获取所有属性的值：hvals key</li></ul><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><ul><li>删除整个hash键及值，使用del命令</li><li>删除属性，属性对应的值会被一起删除：hdel key field1 field2 …</li></ul><h2 id="5-5-list类型"><a href="#5-5-list类型" class="headerlink" title="5.5 list类型"></a>5.5 list类型</h2><ul><li>列表的元素类型为string</li><li>按照插入顺序排序</li></ul><h3 id="增加"><a href="#增加" class="headerlink" title="增加"></a>增加</h3><ul><li>在左侧插入数据：lpush key value1 value2 …</li><li>在右侧插入数据：rpush key value1 value2 …</li><li>在指定元素的前或后插入新元素：linsert key before或after 现有元素 新元素</li></ul><h3 id="获取-2"><a href="#获取-2" class="headerlink" title="获取"></a>获取</h3><ul><li><p>返回列表里指定范围内的元素：lrange key start stop</p><blockquote><p>start、stop为元素的下标索引,引从左侧开始，第一个元素为0，索引可以是负数，表示从尾部开始计数，如-1表示最后⼀个元素</p></blockquote></li><li><p>设置指定索引位置的元素值：lset key index value</p><blockquote><p>索引从左侧开始，第一个元素为0，索引可以是负数，表示尾部开始计数，如-1表示最后一个元素</p></blockquote></li></ul><h3 id="删除-1"><a href="#删除-1" class="headerlink" title="删除"></a>删除</h3><ul><li>删除指定元素：lrem key count value<blockquote><p>将列表中前count次出现的值为value的元素移除，count &gt; 0: 从头往尾移除，count &lt; 0: 从尾往头移除，count = 0: 移除所有</p></blockquote></li></ul><h2 id="5-6-set类型"><a href="#5-6-set类型" class="headerlink" title="5.6 set类型"></a>5.6 set类型</h2><ul><li>无序集合</li><li>元素为string类型</li><li>元素具有唯一性，不重复</li><li>对于集合没有修改操作</li></ul><h3 id="增加-1"><a href="#增加-1" class="headerlink" title="增加"></a>增加</h3><ul><li>添加元素：sadd key member1 member2 …</li></ul><h3 id="获取-3"><a href="#获取-3" class="headerlink" title="获取"></a>获取</h3><ul><li>返回所有的元素：smembers key</li></ul><h3 id="删除-2"><a href="#删除-2" class="headerlink" title="删除"></a>删除</h3><ul><li>删除指定元素：srem key</li><li>删除指定元素中的某一个值：srem key member1</li></ul><h2 id="5-7-zset类型"><a href="#5-7-zset类型" class="headerlink" title="5.7 zset类型"></a>5.7 zset类型</h2><ul><li>sorted set，有序集合</li><li>元素为string类型</li><li>元素具有唯一性，不重复</li><li>每个元素都会关联一个double类型的score，表示权重，通过权重将元素从小到大排序</li><li>没有修改操作</li></ul><h3 id="增加-2"><a href="#增加-2" class="headerlink" title="增加"></a>增加</h3><ul><li>添加：zadd key score1 member1 score2 member2 …</li></ul><p>例如： 向键’a4’的集合中添加元素’lisi’、’wangwu’、’zhaoliu’、’zhangsan’，权重分别为4、5、6、3<br><code>zadd a4 4 lisi 5 wangwu 6 zhaoliu 3 zhangsan</code></p><h3 id="获取-4"><a href="#获取-4" class="headerlink" title="获取"></a>获取</h3><ul><li><p>返回指定范围内的元素：zrange key start stop</p><blockquote><p>start、stop为元素的下标索引， 索引从左侧开始，第一个元素为0，索引可以是负数，表示从尾部开始计数，如-1表示最后一个元素</p></blockquote></li><li><p>返回score值在min和max之间的成员：zrangebyscore key min max</p></li><li>返回成员member的score值：zscore key member</li></ul><h3 id="删除-3"><a href="#删除-3" class="headerlink" title="删除"></a>删除</h3><ul><li>删除指定元素：zrem key member1 member2 …</li><li>删除权重在指定范围的元素：zremrangebyscore key min max</li></ul><h1 id="6-与Python交互"><a href="#6-与Python交互" class="headerlink" title="6. 与Python交互"></a>6. 与Python交互</h1><ul><li>python环境中安装redis模块：pip install redis</li><li>调用模块：from redis import *<br>这个模块中提供了StrictRedis对象(Strict严格)，用于连接redis服务器，并按照不同类型提供 了不同放法，进行交互操作</li></ul><h2 id="6-1-StrictRedis对象方法"><a href="#6-1-StrictRedis对象方法" class="headerlink" title="6.1 StrictRedis对象方法"></a>6.1 StrictRedis对象方法</h2><ul><li>通过init创建对象，指定参数host、port与指定的服务器和端⼝连接，host默认为localhost，port默认为6379，db默认为0<br><code>sr = StrictRedis(host=&#39;localhost&#39;, port=6379, db=0)</code><br>简写：sr=StrictRedis()</li></ul><p>根据不同的类型，拥有不同的实例方法可以调用，与前面学的redis命令对应，方法需要的参数与命令的参数一致。</p><h3 id="6-1-2-string"><a href="#6-1-2-string" class="headerlink" title="6.1.2 string"></a>6.1.2 string</h3><ul><li>set</li><li>setex</li><li>mset</li><li>append</li><li>get</li><li>mget</li><li>key</li></ul><h3 id="6-1-3-keys"><a href="#6-1-3-keys" class="headerlink" title="6.1.3 keys"></a>6.1.3 keys</h3><ul><li>exists</li><li>type</li><li>delete</li><li>expire</li><li>getrange</li><li>ttl</li></ul><h3 id="6-1-4-hash"><a href="#6-1-4-hash" class="headerlink" title="6.1.4 hash"></a>6.1.4 hash</h3><ul><li>hset</li><li>hmset</li><li>hkeys</li><li>hget</li><li>hmget</li><li>hvals</li><li>hdel</li></ul><h3 id="6-1-5-list"><a href="#6-1-5-list" class="headerlink" title="6.1.5 list"></a>6.1.5 list</h3><ul><li>lpush</li><li>rpush</li><li>linsert</li><li>lrange</li><li>lset</li><li>lrem</li></ul><h3 id="6-1-6-set"><a href="#6-1-6-set" class="headerlink" title="6.1.6 set"></a>6.1.6 set</h3><ul><li>sadd</li><li>smembers</li><li>srem</li></ul><h3 id="6-1-7-zset"><a href="#6-1-7-zset" class="headerlink" title="6.1.7 zset"></a>6.1.7 zset</h3><ul><li>zadd</li><li>zrange</li><li>zrangebyscore</li><li>zscore</li><li>zrem</li><li>zremrangebyscore</li></ul><h2 id="6-2-StrictRedis对象操作string类型"><a href="#6-2-StrictRedis对象操作string类型" class="headerlink" title="6.2 StrictRedis对象操作string类型"></a>6.2 StrictRedis对象操作string类型</h2><h3 id="6-2-1-准备"><a href="#6-2-1-准备" class="headerlink" title="6.2.1 准备"></a>6.2.1 准备</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 创建StrictRedis对象，与redis服务器建⽴连接</span></span><br><span class="line">        sr = redis.StrictRedis(host=<span class="string">'192.168.0.138'</span>, port=<span class="number">6379</span>, db=<span class="number">0</span>, password=<span class="literal">None</span>)</span><br><span class="line">        print(<span class="string">'success'</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(e)</span><br></pre></td></tr></table></figure><h3 id="6-2-2-string-增加"><a href="#6-2-2-string-增加" class="headerlink" title="6.2.2 string-增加"></a>6.2.2 string-增加</h3><p>方法set，添加键、值，如果添加成功则返回True，如果添加失败则返回False<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 创建StrictRedis对象，与redis服务器建⽴连接</span></span><br><span class="line">        sr = redis.StrictRedis(host=<span class="string">'127.0.0.1'</span>, port=<span class="number">6379</span>, db=<span class="number">0</span>, password=<span class="string">'foobar2000'</span>)</span><br><span class="line">        print(<span class="string">'success'</span>)</span><br><span class="line">        <span class="comment"># 添加键name，值为haha</span></span><br><span class="line">        result = sr.set(<span class="string">'name'</span>,<span class="string">'haha1111'</span>)</span><br><span class="line">        <span class="comment"># 输出响应结果，如果添加成功则返回True，否则返回False</span></span><br><span class="line">        print(result)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(e)</span><br></pre></td></tr></table></figure><p></p><h3 id="6-2-3-string-获取"><a href="#6-2-3-string-获取" class="headerlink" title="6.2.3 string-获取"></a>6.2.3 string-获取</h3><p>方法get，添加键对应的值，如果键存在则返回对应的值，如果键不存在则返回None<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 创建StrictRedis对象，与redis服务器建⽴连接</span></span><br><span class="line">        sr = redis.StrictRedis(host=<span class="string">'127.0.0.1'</span>, port=<span class="number">6379</span>, db=<span class="number">0</span>, password=<span class="string">'foobar2000'</span>)</span><br><span class="line">        print(<span class="string">'success'</span>)</span><br><span class="line">        <span class="comment">#获取键name的值</span></span><br><span class="line">        result = sr.get(<span class="string">'name'</span>)</span><br><span class="line">        <span class="comment">#输出键的值，如果键不存在则返回None</span></span><br><span class="line">        print(result) <span class="comment"># b'haha1111'，类型是&lt;class 'bytes'&gt;</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(e)</span><br></pre></td></tr></table></figure><p></p><h3 id="6-2-4-string-修改"><a href="#6-2-4-string-修改" class="headerlink" title="6.2.4 string-修改"></a>6.2.4 string-修改</h3><p>方法set，如果键已经存在则进行修改，如果键不存在则进行添加<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 创建StrictRedis对象，与redis服务器建⽴连接</span></span><br><span class="line">        sr = redis.StrictRedis(host=<span class="string">'127.0.0.1'</span>, port=<span class="number">6379</span>, db=<span class="number">0</span>, password=<span class="string">'foobar2000'</span>)</span><br><span class="line">        print(<span class="string">'success'</span>)</span><br><span class="line">        <span class="comment">#获取键name的值</span></span><br><span class="line">        result = sr.set(<span class="string">'name'</span>,<span class="string">'hahahahhhahahh'</span>)</span><br><span class="line">        <span class="comment">#输出响应结果，如果操作成功则返回True，否则返回False</span></span><br><span class="line">        print(result)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(e)</span><br></pre></td></tr></table></figure><p></p><h3 id="6-2-5-string-删除"><a href="#6-2-5-string-删除" class="headerlink" title="6.2.5 string-删除"></a>6.2.5 string-删除</h3><p>方法delete，删除键及对应的值，如果删除成功则返回受影响的键数，否则则返 回0<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 创建StrictRedis对象，与redis服务器建⽴连接</span></span><br><span class="line">        sr = redis.StrictRedis(host=<span class="string">'127.0.0.1'</span>, port=<span class="number">6379</span>, db=<span class="number">0</span>, password=<span class="string">'foobar2000'</span>)</span><br><span class="line">        print(<span class="string">'success'</span>)</span><br><span class="line">        <span class="comment">#获取键name的值</span></span><br><span class="line">        result = sr.delete(<span class="string">'name'</span>)</span><br><span class="line">        <span class="comment">#输出响应结果，如果删除成功则返回受影响的键数，否则则返回0</span></span><br><span class="line">        print(result)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(e)</span><br></pre></td></tr></table></figure><p></p><h3 id="6-2-6-获取键"><a href="#6-2-6-获取键" class="headerlink" title="6.2.6 获取键"></a>6.2.6 获取键</h3><p>方法keys，根据正则表达式获取键<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 创建StrictRedis对象，与redis服务器建⽴连接</span></span><br><span class="line">        sr = redis.StrictRedis(host=<span class="string">'127.0.0.1'</span>, port=<span class="number">6379</span>, db=<span class="number">0</span>, password=<span class="string">'foobar2000'</span>)</span><br><span class="line">        print(<span class="string">'success'</span>)</span><br><span class="line">        <span class="comment">#获取键name的值</span></span><br><span class="line">        result = sr.keys()</span><br><span class="line">        <span class="comment">#输出响应结果，所有的键构成⼀个列表，如果没有键则返回空列表</span></span><br><span class="line">        print(result)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(e)</span><br></pre></td></tr></table></figure><p></p><h1 id="7-主从配置-读写分离"><a href="#7-主从配置-读写分离" class="headerlink" title="7. 主从配置(读写分离)"></a>7. 主从配置(读写分离)</h1><ul><li>一个master可以拥有多个slave，一个slave上可以拥有多个slave，如此下去，形成了强大的多级服务器集群架构</li><li>master用来写数据，slave用来读数据，经统计：网站的读写比率是10:1</li><li>通过主从配置可以实现读写分离</li><li>master和slave都是一个redis实例(redis服务)</li></ul><p>说明：如下的实例是主从在一台服务器上，通过端口号进行区分</p><h2 id="7-1-主从配置"><a href="#7-1-主从配置" class="headerlink" title="7.1 主从配置"></a>7.1 主从配置</h2><h3 id="7-1-1-配置主"><a href="#7-1-1-配置主" class="headerlink" title="7.1.1 配置主"></a>7.1.1 配置主</h3><ul><li>查看当前主机的ip地址：ifconfig</li><li><p>修改/etc/redis.conf文件</p><blockquote><p>bind 192.168.26.128 # 绑定主服务器IP</p></blockquote></li><li><p>重启redis服务：<code>service redis stop &amp;&amp; redis-server redis.conf</code></p></li></ul><h3 id="7-1-2-配置从"><a href="#7-1-2-配置从" class="headerlink" title="7.1.2 配置从"></a>7.1.2 配置从</h3><ul><li>设置slave.conf文件：cp redis.conf slave.conf</li><li><p>修改slave.conf文件</p><blockquote><p>bind 192.168.26.128 # 从服务器IP，因使用一台主机，所以IP同主服务器IP相同<br>port 6378 # 从服务器端口<br>slaveof 192.168.26.128 6379 # 关联到主信息</p></blockquote></li><li><p>启动redis服务：<code>redis-server slave.conf</code></p></li><li><p>查看主从关系：redis-cli -h 192.168.26.128 info Replication</p></li></ul><h3 id="7-1-2-数据操作"><a href="#7-1-2-数据操作" class="headerlink" title="7.1.2 数据操作"></a>7.1.2 数据操作</h3><ul><li><p>在master和slave分别执行info命令，查看输出信息 进入主客户端</p><blockquote><p>redis-cli -h 192.168.26.128 -p 6379 # 进入主客户端<br>redis-cli -h 192.168.26.128 -p 6378 # 进入从客户端</p></blockquote></li><li><p>在master上写数据：set aa aa</p></li><li>在slave上读数据：get aa</li></ul><h1 id="8-哨兵-主从切换"><a href="#8-哨兵-主从切换" class="headerlink" title="8. 哨兵(主从切换)"></a>8. 哨兵(主从切换)</h1><p>待完善……</p><h1 id="9-搭建集群"><a href="#9-搭建集群" class="headerlink" title="9. 搭建集群"></a>9. 搭建集群</h1><h2 id="9-1-为什么要有集群"><a href="#9-1-为什么要有集群" class="headerlink" title="9.1 为什么要有集群"></a>9.1 为什么要有集群</h2><ul><li>一主可以多从，如果同时的访问量过大(1000w),主服务肯定就会挂掉，数据服务就挂掉了或者发生自然灾难</li><li>大公司都会有很多的服务器(华东地区、华南地区、华中地区、华北地区、西北地区、西南地区、东北地区、台港澳地区机房)</li></ul><h2 id="9-2-集群的概念"><a href="#9-2-集群的概念" class="headerlink" title="9.2 集群的概念"></a>9.2 集群的概念</h2><ul><li>集群是一组相互独立的、通过高速网络互联的计算机，它们构成了一个组，并以单一系统的模式加以管理。一个客户与集群相互作用时，集群像是一个独立的服务器。集群配置是用于提高可用性和可缩放性。</li><li>当请求到来首先由负载均衡服务器处理，把请求转发到另外的一台服务器上。</li></ul><h2 id="9-3-redis集群"><a href="#9-3-redis集群" class="headerlink" title="9.3 redis集群"></a>9.3 redis集群</h2><ul><li>分类<ul><li>软件层面：只有一台电脑，在这一台电脑上启动了多个redis服务</li><li>硬件层面：存在多台实体的电脑，每台电脑上都启动了一个redis或者多个redis服务</li></ul></li></ul><h2 id="9-4-搭建集群"><a href="#9-4-搭建集群" class="headerlink" title="9.4 搭建集群"></a>9.4 搭建集群</h2><ul><li>当前拥有两台主机172.16.179.130、172.16.179.131，这里的IP在使用时要改为实际值</li></ul><h3 id="9-4-1-配置机器1"><a href="#9-4-1-配置机器1" class="headerlink" title="9.4.1 配置机器1"></a>9.4.1 配置机器1</h3><ul><li>在演示中，172.16.179.130为当前ubuntu机器的ip</li><li>在172.16.179.130上进入Desktop目录，创建conf目录</li><li><p>在conf目录下创建文件7000.conf，编辑内容如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">port 7000</span><br><span class="line"><span class="built_in">bind</span> 172.16.179.130</span><br><span class="line">daemonize yes</span><br><span class="line">pidfile 7000.pid</span><br><span class="line">cluster-enabled yes</span><br><span class="line">cluster-config-file 7000_node.conf</span><br><span class="line">cluster-node-timeout 15000</span><br><span class="line">appendonly yes</span><br></pre></td></tr></table></figure></li><li><p>在conf目录下创建文件7001.conf，编辑内容如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">port <span class="number">7001</span></span><br><span class="line">bind <span class="number">172.16</span><span class="number">.179</span><span class="number">.130</span></span><br><span class="line">daemonize yes</span><br><span class="line">pidfile <span class="number">7001.</span>pid</span><br><span class="line">cluster-enabled yes</span><br><span class="line">cluster-config-file <span class="number">7001</span>_node.conf</span><br><span class="line">cluster-node-timeout <span class="number">15000</span></span><br><span class="line">appendonly yes</span><br></pre></td></tr></table></figure></li><li><p>在conf目录下创建文件7001.conf，编辑内容如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">port <span class="number">7001</span></span><br><span class="line">bind <span class="number">172.16</span><span class="number">.179</span><span class="number">.130</span></span><br><span class="line">daemonize yes</span><br><span class="line">pidfile <span class="number">7001.</span>pid</span><br><span class="line">cluster-enabled yes</span><br><span class="line">cluster-config-file <span class="number">7001</span>_node.conf</span><br><span class="line">cluster-node-timeout <span class="number">15000</span></span><br><span class="line">appendonly yes</span><br></pre></td></tr></table></figure></li><li><p>在conf目录下创建文件7002.conf，编辑内容如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">port <span class="number">7002</span></span><br><span class="line">bind <span class="number">172.16</span><span class="number">.179</span><span class="number">.130</span></span><br><span class="line">daemonize yes</span><br><span class="line">pidfile <span class="number">7002.</span>pid</span><br><span class="line">cluster-enabled yes</span><br><span class="line">cluster-config-file <span class="number">7002</span>_node.conf</span><br><span class="line">cluster-node-timeout <span class="number">15000</span></span><br><span class="line">appendonly yes</span><br></pre></td></tr></table></figure></li></ul><p>总结：三个文件的配置区别在port、pidfile、cluster-config-file三项</p><ul><li>使用配置文件启动redis服务<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">redis-server 7000.conf</span><br><span class="line">redis-server 7001.conf</span><br><span class="line">redis-server 7002.conf</span><br></pre></td></tr></table></figure></li></ul><h3 id="9-4-2-配置机器2"><a href="#9-4-2-配置机器2" class="headerlink" title="9.4.2 配置机器2"></a>9.4.2 配置机器2</h3><ul><li>在演示中，172.16.179.131为当前ubuntu机器的ip</li><li>在172.16.179.131上进入Desktop目录，创建conf目录</li><li><p>在conf目录下创建文件7003.conf，编辑内容如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">port 7003</span><br><span class="line"><span class="built_in">bind</span> 172.16.179.131</span><br><span class="line">daemonize yes</span><br><span class="line">pidfile 7003.pid</span><br><span class="line">cluster-enabled yes</span><br><span class="line">cluster-config-file 7003_node.conf</span><br><span class="line">cluster-node-timeout 15000</span><br><span class="line">appendonly yes</span><br></pre></td></tr></table></figure></li><li><p>在conf目录下创建文件7004.conf，编辑内容如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">port <span class="number">7004</span></span><br><span class="line">bind <span class="number">172.16</span><span class="number">.179</span><span class="number">.131</span></span><br><span class="line">daemonize yes</span><br><span class="line">pidfile <span class="number">7004.</span>pid</span><br><span class="line">cluster-enabled yes</span><br><span class="line">cluster-config-file <span class="number">7004</span>_node.conf</span><br><span class="line">cluster-node-timeout <span class="number">15000</span></span><br><span class="line">appendonly yes</span><br></pre></td></tr></table></figure></li><li><p>在conf目录下创建文件7005.conf，编辑内容如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">port <span class="number">7005</span></span><br><span class="line">bind <span class="number">172.16</span><span class="number">.179</span><span class="number">.131</span></span><br><span class="line">daemonize yes</span><br><span class="line">pidfile <span class="number">7005.</span>pid</span><br><span class="line">cluster-enabled yes</span><br><span class="line">cluster-config-file <span class="number">7005</span>_node.conf</span><br><span class="line">cluster-node-timeout <span class="number">15000</span></span><br><span class="line">appendonly yes</span><br></pre></td></tr></table></figure></li></ul><p>总结：三个文件的配置区别在port、pidfile、cluster-config-file三项</p><ul><li>使用配置文件启动redis服务<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">redis-server 7003.conf</span><br><span class="line">redis-server 7004.conf</span><br><span class="line">redis-server 7005.conf</span><br></pre></td></tr></table></figure></li></ul><h3 id="9-4-3-创建集群"><a href="#9-4-3-创建集群" class="headerlink" title="9.4.3 创建集群"></a>9.4.3 创建集群</h3><ul><li>redis的安装包中包含了redis-trib.rb，用于创建集群，</li><li>接下来的操作在172.16.179.130机器上进行</li><li>将命令复制，这样可以在任何目录下调用此命令<br><code>cp /usr/share/doc/redis-tools/examples/redis-trib.rb /usr/local/bin/</code></li><li>安装ruby环境，因为redis-trib.rb是用ruby开发的：<code>apt-get install ruby</code></li><li>运行如下命令创建集群：<br><code>redis-trib.rb create --replicas 1 172.16.179.130:7000 172.16.179.130:7001 172.16.179.130:7002 172.16.179.131:7003 172.16.179.131:7004 172.16.179.131:7005</code></li><li>执行上面这个指令在某些机器上可能会报错,主要原因是由于安装的 ruby 不是最 新版本</li><li>天朝的防火墙导致无法下载最新版本,所以需要设置 gem 的源</li><li>解决办法如下：<blockquote><p>– 先查看自己的 gem 源是什么地址：gem source -l – 如果是<a href="https://rubygems.org/" target="_blank" rel="noopener">https://rubygems.org/</a> 就需要更换<br>– 更换指令为：gem sources –add <a href="https://gems.ruby-china.org/" target="_blank" rel="noopener">https://gems.ruby-china.org/</a> –remove <a href="https://rubygems.org/" target="_blank" rel="noopener">https://rubygems.org/</a><br>– 通过 gem 安装 redis 的相关依赖：sudo gem install redis<br>– 然后重新执行指令</p></blockquote></li></ul><h3 id="9-4-4-数据验证"><a href="#9-4-4-数据验证" class="headerlink" title="9.4.4 数据验证"></a>9.4.4 数据验证</h3><ul><li><p>当前搭建的主服务器为7000、7001、7003，对应的从服务器是7004、7005、7002，在172.16.179.131机器上连接7002，加参数-c表示连接到集群</p><blockquote><p>redis-cli -h 172.16.179.131 -c -p 7002</p></blockquote></li><li><p>写入数据： set name haha</p></li><li>自动跳到了7003服务器，并写入数据成功</li><li>在7003可以获取数据，如果写入数据又重定向到7000(负载均衡)</li></ul><h3 id="9-4-5-在哪个服务器上写数据：CRC16"><a href="#9-4-5-在哪个服务器上写数据：CRC16" class="headerlink" title="9.4.5 在哪个服务器上写数据：CRC16"></a>9.4.5 在哪个服务器上写数据：CRC16</h3><ul><li>redis cluster在设计的时候，就考虑到了去中间化，去中间件，也就是说，集群中 的每个节点都是平等的关系，都是对等的，每个节点都保存各自的数据和整个集群的状态。每个节点都和其他所有节点连接，并且这些连接保持活跃，这样就保证了我们只需要连接集群中的任意一个节点，就可以获取到其他节点的数据</li><li>Redis集群没有并使用传统的一致性哈希来分配数据，而是采用另外一种叫做哈希槽 (hash slot)的方式来分配的。redis cluster 默认分配了 16384 个slot，当我们 set一个key 时，会用CRC16算法来取模得到所属的slot，然后将这个key 分到哈希槽区间的节点上，具体算法就是：CRC16(key) % 16384。所以我们在测试的 时候看到set 和 get 的时候，直接跳转到了7000端口的节点</li><li>Redis 集群会把数据存在一个 master 节点，然后在这个 master 和其对应的salve 之间进行数据同步。当读取数据时，也根据一致性哈希算法到对应的 master 节 点获取数据。只有当一个master 挂掉之后，才会启动一个对应的 salve 节点，充当 master</li><li>需要注意的是：必须要3个或以上的主节点，否则在创建集群时会失败，并且当存 活的主节点数小于总节点数的一半时，整个集群就无法提供服务了</li></ul><h2 id="9-5-Python交互"><a href="#9-5-Python交互" class="headerlink" title="9.5 Python交互"></a>9.5 Python交互</h2><ul><li>安装包：<code>pip install redis-py-cluster</code></li><li>redis-py-cluster源码地址<a href="https://github.com/Grokzen/redis-py-cluster" target="_blank" rel="noopener">https://github.com/Grokzen/redis-py-cluster</a></li><li>创建文件redis_cluster.py，示例码如下<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rediscluster <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">  <span class="keyword">try</span>:</span><br><span class="line">      <span class="comment"># 构建所有的节点，Redis会使⽤CRC16算法，将键和值写到某个节点上</span></span><br><span class="line">      startup_nodes = [</span><br><span class="line">          &#123;<span class="string">'host'</span>: <span class="string">'192.168.26.128'</span>, <span class="string">'port'</span>: <span class="string">'7000'</span>&#125;,</span><br><span class="line">          &#123;<span class="string">'host'</span>: <span class="string">'192.168.26.130'</span>, <span class="string">'port'</span>: <span class="string">'7003'</span>&#125;,</span><br><span class="line">          &#123;<span class="string">'host'</span>: <span class="string">'192.168.26.128'</span>, <span class="string">'port'</span>: <span class="string">'7001'</span>&#125;,</span><br><span class="line">      ]</span><br><span class="line">      <span class="comment"># 构建StrictRedisCluster对象</span></span><br><span class="line">      src=StrictRedisCluster(startup_nodes=startup_nodes,decode_responses=<span class="literal">True</span>)</span><br><span class="line">      <span class="comment"># 设置键为name、值为itheima的数据</span></span><br><span class="line">      result=src.set(<span class="string">'name'</span>,<span class="string">'itheima'</span>)</span><br><span class="line">      print(result)</span><br><span class="line">      <span class="comment"># 获取键为name</span></span><br><span class="line">      name = src.get(<span class="string">'name'</span>)</span><br><span class="line">      print(name)</span><br><span class="line">  <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">      print(e)</span><br></pre></td></tr></table></figure></li></ul><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Dec 31 2019 13:39:53 GMT+0800 (GMT+08:00) --&gt;&lt;h1 id=&quot;1-简介&quot;&gt;&lt;a href=&quot;#1-简介&quot; class=&quot;headerlink&quot; title=&quot;1. 简介&quot;&gt;&lt;/a&gt;1. 简介&lt;/h1&gt;&lt;h2 id=&quot;1-1-nosql介绍&quot;&gt;&lt;a href=&quot;#1-1-nosql介绍&quot; class=&quot;headerlink&quot; title=&quot;1.1 nosql介绍&quot;&gt;&lt;/a&gt;1.1 nosql介绍&lt;/h2&gt;&lt;p&gt;NoSQL：一类新出现的数据库(not only sql)，特点如下：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;不支持SQL语法&lt;/li&gt;&lt;li&gt;存储结构跟传统关系型数据库中的那种关系表完全不同，nosql中存储的数据都是KV形式&lt;/li&gt;&lt;li&gt;NoSQL的世界中没有一种通用的语言，每种nosql数据库都有自己的api和语法，以及擅长的业务场景&lt;/li&gt;&lt;li&gt;NoSQL中的产品种类相当多：&lt;ul&gt;&lt;li&gt;Mongodb&lt;/li&gt;&lt;li&gt;Redis&lt;/li&gt;&lt;li&gt;Hbase hadoop&lt;/li&gt;&lt;li&gt;Cassandra hadoop&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;1-2-NoSQL和SQL数据库的比较&quot;&gt;&lt;a href=&quot;#1-2-NoSQL和SQL数据库的比较&quot; class=&quot;headerlink&quot; title=&quot;1.2 NoSQL和SQL数据库的比较&quot;&gt;&lt;/a&gt;1.2 NoSQL和SQL数据库的比较&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;适用场景不同：sql数据库适合用于关系特别复杂的数据查询场景，nosql反之&lt;/li&gt;&lt;li&gt;“事务”特性的支持：sql对事务的支持非常完善，而nosql基本不支持事务&lt;/li&gt;&lt;li&gt;两者在不断地取长补短，呈现融合趋势&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
      <category term="Redis" scheme="https://yongnights.github.io/categories/Redis/"/>
    
    
      <category term="Redis" scheme="https://yongnights.github.io/tags/Redis/"/>
    
  </entry>
  
</feed>
